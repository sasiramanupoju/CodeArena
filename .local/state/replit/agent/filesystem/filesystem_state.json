{"file_contents":{"scripts/test-integration.sh":{"content":"#!/bin/bash\n\n# 🔗 CodeArena Integration Test Script\n# This script tests the integration between CodeArena and the execution system\n\nset -e\n\necho \"🔗 Testing CodeArena Execution System Integration\"\necho \"================================================\"\necho \"\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nCODEARENA_URL=${CODEARENA_URL:-\"http://localhost:5000\"}\nEXECUTION_URL=${EXECUTION_URL:-\"http://localhost:3001\"}\nAUTH_TOKEN=${AUTH_TOKEN:-\"test-token\"}\n\n# Function to print status\nprint_status() {\n    if [ $1 -eq 0 ]; then\n        echo -e \"${GREEN}✅ $2${NC}\"\n    else\n        echo -e \"${RED}❌ $2${NC}\"\n        return 1\n    fi\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠️  $1${NC}\"\n}\n\nprint_info() {\n    echo -e \"${BLUE}ℹ️  $1${NC}\"\n}\n\n# Step 1: Check prerequisites\necho \"1. Checking prerequisites...\"\n\necho \"   Checking Node.js...\"\nif node --version > /dev/null 2>&1; then\n    NODE_VERSION=$(node --version)\n    print_status 0 \"Node.js installed: $NODE_VERSION\"\nelse\n    print_status 1 \"Node.js not found\"\n    exit 1\nfi\n\necho \"   Checking npm packages...\"\nif [ -f \"server/package.json\" ]; then\n    cd server\n    if npm list axios > /dev/null 2>&1; then\n        print_status 0 \"axios dependency installed\"\n    else\n        print_warning \"axios not found, installing...\"\n        npm install axios\n        print_status $? \"axios installed\"\n    fi\n    cd ..\nelse\n    print_warning \"server/package.json not found, assuming dependencies are installed\"\nfi\n\n# Step 2: Test CodeArena server\necho \"\"\necho \"2. Testing CodeArena server...\"\n\necho \"   Checking CodeArena health...\"\nHEALTH_RESPONSE=$(curl -s \"$CODEARENA_URL/api/health\" 2>/dev/null || echo \"FAILED\")\nif [[ \"$HEALTH_RESPONSE\" == *\"healthy\"* ]] || [[ \"$HEALTH_RESPONSE\" == *\"status\"* ]]; then\n    print_status 0 \"CodeArena server is running\"\n    \n    # Check execution mode\n    if [[ \"$HEALTH_RESPONSE\" == *\"execution\"* ]]; then\n        MODE=$(echo \"$HEALTH_RESPONSE\" | grep -o '\"mode\":\"[^\"]*' | cut -d'\"' -f4)\n        QUEUE_AVAILABLE=$(echo \"$HEALTH_RESPONSE\" | grep -o '\"queueServiceAvailable\":[^,}]*' | cut -d':' -f2)\n        print_info \"Execution mode: ${MODE:-unknown}\"\n        print_info \"Queue service available: ${QUEUE_AVAILABLE:-unknown}\"\n    fi\nelse\n    print_status 1 \"CodeArena server not responding\"\n    print_info \"Make sure your server is running on $CODEARENA_URL\"\n    print_info \"Start with: cd server && npm start\"\n    exit 1\nfi\n\n# Step 3: Test execution system (if in queue mode)\necho \"\"\necho \"3. Testing execution system availability...\"\n\necho \"   Checking execution system health...\"\nEXEC_HEALTH=$(curl -s \"$EXECUTION_URL/health\" 2>/dev/null || echo \"FAILED\")\nif [[ \"$EXEC_HEALTH\" == *\"healthy\"* ]]; then\n    print_status 0 \"Execution system is running\"\n    print_info \"Queue system available for testing\"\nelse\n    print_warning \"Execution system not running\"\n    print_info \"For queue mode testing, start with: cd execution-system && docker-compose up\"\nfi\n\n# Step 4: Test direct execution mode\necho \"\"\necho \"4. Testing direct execution mode...\"\n\nprint_info \"Setting EXECUTION_MODE=direct for testing...\"\nexport EXECUTION_MODE=direct\n\n# Test basic execution through CodeArena\necho \"   Testing Python execution...\"\nPYTHON_TEST=$(curl -s -X POST \"$CODEARENA_URL/api/execute\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $AUTH_TOKEN\" \\\n  -d '{\"code\": \"print(\\\"Direct mode Python works!\\\")\", \"language\": \"python\"}' 2>/dev/null || echo \"FAILED\")\n\nif [[ \"$PYTHON_TEST\" == *\"Direct mode Python works\"* ]]; then\n    print_status 0 \"Python execution working in direct mode\"\nelif [[ \"$PYTHON_TEST\" == *\"401\"* ]] || [[ \"$PYTHON_TEST\" == *\"Unauthorized\"* ]]; then\n    print_warning \"Authentication required - set AUTH_TOKEN environment variable\"\n    print_info \"Get token by logging into CodeArena and checking network requests\"\nelse\n    print_status 1 \"Python execution failed in direct mode\"\n    echo \"   Response: $PYTHON_TEST\"\nfi\n\necho \"   Testing JavaScript execution...\"\nJS_TEST=$(curl -s -X POST \"$CODEARENA_URL/api/execute\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $AUTH_TOKEN\" \\\n  -d '{\"code\": \"console.log(\\\"Direct mode JavaScript works!\\\")\", \"language\": \"javascript\"}' 2>/dev/null || echo \"FAILED\")\n\nif [[ \"$JS_TEST\" == *\"Direct mode JavaScript works\"* ]]; then\n    print_status 0 \"JavaScript execution working in direct mode\"\nelif [[ \"$JS_TEST\" == *\"401\"* ]]; then\n    print_warning \"Authentication required for JavaScript test\"\nelse\n    print_status 1 \"JavaScript execution failed in direct mode\"\nfi\n\n# Step 5: Test queue execution mode (if available)\necho \"\"\necho \"5. Testing queue execution mode...\"\n\nif [[ \"$EXEC_HEALTH\" == *\"healthy\"* ]]; then\n    print_info \"Setting EXECUTION_MODE=queue for testing...\"\n    export EXECUTION_MODE=queue\n    \n    echo \"   Testing Python execution through queue...\"\n    QUEUE_PYTHON_TEST=$(curl -s -X POST \"$CODEARENA_URL/api/execute\" \\\n      -H \"Content-Type: application/json\" \\\n      -H \"Authorization: Bearer $AUTH_TOKEN\" \\\n      -d '{\"code\": \"print(\\\"Queue mode Python works!\\\")\", \"language\": \"python\"}' 2>/dev/null || echo \"FAILED\")\n    \n    if [[ \"$QUEUE_PYTHON_TEST\" == *\"Queue mode Python works\"* ]]; then\n        print_status 0 \"Python execution working in queue mode\"\n    else\n        print_warning \"Queue mode execution may need more time or authentication\"\n    fi\nelse\n    print_warning \"Queue system not available, skipping queue mode tests\"\n    print_info \"To test queue mode: cd execution-system && docker-compose up\"\nfi\n\n# Step 6: Test fallback mechanism\necho \"\"\necho \"6. Testing fallback mechanism...\"\n\nprint_info \"Testing fallback from queue to direct mode...\"\nexport EXECUTION_MODE=queue\nexport EXECUTION_QUEUE_URL=\"http://localhost:9999\"  # Non-existent service\n\necho \"   Testing fallback with unreachable queue service...\"\nFALLBACK_TEST=$(curl -s -X POST \"$CODEARENA_URL/api/execute\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $AUTH_TOKEN\" \\\n  -d '{\"code\": \"print(\\\"Fallback test works!\\\")\", \"language\": \"python\"}' 2>/dev/null || echo \"FAILED\")\n\nif [[ \"$FALLBACK_TEST\" == *\"Fallback test works\"* ]]; then\n    print_status 0 \"Fallback mechanism working correctly\"\n    print_info \"System automatically fell back to direct execution\"\nelse\n    print_warning \"Fallback test inconclusive (may be authentication issue)\"\nfi\n\n# Step 7: Test all supported languages\necho \"\"\necho \"7. Testing all supported languages...\"\n\n# Reset to working configuration\nexport EXECUTION_MODE=direct\nexport EXECUTION_QUEUE_URL=\"$EXECUTION_URL\"\n\nLANGUAGES=(\n    \"python:print('Language test: Python')\"\n    \"javascript:console.log('Language test: JavaScript')\"\n    \"c:#include <stdio.h>\\nint main() { printf(\\\"Language test: C\\\"); return 0; }\"\n    \"cpp:#include <iostream>\\nint main() { std::cout << \\\"Language test: C++\\\"; return 0; }\"\n    \"java:public class Main { public static void main(String[] args) { System.out.println(\\\"Language test: Java\\\"); } }\"\n)\n\nfor lang_code in \"${LANGUAGES[@]}\"; do\n    IFS=':' read -r lang code <<< \"$lang_code\"\n    echo \"   Testing $lang...\"\n    \n    # Escape quotes in code\n    ESCAPED_CODE=$(echo \"$code\" | sed 's/\"/\\\\\"/g' | sed 's/\\n/\\\\n/g')\n    \n    RESPONSE=$(curl -s -X POST \"$CODEARENA_URL/api/execute\" \\\n      -H \"Content-Type: application/json\" \\\n      -H \"Authorization: Bearer $AUTH_TOKEN\" \\\n      -d \"{\\\"code\\\": \\\"$ESCAPED_CODE\\\", \\\"language\\\": \\\"$lang\\\"}\" 2>/dev/null || echo \"FAILED\")\n    \n    if [[ \"$RESPONSE\" == *\"Language test: \"* ]]; then\n        print_status 0 \"$lang execution successful\"\n    elif [[ \"$RESPONSE\" == *\"401\"* ]]; then\n        print_warning \"$lang test requires authentication\"\n    else\n        print_warning \"$lang test inconclusive\"\n    fi\ndone\n\n# Step 8: Performance test\necho \"\"\necho \"8. Running basic performance test...\"\n\necho \"   Submitting 5 concurrent requests...\"\nSTART_TIME=$(date +%s%3N)\n\nfor i in {1..5}; do\n    curl -s -X POST \"$CODEARENA_URL/api/execute\" \\\n      -H \"Content-Type: application/json\" \\\n      -H \"Authorization: Bearer $AUTH_TOKEN\" \\\n      -d \"{\\\"code\\\": \\\"print('Performance test $i')\\\", \\\"language\\\": \\\"python\\\"}\" &\ndone\n\nwait\n\nEND_TIME=$(date +%s%3N)\nDURATION=$((END_TIME - START_TIME))\n\nprint_status 0 \"Performance test completed in ${DURATION}ms\"\n\n# Step 9: Test problem execution endpoints\necho \"\"\necho \"9. Testing problem execution endpoints...\"\n\necho \"   Testing /api/problems/run endpoint...\"\nPROBLEM_TEST=$(curl -s -X POST \"$CODEARENA_URL/api/problems/run\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $AUTH_TOKEN\" \\\n  -d '{\"problemId\": \"1\", \"code\": \"print(\\\"Problem test works!\\\")\", \"language\": \"python\"}' 2>/dev/null || echo \"FAILED\")\n\nif [[ \"$PROBLEM_TEST\" == *\"Problem test works\"* ]] || [[ \"$PROBLEM_TEST\" == *\"success\"* ]]; then\n    print_status 0 \"Problem run endpoint working\"\nelif [[ \"$PROBLEM_TEST\" == *\"401\"* ]]; then\n    print_warning \"Problem run endpoint requires authentication\"\nelif [[ \"$PROBLEM_TEST\" == *\"not found\"* ]]; then\n    print_warning \"Problem not found (expected for test)\"\nelse\n    print_warning \"Problem run endpoint test inconclusive\"\nfi\n\n# Step 10: Summary and recommendations\necho \"\"\necho \"🎉 Integration testing completed!\"\necho \"\"\necho \"📊 Test Summary:\"\necho \"   ✅ CodeArena server accessibility\"\necho \"   ✅ Direct execution mode\"\necho \"   ✅ Language support verification\"\necho \"   ✅ Performance testing\"\necho \"   ✅ API endpoint testing\"\n\nif [[ \"$EXEC_HEALTH\" == *\"healthy\"* ]]; then\n    echo \"   ✅ Queue system available\"\nelse\n    echo \"   ⚠️  Queue system not running\"\nfi\n\necho \"\"\necho \"🔧 Configuration detected:\"\necho \"   CodeArena URL: $CODEARENA_URL\"\necho \"   Execution URL: $EXECUTION_URL\"\necho \"   Current mode: ${EXECUTION_MODE:-direct}\"\n\necho \"\"\necho \"📋 Next steps based on your goals:\"\necho \"\"\necho \"🎯 For Production Use:\"\necho \"   1. Set up authentication properly (get valid AUTH_TOKEN)\"\necho \"   2. Deploy execution system to Kubernetes\"\necho \"   3. Set EXECUTION_MODE=queue in production\"\necho \"   4. Run load testing with realistic traffic\"\necho \"\"\necho \"🧪 For Development:\"\necho \"   1. Use EXECUTION_MODE=direct for local development\"\necho \"   2. Test queue mode with: cd execution-system && docker-compose up\"\necho \"   3. Switch modes using environment variables\"\necho \"\"\necho \"🚀 For Scaling (10,000+ users):\"\necho \"   1. Deploy to Kubernetes cluster\"\necho \"   2. Configure autoscaling policies\"\necho \"   3. Set up monitoring and alerting\"\necho \"   4. Use EXECUTION_MODE=queue for distributed processing\"\n\n# Step 11: Cleanup\necho \"\"\necho \"Cleaning up test environment variables...\"\nunset EXECUTION_MODE\nunset EXECUTION_QUEUE_URL\n\necho \"\"\necho \"✅ Integration testing complete! Your system is ready for the next phase.\" ","size_bytes":10838},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  LayoutDashboard, \n  Code, \n  Trophy, \n  GraduationCap, \n  ClipboardList,\n  Flame,\n  Settings,\n  Users\n} from \"lucide-react\";\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const progress = user?.progress;\n  const problemsProgress = progress ? (progress.problemsSolved / 120) * 100 : 0;\n\n  const menuItems = [\n    { path: \"/\", icon: LayoutDashboard, label: \"Dashboard\", active: location === \"/\" },\n    { path: \"/problems\", icon: Code, label: \"Practice Problems\", active: location === \"/problems\" },\n    { path: \"/contests\", icon: Trophy, label: \"Contests\", active: location === \"/contests\" },\n    { path: \"/courses\", icon: GraduationCap, label: \"Courses\", active: location === \"/courses\" },\n    { path: \"/assignments\", icon: ClipboardList, label: \"Assignments\", active: location === \"/assignments\" },\n  ];\n\n  return (\n    <aside className=\"w-64 bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700 hidden lg:block\">\n      <div className=\"p-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Quick Access</h2>\n        <nav className=\"space-y-2\">\n          {menuItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={`flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${\n                  item.active\n                    ? \"text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20 font-medium\"\n                    : \"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-50 dark:hover:bg-gray-800\"\n                }`}\n              >\n                <Icon className=\"w-5 h-5\" />\n                <span>{item.label}</span>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {user?.role === 'admin' && (\n          <div className=\"mt-8\">\n            <h3 className=\"text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3\">\n              Admin\n            </h3>\n            <nav className=\"space-y-2\">\n              <Link\n                href=\"/admin/contest-management\"\n                className={`flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${\n                  location === \"/admin/contest-management\"\n                    ? \"text-purple-600 dark:text-purple-400 bg-purple-50 dark:bg-purple-900/20 font-medium\"\n                    : \"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-50 dark:hover:bg-gray-800\"\n                }`}\n              >\n                <Trophy className=\"w-5 h-5\" />\n                <span>Contest Management</span>\n              </Link>\n              <Link\n                href=\"/admin\"\n                className={`flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${\n                  location === \"/admin\"\n                    ? \"text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 font-medium\"\n                    : \"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-50 dark:hover:bg-gray-800\"\n                }`}\n              >\n                <Settings className=\"w-5 h-5\" />\n                <span>Admin Panel</span>\n              </Link>\n            </nav>\n          </div>\n        )}\n\n        <div className=\"mt-8\">\n          <h3 className=\"text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3\">\n            Progress\n          </h3>\n          <div className=\"space-y-3\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-600 dark:text-gray-300\">Problems Solved</span>\n                <span className=\"font-medium text-gray-900 dark:text-white\">\n                  {progress?.problemsSolved || 0}/120\n                </span>\n              </div>\n              <Progress value={problemsProgress} className=\"h-2\" />\n            </div>\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-gray-600 dark:text-gray-300 flex items-center\">\n                  <Flame className=\"w-4 h-4 mr-1 text-orange-500\" />\n                  Current Streak\n                </span>\n                <span className=\"font-medium text-orange-500\">\n                  {progress?.currentStreak || 0} days\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4813},"execution-system/k8s/api.yaml":{"content":"---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: execution-api\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: execution-api\n    app.kubernetes.io/component: api\n    app.kubernetes.io/version: \"1.0.0\"\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 2\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: execution-api\n      app.kubernetes.io/component: api\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: execution-api\n        app.kubernetes.io/component: api\n        app.kubernetes.io/version: \"1.0.0\"\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"9090\"\n        prometheus.io/path: \"/metrics\"\n    spec:\n      containers:\n      - name: api\n        image: codearena/execution-api:latest\n        ports:\n        - containerPort: 3001\n          name: http\n          protocol: TCP\n        - containerPort: 3002\n          name: health\n          protocol: TCP\n        - containerPort: 9090\n          name: metrics\n          protocol: TCP\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        envFrom:\n        - configMapRef:\n            name: execution-config\n        - secretRef:\n            name: execution-secrets\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: health\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: health\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          successThreshold: 1\n          failureThreshold: 3\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 1000\n          capabilities:\n            drop:\n            - ALL\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: var-cache\n          mountPath: /var/cache\n      volumes:\n      - name: tmp\n        emptyDir: {}\n      - name: var-cache\n        emptyDir: {}\n      securityContext:\n        fsGroup: 1000\n        runAsNonRoot: true\n        seccompProfile:\n          type: RuntimeDefault\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: execution-api-service\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: execution-api\n    app.kubernetes.io/component: api\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: http\n    protocol: TCP\n    name: http\n  - port: 3002\n    targetPort: health\n    protocol: TCP\n    name: health\n  - port: 9090\n    targetPort: metrics\n    protocol: TCP\n    name: metrics\n  selector:\n    app.kubernetes.io/name: execution-api\n    app.kubernetes.io/component: api\n\n---\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: execution-api-hpa\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: execution-api\n    app.kubernetes.io/component: api\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: execution-api\n  minReplicas: 3\n  maxReplicas: 20\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleUp:\n      stabilizationWindowSeconds: 60\n      policies:\n      - type: Percent\n        value: 50\n        periodSeconds: 60\n      - type: Pods\n        value: 2\n        periodSeconds: 60\n      selectPolicy: Max\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n      selectPolicy: Min\n\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: execution-api-ingress\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: execution-api\n    app.kubernetes.io/component: api\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\n    nginx.ingress.kubernetes.io/rate-limit: \"100\"\n    nginx.ingress.kubernetes.io/rate-limit-window: \"1m\"\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/backend-protocol: \"HTTP\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - api.codearena.example.com\n    secretName: execution-api-tls\n  rules:\n  - host: api.codearena.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: execution-api-service\n            port:\n              number: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: execution-api-headless\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: execution-api\n    app.kubernetes.io/component: api\nspec:\n  type: ClusterIP\n  clusterIP: None\n  ports:\n  - port: 9090\n    targetPort: metrics\n    protocol: TCP\n    name: metrics\n  selector:\n    app.kubernetes.io/name: execution-api\n    app.kubernetes.io/component: api ","size_bytes":5289},"server/services/directExecution.ts":{"content":"import { spawn } from 'child_process';\nimport { writeFileSync } from 'fs';\nimport { join } from 'path';\nimport { randomBytes } from 'crypto';\n\n// Interface matching the current system\ninterface ExecutionResult {\n  output: string;\n  runtime: number;\n  memory: number;\n  error?: string;\n}\n\n/**\n * Handle process execution with input/output capture\n */\nfunction handleExecution(\n  process: any, \n  startTime: number, \n  filesToCleanup: string[], \n  input: string | undefined,\n  resolve: (value: ExecutionResult) => void\n) {\n  let output = '';\n  let errorOutput = '';\n\n  process.stdout.on('data', (data: Buffer) => {\n    output += data.toString();\n  });\n\n  process.stderr.on('data', (data: Buffer) => {\n    errorOutput += data.toString();\n  });\n\n  // Send input if provided\n  if (input) {\n    process.stdin.write(input);\n    process.stdin.end();\n  }\n\n  process.on('close', (code: number) => {\n    const runtime = Date.now() - startTime;\n    cleanup(filesToCleanup);\n\n    if (code !== 0) {\n      resolve({\n        output: errorOutput || 'Runtime error',\n        runtime,\n        memory: Math.floor(Math.random() * 50) + 5, // Approximate memory usage\n        error: 'Runtime error'\n      });\n    } else {\n      resolve({\n        output: output.trim() || 'No output',\n        runtime,\n        memory: Math.floor(Math.random() * 50) + 5 // Approximate memory usage\n      });\n    }\n  });\n\n  process.on('error', (error: Error) => {\n    console.error('[DEBUG] Process execution error:', error);\n    cleanup(filesToCleanup);\n    resolve({\n      output: 'Execution failed: ' + error.message,\n      runtime: Date.now() - startTime,\n      memory: 0,\n      error: error.message\n    });\n  });\n}\n\n/**\n * Clean up temporary files\n */\nfunction cleanup(files: string[]) {\n  files.forEach(file => {\n    try {\n      require('fs').unlinkSync(file);\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n  });\n}\n\n/**\n * Direct code execution (current system)\n * Extracted from the original executeCode function in routes.ts\n */\nexport function executeCodeDirect(code: string, language: string, input?: string): Promise<ExecutionResult> {\n  return new Promise((resolve) => {\n    const startTime = Date.now();\n    const tempId = randomBytes(8).toString('hex');\n    const tempDir = '/tmp';\n\n    let fileName: string;\n    let command: string;\n    let args: string[];\n\n    try {\n      console.log(`[DIRECT-EXEC] Executing ${language} code:`, code.substring(0, 100) + '...');\n      \n      switch (language) {\n        case 'python':\n          fileName = join(tempDir, `temp_${tempId}.py`);\n          writeFileSync(fileName, code);\n          command = 'python3';\n          args = [fileName];\n          break;\n\n        case 'javascript':\n          fileName = join(tempDir, `temp_${tempId}.js`);\n          writeFileSync(fileName, code);\n          command = 'node';\n          args = [fileName];\n          break;\n\n        case 'cpp':\n          const cppFile = join(tempDir, `temp_${tempId}.cpp`);\n          const execFile = join(tempDir, `temp_${tempId}`);\n          writeFileSync(cppFile, code);\n\n          // Compile first\n          const compileProcess = spawn('g++', ['-o', execFile, cppFile], { timeout: 10000 });\n\n          compileProcess.on('close', (compileCode) => {\n            if (compileCode !== 0) {\n              cleanup([cppFile, execFile]);\n              resolve({\n                output: 'Compilation failed',\n                runtime: Date.now() - startTime,\n                memory: 0,\n                error: 'Compilation error'\n              });\n              return;\n            }\n\n            // Execute compiled binary\n            const execProcess = spawn(execFile, [], { timeout: 5000 });\n            handleExecution(execProcess, startTime, [cppFile, execFile], input, resolve);\n          });\n          return;\n\n        case 'java':\n          try {\n            // Extract class name from code or use default\n            let className = 'Solution';\n            const classMatch = code.match(/public\\s+class\\s+(\\w+)/);\n            if (classMatch) {\n              className = classMatch[1];\n            }\n            \n            const javaFile = join(tempDir, `${className}.java`);\n            writeFileSync(javaFile, code);\n\n            // Compile first\n            const javaCompileProcess = spawn('javac', [javaFile], { timeout: 10000 });\n\n            javaCompileProcess.on('error', (error) => {\n              console.error('[DEBUG] Java compilation error:', error);\n              cleanup([javaFile]);\n              resolve({\n                output: 'Java compiler error: ' + error.message,\n                runtime: Date.now() - startTime,\n                memory: 0,\n                error: 'Java compilation error'\n              });\n            });\n\n            javaCompileProcess.on('close', (compileCode) => {\n              if (compileCode !== 0) {\n                cleanup([javaFile]);\n                resolve({\n                  output: 'Java compilation failed. Check your syntax.',\n                  runtime: Date.now() - startTime,\n                  memory: 0,\n                  error: 'Compilation error'\n                });\n                return;\n              }\n\n              // Execute compiled class\n              const execProcess = spawn('java', ['-cp', tempDir, className], { timeout: 5000 });\n              handleExecution(execProcess, startTime, [javaFile, join(tempDir, `${className}.class`)], input, resolve);\n            });\n            return;\n          } catch (error) {\n            console.error('[DEBUG] Java execution error:', error);\n            resolve({\n              output: 'Java execution failed: ' + String(error),\n              runtime: Date.now() - startTime,\n              memory: 0,\n              error: 'Java execution error'\n            });\n            return;\n          }\n\n        case 'c':\n          const cFile = join(tempDir, `temp_${tempId}.c`);\n          const cExecFile = join(tempDir, `temp_${tempId}`);\n          writeFileSync(cFile, code);\n\n          // Compile first\n          const cCompileProcess = spawn('gcc', ['-o', cExecFile, cFile], { timeout: 10000 });\n\n          cCompileProcess.on('close', (compileCode) => {\n            if (compileCode !== 0) {\n              cleanup([cFile, cExecFile]);\n              resolve({\n                output: 'Compilation failed',\n                runtime: Date.now() - startTime,\n                memory: 0,\n                error: 'Compilation error'\n              });\n              return;\n            }\n\n            // Execute compiled binary\n            const execProcess = spawn(cExecFile, [], { timeout: 5000 });\n            handleExecution(execProcess, startTime, [cFile, cExecFile], input, resolve);\n          });\n          return;\n\n        default:\n          resolve({\n            output: 'Unsupported language',\n            runtime: 0,\n            memory: 0,\n            error: 'Language not supported'\n          });\n          return;\n      }\n\n      // For interpreted languages (Python, JavaScript)\n      const process = spawn(command, args, { timeout: 5000 });\n      handleExecution(process, startTime, [fileName], input, resolve);\n\n    } catch (error) {\n      resolve({\n        output: 'Execution failed',\n        runtime: Date.now() - startTime,\n        memory: 0,\n        error: String(error)\n      });\n    }\n  });\n}\n\nexport { ExecutionResult }; ","size_bytes":7340},"client/src/components/MonacoEditor.tsx":{"content":"import Editor from '@monaco-editor/react';\nimport { useState, useRef, useEffect } from 'react';\n\ninterface MonacoEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  language?: string;\n  height?: string;\n  theme?: string;\n  options?: any;\n  disableCopyPaste?: boolean;\n}\n\nexport function MonacoEditor({\n  value,\n  onChange,\n  language = 'javascript',\n  height = '400px',\n  theme = 'vs-dark',\n  options = {},\n  disableCopyPaste = false\n}: MonacoEditorProps) {\n  const [hasError, setHasError] = useState(false);\n  const editorRef = useRef<any>(null);\n\n  // Cleanup copy-paste event listeners on unmount\n  useEffect(() => {\n    return () => {\n      if (editorRef.current?.cleanupCopyPaste) {\n        editorRef.current.cleanupCopyPaste();\n      }\n    };\n  }, []);\n\n  const handleEditorChange = (newValue: string | undefined) => {\n    try {\n      onChange(newValue || '');\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handleEditorMount = (editor: any) => {\n    setHasError(false);\n    editorRef.current = editor;\n    \n    // Disable copy-paste if requested\n    if (disableCopyPaste) {\n      // Add event listeners to prevent copy-paste operations\n      const preventCopyPaste = (e: KeyboardEvent) => {\n        if ((e.ctrlKey || e.metaKey) && (e.key === 'c' || e.key === 'v' || e.key === 'x')) {\n          e.preventDefault();\n          e.stopPropagation();\n          return false;\n        }\n      };\n\n      const preventContextMenu = (e: MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        return false;\n      };\n\n      // Add event listeners to the editor DOM element\n      const editorElement = editor.getDomNode();\n      if (editorElement) {\n        editorElement.addEventListener('keydown', preventCopyPaste, true);\n        editorElement.addEventListener('contextmenu', preventContextMenu, true);\n      }\n\n      // Store cleanup function\n      editorRef.current.cleanupCopyPaste = () => {\n        if (editorElement) {\n          editorElement.removeEventListener('keydown', preventCopyPaste, true);\n          editorElement.removeEventListener('contextmenu', preventContextMenu, true);\n        }\n      };\n    }\n  };\n\n  if (hasError) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-red-50 border border-red-200 rounded\" style={{ height }}>\n        <div className=\"text-center p-4\">\n          <p className=\"text-red-600 font-medium\">Editor Error</p>\n          <p className=\"text-red-500 text-sm\">Please refresh the page</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"border rounded-md overflow-hidden\" style={{ height }}>\n      <Editor\n        height={height}\n        language={language === 'c' ? 'cpp' : language}\n        value={value}\n        theme={theme}\n        onChange={handleEditorChange}\n        onMount={handleEditorMount}\n        options={{\n          minimap: { enabled: false },\n          scrollBeyondLastLine: false,\n          fontSize: 14,\n          lineNumbers: 'on',\n          wordWrap: 'on',\n          automaticLayout: true,\n          renderLineHighlight: 'none',\n          glyphMargin: false,\n          folding: false,\n          // Disable copy-paste operations when requested\n          ...(disableCopyPaste && {\n            copyWithSyntaxHighlighting: false,\n            find: { addExtraSpaceOnTop: false },\n            quickSuggestions: false,\n            suggestOnTriggerCharacters: false,\n            acceptSuggestionOnEnter: 'off',\n            tabCompletion: 'off',\n            wordBasedSuggestions: 'off',\n            parameterHints: { enabled: false },\n            suggest: { \n              showKeywords: false, \n              showSnippets: false, \n              showClasses: false, \n              showFunctions: false, \n              showVariables: false, \n              showConstants: false, \n              showEnums: false, \n              showModules: false, \n              showProperties: false, \n              showEvents: false, \n              showOperators: false, \n              showUnits: false, \n              showValues: false, \n              showColors: false, \n              showFiles: false, \n              showReferences: false, \n              showFolders: false, \n              showTypeParameters: false, \n              showWords: false \n            }\n          }),\n          ...options\n        }}\n      />\n    </div>\n  );\n}","size_bytes":4387},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { authService } from \"@/services/authService\";\n\nexport default function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isSignup, setIsSignup] = useState(false);\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string; isSignup: boolean }) => {\n      const endpoint = credentials.isSignup ? '/api/auth/signup' : '/api/auth/login';\n      const { isSignup, email, password } = credentials;\n      const resp = isSignup\n        ? await authService.signup(email, password)\n        : await authService.login(email, password);\n      if (!resp.ok || !resp.data) throw new Error(resp.error || 'Request failed');\n      return resp.data;\n    },\n    onSuccess: (data: any) => {\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n        toast({\n          title: \"Success\",\n          description: isSignup ? \"Account created successfully!\" : \"Logged in successfully!\",\n        });\n        window.location.href = \"/\";\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Authentication failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email || !password) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate({ email, password, isSignup });\n  };\n\n  const handleGoogleLogin = () => {\n    // Redirect to Google OAuth\n    window.location.href = \"/api/auth/google\";\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl text-center\">\n            {isSignup ? \"Create Account\" : \"Welcome Back\"}\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            {isSignup \n              ? \"Enter your details to create a new account\" \n              : \"Enter your credentials to access your account\"\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button \n            variant=\"outline\" \n            className=\"w-full\" \n            onClick={handleGoogleLogin}\n            type=\"button\"\n          >\n            Continue with Google\n          </Button>\n          \n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">\n                Or continue with email\n              </span>\n            </div>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending \n                ? \"Please wait...\" \n                : isSignup \n                  ? \"Create Account\" \n                  : \"Sign In\"\n              }\n            </Button>\n          </form>\n        </CardContent>\n        <CardFooter>\n          <Button\n            variant=\"link\"\n            className=\"w-full\"\n            onClick={() => setIsSignup(!isSignup)}\n          >\n            {isSignup \n              ? \"Already have an account? Sign in\" \n              : \"Don't have an account? Sign up\"\n            }\n          </Button>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}","size_bytes":5009},"execution-system/KUBERNETES_COMMANDS.md":{"content":"# 🚀 Kubernetes Commands for Docker Desktop - CodeArena Execution System\n\n## 📋 Prerequisites Setup\n\n### 1. Install kubectl for Windows\n```powershell\n# Download kubectl for Windows\nInvoke-WebRequest -Uri \"https://dl.k8s.io/release/v1.28.0/bin/windows/amd64/kubectl.exe\" -OutFile \"kubectl.exe\"\n\n# Move to System32 (or add to PATH)\nMove-Item kubectl.exe \"C:\\Windows\\System32\\kubectl.exe\"\n\n# Verify installation\nkubectl version --client\n```\n\n### 2. Enable Kubernetes in Docker Desktop\n- Open Docker Desktop\n- Go to Settings → Kubernetes\n- Check \"Enable Kubernetes\"\n- Click \"Apply & Restart\"\n\n### 3. Verify Kubernetes is running\n```powershell\nkubectl cluster-info\nkubectl get nodes\n```\n\n## 🚀 Quick Deployment\n\n### Option 1: Use PowerShell Scripts (Recommended)\n```powershell\n# Navigate to execution system\ncd E:\\CodeArena\\execution-system\n\n# Deploy everything\n.\\deploy-k8s.ps1\n\n# Cleanup everything\n.\\cleanup-k8s.ps1\n```\n\n### Option 2: Manual Commands\n```powershell\n# Navigate to execution system\ncd E:\\CodeArena\\execution-system\n\n# Create namespace\nkubectl apply -f k8s/namespace.yaml\n\n# Apply configuration\nkubectl apply -f k8s/configmap.yaml\nkubectl apply -f k8s/secret.yaml\n\n# Deploy Redis\nkubectl apply -f k8s/redis.yaml\n\n# Wait for Redis\nkubectl wait --for=condition=ready pod -l app=redis -n codearena-execution --timeout=120s\n\n# Deploy API and Worker\nkubectl apply -f k8s/api.yaml\nkubectl apply -f k8s/worker.yaml\n\n# Wait for deployments\nkubectl wait --for=condition=available deployment/execution-api -n codearena-execution --timeout=300s\nkubectl wait --for=condition=available deployment/execution-worker -n codearena-execution --timeout=300s\n```\n\n## 📊 Monitoring Commands\n\n### Check Deployment Status\n```powershell\n# View all resources\nkubectl get all -n codearena-execution\n\n# View pods with details\nkubectl get pods -n codearena-execution -o wide\n\n# View services\nkubectl get services -n codearena-execution\n\n# View deployments\nkubectl get deployments -n codearena-execution\n\n# View autoscaling\nkubectl get hpa -n codearena-execution\n```\n\n### Check Resource Usage\n```powershell\n# Pod resource usage\nkubectl top pods -n codearena-execution\n\n# Node resource usage\nkubectl top nodes\n\n# Resource quotas\nkubectl get resourcequota -n codearena-execution\n```\n\n### View Logs\n```powershell\n# API logs\nkubectl logs -f deployment/execution-api -n codearena-execution\n\n# Worker logs\nkubectl logs -f deployment/execution-worker -n codearena-execution\n\n# Redis logs\nkubectl logs -f deployment/redis -n codearena-execution\n\n# Specific pod logs\nkubectl logs -f <pod-name> -n codearena-execution\n```\n\n## 🔧 Troubleshooting Commands\n\n### Describe Resources\n```powershell\n# Describe pod\nkubectl describe pod <pod-name> -n codearena-execution\n\n# Describe service\nkubectl describe service execution-api -n codearena-execution\n\n# Describe deployment\nkubectl describe deployment execution-api -n codearena-execution\n\n# Describe events\nkubectl get events -n codearena-execution --sort-by='.lastTimestamp'\n```\n\n### Execute Commands in Pods\n```powershell\n# Access API pod\nkubectl exec -it deployment/execution-api -n codearena-execution -- /bin/sh\n\n# Access worker pod\nkubectl exec -it deployment/execution-worker -n codearena-execution -- /bin/sh\n\n# Access Redis pod\nkubectl exec -it deployment/redis -n codearena-execution -- redis-cli\n\n# Run specific command\nkubectl exec deployment/execution-api -n codearena-execution -- curl -f http://localhost:3001/health\n```\n\n### Check Configuration\n```powershell\n# View configmaps\nkubectl get configmap -n codearena-execution\nkubectl describe configmap execution-config -n codearena-execution\n\n# View secrets\nkubectl get secret -n codearena-execution\nkubectl describe secret execution-secrets -n codearena-execution\n\n# View environment variables\nkubectl exec deployment/execution-api -n codearena-execution -- env | grep REDIS\n```\n\n## 🌐 Access Services\n\n### Port Forwarding\n```powershell\n# Forward API service\nkubectl port-forward service/execution-api 3001:3001 -n codearena-execution\n\n# Forward Redis service (for debugging)\nkubectl port-forward service/redis 6379:6379 -n codearena-execution\n\n# Forward Prometheus (if deployed)\nkubectl port-forward service/prometheus 9090:9090 -n codearena-execution\n```\n\n### Test API\n```powershell\n# Health check\ncurl http://localhost:3001/health\n\n# Queue stats\ncurl http://localhost:3001/api/queue/stats\n\n# Execute code\n$testCode = @{\n    code = \"print('Hello from Kubernetes!')\"\n    language = \"python\"\n} | ConvertTo-Json\n\nInvoke-RestMethod -Uri \"http://localhost:3001/api/execute\" -Method POST -Body $testCode -ContentType \"application/json\"\n```\n\n## 🔄 Scaling Commands\n\n### Manual Scaling\n```powershell\n# Scale API replicas\nkubectl scale deployment execution-api --replicas=3 -n codearena-execution\n\n# Scale worker replicas\nkubectl scale deployment execution-worker --replicas=5 -n codearena-execution\n\n# Check scaling status\nkubectl get pods -l app=execution-api -n codearena-execution\nkubectl get pods -l app=execution-worker -n codearena-execution\n```\n\n### Autoscaling\n```powershell\n# Check HPA status\nkubectl get hpa -n codearena-execution\n\n# Describe HPA\nkubectl describe hpa execution-api-hpa -n codearena-execution\nkubectl describe hpa execution-worker-hpa -n codearena-execution\n\n# View HPA metrics\nkubectl top pods -n codearena-execution\n```\n\n## 🗑️ Cleanup Commands\n\n### Selective Cleanup\n```powershell\n# Delete specific deployments\nkubectl delete deployment execution-api -n codearena-execution\nkubectl delete deployment execution-worker -n codearena-execution\nkubectl delete deployment redis -n codearena-execution\n\n# Delete services\nkubectl delete service execution-api -n codearena-execution\nkubectl delete service execution-worker -n codearena-execution\nkubectl delete service redis -n codearena-execution\n\n# Delete configmaps and secrets\nkubectl delete configmap --all -n codearena-execution\nkubectl delete secret --all -n codearena-execution\n```\n\n### Complete Cleanup\n```powershell\n# Delete all resources in namespace\nkubectl delete all --all -n codearena-execution\n\n# Delete namespace (removes everything)\nkubectl delete namespace codearena-execution\n\n# Verify cleanup\nkubectl get namespace codearena-execution\n```\n\n## 🔍 Debugging Commands\n\n### Check Pod Status\n```powershell\n# Get pod status\nkubectl get pods -n codearena-execution\n\n# Get pod details\nkubectl describe pod <pod-name> -n codearena-execution\n\n# Check pod logs\nkubectl logs <pod-name> -n codearena-execution\n\n# Check previous logs (if pod restarted)\nkubectl logs <pod-name> --previous -n codearena-execution\n```\n\n### Check Network\n```powershell\n# Test service connectivity\nkubectl exec deployment/execution-api -n codearena-execution -- curl -f http://redis:6379\n\n# Check DNS resolution\nkubectl exec deployment/execution-api -n codearena-execution -- nslookup redis\n\n# Check network policies\nkubectl get networkpolicy -n codearena-execution\n```\n\n### Check Storage\n```powershell\n# Check persistent volumes\nkubectl get pv -n codearena-execution\n\n# Check persistent volume claims\nkubectl get pvc -n codearena-execution\n\n# Describe storage\nkubectl describe pvc <pvc-name> -n codearena-execution\n```\n\n## 📈 Performance Monitoring\n\n### Resource Monitoring\n```powershell\n# Monitor pod resources\nkubectl top pods -n codearena-execution --containers\n\n# Monitor node resources\nkubectl top nodes\n\n# Check resource limits\nkubectl describe pod <pod-name> -n codearena-execution | Select-String -Pattern \"Limits|Requests\"\n```\n\n### Queue Monitoring\n```powershell\n# Check queue stats via API\ncurl http://localhost:3001/api/queue/stats\n\n# Check Redis directly\nkubectl exec deployment/redis -n codearena-execution -- redis-cli info memory\nkubectl exec deployment/redis -n codearena-execution -- redis-cli info keyspace\n```\n\n## 🚨 Emergency Commands\n\n### Force Delete\n```powershell\n# Force delete stuck pods\nkubectl delete pod <pod-name> --force --grace-period=0 -n codearena-execution\n\n# Force delete stuck deployments\nkubectl delete deployment <deployment-name> --force --grace-period=0 -n codearena-execution\n```\n\n### Restart Services\n```powershell\n# Restart API deployment\nkubectl rollout restart deployment/execution-api -n codearena-execution\n\n# Restart worker deployment\nkubectl rollout restart deployment/execution-worker -n codearena-execution\n\n# Check rollout status\nkubectl rollout status deployment/execution-api -n codearena-execution\n```\n\n### Emergency Access\n```powershell\n# Access pod with root (if needed)\nkubectl exec -it <pod-name> -n codearena-execution -- /bin/sh -c \"su -\"\n\n# Check system resources in pod\nkubectl exec <pod-name> -n codearena-execution -- df -h\nkubectl exec <pod-name> -n codearena-execution -- free -h\n```\n\n## 📝 Useful Aliases\n\nAdd these to your PowerShell profile for convenience:\n```powershell\n# Set alias for namespace\nSet-Alias -Name k -Value kubectl\n$env:KUBECTL_NAMESPACE = \"codearena-execution\"\n\n# Quick commands\nfunction kpods { kubectl get pods -n codearena-execution }\nfunction klogs { kubectl logs -f deployment/execution-api -n codearena-execution }\nfunction kstatus { kubectl get all -n codearena-execution }\nfunction kclean { kubectl delete all --all -n codearena-execution }\n```\n\n## 🎯 Quick Reference\n\n### Most Used Commands\n```powershell\n# Deploy everything\n.\\deploy-k8s.ps1\n\n# Check status\nkubectl get all -n codearena-execution\n\n# View logs\nkubectl logs -f deployment/execution-api -n codearena-execution\n\n# Access API\nkubectl port-forward service/execution-api 3001:3001 -n codearena-execution\n\n# Cleanup everything\n.\\cleanup-k8s.ps1\n```\n\n### Troubleshooting Flow\n1. `kubectl get pods -n codearena-execution` - Check pod status\n2. `kubectl describe pod <pod-name> -n codearena-execution` - Get detailed info\n3. `kubectl logs <pod-name> -n codearena-execution` - Check logs\n4. `kubectl exec -it <pod-name> -n codearena-execution -- /bin/sh` - Debug inside pod\n5. `kubectl get events -n codearena-execution` - Check recent events ","size_bytes":9954},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { config } from \"./config\";\n\n// Rewrite relative /api requests to absolute API URL at runtime and enforce Accept header\nconst originalFetch = window.fetch.bind(window);\nwindow.fetch = (input: RequestInfo | URL, init?: RequestInit) => {\n  const urlStr = typeof input === 'string' ? input : input instanceof URL ? input.toString() : String(input);\n  const isApi = typeof urlStr === 'string' && urlStr.startsWith('/api/');\n\n  // Build headers with Accept default\n  const headersObj: Record<string, string> = {\n    Accept: 'application/json',\n    ...(init?.headers ? (init.headers as Record<string, string>) : {}),\n  };\n\n  if (isApi) {\n    const absolute = `${config.apiUrl}${urlStr}`;\n    return originalFetch(absolute, { ...init, headers: headersObj });\n  }\n\n  return originalFetch(input as any, { ...init, headers: headersObj });\n};\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":996},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"server/models/ProblemSetEnrollment.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface IProblemSetEnrollment {\n  id: number;\n  problemSetId: string; // store ProblemSet.id string\n  userId: mongoose.Types.ObjectId;\n  enrolledAt: Date;\n  progress: number;\n  completedProblems: number[];\n  totalSubmissions: number;\n  correctSubmissions: number;\n  enrollmentType: 'admin' | 'qr'; // New field to track enrollment method\n  user?: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n  };\n}\n\ninterface IProblemSetEnrollmentDocument extends Omit<IProblemSetEnrollment, 'id'>, Document {\n  _id: mongoose.Types.ObjectId;\n  id: number;\n}\n\nconst problemSetEnrollmentSchema = new mongoose.Schema<IProblemSetEnrollmentDocument>({\n  id: {\n    type: Number,\n    required: true,\n    unique: true,\n  },\n  problemSetId: {\n    type: String,\n    required: [true, 'Problem set ID is required'],\n    index: true,\n  },\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: [true, 'User ID is required'],\n    index: true,\n  },\n  enrolledAt: {\n    type: Date,\n    default: Date.now,\n  },\n  progress: {\n    type: Number,\n    default: 0,\n    min: [0, 'Progress cannot be negative'],\n    max: [100, 'Progress cannot exceed 100'],\n  },\n  completedProblems: [{\n    type: Number,\n  }],\n  totalSubmissions: {\n    type: Number,\n    default: 0,\n    min: [0, 'Total submissions cannot be negative'],\n  },\n  correctSubmissions: {\n    type: Number,\n    default: 0,\n    min: [0, 'Correct submissions cannot be negative'],\n  },\n  enrollmentType: {\n    type: String,\n    enum: ['admin', 'qr'],\n    required: [true, 'Enrollment type is required'],\n    default: 'qr', // Default to QR for backward compatibility\n  },\n  user: {\n    firstName: String,\n    lastName: String,\n    email: String,\n  },\n}, {\n  timestamps: true,\n});\n\n// Compound index for unique enrollment\nproblemSetEnrollmentSchema.index({ problemSetId: 1, userId: 1 }, { unique: true });\nproblemSetEnrollmentSchema.index({ id: 1 });\n\n// Virtual for completion status\nproblemSetEnrollmentSchema.virtual('isCompleted').get(function() {\n  return this.progress >= 100;\n});\n\n// Virtual for success rate\nproblemSetEnrollmentSchema.virtual('successRate').get(function() {\n  return this.totalSubmissions > 0 ? (this.correctSubmissions / this.totalSubmissions) * 100 : 0;\n});\n\n// Method to mark problem as completed\nproblemSetEnrollmentSchema.methods.completeProblem = async function(problemId: number) {\n  if (!this.completedProblems.includes(problemId)) {\n    this.completedProblems.push(problemId);\n    await this.save();\n  }\n  return this;\n};\n\n// Method to update progress\nproblemSetEnrollmentSchema.methods.updateProgress = async function(progress: number) {\n  this.progress = Math.max(0, Math.min(100, progress));\n  return await this.save();\n};\n\n// Method to increment submissions\nproblemSetEnrollmentSchema.methods.incrementSubmissions = async function(isCorrect: boolean = false) {\n  this.totalSubmissions += 1;\n  if (isCorrect) {\n    this.correctSubmissions += 1;\n  }\n  return await this.save();\n};\n\n// Method to update user info\nproblemSetEnrollmentSchema.methods.updateUserInfo = async function(userInfo: { firstName?: string; lastName?: string; email?: string }) {\n  this.user = { ...this.user, ...userInfo };\n  return await this.save();\n};\n\n// Static method to find enrollments by problem set\nproblemSetEnrollmentSchema.statics.findByProblemSet = function(problemSetId: string) {\n  return this.find({ problemSetId }).populate('user', 'firstName lastName email');\n};\n\n// Static method to find enrollments by user\nproblemSetEnrollmentSchema.statics.findByUser = function(userId: string | mongoose.Types.ObjectId) {\n  return this.find({ userId });\n};\n\n// Static method to check if user is enrolled\nproblemSetEnrollmentSchema.statics.isEnrolled = async function(problemSetId: string, userId: string | mongoose.Types.ObjectId) {\n  const enrollment = await this.findOne({ problemSetId, userId });\n  return !!enrollment;\n};\n\n// Static method to get enrollment count for a problem set\nproblemSetEnrollmentSchema.statics.getEnrollmentCount = async function(problemSetId: string) {\n  return await this.countDocuments({ problemSetId });\n};\n\n// Static method to get completion statistics\nproblemSetEnrollmentSchema.statics.getCompletionStats = async function(problemSetId: string) {\n  const stats = await this.aggregate([\n    { $match: { problemSetId } },\n    {\n      $group: {\n        _id: null,\n        totalEnrollments: { $sum: 1 },\n        completedEnrollments: { $sum: { $cond: [{ $gte: ['$progress', 100] }, 1, 0] } },\n        avgProgress: { $avg: '$progress' },\n        avgSubmissions: { $avg: '$totalSubmissions' },\n        avgCorrectSubmissions: { $avg: '$correctSubmissions' }\n      }\n    }\n  ]);\n  \n  return stats.length > 0 ? stats[0] : {\n    totalEnrollments: 0,\n    completedEnrollments: 0,\n    avgProgress: 0,\n    avgSubmissions: 0,\n    avgCorrectSubmissions: 0\n  };\n};\n\nexport const ProblemSetEnrollment = mongoose.model<IProblemSetEnrollmentDocument>('ProblemSetEnrollment', problemSetEnrollmentSchema); ","size_bytes":5059},"server/routes/assignmentAnalytics.ts":{"content":"import { Router, Request, Response } from 'express';\nimport { AssignmentAnalyticsService } from '../services/assignmentAnalyticsService';\nimport { AssignmentAnalytics } from '../models/AssignmentAnalytics';\nimport { Submission } from '../models/Submission';\nimport { ProblemSetEnrollment } from '../models/ProblemSetEnrollment';\nimport mongoose from 'mongoose';\nimport { protect, requireAdmin } from '../middleware/auth';\nimport { AuthRequest } from '../middleware/auth';\n\nconst router = Router();\n\n// Get comprehensive analytics for a specific assignment (Admin only)\nrouter.get('/assignments/:assignmentId/analytics', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    const assignmentId = parseInt(req.params.assignmentId);\n    console.log(`[Analytics Route] Request for assignment ${assignmentId}`);\n    \n    if (isNaN(assignmentId)) {\n      return res.status(400).json({ message: 'Invalid assignment ID' });\n    }\n\n    const analytics = await AssignmentAnalyticsService.generateAssignmentAnalytics(assignmentId);\n    console.log(`[Analytics Route] Generated analytics:`, JSON.stringify(analytics, null, 2));\n    res.json(analytics);\n  } catch (error) {\n    console.error('Error fetching assignment analytics:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch assignment analytics',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get user-specific analytics for an assignment\nrouter.get('/assignments/:assignmentId/users/:userId/analytics', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const assignmentId = parseInt(req.params.assignmentId);\n    const userId = req.params.userId;\n    const requestingUserId = req.user.id;\n\n    if (isNaN(assignmentId)) {\n      return res.status(400).json({ message: 'Invalid assignment ID' });\n    }\n\n    // Users can only view their own analytics, unless they're an admin\n    if (requestingUserId !== userId && req.user.role !== 'admin') {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n\n    const analytics = await AssignmentAnalyticsService.generateUserAssignmentAnalytics(userId, assignmentId);\n    res.json(analytics);\n  } catch (error) {\n    console.error('Error fetching user assignment analytics:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch user assignment analytics',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get course-level analytics summary\nrouter.get('/courses/:courseId/analytics', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    const courseId = parseInt(req.params.courseId);\n    \n    if (isNaN(courseId)) {\n      return res.status(400).json({ message: 'Invalid course ID' });\n    }\n\n    const analytics = await AssignmentAnalyticsService.generateCourseAnalytics(courseId);\n    res.json(analytics);\n  } catch (error) {\n    console.error('Error fetching course analytics:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch course analytics',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get user's overall analytics across all assignments\nrouter.get('/users/:userId/analytics', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const userId = req.params.userId;\n    const requestingUserId = req.user.id;\n\n    // Users can only view their own analytics, unless they're an admin\n    if (requestingUserId !== userId && req.user.role !== 'admin') {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n\n    const userAnalytics = await AssignmentAnalytics.find({ userId }).sort({ submittedAt: -1 });\n    \n    // Calculate overall user statistics\n    const totalAssignments = new Set(userAnalytics.map(a => a.assignmentId)).size;\n    const totalSubmissions = userAnalytics.length;\n    const averageScore = userAnalytics.reduce((sum, a) => sum + a.percentageScore, 0) / totalSubmissions;\n    const bestScore = Math.max(...userAnalytics.map(a => a.percentageScore));\n    const totalTimeSpent = userAnalytics.reduce((sum, a) => sum + a.timeSpent, 0);\n\n    // Calculate improvement trend\n    const sortedByDate = userAnalytics.sort((a, b) => new Date(a.submittedAt).getTime() - new Date(b.submittedAt).getTime());\n    const recentScores = sortedByDate.slice(-5).map(a => a.percentageScore);\n    const olderScores = sortedByDate.slice(0, 5).map(a => a.percentageScore);\n    const recentAverage = recentScores.reduce((sum, score) => sum + score, 0) / recentScores.length;\n    const olderAverage = olderScores.reduce((sum, score) => sum + score, 0) / olderScores.length;\n    const improvementTrend = olderAverage > 0 ? ((recentAverage - olderAverage) / olderAverage) * 100 : 0;\n\n    // Get learning outcomes summary\n    const allOutcomes = userAnalytics.flatMap(a => a.learningOutcomes);\n    const uniqueOutcomes = new Set(allOutcomes.map(o => o.outcome));\n    const achievedOutcomes = allOutcomes.filter(o => o.achieved).length;\n    const totalOutcomes = allOutcomes.length;\n    const achievementRate = totalOutcomes > 0 ? (achievedOutcomes / totalOutcomes) * 100 : 0;\n\n    // Get performance categories\n    const performanceCategories = userAnalytics.map(a => a.comparativeAnalytics.performanceCategory);\n    const categoryCounts = performanceCategories.reduce((acc, category) => {\n      acc[category] = (acc[category] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const userSummary = {\n      userId,\n      totalAssignments,\n      totalSubmissions,\n      averageScore: Math.round(averageScore * 100) / 100,\n      bestScore: Math.round(bestScore * 100) / 100,\n      totalTimeSpent: Math.round(totalTimeSpent * 100) / 100,\n      improvementTrend: Math.round(improvementTrend * 100) / 100,\n      achievementRate: Math.round(achievementRate * 100) / 100,\n      performanceBreakdown: categoryCounts,\n      recentActivity: userAnalytics\n        .sort((a, b) => new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime())\n        .slice(0, 10)\n        .map(a => ({\n          assignmentId: a.assignmentId,\n          score: a.percentageScore,\n          submittedAt: a.submittedAt,\n          timeSpent: a.timeSpent\n        }))\n    };\n\n    res.json(userSummary);\n  } catch (error) {\n    console.error('Error fetching user analytics:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch user analytics',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Create test analytics data (Admin only)\nrouter.post('/test-data/:assignmentId', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    const assignmentId = parseInt(req.params.assignmentId);\n    \n    if (isNaN(assignmentId)) {\n      return res.status(400).json({ message: 'Invalid assignment ID' });\n    }\n\n    // Create some test submissions for this assignment\n    const testSubmissions = [];\n    const users = ['user1', 'user2', 'user3', 'user4', 'user5'];\n    \n    for (let i = 0; i < 20; i++) {\n      const submission = new Submission({\n        problemId: assignmentId.toString(),\n        userId: users[i % users.length],\n        status: Math.random() > 0.3 ? 'accepted' : 'error',\n        score: Math.floor(Math.random() * 40) + 60, // 60-100\n        runtime: Math.floor(Math.random() * 1000) + 100,\n        memory: Math.floor(Math.random() * 50) + 10,\n        submittedAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000), // Random date in last 30 days\n        testResults: [\n          { testCase: 1, passed: Math.random() > 0.2, output: 'Test output' },\n          { testCase: 2, passed: Math.random() > 0.2, output: 'Test output' },\n          { testCase: 3, passed: Math.random() > 0.2, output: 'Test output' }\n        ]\n      });\n      \n      await submission.save();\n      testSubmissions.push(submission);\n    }\n\n    res.json({ \n      message: 'Test data created successfully', \n      submissionsCreated: testSubmissions.length \n    });\n  } catch (error) {\n    console.error('Error creating test data:', error);\n    res.status(500).json({ \n      message: 'Failed to create test data',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Create or update assignment analytics record\nrouter.post('/assignments/:assignmentId/analytics', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const assignmentId = parseInt(req.params.assignmentId);\n    const userId = req.user.id;\n    \n    if (isNaN(assignmentId)) {\n      return res.status(400).json({ message: 'Invalid assignment ID' });\n    }\n\n    // Check if analytics record already exists for this user and assignment\n    const existingAnalytics = await AssignmentAnalytics.findOne({ \n      assignmentId, \n      userId \n    }).sort({ attemptNumber: -1 });\n\n    const attemptNumber = existingAnalytics ? existingAnalytics.attemptNumber + 1 : 1;\n\n    const analyticsData = {\n      ...req.body,\n      assignmentId,\n      userId,\n      attemptNumber,\n      submittedAt: new Date()\n    };\n\n    const analytics = await AssignmentAnalyticsService.createAssignmentAnalytics(analyticsData);\n    res.status(201).json(analytics);\n  } catch (error) {\n    console.error('Error creating assignment analytics:', error);\n    res.status(500).json({ \n      message: 'Failed to create assignment analytics',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get assignment statistics (summary metrics)\nrouter.get('/assignments/:assignmentId/stats', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const assignmentId = parseInt(req.params.assignmentId);\n    \n    if (isNaN(assignmentId)) {\n      return res.status(400).json({ message: 'Invalid assignment ID' });\n    }\n\n    const stats = await AssignmentAnalytics.aggregate([\n      { $match: { assignmentId } },\n      {\n        $group: {\n          _id: null,\n          totalSubmissions: { $sum: 1 },\n          averageScore: { $avg: '$percentageScore' },\n          averageTimeSpent: { $avg: '$timeSpent' },\n          averageAttempts: { $avg: '$attemptNumber' },\n          minScore: { $min: '$percentageScore' },\n          maxScore: { $max: '$percentageScore' },\n          standardDeviation: { $stdDevPop: '$percentageScore' }\n        }\n      }\n    ]);\n    \n    const result = stats.length > 0 ? stats[0] : {\n      totalSubmissions: 0,\n      averageScore: 0,\n      averageTimeSpent: 0,\n      averageAttempts: 0,\n      minScore: 0,\n      maxScore: 0,\n      standardDeviation: 0\n    };\n    res.json(result);\n  } catch (error) {\n    console.error('Error fetching assignment stats:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch assignment stats',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get user progress across assignments\nrouter.get('/users/:userId/progress', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const userId = req.params.userId;\n    const requestingUserId = req.user.id;\n    const courseId = req.query.courseId ? parseInt(req.query.courseId as string) : undefined;\n\n    // Users can only view their own progress, unless they're an admin\n    if (requestingUserId !== userId && req.user.role !== 'admin') {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n\n    const matchStage = courseId ? { userId, courseId } : { userId };\n    \n    const progress = await AssignmentAnalytics.aggregate([\n      { $match: matchStage },\n      {\n        $group: {\n          _id: '$assignmentId',\n          bestScore: { $max: '$percentageScore' },\n          totalAttempts: { $sum: 1 },\n          averageTimeSpent: { $avg: '$timeSpent' },\n          lastAttempt: { $max: '$submittedAt' },\n          improvement: { $avg: '$performanceTrends.improvementFromPrevious' }\n        }\n      },\n      { $sort: { lastAttempt: -1 } }\n    ]);\n    // Attach enrollment progress from ProblemSetEnrollment\n    let enriched = progress;\n    try {\n      const userObjectId = new mongoose.Types.ObjectId(userId);\n      const enrollments = await ProblemSetEnrollment.find({ userId: userObjectId });\n      const progressMap = new Map<number, number>();\n      enrollments.forEach(e => {\n        // problemSetId is number in enrollment schema\n        // @ts-ignore - using dynamic doc typing\n        progressMap.set(e.problemSetId as unknown as number, e.progress as unknown as number);\n      });\n      enriched = progress.map((p: any) => ({\n        ...p,\n        enrollmentProgress: progressMap.get(p._id) ?? null,\n      }));\n    } catch (e) {\n      // Non-blocking if enrollment progress is unavailable\n    }\n    res.json(enriched);\n  } catch (error) {\n    console.error('Error fetching user progress:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch user progress',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get learning outcomes for a user\nrouter.get('/users/:userId/learning-outcomes', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const userId = req.params.userId;\n    const requestingUserId = req.user.id;\n    const courseId = req.query.courseId ? parseInt(req.query.courseId as string) : undefined;\n\n    // Users can only view their own learning outcomes, unless they're an admin\n    if (requestingUserId !== userId && req.user.role !== 'admin') {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n\n    const matchStage = courseId ? { userId, courseId } : { userId };\n    \n    const outcomes = await AssignmentAnalytics.aggregate([\n      { $match: matchStage },\n      { $unwind: '$learningOutcomes' },\n      {\n        $group: {\n          _id: '$learningOutcomes.outcome',\n          totalAttempts: { $sum: 1 },\n          achievedCount: { $sum: { $cond: ['$learningOutcomes.achieved', 1, 0] } },\n          averageConfidence: { $avg: '$learningOutcomes.confidence' },\n          averageTimeToMastery: { $avg: '$learningOutcomes.timeToMastery' }\n        }\n      }\n    ]);\n    \n    const result = outcomes.map((outcome: any) => ({\n      ...outcome,\n      achievementRate: outcome.totalAttempts > 0 ? (outcome.achievedCount / outcome.totalAttempts) * 100 : 0\n    }));\n    res.json(result);\n  } catch (error) {\n    console.error('Error fetching learning outcomes:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch learning outcomes',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get comparative analytics for an assignment\nrouter.get('/assignments/:assignmentId/comparative', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    const assignmentId = parseInt(req.params.assignmentId);\n    \n    if (isNaN(assignmentId)) {\n      return res.status(400).json({ message: 'Invalid assignment ID' });\n    }\n\n    const analytics = await AssignmentAnalytics.find({ assignmentId }).sort({ submittedAt: -1 });\n    \n    if (analytics.length === 0) {\n      return res.status(404).json({ message: 'No analytics data found for this assignment' });\n    }\n\n    // Calculate comparative metrics\n    const scores = analytics.map((a: any) => a.percentageScore).sort((a: number, b: number) => a - b);\n    const classAverage = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n    const classMedian = scores[Math.floor(scores.length / 2)];\n    const variance = scores.reduce((sum, score) => sum + Math.pow(score - classAverage, 2), 0) / scores.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    // Calculate percentiles\n    const percentiles = [10, 25, 50, 75, 90];\n    const percentileValues = percentiles.map(p => {\n      const index = Math.floor((p / 100) * scores.length);\n      return scores[index] || 0;\n    });\n\n    // Calculate performance distribution\n    const distribution = {\n      excellent: scores.filter(s => s >= 90).length,\n      good: scores.filter(s => s >= 80 && s < 90).length,\n      average: scores.filter(s => s >= 70 && s < 80).length,\n      needsImprovement: scores.filter(s => s < 70).length\n    };\n\n    const comparativeData = {\n      assignmentId,\n      totalStudents: analytics.length,\n      classAverage: Math.round(classAverage * 100) / 100,\n      classMedian: Math.round(classMedian * 100) / 100,\n      standardDeviation: Math.round(standardDeviation * 100) / 100,\n      percentiles: percentiles.map((p, i) => ({\n        percentile: p,\n        score: Math.round(percentileValues[i] * 100) / 100\n      })),\n      distribution,\n      scoreRange: {\n        min: Math.min(...scores),\n        max: Math.max(...scores)\n      }\n    };\n\n    res.json(comparativeData);\n  } catch (error) {\n    console.error('Error fetching comparative analytics:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch comparative analytics',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get time series data for an assignment\nrouter.get('/assignments/:assignmentId/timeline', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    const assignmentId = parseInt(req.params.assignmentId);\n    const period = req.query.period as string || 'daily'; // daily, weekly, monthly\n    \n    if (isNaN(assignmentId)) {\n      return res.status(400).json({ message: 'Invalid assignment ID' });\n    }\n\n    // Get the assignment (problem set) structure\n    const { getDb } = await import('../db');\n    const db = getDb();\n    \n    // Get the problem set (assignment) details - try multiple approaches\n    let problemSet = await db.collection('problemsets').findOne({ id: assignmentId.toString() });\n    \n    // If not found by string ID, try finding by position\n    if (!problemSet) {\n      const allProblemSets = await db.collection('problemsets').find().toArray();\n      \n      // Try to find by position (assignmentId - 1 for 0-based index)\n      if (allProblemSets.length > 0 && assignmentId > 0 && assignmentId <= allProblemSets.length) {\n        problemSet = allProblemSets[assignmentId - 1];\n      }\n    }\n    \n    if (!problemSet) {\n      return res.status(404).json({ message: 'Assignment not found' });\n    }\n    \n    // Get all problem instances for this assignment\n    const problemInstances = problemSet.problemInstances || [];\n    const problemIds = problemInstances.map((pi: any) => pi.problemId);\n    \n    // Get submissions for all problems in this assignment\n    const submissions = await Submission.find({ problemId: { $in: problemIds } });\n    \n    if (submissions.length === 0) {\n      return res.status(404).json({ message: 'No analytics data found for this assignment' });\n    }\n\n    // Group by time period\n    const timelineData = new Map();\n    \n    submissions.forEach((submission: any) => {\n      let dateKey: string;\n      const date = new Date(submission.submittedAt);\n      \n      switch (period) {\n        case 'weekly':\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay());\n          dateKey = weekStart.toISOString().split('T')[0];\n          break;\n        case 'monthly':\n          dateKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          break;\n        default: // daily\n          dateKey = date.toISOString().split('T')[0];\n      }\n\n      if (!timelineData.has(dateKey)) {\n        timelineData.set(dateKey, {\n          submissions: 0,\n          totalScore: 0,\n          averageTime: 0,\n          totalTime: 0\n        });\n      }\n\n      const data = timelineData.get(dateKey);\n      data.submissions++;\n      data.totalScore += submission.score || 0;\n      data.totalTime += Math.floor(Math.random() * 30) + 5; // Mock time data\n      data.averageTime = data.totalTime / data.submissions;\n    });\n\n    const timeline = Array.from(timelineData.entries())\n      .map(([date, data]: [string, any]) => ({\n        date,\n        submissions: data.submissions,\n        averageScore: Math.round((data.totalScore / data.submissions) * 100) / 100,\n        averageTime: Math.round(data.averageTime * 100) / 100\n      }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n\n    res.json({\n      assignmentId,\n      period,\n      timeline\n    });\n  } catch (error) {\n    console.error('Error fetching timeline data:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch timeline data',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get question-level analytics for an assignment\nrouter.get('/assignments/:assignmentId/questions', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    const assignmentId = parseInt(req.params.assignmentId);\n    \n    if (isNaN(assignmentId)) {\n      return res.status(400).json({ message: 'Invalid assignment ID' });\n    }\n\n    // Get the assignment (problem set) structure\n    const { getDb } = await import('../db');\n    const db = getDb();\n    \n    // Get the problem set (assignment) details - try multiple approaches\n    let problemSet = await db.collection('problemsets').findOne({ id: assignmentId.toString() });\n    \n    // If not found by string ID, try finding by position\n    if (!problemSet) {\n      const allProblemSets = await db.collection('problemsets').find().toArray();\n      \n      // Try to find by position (assignmentId - 1 for 0-based index)\n      if (allProblemSets.length > 0 && assignmentId > 0 && assignmentId <= allProblemSets.length) {\n        problemSet = allProblemSets[assignmentId - 1];\n      }\n    }\n    \n    if (!problemSet) {\n      return res.status(404).json({ message: 'Assignment not found' });\n    }\n    \n    // Get all problem instances for this assignment\n    const problemInstances = problemSet.problemInstances || [];\n    const problemIds = problemInstances.map((pi: any) => pi.originalProblemId || pi.problemId);\n    \n    // Get submissions for all problems in this assignment\n    const submissions = await Submission.find({ problemId: { $in: problemIds } });\n    \n    if (submissions.length === 0) {\n      return res.status(404).json({ message: 'No analytics data found for this assignment' });\n    }\n\n    // Aggregate question-level data from problem instances and submissions\n    const questionMap = new Map();\n\n    // Initialize map with all problem instances\n    (problemInstances as any[]).forEach((problemInstance: any) => {\n      const problemId = String(problemInstance.originalProblemId || problemInstance.problemId);\n      questionMap.set(problemId, {\n        questionId: problemId,\n        questionType: 'coding',\n        totalAttempts: 0,\n        correctAttempts: 0,\n        totalScore: 0,\n        totalTime: 0,\n        difficultyRatings: [],\n        feedback: new Set(),\n        title: problemInstance.title || `Problem ${problemId}`,\n        difficulty: problemInstance.difficulty || 'medium'\n      });\n    });\n\n    // Aggregate submission data\n    submissions.forEach(submission => {\n      const problemId = submission.problemId.toString();\n      const score = typeof submission.score === 'string' ? parseFloat(submission.score) : (submission.score || 0);\n      \n      if (questionMap.has(problemId)) {\n        const qData = questionMap.get(problemId);\n        qData.totalAttempts++;\n        if (score >= 70) qData.correctAttempts++;\n        qData.totalScore += score;\n        qData.totalTime += submission.runtime || 0;\n        qData.difficultyRatings.push(score >= 80 ? 1 : score >= 60 ? 2 : 3);\n        if (submission.feedback) qData.feedback.add(submission.feedback);\n      }\n    });\n\n    const questionAnalytics = Array.from(questionMap.values()).map(qData => ({\n      questionId: qData.questionId,\n      questionType: qData.questionType,\n      totalAttempts: qData.totalAttempts,\n      correctAttempts: qData.correctAttempts,\n      successRate: Math.round((qData.correctAttempts / qData.totalAttempts) * 100 * 100) / 100,\n      averageScore: Math.round((qData.totalScore / qData.totalAttempts) * 100) / 100,\n      averageTime: Math.round((qData.totalTime / qData.totalAttempts) * 100) / 100,\n      averageDifficulty: qData.difficultyRatings.length > 0 \n        ? Math.round((qData.difficultyRatings.reduce((sum: number, rating: number) => sum + rating, 0) / qData.difficultyRatings.length) * 100) / 100\n        : null,\n      commonFeedback: Array.from(qData.feedback).slice(0, 5)\n    }));\n\n    res.json({\n      assignmentId,\n      totalQuestions: questionAnalytics.length,\n      questions: questionAnalytics\n    });\n  } catch (error) {\n    console.error('Error fetching question analytics:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch question analytics',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Get analytics overview (Admin only)\nrouter.get('/overview', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    // Get basic analytics overview data\n    const assignments = await AssignmentAnalytics.aggregate([\n      {\n        $group: {\n          _id: null,\n          total: { $sum: 1 },\n          averageScore: { $avg: '$percentageScore' },\n          completionRate: { $avg: '$engagementMetrics.completionRate' }\n        }\n      }\n    ]);\n\n    const courses = await AssignmentAnalytics.aggregate([\n      {\n        $match: { courseId: { $exists: true } }\n      },\n      {\n        $group: {\n          _id: null,\n          total: { $addToSet: '$courseId' },\n          averageScore: { $avg: '$percentageScore' },\n          enrollmentRate: { $avg: 85 } // Mock data for now\n        }\n      }\n    ]);\n\n    const students = await AssignmentAnalytics.aggregate([\n      {\n        $group: {\n          _id: null,\n          total: { $addToSet: '$userId' },\n          averageScore: { $avg: '$percentageScore' },\n          improvementRate: { $avg: '$performanceTrends.improvementFromPrevious' }\n        }\n      }\n    ]);\n\n    const overview = {\n      assignments: {\n        total: assignments.length > 0 ? assignments[0].total : 0,\n        active: assignments.length > 0 ? Math.round(assignments[0].total * 0.8) : 0,\n        averageScore: assignments.length > 0 ? Math.round(assignments[0].averageScore) : 0,\n        completionRate: assignments.length > 0 ? Math.round(assignments[0].completionRate) : 0\n      },\n      courses: {\n        total: courses.length > 0 ? courses[0].total.length : 0,\n        active: courses.length > 0 ? Math.round(courses[0].total.length * 0.9) : 0,\n        averageScore: courses.length > 0 ? Math.round(courses[0].averageScore) : 0,\n        enrollmentRate: courses.length > 0 ? Math.round(courses[0].enrollmentRate) : 0\n      },\n      students: {\n        total: students.length > 0 ? students[0].total.length : 0,\n        active: students.length > 0 ? Math.round(students[0].total.length * 0.7) : 0,\n        averageScore: students.length > 0 ? Math.round(students[0].averageScore) : 0,\n        improvementRate: students.length > 0 ? Math.round(students[0].improvementRate) : 0\n      }\n    };\n\n    res.json(overview);\n  } catch (error) {\n    console.error('Error fetching analytics overview:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch analytics overview',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Debug endpoint to see what submissions exist\nrouter.get('/debug/submissions', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    const submissions = await Submission.find({}).limit(10);\n    const sampleSubmission = submissions.length > 0 ? submissions[0] : null;\n    \n    res.json({\n      totalSubmissions: await Submission.countDocuments({}),\n      sampleSubmission,\n      allSubmissions: submissions\n    });\n  } catch (error) {\n    console.error('Error in debug endpoint:', error);\n    res.status(500).json({ message: 'Debug failed', error: (error as any).message });\n  }\n});\n\n// Export analytics data (Admin only)\nrouter.get('/export/:type/:id', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    const { type, id } = req.params;\n    const format = req.query.format as string || 'json';\n\n    let data: any;\n\n    switch (type) {\n      case 'assignment':\n        const assignmentId = parseInt(id);\n        if (isNaN(assignmentId)) {\n          return res.status(400).json({ message: 'Invalid assignment ID' });\n        }\n        data = await AssignmentAnalyticsService.generateAssignmentAnalytics(assignmentId);\n        break;\n      \n      case 'course':\n        const courseId = parseInt(id);\n        if (isNaN(courseId)) {\n          return res.status(400).json({ message: 'Invalid course ID' });\n        }\n        data = await AssignmentAnalyticsService.generateCourseAnalytics(courseId);\n        break;\n      \n      case 'user':\n        // Get user's submissions\n        const userSubmissions = await Submission.find({ userId: id });\n        data = {\n          userId: id,\n          submissions: userSubmissions,\n          totalSubmissions: userSubmissions.length,\n          averageScore: userSubmissions.length > 0 ? \n            userSubmissions.reduce((sum, s) => {\n              const score = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n              return sum + score;\n            }, 0) / userSubmissions.length : 0\n        };\n        break;\n      \n      default:\n        return res.status(400).json({ message: 'Invalid export type' });\n    }\n\n    if (format === 'csv') {\n      // Convert to CSV format (simplified)\n      const toCsv = (rows: any[]): string => {\n        if (!Array.isArray(rows) || rows.length === 0) return '';\n        const headers = Object.keys(rows[0]);\n        const lines = [headers.join(',')];\n        for (const r of rows) {\n          lines.push(headers.map(h => JSON.stringify((r as any)[h] ?? '')).join(','));\n        }\n        return lines.join('\\n');\n      };\n      const csvData = toCsv((data as any[]) || []);\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${type}-${id}-analytics.csv\"`);\n      res.send(csvData);\n    } else {\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${type}-${id}-analytics.json\"`);\n      res.json(data);\n    }\n  } catch (error) {\n    console.error('Error exporting analytics:', error);\n    res.status(500).json({ message: 'Failed to export analytics', error: (error as any).message });\n  }\n});\nexport default router;","size_bytes":30409},"server/test-smtp.js":{"content":"// Test SMTP connection\nimport nodemailer from 'nodemailer';\n\nconst transporter = nodemailer.createTransport({\n  host: 'smtp.gmail.com',\n  port: 587,\n  secure: false,\n  auth: {\n    user: 'pearai095@gmail.com',\n    pass: 'vtrs fznp jzis fupr',\n  },\n});\n\nasync function testSMTP() {\n  try {\n    console.log('🧪 Testing SMTP connection...');\n    \n    // Verify connection\n    await transporter.verify();\n    console.log('✅ SMTP connection verified successfully!');\n    \n    // Test sending email\n    console.log('📧 Testing email sending...');\n    const info = await transporter.sendMail({\n      from: '\"CodeArena\" <pearai095@gmail.com>',\n      to: 'pearai095@gmail.com',\n      subject: 'SMTP Test - CodeArena',\n      text: 'This is a test email to verify SMTP is working.',\n      html: '<h1>SMTP Test</h1><p>This is a test email to verify SMTP is working.</p>'\n    });\n    \n    console.log('✅ Test email sent successfully!');\n    console.log('📧 Message ID:', info.messageId);\n    \n  } catch (error) {\n    console.error('❌ SMTP test failed:', error.message);\n    console.error('Error details:', error);\n  }\n}\n\ntestSMTP(); ","size_bytes":1132},"server/debug-modules.js":{"content":"import { MongoClient } from 'mongodb';\n\nconst MONGODB_URL = \"mongodb+srv://bandarin29:meritcurve@meritcurve.73u7fr7.mongodb.net/test\";\n\nasync function debugModules() {\n  const client = new MongoClient(MONGODB_URL);\n  \n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n    \n    const db = client.db();\n    \n    // Check all collections\n    const collections = await db.listCollections().toArray();\n    console.log('Available collections:', collections.map(c => c.name));\n    \n    // Check coursemodules collection\n    const moduleCount = await db.collection('coursemodules').countDocuments();\n    console.log('Total modules in coursemodules collection:', moduleCount);\n    \n    // Check modules for course 1749881084938\n    const courseId = 1749881084938;\n    const modulesForCourse = await db.collection('coursemodules').find({ courseId: courseId }).toArray();\n    console.log(`Modules for course ${courseId}:`, modulesForCourse.length);\n    \n    if (modulesForCourse.length > 0) {\n      console.log('Sample module:', JSON.stringify(modulesForCourse[0], null, 2));\n    }\n    \n    // Check all modules regardless of courseId\n    const allModules = await db.collection('coursemodules').find({}).toArray();\n    console.log('All modules in collection:', allModules.length);\n    if (allModules.length > 0) {\n      console.log('Sample module structure:', {\n        id: allModules[0].id,\n        courseId: allModules[0].courseId,\n        title: allModules[0].title,\n        order: allModules[0].order\n      });\n    }\n    \n    // Check course data\n    const course = await db.collection('courses').findOne({ id: courseId });\n    console.log('Course exists:', !!course);\n    if (course) {\n      console.log('Course structure:', {\n        id: course.id,\n        title: course.title,\n        moduleCount: course.modules ? course.modules.length : 'no modules field'\n      });\n    }\n    \n    // Check courses collection\n    const courseCount = await db.collection('courses').countDocuments();\n    console.log('Total courses:', courseCount);\n    \n    // List all courses with their IDs\n    const allCourses = await db.collection('courses').find({}, { projection: { id: 1, title: 1 } }).toArray();\n    console.log('All courses:', allCourses);\n    \n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    await client.close();\n  }\n}\n\ndebugModules();","size_bytes":2378},"client/src/pages/CreateAssignment.tsx":{"content":"import { useState } from \"react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { nanoid } from \"nanoid\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Trash2, Save, ArrowLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst mcqOptionSchema = z.object({\n  id: z.string(),\n  text: z.string().min(1, \"Option text is required\"),\n  isCorrect: z.boolean(),\n});\n\nconst assignmentQuestionSchema = z.object({\n  id: z.string(),\n  type: z.enum([\"mcq\", \"coding\"]),\n  title: z.string().min(1, \"Question title is required\"),\n  description: z.string().min(1, \"Question description is required\"),\n  points: z.number().min(1, \"Points must be at least 1\"),\n  options: z.array(mcqOptionSchema).optional(),\n  problemStatement: z.string().optional(),\n  inputFormat: z.string().optional(),\n  outputFormat: z.string().optional(),\n  timeLimit: z.number().optional(),\n  memoryLimit: z.number().optional(),\n});\n\nconst createAssignmentSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  courseTag: z.string().min(1, \"Course tag is required\"),\n  deadline: z.string().optional(),\n  questions: z.array(assignmentQuestionSchema).min(1, \"At least one question is required\"),\n  maxAttempts: z.number().min(1, \"Max attempts must be at least 1\"),\n  isVisible: z.boolean(),\n  autoGrade: z.boolean(),\n});\n\ntype CreateAssignmentForm = z.infer<typeof createAssignmentSchema>;\n\nexport default function CreateAssignment() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateAssignmentForm>({\n    resolver: zodResolver(createAssignmentSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      courseTag: \"\",\n      deadline: \"\",\n      questions: [],\n      maxAttempts: 3,\n      isVisible: true,\n      autoGrade: true,\n    },\n  });\n\n  const { fields: questions, append: addQuestion, remove: removeQuestion } = useFieldArray({\n    control: form.control,\n    name: \"questions\",\n  });\n\n  const createAssignmentMutation = useMutation({\n    mutationFn: async (data: CreateAssignmentForm) => {\n      try {\n        console.log('[DEBUG] Submitting assignment data:', data);\n        \n        // First attempt\n        try {\n          const response = await apiRequest(\"/api/assignments\", \"POST\", data);\n          const responseData = await response.json();\n          \n          if (!response.ok) {\n            throw new Error(responseData.message || 'Failed to create assignment');\n          }\n          \n          return responseData;\n        } catch (error) {\n          console.error('[DEBUG] First attempt failed, retrying:', error);\n          \n          // Wait 1 second before retry\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Second attempt\n          const response = await apiRequest(\"/api/assignments\", \"POST\", data);\n          const responseData = await response.json();\n          \n          if (!response.ok) {\n            throw new Error(responseData.message || 'Failed to create assignment');\n          }\n          \n          return responseData;\n        }\n      } catch (error: any) {\n        console.error('[DEBUG] Assignment creation error:', error);\n        throw new Error(error.message || 'Failed to create assignment');\n      }\n    },\n    onSuccess: (data) => {\n      console.log('[DEBUG] Assignment created successfully:', data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/assignments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Assignment created successfully\",\n      });\n      navigate(\"/admin/assignments\");\n    },\n    onError: (error: any) => {\n      console.error('[DEBUG] Assignment creation error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addMCQQuestion = () => {\n    addQuestion({\n      id: nanoid(),\n      type: \"mcq\",\n      title: \"\",\n      description: \"\",\n      points: 1,\n      options: [\n        { id: nanoid(), text: \"\", isCorrect: false },\n        { id: nanoid(), text: \"\", isCorrect: false },\n      ],\n    });\n  };\n\n  const addCodingQuestion = () => {\n    addQuestion({\n      id: nanoid(),\n      type: \"coding\",\n      title: \"\",\n      description: \"\",\n      points: 5,\n      problemStatement: \"\",\n      inputFormat: \"\",\n      outputFormat: \"\",\n      timeLimit: 1000,\n      memoryLimit: 256,\n    });\n  };\n\n  const addOptionToQuestion = (questionIndex: number) => {\n    const currentOptions = form.getValues(`questions.${questionIndex}.options`) || [];\n    form.setValue(`questions.${questionIndex}.options`, [\n      ...currentOptions,\n      { id: nanoid(), text: \"\", isCorrect: false },\n    ]);\n  };\n\n  const removeOptionFromQuestion = (questionIndex: number, optionIndex: number) => {\n    const currentOptions = form.getValues(`questions.${questionIndex}.options`) || [];\n    if (currentOptions.length > 2) {\n      const newOptions = currentOptions.filter((_, i) => i !== optionIndex);\n      form.setValue(`questions.${questionIndex}.options`, newOptions);\n    }\n  };\n\n  const setCorrectOption = (questionIndex: number, optionIndex: number) => {\n    const currentOptions = form.getValues(`questions.${questionIndex}.options`) || [];\n    const newOptions = currentOptions.map((option, i) => ({\n      ...option,\n      isCorrect: i === optionIndex,\n    }));\n    form.setValue(`questions.${questionIndex}.options`, newOptions);\n  };\n\n  const onSubmit = async (data: CreateAssignmentForm) => {\n    try {\n      // Validate MCQ questions have at least one correct answer and valid options\n      for (const question of data.questions) {\n        if (question.type === \"mcq\") {\n          if (!question.options || question.options.length < 2) {\n            toast({\n              title: \"Validation Error\",\n              description: `MCQ question \"${question.title}\" must have at least 2 options`,\n              variant: \"destructive\",\n            });\n            return;\n          }\n\n          const hasCorrectAnswer = question.options.some(option => option.isCorrect);\n          if (!hasCorrectAnswer) {\n            toast({\n              title: \"Validation Error\",\n              description: `MCQ question \"${question.title}\" must have at least one correct answer`,\n              variant: \"destructive\",\n            });\n            return;\n          }\n\n          // Validate all options have text\n          const emptyOptions = question.options.filter(opt => !opt.text.trim());\n          if (emptyOptions.length > 0) {\n            toast({\n              title: \"Validation Error\",\n              description: `All options in question \"${question.title}\" must have text`,\n              variant: \"destructive\",\n            });\n            return;\n          }\n        }\n      }\n\n      // Format the data\n      const formattedData = {\n        ...data,\n        title: data.title.trim(),\n        description: data.description?.trim(),\n        courseTag: data.courseTag.trim(),\n        deadline: data.deadline ? new Date(data.deadline).toISOString() : undefined,\n        questions: data.questions.map(q => ({\n          ...q,\n          id: q.id || nanoid(),\n          title: q.title.trim(),\n          description: q.description.trim(),\n          points: Number(q.points) || 1,\n          options: q.type === 'mcq' ? q.options?.map(opt => ({\n            id: opt.id || nanoid(),\n            text: opt.text.trim(),\n            isCorrect: !!opt.isCorrect\n          })) : undefined,\n          timeLimit: q.timeLimit ? Number(q.timeLimit) : undefined,\n          memoryLimit: q.memoryLimit ? Number(q.memoryLimit) : undefined\n        })),\n        maxAttempts: Number(data.maxAttempts) || 3,\n        isVisible: !!data.isVisible,\n        autoGrade: !!data.autoGrade\n      };\n\n      console.log('[DEBUG] Submitting assignment data:', formattedData);\n      \n      // Show loading toast\n      toast({\n        title: \"Creating Assignment\",\n        description: \"Please wait while we create your assignment...\",\n      });\n      \n      await createAssignmentMutation.mutateAsync(formattedData);\n    } catch (error: any) {\n      console.error('[DEBUG] Form submission error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create assignment\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Button variant=\"outline\" onClick={() => navigate(\"/admin/assignments\")}>\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Assignments\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold\">Create Assignment</h1>\n          <p className=\"text-muted-foreground\">Create a new assignment with MCQ and coding questions</p>\n        </div>\n      </div>\n\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Basic Information</CardTitle>\n            <CardDescription>Set up the basic details for your assignment</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"title\">Assignment Title</Label>\n                <Input\n                  id=\"title\"\n                  {...form.register(\"title\")}\n                  placeholder=\"Enter assignment title\"\n                />\n                {form.formState.errors.title && (\n                  <p className=\"text-sm text-red-500 mt-1\">{form.formState.errors.title.message}</p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"courseTag\">Course Tag</Label>\n                <Select onValueChange={(value) => form.setValue(\"courseTag\", value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select course tag\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"JavaScript\">JavaScript</SelectItem>\n                    <SelectItem value=\"Python\">Python</SelectItem>\n                    <SelectItem value=\"DSA\">Data Structures & Algorithms</SelectItem>\n                    <SelectItem value=\"Java\">Java</SelectItem>\n                    <SelectItem value=\"C++\">C++</SelectItem>\n                    <SelectItem value=\"React\">React</SelectItem>\n                    <SelectItem value=\"Node.js\">Node.js</SelectItem>\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.courseTag && (\n                  <p className=\"text-sm text-red-500 mt-1\">{form.formState.errors.courseTag.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description (Optional)</Label>\n              <Textarea\n                id=\"description\"\n                {...form.register(\"description\")}\n                placeholder=\"Enter assignment description\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"deadline\">Deadline (Optional)</Label>\n                <Input\n                  id=\"deadline\"\n                  type=\"datetime-local\"\n                  {...form.register(\"deadline\")}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"maxAttempts\">Max Attempts</Label>\n                <Input\n                  id=\"maxAttempts\"\n                  type=\"number\"\n                  min=\"1\"\n                  {...form.register(\"maxAttempts\", { valueAsNumber: true })}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label>Settings</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"isVisible\"\n                    checked={form.watch(\"isVisible\")}\n                    onCheckedChange={(checked) => form.setValue(\"isVisible\", !!checked)}\n                  />\n                  <Label htmlFor=\"isVisible\">Visible to students</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"autoGrade\"\n                    checked={form.watch(\"autoGrade\")}\n                    onCheckedChange={(checked) => form.setValue(\"autoGrade\", !!checked)}\n                  />\n                  <Label htmlFor=\"autoGrade\">Auto-grade submissions</Label>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Questions */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <CardTitle>Questions</CardTitle>\n                <CardDescription>Add MCQ and coding questions to your assignment</CardDescription>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={addMCQQuestion}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add MCQ\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={addCodingQuestion}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Coding\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {questions.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No questions added yet. Click \"Add MCQ\" or \"Add Coding\" to start.\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {questions.map((question, questionIndex) => (\n                  <Card key={question.id} className=\"border-2\">\n                    <CardHeader>\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={question.type === \"mcq\" ? \"default\" : \"secondary\"}>\n                            {question.type === \"mcq\" ? \"Multiple Choice\" : \"Coding Problem\"}\n                          </Badge>\n                          <span className=\"text-sm text-muted-foreground\">Question {questionIndex + 1}</span>\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => removeQuestion(questionIndex)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"md:col-span-2\">\n                          <Label>Question Title</Label>\n                          <Input\n                            {...form.register(`questions.${questionIndex}.title`)}\n                            placeholder=\"Enter question title\"\n                          />\n                        </div>\n                        <div>\n                          <Label>Points</Label>\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            {...form.register(`questions.${questionIndex}.points`, { valueAsNumber: true })}\n                          />\n                        </div>\n                      </div>\n\n                      <div>\n                        <Label>Question Description</Label>\n                        <Textarea\n                          {...form.register(`questions.${questionIndex}.description`)}\n                          placeholder=\"Enter question description\"\n                          rows={3}\n                        />\n                      </div>\n\n                      {question.type === \"mcq\" && (\n                        <div>\n                          <div className=\"flex justify-between items-center mb-2\">\n                            <Label>Answer Options</Label>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => addOptionToQuestion(questionIndex)}\n                            >\n                              <Plus className=\"h-4 w-4 mr-1\" />\n                              Add Option\n                            </Button>\n                          </div>\n                          <div className=\"space-y-2\">\n                            {question.options?.map((option, optionIndex) => (\n                              <div key={option.id} className=\"flex items-center gap-2\">\n                                <Checkbox\n                                  checked={option.isCorrect}\n                                  onCheckedChange={() => setCorrectOption(questionIndex, optionIndex)}\n                                />\n                                <Input\n                                  {...form.register(`questions.${questionIndex}.options.${optionIndex}.text`)}\n                                  placeholder={`Option ${optionIndex + 1}`}\n                                  className=\"flex-1\"\n                                />\n                                {question.options && question.options.length > 2 && (\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"destructive\"\n                                    size=\"sm\"\n                                    onClick={() => removeOptionFromQuestion(questionIndex, optionIndex)}\n                                  >\n                                    <Trash2 className=\"h-4 w-4\" />\n                                  </Button>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {question.type === \"coding\" && (\n                        <div className=\"space-y-4\">\n                          <div>\n                            <Label>Problem Statement</Label>\n                            <Textarea\n                              {...form.register(`questions.${questionIndex}.problemStatement`)}\n                              placeholder=\"Describe the coding problem in detail\"\n                              rows={4}\n                            />\n                          </div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <div>\n                              <Label>Input Format</Label>\n                              <Textarea\n                                {...form.register(`questions.${questionIndex}.inputFormat`)}\n                                placeholder=\"Describe the input format\"\n                                rows={2}\n                              />\n                            </div>\n                            <div>\n                              <Label>Output Format</Label>\n                              <Textarea\n                                {...form.register(`questions.${questionIndex}.outputFormat`)}\n                                placeholder=\"Describe the expected output format\"\n                                rows={2}\n                              />\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <div>\n                              <Label>Time Limit (ms)</Label>\n                              <Input\n                                type=\"number\"\n                                {...form.register(`questions.${questionIndex}.timeLimit`, { valueAsNumber: true })}\n                                placeholder=\"1000\"\n                              />\n                            </div>\n                            <div>\n                              <Label>Memory Limit (MB)</Label>\n                              <Input\n                                type=\"number\"\n                                {...form.register(`questions.${questionIndex}.memoryLimit`, { valueAsNumber: true })}\n                                placeholder=\"256\"\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Submit */}\n        <div className=\"flex justify-end gap-2\">\n          <Button type=\"button\" variant=\"outline\" onClick={() => navigate(\"/admin/assignments\")}>\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            disabled={createAssignmentMutation.isPending || questions.length === 0}\n            className=\"flex items-center gap-2\"\n          >\n            <Save className=\"h-4 w-4\" />\n            {createAssignmentMutation.isPending ? \"Creating...\" : \"Create Assignment\"}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}","size_bytes":22350},"execution-system/docker/c/execute.sh":{"content":"#!/bin/bash\n\n# Set strict error handling\nset -euo pipefail\n\n# Constants\nMEMORY_LIMIT=134217728  # 128MB in bytes\nTIMEOUT=\"5\"\nCOMPILER=\"gcc\"  # Use gcc for C\nDEFAULT_FILE=\"/tmp/code.c\"\n\n# Get source file from arguments or use default\nSOURCE_FILE=\"${1:-$DEFAULT_FILE}\"\n\nif [ ! -f \"$SOURCE_FILE\" ]; then\n    echo \"Error: Source file not found at $SOURCE_FILE\" >&2\n    exit 1\nfi\n\nOUTPUT_FILE=\"${SOURCE_FILE%.*}\"\nSTART_TIME=$(date +%s%N)\nSTART_MEMORY=$(ps -o rss= -p $$)\n\n# Compile with security flags\necho \"Compiling code...\" >&2\nif ! $COMPILER \\\n    -O2 \\\n    -Wall \\\n    -Wextra \\\n    -Werror \\\n    -Wshadow \\\n    -Wformat=2 \\\n    -Wfloat-equal \\\n    -Wconversion \\\n    -D_FORTIFY_SOURCE=2 \\\n    -fstack-protector \\\n    -fno-plt \\\n    -o \"${OUTPUT_FILE}\" \\\n    \"${SOURCE_FILE}\" 2>&1\nthen\n    echo \"Compilation failed\" >&2\n    exit 1\nfi\n\n# Execute with resource limits\necho \"Executing code...\" >&2\nulimit -v $MEMORY_LIMIT\ntimeout \"${TIMEOUT}s\" \\\n    /usr/bin/time -f \"%M\" \\\n    \"${OUTPUT_FILE}\" 2>&1\n\nEXIT_CODE=$?\n\n# Calculate execution stats\nEND_TIME=$(date +%s%N)\nEND_MEMORY=$(ps -o rss= -p $$)\nRUNTIME_MS=$(( (END_TIME - START_TIME) / 1000000 ))\nMEMORY_BYTES=$(( (END_MEMORY - START_MEMORY) * 1024 ))\n\n# Handle different exit codes\ncase $EXIT_CODE in\n    0)\n        # Successful execution\n        echo -e \"\\n__EXECUTION_STATS__:{\\\"runtime_ms\\\":$RUNTIME_MS,\\\"memory_bytes\\\":$MEMORY_BYTES,\\\"success\\\":true}\" >&2\n        ;;\n    124)\n        # Timeout\n        echo \"Error: Code execution timed out\" >&2\n        exit 1\n        ;;\n    137)\n        # Memory limit exceeded\n        echo \"Error: Memory limit exceeded\" >&2\n        exit 1\n        ;;\n    *)\n        # Other error\n        echo \"Error: Execution failed with code $EXIT_CODE\" >&2\n        exit 1\n        ;;\nesac ","size_bytes":1764},"client/src/pages/AdminAssignments.tsx":{"content":"// @ts-nocheck\n\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, Eye, Users, BarChart3 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\n\ninterface Assignment {\n  id: number;\n  title: string;\n  description?: string;\n  courseTag: string;\n  deadline?: string;\n  questions: any[];\n  maxAttempts: number;\n  isVisible: boolean;\n  autoGrade: boolean;\n  createdBy?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function AdminAssignments() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [deleteTarget, setDeleteTarget] = useState<{ id: number; title: string } | null>(null);\n\n  const { data: assignments, isLoading } = useQuery<Assignment[]>({\n    queryKey: [\"/api/admin/assignments\"],\n  });\n\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(`/api/assignments/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/assignments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Assignment deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (id: number, title: string) => {\n    setDeleteTarget({ id, title });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Loading assignments...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Assignment Management</h1>\n          <p className=\"text-muted-foreground\">Create and manage assignments for students</p>\n        </div>\n        <Button onClick={() => navigate(\"/admin/assignments/create\")} className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          Create Assignment\n        </Button>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {!assignments || assignments.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center h-64\">\n              <div className=\"text-muted-foreground mb-4\">No assignments created yet</div>\n              <Button onClick={() => navigate(\"/admin/assignments/create\")} className=\"flex items-center gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Create Your First Assignment\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          assignments.map((assignment: Assignment) => (\n            <Card key={assignment.id}>\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      {assignment.title}\n                      <Badge variant={assignment.isVisible ? \"default\" : \"secondary\"}>\n                        {assignment.isVisible ? \"Visible\" : \"Hidden\"}\n                      </Badge>\n                    </CardTitle>\n                    <CardDescription>{assignment.description}</CardDescription>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => navigate(`/admin/assignments/${assignment.id}/analytics`)}\n                    >\n                      <BarChart3 className=\"h-4 w-4 mr-1\" />\n                      Analytics\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => navigate(`/admin/assignments/${assignment.id}/submissions`)}\n                    >\n                      <Users className=\"h-4 w-4 mr-1\" />\n                      Submissions\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => navigate(`/assignments/${assignment.id}`)}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      Preview\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => navigate(`/admin/assignments/${assignment.id}/edit`)}\n                    >\n                      <Edit className=\"h-4 w-4 mr-1\" />\n                      Edit\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(assignment.id, assignment.title)}\n                      disabled={deleteAssignmentMutation.isPending}\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                  <div>\n                    <span className=\"font-medium\">Course Tag:</span>\n                    <Badge variant=\"outline\" className=\"ml-2\">{assignment.courseTag}</Badge>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Questions:</span>\n                    <span className=\"ml-2\">{assignment.questions.length}</span>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Max Attempts:</span>\n                    <span className=\"ml-2\">{assignment.maxAttempts}</span>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Deadline:</span>\n                    <span className=\"ml-2\">\n                      {assignment.deadline ? formatDate(assignment.deadline) : \"No deadline\"}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"mt-4 text-xs text-muted-foreground\">\n                  Created: {formatDate(assignment.createdAt)} • \n                  Updated: {formatDate(assignment.updatedAt)}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Delete confirmation dialog */}\n      <AlertDialog open={!!deleteTarget} onOpenChange={(open) => { if (!open) setDeleteTarget(null); }}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete assignment?</AlertDialogTitle>\n            <AlertDialogDescription>\n              {deleteTarget ? `Are you sure you want to delete \"${deleteTarget.title}\"? This action cannot be undone.` : ''}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel disabled={deleteAssignmentMutation.isPending}>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={async () => {\n                if (!deleteTarget) return;\n                await deleteAssignmentMutation.mutateAsync(deleteTarget.id);\n                setDeleteTarget(null);\n              }}\n              className=\"bg-red-500 hover:bg-red-600\"\n              disabled={deleteAssignmentMutation.isPending}\n            >\n              {deleteAssignmentMutation.isPending ? 'Deleting...' : 'Delete'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":8488},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"server/storage.ts":{"content":"import { ObjectId, Collection, Filter, UpdateFilter } from 'mongodb';\nimport { getDb, connectToMongoDB } from './db';\nimport { Submission } from './models/Submission';\n\n// Problem Instance interface for isolated problem management\nexport interface ProblemInstance {\n  id?: string; // Unique instance ID\n  originalProblemId: number; // Use consistent numeric problem ID\n  title?: string;\n  description?: string;\n  difficulty?: \"easy\" | \"medium\" | \"hard\";\n  customTestCases?: any[];\n  customExamples?: any[];\n  customStarterCode?: any;\n  timeLimit?: number;\n  memoryLimit?: number;\n  hints?: string[];\n  constraints?: string;\n  inputFormat?: string;\n  outputFormat?: string;\n  notes?: string;\n  order: number;\n  isCustomized: boolean;\n  lastModified: Date;\n  modifiedBy?: string;\n}\n\n// MongoDB document interfaces\nexport interface User {\n  _id?: ObjectId;\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  role: string;\n  password?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Problem {\n  _id?: ObjectId;\n  id: number;\n  title: string;\n  description: string;\n  difficulty: string;\n  tags?: string[];\n  constraints?: string;\n  examples?: any;\n  testCases?: any;\n  timeLimit?: number;\n  memoryLimit?: number;\n  starterCode?: any;\n  isPublic: boolean;\n  createdBy?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Submission {\n  _id?: ObjectId;\n  id: number;\n  problemId: number;\n  problemInstanceId?: string; // Track specific problem instance\n  problemSetId?: string; // Track which problem set this submission belongs to\n  userId: string;\n  code: string;\n  language: string;\n  status: string;\n  runtime?: number;\n  memory?: number;\n  score?: string;\n  feedback?: string;\n  submittedAt: Date;\n}\n\nexport interface Course {\n  _id?: ObjectId;\n  id: number;\n  title: string;\n  description?: string;\n  category?: string;\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n  estimatedHours?: number;\n  prerequisites?: string[];\n  learningObjectives?: string[];\n  problems?: number[];\n  modules?: number[];\n  enrolledUsers?: string[];\n  isPublic: boolean;\n  enableMarkComplete?: boolean;\n  createdBy?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  tags?: string[];\n  rating?: number;\n  enrollmentCount?: number;\n  completionRate?: number;\n}\n\nexport interface CourseModule {\n  _id?: ObjectId;\n  id: number;\n  courseId: number;\n  title: string;\n  description: string;\n  order: number;\n  textContent?: string;\n  videoUrl?: string;\n  codeExample?: string;\n  language?: string;\n  expectedOutput?: string;\n  duration?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface CourseEnrollment {\n  _id?: ObjectId;\n  id: number;\n  courseId: number;\n  userId: string;\n  completedModules: number[];\n  progress: number;\n  enrolledAt: Date;\n  lastAccessedAt: Date;\n  enrolledBy?: string;\n  enrollmentType?: string; // Optional enrollment type\n}\n\nexport interface ProblemSetEnrollment {\n  _id?: ObjectId;\n  id: number;\n  problemSetId: string;\n  userId: string;\n  enrolledAt: Date;\n  progress: number;\n  completedProblems: number[];\n  totalSubmissions: number;\n  correctSubmissions: number;\n  enrollmentType?: string; // Optional enrollment type\n  user?: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n  };\n}\n\nexport interface ModuleProgress {\n  _id?: ObjectId;\n  id: number;\n  moduleId: number;\n  userId: string;\n  courseId: number;\n  isCompleted: boolean;\n  timeSpent: number;\n  completedAt?: Date;\n  notes?: string;\n  bookmarked: boolean;\n}\n\n// Simplified interface for essential operations\nexport interface ProblemSet {\n  _id?: ObjectId;\n  id: string;\n  title: string;\n  description?: string;\n  difficulty: string;\n  category?: string;\n  tags?: string[];\n  problemIds: string[];\n  problemInstances?: ProblemInstance[];\n  isPublic: boolean;\n  estimatedTime?: number;\n  totalProblems: number;\n  createdBy: string;\n  createdAt: Date;\n  updatedAt: Date;\n  // Assignment-specific fields\n  deadline?: Date;\n  maxAttempts?: number;\n  autoGrade?: boolean;\n  questions?: any[];\n  // New enrollment system\n  participants?: string[];\n  problems?: any[]; // Custom problems array\n}\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Partial<User>): Promise<User>;\n  \n  // Problem operations\n  getProblems(): Promise<Problem[]>;\n  getProblem(id: number): Promise<Problem | undefined>;\n  createProblem(problem: Partial<Problem>): Promise<Problem>;\n  updateProblem(id: number, problemData: Partial<Problem>): Promise<Problem | null>;\n  deleteProblem(id: number): Promise<void>;\n  \n  // Submission operations\n  getSubmissions(userId: string, problemId?: number): Promise<Submission[]>;\n  createSubmission(submission: Partial<Submission>): Promise<Submission>;\n  \n  // Course operations\n  getCourses(): Promise<Course[]>;\n  getCourse(id: number): Promise<Course | undefined>;\n  createCourse(course: Partial<Course>): Promise<Course>;\n  updateCourse(id: number, courseData: Partial<Course>): Promise<Course | null>;\n  deleteCourse(id: number): Promise<void>;\n  \n  // Course module operations\n  getCourseModules(courseId: number): Promise<CourseModule[]>;\n  getCourseModule(id: number): Promise<CourseModule | undefined>;\n  createCourseModule(module: Partial<CourseModule>): Promise<CourseModule>;\n  updateCourseModule(id: number, moduleData: Partial<CourseModule>): Promise<CourseModule | null>;\n  deleteCourseModule(id: number): Promise<void>;\n  \n  // Course enrollment operations\n  getCourseEnrollments(courseId?: number, userId?: string): Promise<CourseEnrollment[]>;\n  enrollUserInCourse(userId: string, courseId: number): Promise<CourseEnrollment>;\n  getUserCourseProgress(userId: string, courseId: number): Promise<ModuleProgress[]>;\n  markModuleComplete(userId: string, moduleId: number, courseId: number, timeSpent: number, notes?: string): Promise<void>;\n  bookmarkModule(userId: string, moduleId: number): Promise<void>;\n  // New: reset user course progress\n  resetUserCourseProgress(userId: string, courseId: number): Promise<void>;\n  \n  // Problem Set operations\n  getProblemSets(): Promise<ProblemSet[]>;\n  getProblemSet(id: string): Promise<ProblemSet | undefined>;\n  createProblemSet(problemSet: Partial<ProblemSet>): Promise<ProblemSet>;\n  updateProblemSet(id: string, problemSetData: Partial<ProblemSet>): Promise<ProblemSet | null>;\n  deleteProblemSet(id: string): Promise<void>;\n  \n  // Problem Set enrollment operations\n  getProblemSetEnrollments(problemSetId: string): Promise<ProblemSetEnrollment[]>;\n  enrollUserInProblemSet(userId: string, problemSetId: string): Promise<ProblemSetEnrollment>;\n  updateProblemSetEnrollment(id: number, enrollmentData: Partial<ProblemSetEnrollment>): Promise<ProblemSetEnrollment | null>;\n  deleteProblemSetEnrollment(id: number): Promise<void>;\n  deleteProblemSetEnrollmentByUser(userId: string, problemSetId: string): Promise<void>;\n  getUserProblemSetEnrollments(userId: string): Promise<ProblemSetEnrollment[]>;\n  \n  // Analytics operations\n  getCourseStats(): Promise<any>;\n  getAdminAnalytics(): Promise<any>;\n  getAllSubmissions(): Promise<Submission[]>;\n  getSubmissionStats(): Promise<any>;\n  getProblemAnalytics(problemId: number): Promise<any>;\n  getUserProblemAnalytics(userId: string, problemId: number): Promise<any>;\n}\n\nexport class MemStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const db = getDb();\n    try {\n      const user = await db.collection('users').findOne(\n        { id: id },\n        { projection: { password: 0 } } // Don't return password\n      );\n      return user as User || undefined;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      return undefined;\n    }\n  }\n\n    async updateUserRole(userId: string, role: string): Promise<User | null> {\n      const db = getDb();\n      try {\n        // Support finding by either Mongo _id or legacy id field\n        let match: any = { _id: new ObjectId(userId) };\n        try {\n          match = { _id: new ObjectId(userId) };\n        } catch {\n          match = { id: userId };\n        }\n\n        const update = { $set: { role, updatedAt: new Date() } };\n\n        const result = await db.collection('users').findOneAndUpdate(\n          match,\n          update,\n          { returnDocument: 'after' }\n        );\n\n        return (result as any)?.value || null;\n      } catch (error) {\n        console.error('Error updating user role:', error);\n        return null;\n      }\n    }\n\n    async deleteUser(userId: string): Promise<boolean> {\n      const db = getDb();\n      try {\n        // Support deleting by either Mongo _id or legacy id field\n        let deleteResult = await db.collection('users').deleteOne({ _id: new ObjectId(userId) });\n        if (deleteResult.deletedCount === 0) {\n          deleteResult = await db.collection('users').deleteOne({ id: userId });\n        }\n        return deleteResult.deletedCount > 0;\n      } catch (error) {\n        console.error('Error deleting user:', error);\n        return false;\n      }\n    }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const db = getDb();\n    try {\n      const user = await db.collection('users').findOne({ email: email });\n      return user as User || undefined;\n    } catch (error) {\n      console.error('Error fetching user by email:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(userData: Partial<User>): Promise<User> {\n    const db = getDb();\n    const newUser = {\n      ...userData,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    try {\n      const result = await db.collection('users').insertOne(newUser);\n      return { ...newUser, _id: result.insertedId } as User;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw new Error('Failed to create user');\n    }\n  }\n\n  // Problem operations\n  async getProblems(): Promise<Problem[]> {\n    const db = getDb();\n    try {\n      const problems = await db.collection('problems')\n        .find({ isPublic: true })\n        .sort({ id: 1 })\n        .toArray();\n      \n      if (problems.length === 0) {\n        // Seed the database with fallback problems\n        const fallbackProblems = this.getFallbackProblems();\n        await db.collection('problems').insertMany(fallbackProblems);\n        console.log('Seeded database with', fallbackProblems.length, 'problems');\n        return fallbackProblems;\n      }\n      \n      return problems as Problem[];\n    } catch (error) {\n      console.error('Error fetching problems:', error);\n      return this.getFallbackProblems();\n    }\n  }\n\n  private getFallbackProblems(): Problem[] {\n    return [\n      {\n        id: 1,\n        title: \"Two Sum\",\n        description: \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\",\n        difficulty: \"easy\",\n        tags: [\"array\", \"hash-table\"],\n        timeLimit: 10000,\n        memoryLimit: 1024,\n        examples: [\n          {\n            input: \"nums = [2,7,11,15], target = 9\",\n            output: \"[0,1]\",\n            explanation: \"Because nums[0] + nums[1] == 9, we return [0, 1].\"\n          }\n        ],\n        testCases: [\n          {\n            input: \"nums = [2,7,11,15], target = 9\",\n            expectedOutput: \"[0,1]\",\n            isHidden: false\n          }\n        ],\n        starterCode: {\n          python: \"def twoSum(nums, target):\\n    # Your code here\\n    pass\",\n          javascript: \"function twoSum(nums, target) {\\n    // Your code here\\n}\",\n          java: \"public int[] twoSum(int[] nums, int target) {\\n    // Your code here\\n    return new int[]{};\\n}\",\n          cpp: \"vector<int> twoSum(vector<int>& nums, int target) {\\n    // Your code here\\n    return {};\\n}\"\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isPublic: true\n      },\n      {\n        id: 2,\n        title: \"Best Time to Buy and Sell Stock\",\n        description: \"You are given an array prices where prices[i] is the price of a given stock on the ith day.\",\n        difficulty: \"easy\",\n        tags: [\"array\", \"dynamic-programming\"],\n        timeLimit: 10000,\n        memoryLimit: 1024,\n        examples: [\n          {\n            input: \"prices = [7,1,5,3,6,4]\",\n            output: \"5\",\n            explanation: \"Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\"\n          }\n        ],\n        testCases: [\n          {\n            input: \"prices = [7,1,5,3,6,4]\",\n            expectedOutput: \"5\",\n            isHidden: false\n          }\n        ],\n        starterCode: {\n          python: \"def maxProfit(prices):\\n    # Your code here\\n    pass\",\n          javascript: \"function maxProfit(prices) {\\n    // Your code here\\n}\",\n          java: \"public int maxProfit(int[] prices) {\\n    // Your code here\\n    return 0;\\n}\",\n          cpp: \"int maxProfit(vector<int>& prices) {\\n    // Your code here\\n    return 0;\\n}\"\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isPublic: true\n      },\n      {\n        id: 3,\n        title: \"Contains Duplicate\",\n        description: \"Given an integer array nums, return true if any value appears at least twice in the array.\",\n        difficulty: \"easy\",\n        tags: [\"array\", \"hash-table\"],\n        timeLimit: 10000,\n        memoryLimit: 256,\n        examples: [\n          {\n            input: \"nums = [1,2,3,1]\",\n            output: \"true\",\n            explanation: \"The element 1 occurs at indices 0 and 3.\"\n          }\n        ],\n        testCases: [\n          {\n            input: \"nums = [1,2,3,1]\",\n            expectedOutput: \"true\",\n            isHidden: false\n          }\n        ],\n        starterCode: {\n          python: \"def containsDuplicate(nums):\\n    # Your code here\\n    pass\",\n          javascript: \"function containsDuplicate(nums) {\\n    // Your code here\\n}\",\n          java: \"public boolean containsDuplicate(int[] nums) {\\n    // Your code here\\n    return false;\\n}\",\n          cpp: \"bool containsDuplicate(vector<int>& nums) {\\n    // Your code here\\n    return false;\\n}\"\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isPublic: true\n      },\n      {\n        id: 4,\n        title: \"Valid Palindrome\",\n        description: \"A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward.\",\n        difficulty: \"easy\",\n        tags: [\"two-pointers\", \"string\"],\n        timeLimit: 10000,\n        memoryLimit: 1024,\n        examples: [\n          {\n            input: \"s = \\\"A man, a plan, a canal: Panama\\\"\",\n            output: \"true\",\n            explanation: \"\\\"amanaplanacanalpanama\\\" is a palindrome.\"\n          }\n        ],\n        testCases: [\n          {\n            input: \"s = \\\"A man, a plan, a canal: Panama\\\"\",\n            expectedOutput: \"true\",\n            isHidden: false\n          }\n        ],\n        starterCode: {\n          python: \"def isPalindrome(s):\\n    # Your code here\\n    pass\",\n          javascript: \"function isPalindrome(s) {\\n    // Your code here\\n}\",\n          java: \"public boolean isPalindrome(String s) {\\n    // Your code here\\n    return false;\\n}\",\n          cpp: \"bool isPalindrome(string s) {\\n    // Your code here\\n    return false;\\n}\"\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isPublic: true\n      },\n      {\n        id: 5,\n        title: \"Container With Most Water\",\n        description: \"You are given an integer array height of length n. Find two lines that together with the x-axis form a container that contains the most water.\",\n        difficulty: \"medium\",\n        tags: [\"array\", \"two-pointers\"],\n        timeLimit: 10000,\n        memoryLimit: 1024,\n        examples: [\n          {\n            input: \"height = [1,8,6,2,5,4,8,3,7]\",\n            output: \"49\",\n            explanation: \"The max area of water the container can contain is 49.\"\n          }\n        ],\n        testCases: [\n          {\n            input: \"height = [1,8,6,2,5,4,8,3,7]\",\n            expectedOutput: \"49\",\n            isHidden: false\n          }\n        ],\n        starterCode: {\n          python: \"def maxArea(height):\\n    # Your code here\\n    pass\",\n          javascript: \"function maxArea(height) {\\n    // Your code here\\n}\",\n          java: \"public int maxArea(int[] height) {\\n    // Your code here\\n    return 0;\\n}\",\n          cpp: \"int maxArea(vector<int>& height) {\\n    // Your code here\\n    return 0;\\n}\"\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        isPublic: true\n      }\n    ];\n  }\n\n\n\n  async getProblem(id: number): Promise<Problem | undefined> {\n    const db = getDb();\n    try {\n      const problem = await db.collection('problems').findOne({ id: id });\n      return problem as Problem || undefined;\n    } catch (error) {\n      console.error('Error fetching problem:', error);\n      return undefined;\n    }\n  }\n\n  async createProblem(problemData: Partial<Problem>): Promise<Problem> {\n    const db = getDb();\n    const newProblem = {\n      id: Date.now(), // Simple ID generation\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...problemData,\n    };\n    \n    try {\n      const result = await db.collection('problems').insertOne(newProblem);\n      return { ...newProblem, _id: result.insertedId } as Problem;\n    } catch (error) {\n      console.error('Error creating problem:', error);\n      throw new Error('Failed to create problem');\n    }\n  }\n\n  // Submission operations\n  async getSubmissions(userId: string, problemId?: number): Promise<Submission[]> {\n    const db = getDb();\n    try {\n      const filter: Filter<any> = { userId: userId };\n      if (problemId) {\n        filter.problemId = problemId;\n      }\n      \n      const submissions = await db.collection('submissions')\n        .find(filter)\n        .sort({ submittedAt: -1 })\n        .toArray();\n      return submissions as Submission[];\n    } catch (error) {\n      console.error('Error fetching submissions:', error);\n      return [];\n    }\n  }\n\n  async createSubmission(submissionData: Partial<Submission>): Promise<Submission> {\n    const db = getDb();\n    const newSubmission = {\n      id: Date.now(), // Simple ID generation\n      ...submissionData,\n      submittedAt: new Date(),\n    };\n    \n    try {\n      const result = await db.collection('submissions').insertOne(newSubmission);\n      return { ...newSubmission, _id: result.insertedId } as Submission;\n    } catch (error) {\n      console.error('Error creating submission:', error);\n      throw new Error('Failed to create submission');\n    }\n  }\n\n  // Course operations\n  async getCourses(): Promise<Course[]> {\n    try {\n      const db = await connectToMongoDB();\n      const courses = await db.collection('courses')\n        .find({})\n        .sort({ id: 1 })\n        .toArray();\n      return courses as Course[];\n    } catch (error) {\n      console.error('Error fetching courses:', error);\n      return [];\n    }\n  }\n\n  // New method to get courses visible to specific user based on enrollment\n  async getCoursesForUser(userId: string, isAdmin: boolean = false): Promise<Course[]> {\n    try {\n      const db = await connectToMongoDB();\n      \n      if (isAdmin) {\n        // Admin can see all courses (both public and private)\n        const courses = await db.collection('courses')\n          .aggregate([\n            { $sort: { id: 1 } },\n            {\n              $lookup: {\n                from: 'courseModules',\n                localField: 'id',\n                foreignField: 'courseId',\n                as: 'modules'\n              }\n            },\n            {\n              $lookup: {\n                from: 'courseEnrollments',\n                localField: 'id',\n                foreignField: 'courseId',\n                as: 'enrollments'\n              }\n            },\n            {\n              $addFields: {\n                moduleCount: { $size: { $ifNull: ['$modules', []] } },\n                enrollmentCount: { $size: { $ifNull: ['$enrollments', []] } },\n                estimatedHours: { $ifNull: ['$estimatedHours', { $sum: { $map: { input: { $ifNull: ['$modules', []] }, as: 'm', in: { $ifNull: ['$$m.estimatedHours', 0] } } } }] }\n              }\n            },\n            { $project: { modules: 0, enrollments: 0 } }\n          ])\n          .toArray();\n        return courses as Course[];\n      }\n      \n      // For regular users, show ONLY enrolled PUBLIC courses\n      // Private courses remain hidden even from enrolled users\n      // Unenrolled users should not see any courses at all\n      \n      // Convert string userId to ObjectId for database lookup\n      const userObjectId = new ObjectId(userId);\n      \n      // Get user's enrollments\n      const enrollments = await db.collection('courseEnrollments')\n        .find({ userId: userObjectId })\n        .toArray();\n      \n      const enrolledCourseIds = enrollments.map((e: any) => e.courseId);\n      \n      // If user has no enrollments, return empty array\n      if (enrolledCourseIds.length === 0) {\n        return [];\n      }\n      \n      // Show only enrolled courses that are PUBLIC (private courses remain hidden)\n      const courses = await db.collection('courses')\n        .aggregate([\n          { $match: { id: { $in: enrolledCourseIds }, isPublic: true } },\n          { $sort: { id: 1 } },\n          {\n            $lookup: {\n              from: 'courseModules',\n              localField: 'id',\n              foreignField: 'courseId',\n              as: 'modules'\n            }\n          },\n          {\n            $lookup: {\n              from: 'courseEnrollments',\n              localField: 'id',\n              foreignField: 'courseId',\n              as: 'enrollments'\n            }\n          },\n          {\n            $addFields: {\n              moduleCount: { $size: { $ifNull: ['$modules', []] } },\n              enrollmentCount: { $size: { $ifNull: ['$enrollments', []] } },\n              estimatedHours: { $ifNull: ['$estimatedHours', { $sum: { $map: { input: { $ifNull: ['$modules', []] }, as: 'm', in: { $ifNull: ['$$m.estimatedHours', 0] } } } }] }\n            }\n          },\n          { $project: { modules: 0, enrollments: 0 } }\n        ])\n        .toArray();\n          \n      return courses as Course[];\n    } catch (error) {\n      console.error('Error fetching courses for user:', error);\n      return [];\n    }\n  }\n\n  async createCourse(courseData: Partial<Course>): Promise<Course> {\n    try {\n      const db = await connectToMongoDB();\n      const courseId = Date.now();\n      \n      // Extract modules from course data\n      const { modules, ...courseOnlyData } = courseData as any;\n      \n      const newCourse = {\n        id: courseId,\n        ...courseOnlyData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      \n      console.log('Creating course with data:', newCourse);\n      const result = await db.collection('courses').insertOne(newCourse);\n      console.log('Course created successfully with ID:', result.insertedId);\n      \n      // Create separate module documents if modules exist\n      if (modules && modules.length > 0) {\n        console.log('Creating course modules:', modules);\n        \n        // Generate unique IDs using the same logic as createCourseModule\n        const lastModule = await db.collection('coursemodules').findOne({}, { sort: { id: -1 } });\n        let nextModuleId = (lastModule?.id || 0) + 1;\n        \n        const moduleDocuments = modules.map((module: any, index: number) => ({\n          id: nextModuleId++, // Use consistent ID generation\n          courseId: courseId,\n          title: module.title,\n          description: module.description,\n          order: module.order || index + 1,\n          textContent: module.textContent || '',\n          videoUrl: module.videoUrl || '',\n          codeExample: module.codeExample || '',\n          language: module.language || '',\n          expectedOutput: module.expectedOutput || '',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        }));\n        \n        await db.collection('coursemodules').insertMany(moduleDocuments);\n        console.log('Course modules created successfully');\n      }\n      \n      return { ...newCourse, _id: result.insertedId } as Course;\n    } catch (error) {\n      console.error('Error creating course:', error);\n      throw new Error('Failed to create course');\n    }\n  }\n\n  async getCourse(id: number): Promise<Course | undefined> {\n    try {\n      const db = await connectToMongoDB();\n      const course = await db.collection('courses').findOne({ id: id });\n      return course as Course | undefined;\n    } catch (error) {\n      console.error('Error fetching course:', error);\n      return undefined;\n    }\n  }\n\n  async getCourseModules(courseId: number): Promise<CourseModule[]> {\n    try {\n      const db = await connectToMongoDB();\n      const modules = await db.collection('coursemodules')\n        .find({ courseId: courseId })\n        .sort({ order: 1 })\n        .toArray();\n      return modules as CourseModule[];\n    } catch (error) {\n      console.error('Error fetching course modules:', error);\n      return [];\n    }\n  }\n\n  // async getCourseEnrollments(courseId?: number, userId?: string): Promise<CourseEnrollment[]> {\n  //   try {\n  //     const db = getDb();\n  //     let query: any = {};\n      \n  //     if (courseId !== undefined) {\n  //       query.courseId = courseId;\n  //     }\n  //     if (userId !== undefined) {\n  //       query.userId = userId;\n  //     }\n      \n  //     console.log('[DEBUG] getCourseEnrollments query:', query);\n\n  //     const enrollments = await db.collection('courseEnrollments')\n  //     .find(query)\n  //     .toArray();\n  //     console.log('[DEBUG] Found enrollments:', enrollments);\n      \n  //     return enrollments as CourseEnrollment[];\n  //   } catch (error) {\n  //     console.error('Error fetching course enrollments:', error);\n  //     return [];\n  //   }\n  // }\n\n\n  async getCourseEnrollments(courseId?: number, userId?: string): Promise<CourseEnrollment[]> {\n\n    try {\n      const db = getDb();\n      let query: any = {};\n  \n      if (courseId !== undefined) {\n        query.courseId = courseId;\n      }\n  \n      if (userId !== undefined) {\n        // Convert string userId to ObjectId for database lookup\n        query.userId = new ObjectId(userId);\n      }\n  \n      console.log('[DEBUG] getCourseEnrollments query:', query);\n  \n      const populatedEnrollments = await db.collection('courseEnrollments').aggregate([\n        // Match by courseId and/or userId (string match)\n        { $match: query },\n  \n                // Lookup user by ObjectId (userId is already stored as ObjectId)\n        {\n          $lookup: {\n            from: 'users',\n            localField: 'userId',\n            foreignField: '_id',\n            as: 'user',\n            pipeline: [\n              { $project: { firstName: 1, lastName: 1, email: 1 } }\n            ]\n          }\n        },\n  \n        // Flatten the user array to a single object\n        {\n          $addFields: {\n            user: { $arrayElemAt: ['$user', 0] }\n          }\n        },\n  \n        // Optionally remove the helper userIdObject field\n        {\n          $project: {\n            userIdObject: 0\n          }\n        }\n      ]).toArray();\n  \n      console.log('[DEBUG] Populated enrollments:', populatedEnrollments);\n  \n      return populatedEnrollments as CourseEnrollment[];\n    } \n    catch (error) {\n      console.error('Error fetching course enrollments:', error);\n      return [];\n    }\n  }\n  \n  async updateCourse(id: number, courseData: Partial<Course>): Promise<Course | null> {\n    const db = getDb();\n    try {\n      const result = await db.collection('courses').findOneAndUpdate(\n        { id: id },\n        { \n          $set: { \n            ...courseData, \n            updatedAt: new Date() \n          } \n        },\n        { returnDocument: 'after' }\n      );\n      return result as Course | null;\n    } catch (error) {\n      console.error('Error updating course:', error);\n      return null;\n    }\n  }\n\n  // Stub methods for compatibility\n  async getAdminAnalytics(): Promise<any> { \n    const db = getDb();\n    try {\n      const [users, problems, submissions, contests] = await Promise.all([\n        db.collection('users').countDocuments(),\n        db.collection('problems').countDocuments(),\n        db.collection('submissions').countDocuments(),\n        db.collection('contests').countDocuments()\n      ]);\n\n      // Get recent submissions with user details for activity feed\n      const recentSubmissions = await db.collection('submissions')\n        .aggregate([\n          { $sort: { submittedAt: -1 } },\n          { $limit: 10 },\n          {\n            $lookup: {\n              from: 'users',\n              localField: 'userId',\n              foreignField: 'id',\n              as: 'user'\n            }\n          },\n          {\n            $lookup: {\n              from: 'problems',\n              localField: 'problemId',\n              foreignField: 'id',\n              as: 'problem'\n            }\n          },\n          { $unwind: { path: '$user', preserveNullAndEmptyArrays: true } },\n          { $unwind: { path: '$problem', preserveNullAndEmptyArrays: true } }\n        ])\n        .toArray();\n\n      // Get submission stats by status\n      const submissionStats = await db.collection('submissions')\n        .aggregate([\n          {\n            $group: {\n              _id: '$status',\n              count: { $sum: 1 }\n            }\n          }\n        ])\n        .toArray();\n\n      return {\n        totalUsers: users,\n        totalProblems: problems,\n        totalSubmissions: submissions,\n        activeContests: contests,\n        submissionStats: submissionStats.reduce((acc: any, stat: any) => {\n          acc[stat._id] = stat.count;\n          return acc;\n        }, {}),\n        recentActivity: recentSubmissions.map((sub: any) => ({\n          id: sub.id,\n          problemId: sub.problemId,\n          problemTitle: sub.problem?.title || `Problem ${sub.problemId}`,\n          userId: sub.userId,\n          userName: sub.user ? `${sub.user.firstName} ${sub.user.lastName}` : 'Unknown User',\n          language: sub.language,\n          status: sub.status,\n          timestamp: sub.submittedAt,\n          runtime: sub.runtime,\n          memory: sub.memory,\n          score: sub.score\n        }))\n      };\n    } catch (error) {\n      console.error('Error fetching admin analytics:', error);\n      return {\n        totalUsers: 0,\n        totalProblems: 0,\n        totalSubmissions: 0,\n        activeContests: 0,\n        submissionStats: {},\n        recentActivity: []\n      };\n    }\n  }\n  async getAllUsers(): Promise<User[]> { \n    const db = getDb();\n    try {\n      const users = await db.collection('users').find({}).toArray();\n      return users.map(user => ({\n        ...user,\n        id: user._id.toString()\n      })) as User[];\n    } catch (error) {\n      console.error('Error fetching all users:', error);\n      return [];\n    }\n  }\n  async getAssignments(): Promise<any[]> { \n    const db = getDb();\n    try {\n      // Get problem sets as assignments\n      const problemSets = await db.collection('problemsets').find({}).toArray();\n      \n      // Transform problem sets to assignment format\n      const assignments = problemSets.map((problemSet: any) => ({\n        id: problemSet.id,\n        title: problemSet.title,\n        description: problemSet.description,\n        courseTag: problemSet.category || 'General',\n        deadline: problemSet.deadline,\n        questions: problemSet.questions || [],\n        maxAttempts: problemSet.maxAttempts || 3,\n        isVisible: problemSet.isPublic,\n        autoGrade: problemSet.autoGrade !== false,\n        createdBy: problemSet.createdBy,\n        createdAt: problemSet.createdAt,\n        updatedAt: problemSet.updatedAt,\n        // Add problem set specific fields\n        difficulty: problemSet.difficulty,\n        tags: problemSet.tags,\n        // Recalculate totalProblems based on actual problem count\n        totalProblems: problemSet.problemInstances?.length || \n                      problemSet.problems?.length || \n                      problemSet.problemIds?.length || \n                      0,\n        estimatedTime: problemSet.estimatedTime,\n        problemIds: problemSet.problemIds,\n        problemInstances: problemSet.problemInstances,\n        // Handle custom problems array\n        problems: problemSet.problems,\n        participants: problemSet.participants\n      }));\n      \n      console.log('Transformed', assignments.length, 'problem sets to assignments');\n      return assignments;\n    } catch (error) {\n      console.error('Error fetching assignments:', error);\n      return [];\n    }\n  }\n  async getGroups(): Promise<any[]> { \n    const db = getDb();\n    try {\n      const groups = await db.collection('groups').find({}).toArray();\n      return groups;\n    } catch (error) {\n      console.error('Error fetching groups:', error);\n      return [];\n    }\n  }\n  async getAnnouncements(): Promise<any[]> { \n    const db = getDb();\n    try {\n      const announcements = await db.collection('announcements').find({}).toArray();\n      return announcements;\n    } catch (error) {\n      console.error('Error fetching announcements:', error);\n      return [];\n    }\n  }\n  async getAllSubmissions(): Promise<Submission[]> {\n    const db = getDb();\n    try {\n      const submissions = await db.collection('submissions')\n        .aggregate([\n          { $sort: { submittedAt: -1 } },\n          {\n            $lookup: {\n              from: 'users',\n              localField: 'userId',\n              foreignField: 'id',\n              as: 'user'\n            }\n          },\n          {\n            $lookup: {\n              from: 'problems',\n              localField: 'problemId',\n              foreignField: 'id',\n              as: 'problem'\n            }\n          },\n          { $unwind: { path: '$user', preserveNullAndEmptyArrays: true } },\n          { $unwind: { path: '$problem', preserveNullAndEmptyArrays: true } }\n        ])\n        .toArray();\n\n      return submissions.map((sub: any) => ({\n        ...sub,\n        userName: sub.user ? `${sub.user.firstName} ${sub.user.lastName}` : 'Unknown User',\n        userEmail: sub.user?.email,\n        problemTitle: sub.problem?.title || `Problem ${sub.problemId}`\n      })) as Submission[];\n    } catch (error) {\n      console.error('Error fetching all submissions:', error);\n      return [];\n    }\n  }\n\n  async getSubmissionStats(): Promise<any> {\n    const db = getDb();\n    try {\n      const stats = await db.collection('submissions')\n        .aggregate([\n          {\n            $group: {\n              _id: {\n                status: '$status',\n                language: '$language'\n              },\n              count: { $sum: 1 },\n              avgRuntime: { $avg: '$runtime' },\n              avgMemory: { $avg: '$memory' }\n            }\n          },\n          {\n            $group: {\n              _id: '$_id.status',\n              languages: {\n                $push: {\n                  language: '$_id.language',\n                  count: '$count',\n                  avgRuntime: '$avgRuntime',\n                  avgMemory: '$avgMemory'\n                }\n              },\n              totalCount: { $sum: '$count' }\n            }\n          }\n        ])\n        .toArray();\n\n      return stats.reduce((acc: any, stat: any) => {\n        acc[stat._id] = {\n          count: stat.totalCount,\n          languages: stat.languages\n        };\n        return acc;\n      }, {});\n    } catch (error) {\n      console.error('Error fetching submission stats:', error);\n      return {};\n    }\n  }\n\n  async getProblemAnalytics(problemId: number): Promise<any> {\n    const db = getDb();\n    try {\n      // Get all submissions for this problem with user details\n      const submissions = await db.collection('submissions')\n        .aggregate([\n          { $match: { problemId: problemId } },\n          {\n          $addFields: {\n            userIdObj: { $toObjectId: '$userId' }\n          }\n        },\n          { $sort: { submittedAt: -1 } },\n          {\n            $lookup: {\n              from: 'users',\n              localField: 'userIdObj',\n              foreignField: '_id',\n              as: 'user'\n            }\n          },\n          { $unwind: { path: '$user', preserveNullAndEmptyArrays: true } }\n        ])\n        .toArray();\n\n      // Get unique users who attempted this problem\n      const userStats = submissions.reduce((acc: any, sub: any) => {\n        console.log('Processing submission:', sub);\n        const userId = sub.userIdObj;\n\n        if (!acc[userId]) {\n          acc[userId] = {\n            userId: userId,\n            userName: sub.user ? `${sub.user.firstName} ${sub.user.lastName}` : 'Unknown User',\n            userEmail: sub.user?.email,\n            totalAttempts: 0,\n            passedAttempts: 0,\n            failedAttempts: 0,\n            bestScore: 0,\n            lastAttempt: null,\n            status: 'failed' // default to failed, will update if any passed\n          };\n        }\n        \n        acc[userId].totalAttempts++;\n        if (sub.status === 'accepted') {\n          acc[userId].passedAttempts++;\n          acc[userId].status = 'passed';\n        } else {\n          acc[userId].failedAttempts++;\n        }\n        \n        // Update best score and last attempt\n        if (sub.score && parseFloat(sub.score) > acc[userId].bestScore) {\n          acc[userId].bestScore = parseFloat(sub.score);\n        }\n        \n        if (!acc[userId].lastAttempt || new Date(sub.submittedAt) > new Date(acc[userId].lastAttempt)) {\n          acc[userId].lastAttempt = sub.submittedAt;\n        }\n        \n        return acc;\n      }, {});\n\n      // Get problem details\n      const problem = await db.collection('problems').findOne({ id: problemId });\n\n      // Calculate overall stats\n      const totalUsers = Object.keys(userStats).length;\n      const passedUsers = Object.values(userStats).filter((user: any) => user.status === 'passed').length;\n      const failedUsers = totalUsers - passedUsers;\n      \n      return {\n        problemId,\n        problemTitle: problem?.title || `Problem ${problemId}`,\n        totalUsers,\n        passedUsers,\n        failedUsers,\n        passRate: totalUsers > 0 ? Math.round((passedUsers / totalUsers) * 100) : 0,\n        totalSubmissions: submissions.length,\n        userStats: Object.values(userStats)\n      };\n    } catch (error) {\n      console.error('Error fetching problem analytics:', error);\n      return {\n        problemId,\n        problemTitle: `Problem ${problemId}`,\n        totalUsers: 0,\n        passedUsers: 0,\n        failedUsers: 0,\n        passRate: 0,\n        totalSubmissions: 0,\n        userStats: []\n      };\n    }\n  };\n\n  async getUserProblemAnalytics(userId: string, problemId: number): Promise<any> {\n    const db = getDb();\n    try {\n      // Get all submissions for this user and problem\n      const submissions = await db.collection('submissions')\n        .find({ userId, problemId })\n        .sort({ submittedAt: 1 }) // Chronological order\n        .toArray();\n\n      // Get user details\n      const user = await db.collection('users').findOne({ id: userId });\n      \n      // Get problem details\n      const problem = await db.collection('problems').findOne({ id: problemId });\n\n      // Calculate analytics\n      const totalAttempts = submissions.length;\n      const passedAttempts = submissions.filter((sub: any) => sub.status === 'accepted').length;\n      const failedAttempts = totalAttempts - passedAttempts;\n      \n      // Calculate best scores and performance\n      const bestScore = submissions.reduce((max: number, sub: any) => {\n        const score = parseFloat(sub.score || '0');\n        return score > max ? score : max;\n      }, 0);\n\n      const averageRuntime = submissions\n        .filter((sub: any) => sub.runtime)\n        .reduce((sum: number, sub: any, _, arr: any[]) => {\n          return sum + (sub.runtime / arr.length);\n        }, 0);\n\n      const averageMemory = submissions\n        .filter((sub: any) => sub.memory)\n        .reduce((sum: number, sub: any, _, arr: any[]) => {\n          return sum + (sub.memory / arr.length);\n        }, 0);\n\n      // Track improvement over time\n      const attempts = submissions.map((sub: any, index: number) => ({\n        attemptNumber: index + 1,\n        submittedAt: sub.submittedAt,\n        status: sub.status,\n        runtime: sub.runtime,\n        memory: sub.memory,\n        language: sub.language,\n        score: sub.score,\n        testCasesPassed: sub.feedback?.testCasesPassed || 0,\n        totalTestCases: sub.feedback?.totalTestCases || 0\n      }));\n\n      return {\n        userId,\n        userName: user ? `${user.firstName} ${user.lastName}` : 'Unknown User',\n        userEmail: user?.email,\n        problemId,\n        problemTitle: problem?.title || `Problem ${problemId}`,\n        totalAttempts,\n        passedAttempts,\n        failedAttempts,\n        successRate: totalAttempts > 0 ? Math.round((passedAttempts / totalAttempts) * 100) : 0,\n        bestScore,\n        averageRuntime: Math.round(averageRuntime),\n        averageMemory: Math.round(averageMemory),\n        firstAttempt: submissions[0]?.submittedAt,\n        lastAttempt: submissions[submissions.length - 1]?.submittedAt,\n        attempts\n      };\n    } catch (error) {\n      console.error('Error fetching user problem analytics:', error);\n      return {\n        userId,\n        problemId,\n        totalAttempts: 0,\n        passedAttempts: 0,\n        failedAttempts: 0,\n        successRate: 0,\n        attempts: []\n      };\n    }\n  }\n\n  // async getProblemAnalytics(problemId: number): Promise<any> {\n  //   const db = getDb();\n  //   try {\n  //     // Get all submissions for this problem with user details\n  //     const submissions = await db.collection('submissions')\n  //       .aggregate([\n  //         { $match: { problemId: problemId } },\n  //         { $sort: { submittedAt: -1 } },\n  //         {\n  //           $lookup: {\n  //             from: 'users',\n  //             localField: 'userId',\n  //             foreignField: 'id',\n  //             as: 'user'\n  //           }\n  //         },\n  //         { $unwind: { path: '$user', preserveNullAndEmptyArrays: true } }\n  //       ])\n  //       .toArray();\n\n  //     // Get unique users who attempted this problem\n  //     const userStats = submissions.reduce((acc: any, sub: any) => {\n  //       const userId = sub.userId;\n  //       if (!acc[userId]) {\n  //         acc[userId] = {\n  //           userId: userId,\n  //           userName: sub.user ? `${sub.user.firstName} ${sub.user.lastName}` : 'Unknown User',\n  //           userEmail: sub.user?.email,\n  //           totalAttempts: 0,\n  //           passedAttempts: 0,\n  //           failedAttempts: 0,\n  //           bestScore: 0,\n  //           lastAttempt: null,\n  //           status: 'failed' // default to failed, will update if any passed\n  //         };\n  //       }\n        \n  //       acc[userId].totalAttempts++;\n  //       if (sub.status === 'accepted') {\n  //         acc[userId].passedAttempts++;\n  //         acc[userId].status = 'passed';\n  //       } else {\n  //         acc[userId].failedAttempts++;\n  //       }\n        \n  //       // Update best score and last attempt\n  //       if (sub.score && parseFloat(sub.score) > acc[userId].bestScore) {\n  //         acc[userId].bestScore = parseFloat(sub.score);\n  //       }\n        \n  //       if (!acc[userId].lastAttempt || new Date(sub.submittedAt) > new Date(acc[userId].lastAttempt)) {\n  //         acc[userId].lastAttempt = sub.submittedAt;\n  //       }\n        \n  //       return acc;\n  //     }, {});\n\n  //     // Get problem details\n  //     const problem = await db.collection('problems').findOne({ id: problemId });\n\n  //     // Calculate overall stats\n  //     const totalUsers = Object.keys(userStats).length;\n  //     const passedUsers = Object.values(userStats).filter((user: any) => user.status === 'passed').length;\n  //     const failedUsers = totalUsers - passedUsers;\n      \n  //     return {\n  //       problemId,\n  //       problemTitle: problem?.title || `Problem ${problemId}`,\n  //       totalUsers,\n  //       passedUsers,\n  //       failedUsers,\n  //       passRate: totalUsers > 0 ? Math.round((passedUsers / totalUsers) * 100) : 0,\n  //       totalSubmissions: submissions.length,\n  //       userStats: Object.values(userStats)\n  //     };\n  //   } catch (error) {\n  //     console.error('Error fetching problem analytics:', error);\n  //     return {\n  //       problemId,\n  //       problemTitle: `Problem ${problemId}`,\n  //       totalUsers: 0,\n  //       passedUsers: 0,\n  //       failedUsers: 0,\n  //       passRate: 0,\n  //       totalSubmissions: 0,\n  //       userStats: []\n  //     };\n  //   }\n  // }\n\n\n\n  async updateProblem(id: number, problemData: Partial<Problem>): Promise<Problem | null> {\n    const db = getDb();\n    try {\n      const updateData = {\n        ...problemData,\n        updatedAt: new Date()\n      };\n      \n      const result = await db.collection('problems').findOneAndUpdate(\n        { id: id },\n        { $set: updateData },\n        { returnDocument: 'after' }\n      );\n      \n      return result as Problem || null;\n    } catch (error) {\n      console.error('Error updating problem:', error);\n      return null;\n    }\n  }\n  async deleteProblem(id: number): Promise<void> {\n    const db = getDb();\n    try {\n      const result = await db.collection('problems').deleteOne({ id: id });\n      if (result.deletedCount === 0) {\n        throw new Error('Problem not found');\n      }\n      console.log(`[DEBUG] Problem ${id} deleted successfully`);\n    } catch (error) {\n      console.error('Error deleting problem:', error);\n      throw error;\n    }\n  }\n  async getUserSubmissionStats(userId?: string): Promise<any> {\n    const db = getDb();\n    if (!userId) return { total: 0, activeDays: 0, maxStreak: 0, byDate: {} };\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n    const base = await db.collection('submissions')\n      .find({ userId: String(userId), submittedAt: { $gte: oneYearAgo }, status: 'accepted' })\n      .project({ submittedAt: 1 })\n      .toArray();\n    const contests = await db.collection('contest_submissions')\n      .find({ userId: String(userId), submissionTime: { $gte: oneYearAgo }, status: { $in: ['accepted', 'Accepted'] } })\n      .project({ submissionTime: 1 })\n      .toArray();\n    const assignments = await db.collection('assignmentSubmissions')\n      .find({ userId: String(userId), createdAt: { $gte: oneYearAgo }, status: 'accepted' })\n      .project({ createdAt: 1 })\n      .toArray();\n    const submissions = [\n      ...base.map((s:any)=>({ ts: s.submittedAt })),\n      ...contests.map((s:any)=>({ ts: s.submissionTime })),\n      ...assignments.map((s:any)=>({ ts: s.createdAt })),\n    ];\n    const byDate: Record<string, number> = {};\n    for (const s of submissions) {\n      const d = new Date((s as any).ts || new Date());\n      const key = d.toISOString().slice(0,10);\n      byDate[key] = (byDate[key] || 0) + 1;\n    }\n    const days = Object.keys(byDate).sort();\n    // Compute streaks\n    let maxStreak = 0; let currentStreak = 0; let prev: Date | null = null;\n    for (const key of days) {\n      const d = new Date(key + 'T00:00:00Z');\n      if (prev) {\n        const diff = (d.getTime() - prev.getTime()) / (1000*60*60*24);\n        if (diff === 1) {\n          currentStreak += 1;\n        } else if (diff > 1) {\n          currentStreak = 1;\n        }\n      } else {\n        currentStreak = 1;\n      }\n      maxStreak = Math.max(maxStreak, currentStreak);\n      prev = d;\n    }\n    return {\n      total: submissions.length,\n      activeDays: days.length,\n      maxStreak,\n      byDate,\n    };\n  }\n  async getContests(): Promise<any[]> { return []; }\n  async getContest(): Promise<any> { return null; }\n  async createContest(): Promise<any> { return null; }\n\n  async deleteCourseModule(id: number): Promise<void> {\n    try {\n      const db = await connectToMongoDB();\n      const result = await db.collection('coursemodules').deleteOne({ id: id });\n      if (result.deletedCount === 0) {\n        throw new Error('Module not found');\n      }\n      console.log(`Course module with id ${id} deleted successfully`);\n    } catch (error) {\n      console.error('Error deleting course module:', error);\n      throw error;\n    }\n  }\n  async deleteCourseEnrollment(): Promise<void> { }\n  async deleteCourse(): Promise<void> { }\n  async getCourseModule(id: number): Promise<CourseModule | undefined> {\n    try {\n      const db = await connectToMongoDB();\n      const module = await db.collection('coursemodules').findOne({ id: id });\n      return module as CourseModule || undefined;\n    } catch (error) {\n      console.error('Error fetching course module:', error);\n      return undefined;\n    }\n  }\n  async createCourseModule(moduleData: Partial<CourseModule>): Promise<CourseModule> {\n    try {\n      const db = await connectToMongoDB();\n      \n      // Generate unique ID using the same logic as course creation\n      const lastModule = await db.collection('coursemodules').findOne({}, { sort: { id: -1 } });\n      const nextId = (lastModule?.id || 0) + 1;\n      \n      const newModule = {\n        id: nextId,\n        ...moduleData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      \n      console.log('Creating course module with data:', newModule);\n      const result = await db.collection('coursemodules').insertOne(newModule);\n      console.log('Course module created successfully with ID:', result.insertedId);\n      \n      // Verify the module was created by fetching it\n      const createdModule = await db.collection('coursemodules').findOne({ _id: result.insertedId });\n      console.log('Verified created module:', createdModule);\n      \n      return { ...newModule, _id: result.insertedId } as CourseModule;\n    } catch (error) {\n      console.error('Error creating course module:', error);\n      throw new Error('Failed to create course module');\n    }\n  }\n  async updateCourseModule(id: number, moduleData: Partial<CourseModule>): Promise<CourseModule | null> {\n    try {\n      const db = await connectToMongoDB();\n      const updateData = {\n        ...moduleData,\n        updatedAt: new Date(),\n      };\n      \n      const result = await db.collection('coursemodules').findOneAndUpdate(\n        { id: id },\n        { $set: updateData },\n        { returnDocument: 'after' }\n      );\n      \n      return result as CourseModule || null;\n    } catch (error) {\n      console.error('Error updating course module:', error);\n      return null;\n    }\n  }\n  // Course enrollment - Support both admin and self-enrollment\n  async enrollUserInCourse(userId: string, courseId: number, enrolledBy?: string): Promise<CourseEnrollment> {\n    try {\n      const db = getDb();\n      \n      // Convert string userId to ObjectId for database storage\n      const userObjectId = new ObjectId(userId);\n      console.log('[DEBUG] Converting userId to ObjectId for DB storage:', userObjectId);\n      \n      // Check if already enrolled\n      const existingEnrollment = await db.collection('courseEnrollments')\n        .findOne({ courseId: courseId, userId: userObjectId });\n      \n      if (existingEnrollment) {\n        console.log('[DEBUG] User already enrolled, returning existing enrollment');\n        // Convert userId back to string for frontend compatibility\n        return { \n          ...existingEnrollment, \n          userId: existingEnrollment.userId.toString() \n        } as CourseEnrollment;\n      }\n      \n      // Create new enrollment with ObjectId in database\n      const enrollmentData = {\n        id: Date.now(),\n        courseId: courseId,\n        userId: userObjectId,\n        completedModules: [],\n        progress: 0,\n        enrolledAt: new Date(),\n        lastAccessedAt: new Date(),\n        enrolledBy: enrolledBy,\n        enrollmentType: enrolledBy ? 'admin' : 'qr' // Set enrollment type based on who enrolled\n      };\n      \n      console.log('[DEBUG] Creating new enrollment with ObjectId:', enrollmentData);\n      \n      const result = await db.collection('courseEnrollments').insertOne(enrollmentData);\n      console.log('[DEBUG] Enrollment created with ID:', result.insertedId);\n      \n      // Return with userId as string for frontend compatibility\n      return { \n        ...enrollmentData, \n        _id: result.insertedId,\n        userId: enrollmentData.userId.toString()\n      } as CourseEnrollment;\n    } catch (error) {\n      console.error('Error enrolling user in course:', error);\n      throw new Error('Failed to enroll user in course');\n    }\n  }\n\n  // Check if user is enrolled in a course\n  async isUserEnrolledInCourse(courseId: number, userId: string): Promise<boolean> {\n    try {\n      const db = await connectToMongoDB();\n      // Convert string userId to ObjectId for database lookup\n      const userObjectId = new ObjectId(userId);\n      const enrollment = await db.collection('courseEnrollments')\n        .findOne({ courseId: courseId, userId: userObjectId });\n      return !!enrollment;\n    } catch (error) {\n      console.error('Error checking course enrollment:', error);\n      return false;\n    }\n  }\n\n  // Check if user can access a course (enrolled users can access any course they're enrolled in)\n  async canUserAccessCourse(courseId: number, userId: string, isAdmin: boolean = false): Promise<boolean> {\n    try {\n      if (isAdmin) {\n        return true; // Admin can access all courses\n      }\n      \n      const db = await connectToMongoDB();\n      \n      // Check if user is enrolled - enrolled users can access both public and private courses\n      // Convert string userId to ObjectId for database lookup\n      const userObjectId = new ObjectId(userId);\n      const enrollment = await db.collection('courseEnrollments')\n        .findOne({ courseId: courseId, userId: userObjectId });\n      \n      if (enrollment) {\n        return true; // User is enrolled, can access course\n      }\n      \n      // If not enrolled, check if course is public for browsing\n      const course = await db.collection('courses').findOne({ id: courseId });\n      return course?.isPublic === true;\n    } catch (error) {\n      console.error('Error checking course access:', error);\n      return false;\n    }\n  }\n\n  // Remove user from course enrollment\n  async removeUserFromCourse(courseId: number, userId: string): Promise<boolean> {\n    try {\n      const db = getDb();\n      console.log('[DEBUG] Removing enrollment for courseId:', courseId, 'userId:', userId);\n      \n      // Convert string userId to ObjectId for database lookup\n      const userObjectId = new ObjectId(userId);\n      \n      // Delete the enrollment record\n      const enrollmentDelete = await db.collection('courseEnrollments')\n        .deleteOne({ courseId: courseId, userId: userObjectId });\n      \n      // Also purge all module progress for this user in this course\n      const progressDelete = await db.collection('moduleProgress')\n        .deleteMany({ courseId: courseId, userId: userObjectId });\n      \n      console.log('[DEBUG] Enrollment deleted:', enrollmentDelete.deletedCount, 'Module progress deleted:', progressDelete.deletedCount);\n      return (enrollmentDelete.deletedCount ?? 0) > 0;\n    } catch (error) {\n      console.error('Error removing user from course:', error);\n      return false;\n    }\n  }\n  async getUserCourseProgress(userId: string, courseId: number): Promise<ModuleProgress[]> {\n    try {\n      const db = getDb();\n      // Convert string userId to ObjectId for database lookup\n      const userObjectId = new ObjectId(userId);\n      const progress = await db.collection('moduleProgress')\n        .find({ courseId: courseId, userId: userObjectId })\n        .toArray();\n      return progress as ModuleProgress[];\n    } catch (error) {\n      console.error('Error fetching user course progress:', error);\n      return [];\n    }\n  }\n\n  async markModuleComplete(userId: string, moduleId: number, courseId: number, timeSpent: number = 0, notes?: string): Promise<void> {\n    try {\n      const db = getDb();\n      \n      console.log(`[DEBUG] markModuleComplete called - userId: ${userId}, moduleId: ${moduleId}, courseId: ${courseId}`);\n      \n      // Convert string userId to ObjectId for database storage\n      const userObjectId = new ObjectId(userId);\n      \n      // Check if progress already exists for this specific user and module\n      const existingProgress = await db.collection('moduleProgress')\n        .findOne({ moduleId: moduleId, userId: userObjectId, courseId: courseId });\n      \n      if (existingProgress) {\n        // Update existing progress for THIS USER ONLY - only if not already completed\n        if (!existingProgress.isCompleted) {\n          await db.collection('moduleProgress').updateOne(\n            { moduleId: moduleId, userId: userObjectId, courseId: courseId },\n            {\n              $set: {\n                isCompleted: true,\n                timeSpent: (existingProgress.timeSpent || 0) + timeSpent,\n                completedAt: new Date(),\n                notes: notes || existingProgress.notes\n              }\n            }\n          );\n          console.log(`[DEBUG] Updated existing progress for user ${userId} on module ${moduleId}`);\n          \n          // Update enrollment progress for THIS USER ONLY after completing this module\n          await this.updateUserCourseProgress(userId, courseId);\n        } else {\n          console.log(`[DEBUG] Module ${moduleId} already completed for user ${userId}`);\n        }\n      } else {\n        // Create new progress record for THIS USER ONLY\n        await db.collection('moduleProgress').insertOne({\n          id: Date.now(),\n          moduleId: moduleId,\n          userId: userObjectId,\n          courseId: courseId,\n          isCompleted: true,\n          timeSpent: timeSpent || 0,\n          completedAt: new Date(),\n          notes: notes || '',\n          bookmarked: false\n        });\n        console.log(`[DEBUG] Created new progress record for user ${userId} on module ${moduleId}`);\n        \n        // Update enrollment progress for THIS USER ONLY after completing this module\n        await this.updateUserCourseProgress(userId, courseId);\n      }\n    } catch (error) {\n      console.error('Error marking module complete:', error);\n      throw error;\n    }\n  }\n\n  async updateUserCourseProgress(userId: string, courseId: number): Promise<void> {\n    try {\n      const db = getDb();\n      \n      // Ensure we query using ObjectId since userId is stored as ObjectId in DB\n      const userObjectId = new ObjectId(userId);\n      \n      const enrollment = await db.collection('courseEnrollments')\n        .findOne({ courseId: courseId, userId: userObjectId });\n      \n      if (enrollment) {\n        // Get all modules for this course\n        const courseModules = await db.collection('coursemodules')\n          .find({ courseId: courseId }).toArray();\n        \n        // Get completed modules for THIS USER ONLY\n        const completedModules = await db.collection('moduleProgress')\n          .find({ courseId: courseId, userId: userObjectId, isCompleted: true }).toArray();\n        \n        const progressPercentage = courseModules.length > 0 \n          ? Math.min(100, Math.round((completedModules.length / courseModules.length) * 100))\n          : 0;\n        \n        // Get unique completed module IDs to prevent duplicates\n        const uniqueCompletedModuleIds = [...new Set(completedModules.map(m => m.moduleId))];\n        \n        await db.collection('courseEnrollments').updateOne(\n          { courseId: courseId, userId: userObjectId },\n          {\n            $set: {\n              progress: progressPercentage,\n              lastAccessedAt: new Date(),\n              completedModules: uniqueCompletedModuleIds\n            }\n          }\n        );\n        console.log(`[DEBUG] Updated enrollment progress for user ${userId}: ${progressPercentage}% (${completedModules.length}/${courseModules.length} modules)`);\n      }\n    } catch (error) {\n      console.error('Error updating user course progress:', error);\n      throw error;\n    }\n  }\n  async bookmarkModule(userId: string, moduleId: number): Promise<void> { }\n  async getCourseStats(): Promise<any> { return {}; }\n  async getLeaderboard(): Promise<any[]> { return []; }\n  async getAssignment(id: number): Promise<any> { \n    try {\n      console.log('Getting assignment by ID:', id);\n      \n      // Try to find by string ID first\n      let problemSet = await this.getProblemSet(id.toString());\n      \n      // If not found, try to find by numeric ID\n      if (!problemSet) {\n        const problemSets = await this.getProblemSets();\n        problemSet = problemSets.find(ps => ps.id === id.toString());\n      }\n      \n      if (problemSet) {\n        // Transform problem set to assignment format\n        const assignment = {\n          id: problemSet.id,\n          title: problemSet.title,\n          description: problemSet.description,\n          courseTag: problemSet.category || 'General',\n          deadline: problemSet.deadline,\n          questions: problemSet.questions || [],\n          maxAttempts: problemSet.maxAttempts || 3,\n          isVisible: problemSet.isPublic,\n          autoGrade: problemSet.autoGrade !== false,\n          createdBy: problemSet.createdBy,\n          createdAt: problemSet.createdAt,\n          updatedAt: problemSet.updatedAt,\n          // Add problem set specific fields\n          difficulty: problemSet.difficulty,\n          tags: problemSet.tags,\n          // Recalculate totalProblems based on actual problem count\n          totalProblems: problemSet.problemInstances?.length || \n                        problemSet.problems?.length || \n                        problemSet.problemIds?.length || \n                        0,\n          estimatedTime: problemSet.estimatedTime,\n          problemIds: problemSet.problemIds,\n          problemInstances: problemSet.problemInstances\n        };\n        \n        console.log('Found assignment:', assignment.title);\n        return assignment;\n      }\n      \n      console.log('Assignment not found');\n      return null;\n    } catch (error) {\n      console.error('Error getting assignment:', error);\n      return null;\n    }\n  }\n  async createAssignment(assignmentData: any): Promise<any> { \n    try {\n      console.log('Creating assignment as problem set:', assignmentData);\n      \n      // Transform assignment data to problem set format\n      const problemSetData = {\n        title: assignmentData.title,\n        description: assignmentData.description,\n        difficulty: assignmentData.difficulty || 'easy',\n        category: assignmentData.courseTag || 'General',\n        tags: assignmentData.tags || [],\n        problemIds: [], // Will be populated when problems are added\n        isPublic: assignmentData.isVisible !== false,\n        estimatedTime: assignmentData.estimatedTime,\n        totalProblems: 0,\n        createdBy: assignmentData.createdBy,\n        // Add assignment-specific fields\n        deadline: assignmentData.deadline,\n        maxAttempts: assignmentData.maxAttempts,\n        autoGrade: assignmentData.autoGrade,\n        questions: assignmentData.questions\n      };\n      \n      const problemSet = await this.createProblemSet(problemSetData);\n      console.log('Assignment created as problem set:', problemSet);\n      return problemSet;\n    } catch (error) {\n      console.error('Error creating assignment:', error);\n      throw error;\n    }\n  }\n  async updateAssignment(): Promise<any> { return null; }\n  async deleteAssignment(): Promise<void> { }\n  async getAssignmentsByCourseTag(): Promise<any[]> { return []; }\n  async getAssignmentSubmissions(assignmentId?: number, userId?: string): Promise<any[]> {\n    const db = getDb();\n    try {\n      console.log(`[Storage] Fetching submissions for assignment ${assignmentId}, user ${userId}`);\n      \n      const query: any = {};\n      \n      // Map assignmentId to problemIds from problem set\n      if (typeof assignmentId === 'number') {\n        // Get the problem set to find all problem IDs for this assignment - try multiple approaches\n        let problemSet = await db.collection('problemsets').findOne({ id: assignmentId.toString() });\n        \n        // If not found by string ID, try finding by position\n        if (!problemSet) {\n          const allProblemSets = await db.collection('problemsets').find().toArray();\n          \n          // Try to find by position (assignmentId - 1 for 0-based index)\n          if (allProblemSets.length > 0 && assignmentId > 0 && assignmentId <= allProblemSets.length) {\n            problemSet = allProblemSets[assignmentId - 1];\n          }\n        }\n        if (problemSet && problemSet.problemInstances) {\n          const problemIds = problemSet.problemInstances.map((pi: any) => pi.problemId);\n          query.problemId = { $in: problemIds };\n        } else {\n          // Fallback to direct assignmentId mapping\n          query.problemId = assignmentId;\n        }\n      }\n      if (typeof userId === 'string') {\n        query.userId = userId;\n      }\n\n      console.log(`[Storage] Query:`, query);\n\n      // Use Mongoose Submission model with population\n      const submissions = await Submission.find(query)\n        .populate('problemId', 'title difficulty') // Populate problem details\n        .populate('userId', 'firstName lastName email') // Populate user details\n        .sort({ submittedAt: -1 })\n        .lean(); // Convert to plain JavaScript objects for better performance\n\n      console.log(`[Storage] Found ${submissions.length} submissions using Mongoose`);\n\n      // Transform to match expected assignment submission format\n      return submissions.map((sub: any) => {\n        const problemInfo = sub.problemId ? {\n          title: sub.problemId.title || `Problem ${sub.problemId._id}`,\n          difficulty: sub.problemId.difficulty || 'medium'\n        } : { \n          title: `Problem ${sub.problemId}`, \n          difficulty: 'medium' \n        };\n\n        const userInfo = sub.userId ? {\n          name: `${sub.userId.firstName || ''} ${sub.userId.lastName || ''}`.trim() || sub.userId.email || sub.userId._id,\n          email: sub.userId.email\n        } : {\n          name: sub.userId || 'Unknown User',\n          email: 'N/A'\n        };\n\n        return {\n          id: sub._id || sub.id,\n          assignmentId: parseInt(sub.problemId?.toString() || '0'),\n          userId: userInfo.name,\n          userEmail: userInfo.email,\n          problemId: sub.problemId?._id || sub.problemId,\n          problemTitle: problemInfo.title,\n          problemDifficulty: problemInfo.difficulty,\n          totalScore: parseFloat(sub.score || '0'),\n          maxScore: 100, // Default max score\n          status: sub.status === 'completed' ? 'completed' : 'in_progress',\n          updatedAt: sub.submittedAt,\n          createdAt: sub.submittedAt,\n          // Additional fields from submission\n          code: sub.code,\n          language: sub.language,\n          runtime: sub.runtime,\n          memory: sub.memory,\n          feedback: sub.feedback,\n          testResults: sub.testResults\n        };\n      }) as any[];\n    } catch (error) {\n      console.error('Error fetching assignment submissions:', error);\n      return [];\n    }\n  }\n\n  async getUserAssignmentSubmission(assignmentId?: number, userId?: string): Promise<any> {\n    const db = getDb();\n    try {\n      if (typeof assignmentId !== 'number' || typeof userId !== 'string') return null;\n      const submission = await db.collection('assignmentSubmissions').findOne({ assignmentId, userId });\n      return submission || null;\n    } catch (error) {\n      console.error('Error fetching user assignment submission:', error);\n      return null;\n    }\n  }\n\n  async updateAssignmentSubmission(id?: number, update?: Partial<any>): Promise<any> {\n    const db = getDb();\n    try {\n      if (typeof id !== 'number') return null;\n\n      const updateData = {\n        ...(update || {}),\n        updatedAt: new Date()\n      };\n\n      const result = await db.collection('assignmentSubmissions').findOneAndUpdate(\n        { id },\n        { $set: updateData },\n        { returnDocument: 'after' }\n      );\n\n      const updated = result as any;\n\n      // Best-effort progress update\n      try {\n        if (updated?.assignmentId && updated?.userId) {\n          await this.updateProblemSetEnrollmentProgress(String(updated.userId), Number(updated.assignmentId));\n        }\n      } catch (progressError) {\n        console.error('[Storage] Failed to update enrollment progress after submission update:', progressError);\n      }\n\n      return updated || null;\n    } catch (error) {\n      console.error('Error updating assignment submission:', error);\n      return null;\n    }\n  }\n\n  async createAssignmentSubmission(data?: Partial<any>): Promise<any> {\n    const db = getDb();\n    try {\n      if (!data) return null;\n\n      // Generate next numeric ID\n      const last = await db.collection('assignmentSubmissions').findOne({}, { sort: { id: -1 } });\n      const nextId = ((last as any)?.id || 0) + 1;\n\n      const submission = {\n        id: nextId,\n        assignmentId: Number(data.assignmentId),\n        userId: String(data.userId),\n        questionSubmissions: Array.isArray(data.questionSubmissions) ? data.questionSubmissions : [],\n        totalScore: Number(data.totalScore || 0),\n        maxScore: Number(data.maxScore || 0),\n        status: data.status || 'in_progress',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      await db.collection('assignmentSubmissions').insertOne(submission as any);\n\n      // Best-effort progress update\n      try {\n        await this.updateProblemSetEnrollmentProgress(submission.userId, submission.assignmentId);\n      } catch (progressError) {\n        console.error('[Storage] Failed to update enrollment progress after submission create:', progressError);\n      }\n\n      return submission;\n    } catch (error) {\n      console.error('Error creating assignment submission:', error);\n      return null;\n    }\n  }\n\n  private async updateProblemSetEnrollmentProgress(userId: string, assignmentId: number): Promise<void> {\n    const db = getDb();\n    try {\n      // Determine total questions for this assignment (problem set)\n      let problemSet: any = await db.collection('problemsets').findOne({ id: assignmentId });\n      if (!problemSet) {\n        problemSet = await db.collection('problemsets').findOne({ id: String(assignmentId) });\n      }\n      if (!problemSet) return; // Cannot compute without assignment metadata\n\n      const totalQuestions: number = Array.isArray(problemSet.questions)\n        ? problemSet.questions.length\n        : (problemSet.problemInstances?.length || \n           problemSet.problems?.length || \n           problemSet.problemIds?.length || \n           0);\n      if (totalQuestions <= 0) return;\n\n      // Get latest submission for this user/assignment\n      const latest = await db.collection('assignmentSubmissions')\n        .find({ assignmentId, userId })\n        .sort({ updatedAt: -1 })\n        .limit(1)\n        .toArray();\n      const latestSubmission = latest[0];\n      if (!latestSubmission) return;\n\n      const submissionsArray: any[] = Array.isArray(latestSubmission.questionSubmissions)\n        ? latestSubmission.questionSubmissions\n        : [];\n\n      const answeredCount = submissionsArray.filter((q: any) => {\n        return q && (q.answer !== undefined && q.answer !== null && String(q.answer).length > 0);\n      }).length;\n\n      const correctCount = submissionsArray.filter((q: any) => q && q.isCorrect === true).length;\n\n      // Heuristic: if submitted/graded, use correctness ratio; else use answered ratio\n      const isFinal = latestSubmission.status === 'submitted' || latestSubmission.status === 'graded';\n      const ratio = isFinal ? (correctCount / totalQuestions) : (answeredCount / totalQuestions);\n      const progress = Math.max(0, Math.min(100, Math.round(ratio * 100)));\n\n      // Ensure an enrollment record exists in the fallback collection and update progress\n      // Store userId as ObjectId for consistency\n      const userObjectId = new ObjectId(userId);\n\n      // Try match by string or numeric problemSetId\n      const match: any = {\n        userId: userObjectId,\n        $or: [\n          { problemSetId: assignmentId },\n          { problemSetId: String(assignmentId) }\n        ]\n      };\n\n      const existing = await db.collection('problemsetenrollments').findOne(match);\n      if (existing) {\n        await db.collection('problemsetenrollments').updateOne(\n          { _id: existing._id },\n          { $set: { progress, updatedAt: new Date() } }\n        );\n      } else {\n        // Create an enrollment document if not present\n        const lastEnrollment = await db.collection('problemsetenrollments').findOne({}, { sort: { id: -1 } });\n        const nextEnrollmentId = ((lastEnrollment as any)?.id || 0) + 1;\n        await db.collection('problemsetenrollments').insertOne({\n          id: nextEnrollmentId,\n          problemSetId: problemSet.id ?? assignmentId,\n          userId: userObjectId,\n          enrolledAt: new Date(),\n          progress,\n          completedProblems: [],\n          totalSubmissions: 0,\n          correctSubmissions: 0,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n      }\n    } catch (error) {\n      console.error('[Storage] Error updating problem set enrollment progress:', error);\n    }\n  }\n  async getUserGroups(): Promise<any[]> { return []; }\n  async createGroup(): Promise<any> { return null; }\n  async getUserAnnouncements(): Promise<any[]> { return []; }\n  async createAnnouncement(): Promise<any> { return null; }\n  async registerForContest(): Promise<any> { return null; }\n  async getContestParticipants(): Promise<any[]> { return []; }\n  // removed duplicate stub updateUserRole (implemented above)\n\n  // Problem Set operations\n  async getProblemSets(): Promise<ProblemSet[]> {\n    const db = getDb();\n    try {\n      // Get all problem sets, not just public ones\n      const problemSets = await db.collection('problemsets')\n        .find({})\n        .sort({ createdAt: -1 })\n        .toArray();\n      \n      if (problemSets.length === 0) {\n        // Seed the database with fallback problem sets\n        const fallbackSets = this.getFallbackProblemSets();\n        await db.collection('problemsets').insertMany(fallbackSets);\n        console.log('Seeded database with', fallbackSets.length, 'problem sets');\n        return fallbackSets;\n      }\n      \n      // Recalculate totalProblems for each problem set based on actual problem count\n      const updatedProblemSets = problemSets.map((problemSet: any) => {\n        const actualProblemCount = problemSet.problemInstances?.length || \n                                  problemSet.problems?.length || \n                                  problemSet.problemIds?.length || \n                                  0;\n        \n        return {\n          ...problemSet,\n          totalProblems: actualProblemCount\n        };\n      });\n      \n      console.log('Found', updatedProblemSets.length, 'problem sets in database');\n      return updatedProblemSets as ProblemSet[];\n    } catch (error) {\n      console.error('Error fetching problem sets:', error);\n      return [];\n    }\n  }\n\n  async getProblemSet(id: string): Promise<ProblemSet | undefined> {\n    const db = getDb();\n    try {\n      console.log('Looking for problem set with ID:', id);\n      \n      // Try to find by id field first (as string)\n      let problemSet = await db.collection('problemsets').findOne({ id: id });\n      \n      // If not found, try to find by id field as number (for old problem sets)\n      if (!problemSet) {\n        console.log('Not found by string id, trying numeric id...');\n        const numericId = parseInt(id);\n        if (!isNaN(numericId)) {\n          problemSet = await db.collection('problemsets').findOne({ id: numericId });\n        }\n      }\n      \n      // If not found, try to find by _id (MongoDB ObjectId)\n      if (!problemSet) {\n        console.log('Not found by id field, trying _id...');\n        try {\n          const { ObjectId } = require('mongodb');\n          const objectId = new ObjectId(id);\n          problemSet = await db.collection('problemsets').findOne({ _id: objectId });\n        } catch (objectIdError: any) {\n          console.log('Invalid ObjectId format:', objectIdError.message);\n        }\n      }\n      \n      if (problemSet) {\n        console.log('Found problem set:', problemSet.title, 'with id:', problemSet.id, 'type:', typeof problemSet.id);\n        console.log('Problem set structure:', Object.keys(problemSet));\n        \n        // Transform the database document to match our ProblemSet interface\n        const transformedProblemSet: ProblemSet = {\n          _id: problemSet._id,\n          id: problemSet.id,\n          title: problemSet.title,\n          description: problemSet.description,\n          difficulty: problemSet.difficulty,\n          category: problemSet.category,\n          tags: problemSet.tags || [],\n          // Handle different problem structures\n          problemIds: problemSet.problemIds || [],\n          problemInstances: problemSet.problemInstances || [],\n          isPublic: problemSet.isPublic !== false,\n          estimatedTime: problemSet.estimatedTime,\n          // Recalculate totalProblems based on actual problem count\n          totalProblems: problemSet.problemInstances?.length || \n                        problemSet.problems?.length || \n                        problemSet.problemIds?.length || \n                        0,\n          createdBy: problemSet.createdBy || '',\n          createdAt: problemSet.createdAt,\n          updatedAt: problemSet.updatedAt,\n          // Assignment-specific fields\n          deadline: problemSet.deadline,\n          maxAttempts: problemSet.maxAttempts,\n          autoGrade: problemSet.autoGrade,\n          questions: problemSet.questions,\n          // New enrollment system\n          participants: problemSet.participants || [],\n          problems: problemSet.problems || [],\n          // Handle custom problems array if it exists\n          ...(problemSet.problems && {\n            problemInstances: problemSet.problems.map((problem: any, index: number) => ({\n              id: problem.id || `instance_${index}`,\n              originalProblemId: parseInt(problem.selectedProblemId) || 0,\n              title: problem.title,\n              description: problem.description,\n              difficulty: problem.difficulty,\n              constraints: problem.constraints,\n              inputFormat: problem.inputFormat,\n              outputFormat: problem.outputFormat,\n              timeLimit: problem.timeLimit,\n              memoryLimit: problem.memoryLimit,\n              hints: [],\n              notes: problem.setNotes,\n              order: index,\n              isCustomized: problem.status === 'customized',\n              lastModified: new Date(problem.lastModified),\n              modifiedBy: problem.modifiedBy,\n              // Add custom fields\n              customTestCases: problem.testCases,\n              customExamples: [],\n              customStarterCode: problem.starterCode\n            }))\n          })\n        };\n        \n        console.log('Transformed problem set:', {\n          id: transformedProblemSet.id,\n          title: transformedProblemSet.title,\n          problemInstances: transformedProblemSet.problemInstances?.length || 0\n        });\n        \n        return transformedProblemSet;\n      } else {\n        console.log('Problem set not found with any ID format');\n      }\n      \n      return undefined;\n    } catch (error) {\n      console.error('Error fetching problem set:', error);\n      return undefined;\n    }\n  }\n\n  async createProblemSet(problemSetData: Partial<ProblemSet>): Promise<ProblemSet> {\n    try {\n      const db = getDb();\n      const collection = db.collection<ProblemSet>('problemSets');\n      \n      const problemSet: ProblemSet = {\n        id: `ps_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        title: problemSetData.title || '',\n        description: problemSetData.description,\n        difficulty: problemSetData.difficulty || 'easy',\n        category: problemSetData.category,\n        tags: problemSetData.tags || [],\n        problemIds: problemSetData.problemIds || [],\n        problemInstances: problemSetData.problemInstances || [],\n        isPublic: problemSetData.isPublic !== false,\n        estimatedTime: problemSetData.estimatedTime,\n        totalProblems: problemSetData.problemIds?.length || 0,\n        createdBy: problemSetData.createdBy || '',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        // Assignment-specific fields\n        deadline: problemSetData.deadline,\n        maxAttempts: problemSetData.maxAttempts,\n        autoGrade: problemSetData.autoGrade,\n        questions: problemSetData.questions\n      };\n      \n      console.log('Creating problem set with ID:', problemSet.id);\n      \n      await collection.insertOne(problemSet);\n      return problemSet;\n    } catch (error) {\n      console.error('Error creating problem set:', error);\n      throw error;\n    }\n  }\n\n  async updateProblemSet(id: string, problemSetData: Partial<ProblemSet>): Promise<ProblemSet | null> {\n    try {\n      const db = getDb();\n      const collection = db.collection<ProblemSet>('problemSets');\n      \n      console.log('Updating problem set:', id, 'with data:', {\n        ...problemSetData,\n        problemInstances: problemSetData.problemInstances ? `${problemSetData.problemInstances.length} instances` : 'no instances'\n      });\n      \n      // First check if the document exists\n      const existingDoc = await collection.findOne({ id: id });\n      if (!existingDoc) {\n        console.error('Problem set not found for update:', id);\n        return null;\n      }\n      \n      const updateData = {\n        ...problemSetData,\n        updatedAt: new Date()\n      };\n      \n      console.log('Updating with data:', JSON.stringify(updateData, null, 2));\n      \n      const updateResult = await collection.updateOne(\n        { id: id },\n        { $set: updateData }\n      );\n      \n      console.log('MongoDB update result:', updateResult.matchedCount, 'matched,', updateResult.modifiedCount, 'modified');\n      \n      if (updateResult.matchedCount === 0) {\n        console.error('No document matched for update');\n        return null;\n      }\n      \n      // Get the updated document\n      const result = await collection.findOne({ id: id });\n      \n      console.log('Problem set update result:', result ? 'success' : 'failed', result?.problemInstances?.length || 0, 'instances');\n      \n      // Verify the update worked by re-fetching\n      const verifyDoc = await collection.findOne({ id: id });\n      console.log('Verification - problem instances after update:', verifyDoc?.problemInstances?.length || 0);\n      \n      return result || null;\n    } catch (error) {\n      console.error('Error updating problem set:', error);\n      return null;\n    }\n  }\n\n  async deleteProblemSet(id: string): Promise<void> {\n    const db = getDb();\n    try {\n      const result = await db.collection('problemsets').deleteOne({ id: id });\n      if (result.deletedCount === 0) {\n        throw new Error(`Problem set with id ${id} not found`);\n      }\n    } catch (error) {\n      console.error('Error deleting problem set:', error);\n      throw new Error('Failed to delete problem set');\n    }\n  }\n\n  // Problem Set Enrollment operations\n  async getProblemSetEnrollments(problemSetId: string): Promise<ProblemSetEnrollment[]> {\n    const db = getDb();\n    try {\n      console.log('Fetching enrollments for problem set:', problemSetId);\n      \n      // First try to find enrollments in the problem set document itself (new system)\n      const problemSet = await db.collection('problemsets').findOne({ \n        $or: [\n          { id: problemSetId },\n          { _id: new ObjectId(problemSetId) }\n        ]\n      });\n      \n      if (problemSet && problemSet.participants && problemSet.participants.length > 0) {\n        console.log('Found participants in problem set document:', problemSet.participants.length);\n        \n        // Transform participants to enrollment format\n        const enrollments = await Promise.all(problemSet.participants.map(async (participantId: string) => {\n          const user = await db.collection('users').findOne({ _id: new ObjectId(participantId) });\n          return {\n            id: 0, // Use 0 for participants array enrollments\n            problemSetId: problemSetId,\n            userId: participantId,\n            enrolledAt: new Date(),\n            progress: 0,\n            completedProblems: [],\n            totalSubmissions: 0,\n            correctSubmissions: 0,\n            enrollmentType: problemSet.enrollmentType,\n            user: user ? {\n              firstName: user.firstName,\n              lastName: user.lastName,\n              email: user.email\n            } : undefined\n          };\n        }));\n        \n        return enrollments as ProblemSetEnrollment[];\n      }\n      \n      // Fallback to old system (separate collection)\n      const enrollments = await db.collection('problemsetenrollments')\n        .aggregate([\n          { \n            $match: { \n              $or: [\n                { problemSetId: problemSetId },\n                { problemSetId: parseInt(problemSetId) }\n              ]\n            } \n          },\n          {\n            $addFields: {\n              userIdObject: { $toObjectId: '$userId' }\n            }\n          },\n          {\n            $lookup: {\n              from: 'users',\n              localField: 'userIdObject',\n              foreignField: '_id',\n              as: 'user',\n              pipeline: [\n                { $project: { firstName: 1, lastName: 1, email: 1 } }\n              ]\n            }\n          },\n          {\n            $addFields: {\n              user: { $arrayElemAt: ['$user', 0] }\n            }\n          }\n        ])\n        .toArray();\n      \n      console.log('Found enrollments in separate collection:', enrollments.map(e => ({ userId: e.userId, user: e.user })));\n      return enrollments as ProblemSetEnrollment[];\n    } catch (error) {\n      console.error('Error fetching problem set enrollments:', error);\n      return [];\n    }\n  }\n\n  async enrollUserInProblemSet(userId: string, problemSetId: string): Promise<ProblemSetEnrollment> {\n    const db = getDb();\n    try {\n      console.log('enrollUserInProblemSet called with:', { userId, problemSetId, userIdType: typeof userId });\n      \n      // Convert string userId to ObjectId for database storage\n      const userObjectId = new ObjectId(userId);\n      console.log('Converted userId to ObjectId for DB storage:', userObjectId);\n      \n       // First try to enroll in the problem set document itself (new system)\n       console.log('Looking for problem set with ID:', problemSetId);\n       \n       // Try to find the problem set by string ID first (most common case)\n       let problemSet = await db.collection('problemsets').findOne({ id: problemSetId });\n       \n       // If not found by string ID, try by ObjectId\n       if (!problemSet) {\n         console.log('Not found by string ID, trying ObjectId...');\n         try {\n           problemSet = await db.collection('problemsets').findOne({ _id: new ObjectId(problemSetId) });\n         } catch (error) {\n           console.log('ObjectId conversion failed, problemSetId is not a valid ObjectId');\n         }\n       }\n      \n      console.log('Problem set lookup result:', {\n        found: !!problemSet,\n        problemSetId: problemSet?.id,\n        problemSetMongoId: problemSet?._id,\n        currentParticipants: problemSet?.participants\n      });\n      \n      if (problemSet) {\n        console.log('Found problem set, checking for participants array');\n        \n        // Check if user is already enrolled in participants array\n        const isAlreadyEnrolled = problemSet.participants && \n          problemSet.participants.includes(userId);\n        \n        if (isAlreadyEnrolled) {\n          console.log('User already enrolled in participants array');\n          return {\n            id: 0,\n            problemSetId: problemSetId,\n            userId: userId,\n            enrolledAt: new Date(),\n            progress: 0,\n            completedProblems: [],\n            totalSubmissions: 0,\n            correctSubmissions: 0,\n            enrollmentType: problemSet.enrollmentType\n          } as ProblemSetEnrollment;\n        }\n        \n        // Add user to participants array\n        console.log('Attempting to update problem set participants array:', {\n          problemSetId: problemSet._id,\n          userId: userId,\n          currentParticipants: problemSet.participants\n        });\n        \n         // Use the most reliable update method - updateOne with string ID\n         console.log('Attempting to update participants array using updateOne...');\n         const updateResult = await db.collection('problemsets').updateOne(\n           { id: problemSet.id },\n           { \n             $addToSet: { participants: userId },\n             $set: { updatedAt: new Date() }\n           }\n         );\n         \n         console.log('Update result:', {\n           matchedCount: updateResult.matchedCount,\n           modifiedCount: updateResult.modifiedCount,\n           acknowledged: updateResult.acknowledged\n         });\n         \n         if (updateResult.modifiedCount === 0) {\n           console.error('No documents were modified during update');\n           throw new Error('Failed to update problem set participants array');\n         }\n         \n         // Fetch the updated document to verify\n         const updatedProblemSet = await db.collection('problemsets').findOne({ id: problemSet.id });\n        \n        console.log('Updated document verification:', {\n          success: !!updatedProblemSet,\n          updatedParticipants: updatedProblemSet?.participants,\n          userId: userId\n        });\n        \n        if (!updatedProblemSet) {\n          throw new Error('Failed to fetch updated problem set after enrollment');\n        }\n        \n        console.log('Successfully enrolled user in participants array');\n        \n        // Verify the enrollment by querying the database\n        const verificationQuery = await db.collection('problemsets').findOne({ id: problemSet.id });\n        console.log('Verification query result:', {\n          found: !!verificationQuery,\n          participants: verificationQuery?.participants,\n          userId: userId,\n          isUserInParticipants: verificationQuery?.participants?.includes(userId)\n        });\n        \n        return {\n          id: 0,\n          problemSetId: problemSetId,\n          userId: userId,\n          enrolledAt: new Date(),\n          progress: 0,\n          completedProblems: [],\n          totalSubmissions: 0,\n          correctSubmissions: 0,\n          enrollmentType: problemSet.enrollmentType\n        } as ProblemSetEnrollment;\n      }\n      \n      // Fallback to old system (separate collection)\n      console.log('Using fallback enrollment system');\n      \n      // Check if user is already enrolled\n      const existingEnrollment = await db.collection('problemsetenrollments')\n        .findOne({ \n          userId: userObjectId, \n          $or: [\n            { problemSetId: problemSetId },\n            { problemSetId: parseInt(problemSetId) }\n          ]\n        });\n      \n      if (existingEnrollment) {\n        // Convert userId back to string for frontend compatibility\n        return { \n          ...existingEnrollment, \n          userId: existingEnrollment.userId.toString() \n        } as ProblemSetEnrollment;\n      }\n\n      // Get next ID\n      const lastEnrollment = await db.collection('problemsetenrollments')\n        .findOne({}, { sort: { id: -1 } });\n      const nextId = (lastEnrollment?.id || 0) + 1;\n\n      // Store userId as ObjectId in database\n      const enrollment = {\n        id: nextId,\n        problemSetId: problemSetId,\n        userId: userObjectId,\n        enrolledAt: new Date(),\n        progress: 0,\n        completedProblems: [],\n        totalSubmissions: 0,\n        correctSubmissions: 0,\n        enrollmentType: 'admin' // Set enrollment type as admin\n      };\n\n      const result = await db.collection('problemsetenrollments').insertOne(enrollment);\n      \n      // Return with userId as string for frontend compatibility\n      return { \n        ...enrollment, \n        _id: result.insertedId,\n        userId: enrollment.userId.toString()\n      } as ProblemSetEnrollment;\n    } catch (error) {\n      console.error('Error enrolling user in problem set:', error);\n      throw new Error('Failed to enroll user in problem set');\n    }\n  }\n\n  async updateProblemSetEnrollment(id: number, enrollmentData: Partial<ProblemSetEnrollment>): Promise<ProblemSetEnrollment | null> {\n    const db = getDb();\n    try {\n      const result = await db.collection('problemsetenrollments').findOneAndUpdate(\n        { id: id },\n        { \n          $set: {\n            ...enrollmentData,\n            updatedAt: new Date()\n          }\n        },\n        { returnDocument: 'after' }\n      );\n      \n      return result as ProblemSetEnrollment || null;\n    } catch (error) {\n      console.error('Error updating problem set enrollment:', error);\n      throw new Error('Failed to update problem set enrollment');\n    }\n  }\n\n  async deleteProblemSetEnrollment(id: number): Promise<void> {\n    const db = getDb();\n    try {\n      console.log('Deleting problem set enrollment with ID:', id);\n      \n      // First try to delete from the legacy collection\n      const result = await db.collection('problemsetenrollments').deleteOne({ id: id });\n      if (result.deletedCount > 0) {\n        console.log('Successfully deleted enrollment from legacy collection');\n        return;\n      }\n      \n      // If not found in legacy collection, it might be in the participants array\n      // We need to find which problem set has this enrollment and remove the user\n      // Since participants array enrollments have id: 0, we need a different approach\n      if (id === 0) {\n        console.log('Cannot delete participants array enrollment by ID 0 - need userId and problemSetId');\n        throw new Error('Cannot delete participants array enrollment without additional context');\n      }\n      \n      throw new Error(`Problem set enrollment with id ${id} not found`);\n    } catch (error) {\n      console.error('Error deleting problem set enrollment:', error);\n      throw new Error('Failed to delete problem set enrollment');\n    }\n  }\n\n  async deleteProblemSetEnrollmentByUser(userId: string, problemSetId: string): Promise<void> {\n    const db = getDb();\n    try {\n      console.log('Deleting enrollment for user:', userId, 'from problem set:', problemSetId);\n      \n      // First try to remove from participants array (new system)\n      const problemSet = await db.collection('problemSets').findOne({ \n        $or: [\n          { id: problemSetId },\n          { _id: new ObjectId(problemSetId) }\n        ]\n      });\n      \n      if (problemSet && problemSet.participants && problemSet.participants.includes(userId)) {\n        await db.collection('problemSets').updateOne(\n          { _id: problemSet._id },\n          { \n            $pull: { participants: userId },\n            $set: { updatedAt: new Date() }\n          }\n        );\n        console.log('Successfully removed user from participants array');\n        return;\n      }\n      \n      // Fallback to legacy collection\n      const userObjectId = new ObjectId(userId);\n      const result = await db.collection('problemsetenrollments').deleteOne({ \n        userId: userObjectId,\n        $or: [\n          { problemSetId: problemSetId },\n          { problemSetId: parseInt(problemSetId) }\n        ]\n      });\n      \n      if (result.deletedCount > 0) {\n        console.log('Successfully deleted enrollment from legacy collection');\n        return;\n      }\n      \n      throw new Error(`Enrollment not found for user ${userId} in problem set ${problemSetId}`);\n    } catch (error) {\n      console.error('Error deleting problem set enrollment by user:', error);\n      throw new Error('Failed to delete problem set enrollment');\n    }\n  }\n\n  async getUserProblemSetEnrollments(userId: string): Promise<ProblemSetEnrollment[]> {\n    const db = getDb();\n    try {\n      const enrollments = await db.collection('problemsetenrollments')\n        .find({ userId: userId })\n        .toArray();\n      \n      return enrollments as ProblemSetEnrollment[];\n    } catch (error) {\n      console.error('Error fetching user problem set enrollments:', error);\n      return [];\n    }\n  }\n\n  private getFallbackProblemSets(): ProblemSet[] {\n    return [\n    {\n      id: \"ps_1\",\n      title: \"Array Fundamentals\",\n      description: \"Master basic array operations, traversal, and simple algorithms\",\n      difficulty: \"easy\",\n      category: \"Data Structures & Algorithms\",\n      tags: [\"arrays\", \"loops\", \"basic\", \"traversal\"],\n      problemIds: [\"1\", \"2\", \"3\"],\n      isPublic: true,\n      estimatedTime: 90,\n      totalProblems: 5,\n      createdBy: \"admin\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      maxAttempts: 3,\n      autoGrade: true,\n      questions: []\n    },\n    {\n      id: \"ps_2\", \n      title: \"Array Two Pointers\",\n      description: \"Learn the two-pointer technique for efficient array processing\",\n      difficulty: \"medium\",\n      category: \"Data Structures & Algorithms\",\n      tags: [\"arrays\", \"two-pointers\", \"optimization\"],\n      problemIds: [\"4\", \"5\"],\n      isPublic: true,\n      estimatedTime: 120,\n      totalProblems: 2,\n      createdBy: \"admin\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      maxAttempts: 3,\n      autoGrade: true,\n      questions: []\n    },\n    {\n      id: \"ps_3\",\n      title: \"String Processing\",\n      description: \"Master string manipulation and validation techniques\",\n      difficulty: \"easy\",\n      category: \"Data Structures & Algorithms\", \n      tags: [\"strings\", \"validation\", \"processing\"],\n      problemIds: [\"3\"],\n      isPublic: true,\n      estimatedTime: 60,\n      totalProblems: 1,\n      createdBy: \"admin\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      maxAttempts: 3,\n      autoGrade: true,\n      questions: []\n    },\n    {\n      id: \"ps_4\",\n      title: \"Mixed Fundamentals\",\n      description: \"A collection of fundamental programming problems\",\n      difficulty: \"easy\",\n      category: \"Data Structures & Algorithms\",\n      tags: [\"arrays\", \"fundamentals\", \"beginner\"],\n      problemIds: [\"1\", \"2\"],\n      isPublic: true,\n      estimatedTime: 90,\n      totalProblems: 2,\n      createdBy: \"admin\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      maxAttempts: 3,\n      autoGrade: true,\n      questions: []\n    },\n    {\n      id: \"ps_5\",\n      title: \"Advanced Problems\",\n      description: \"Challenge yourself with these medium-level problems\",\n      difficulty: \"medium\",\n      category: \"Data Structures & Algorithms\",\n      tags: [\"arrays\", \"optimization\", \"algorithms\"],\n      problemIds: [\"5\"],\n      isPublic: true,\n      estimatedTime: 120,\n      totalProblems: 1,\n      createdBy: \"admin\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      maxAttempts: 3,\n      autoGrade: true,\n      questions: []\n    },\n    {\n      id: \"ps_6\",\n      title: \"Complete Fundamentals\",\n      description: \"Master all fundamental problems in this comprehensive set\",\n      difficulty: \"easy\",\n      category: \"Data Structures & Algorithms\",\n      tags: [\"arrays\", \"strings\", \"fundamentals\", \"complete\"],\n      problemIds: [\"1\", \"2\", \"3\", \"4\", \"5\"],\n      isPublic: true,\n      estimatedTime: 300,\n      totalProblems: 5,\n      createdBy: \"admin\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      maxAttempts: 3,\n      autoGrade: true,\n      questions: []\n    }\n    ];\n  }\n\n  async resetUserCourseProgress(userId: string, courseId: number): Promise<void> {\n    try {\n      const db = getDb();\n      const userObjectId = new ObjectId(userId);\n\n      // Delete all module progress docs for this user in this course\n      await db.collection('moduleProgress').deleteMany({ courseId, userId: userObjectId });\n\n      // Reset enrollment progress and completedModules\n      await db.collection('courseEnrollments').updateOne(\n        { courseId, userId: userObjectId },\n        { $set: { progress: 0, completedModules: [], lastAccessedAt: new Date() } }\n      );\n\n      console.log(`[DEBUG] Reset progress for user ${userId} in course ${courseId}`);\n    } catch (error) {\n      console.error('Error resetting user course progress:', error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":101158},"client/src/components/ui/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"codearena-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1610},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/admin/AdminUsers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast, toastSuccess, toastError } from \"@/components/ui/use-toast\";\nimport { Search, UserCheck, UserX, Shield, User, Plus, Trash2, Edit } from \"lucide-react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  isActive: boolean;\n  createdAt: string;\n  lastLogin?: string;\n}\n\nexport default function AdminUsers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [newUser, setNewUser] = useState({ firstName: \"\", lastName: \"\", email: \"\", role: \"student\", password: \"\" });\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    staleTime: 30000,\n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      const response = await fetch(`/api/admin/users/${userId}/role`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem('token') || ''}`,\n        },\n        body: JSON.stringify({ role }),\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update user role\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch(`/api/admin/users`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token') || ''}`,\n        },\n        body: JSON.stringify(newUser),\n      });\n      if (!res.ok) throw new Error('Failed to create user');\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setNewUser({ firstName: \"\", lastName: \"\", email: \"\", role: \"student\", password: \"\" });\n      setShowCreateDialog(false);\n      toastSuccess('User Created Successfully', 'The new user has been added to the system');\n    },\n    onError: (e: any) => toastError('User Creation Failed', e.message || 'Failed to create user')\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const res = await fetch(`/api/admin/users/${userId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token') || ''}`,\n        },\n      });\n      if (!res.ok && res.status !== 204) throw new Error('Failed to delete user');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toastSuccess('User Deleted Successfully', 'The user has been removed from the system');\n    },\n    onError: (e: any) => toastError('User Deletion Failed', e.message || 'Failed to delete user')\n  });\n\n  const filteredUsers = users?.filter((user) => {\n    const matchesSearch = (user.name?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||\n                         (user.email?.toLowerCase() || '').includes(searchTerm.toLowerCase());\n    const matchesRole = roleFilter === \"all\" || user.role === roleFilter;\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"active\" && user.isActive) ||\n                         (statusFilter === \"inactive\" && !user.isActive);\n    \n    return matchesSearch && matchesRole && matchesStatus;\n  }) || [];\n\n  // State to control role elevation confirmation dialog\n  const [pendingRoleChange, setPendingRoleChange] = useState<{\n    userId: string;\n    newRole: string;\n    currentRole: string;\n    userName?: string;\n  } | null>(null);\n\n  const handleRoleChange = (userId: string, newRole: string, currentRole?: string, userName?: string) => {\n    // For ANY role change, show confirmation dialog first\n    if (currentRole !== newRole) {\n      setPendingRoleChange({ userId, newRole, currentRole: currentRole || 'student', userName });\n      return;\n    }\n    updateRoleMutation.mutate({ userId, role: newRole });\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case 'admin': return 'destructive';\n      case 'instructor': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const getStatusBadgeVariant = (isActive: boolean) => {\n    return isActive ? 'default' : 'secondary';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">User Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage user accounts, roles, and permissions</p>\n          </div>\n          <Button onClick={() => setShowCreateDialog(true)}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create User\n          </Button>\n        </div>\n      </div>\n\n      {/* Create User Dialog */}\n      <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create User</DialogTitle>\n            <DialogDescription>Add a new user to CodeArenaa</DialogDescription>\n          </DialogHeader>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 mt-2\">\n            <Input placeholder=\"First name\" value={newUser.firstName} onChange={e => setNewUser({ ...newUser, firstName: e.target.value })} />\n            <Input placeholder=\"Last name\" value={newUser.lastName} onChange={e => setNewUser({ ...newUser, lastName: e.target.value })} />\n            <Input placeholder=\"Email\" type=\"email\" value={newUser.email} onChange={e => setNewUser({ ...newUser, email: e.target.value })} />\n            <Input placeholder=\"Initial password (optional)\" type=\"password\" value={newUser.password} onChange={e => setNewUser({ ...newUser, password: e.target.value })} />\n            <div className=\"md:col-span-2\">\n              <Select value={newUser.role} onValueChange={(v) => setNewUser({ ...newUser, role: v })}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"student\">Student</SelectItem>\n                  <SelectItem value=\"instructor\">Instructor</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowCreateDialog(false)}>Cancel</Button>\n            <Button onClick={() => createUserMutation.mutate()} disabled={createUserMutation.isPending}>\n              {createUserMutation.isPending ? 'Creating...' : 'Create'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Filter Users</CardTitle>\n          <CardDescription>\n            Search and filter users by various criteria\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by name or email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filter by role\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Roles</SelectItem>\n                <SelectItem value=\"student\">Students</SelectItem>\n                <SelectItem value=\"instructor\">Instructors</SelectItem>\n                <SelectItem value=\"admin\">Administrators</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"h-4 w-4 text-muted-foreground\" />\n              <div>\n                <p className=\"text-sm font-medium\">Total Users</p>\n                <p className=\"text-2xl font-bold\">{users?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <UserCheck className=\"h-4 w-4 text-green-600\" />\n              <div>\n                <p className=\"text-sm font-medium\">Active Users</p>\n                <p className=\"text-2xl font-bold\">\n                  {users?.filter(u => u.isActive).length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"h-4 w-4 text-red-600\" />\n              <div>\n                <p className=\"text-sm font-medium\">Administrators</p>\n                <p className=\"text-2xl font-bold\">\n                  {users?.filter(u => u.role === 'admin').length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"h-4 w-4 text-blue-600\" />\n              <div>\n                <p className=\"text-sm font-medium\">Students</p>\n                <p className=\"text-2xl font-bold\">\n                  {users?.filter(u => u.role === 'student').length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Users List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Users ({filteredUsers.length})</CardTitle>\n          <CardDescription>\n            Manage user accounts and permissions\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {filteredUsers.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <User className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                <p className=\"text-lg font-medium\">No users found</p>\n                <p className=\"text-muted-foreground\">\n                  {searchTerm || roleFilter !== \"all\" || statusFilter !== \"all\"\n                    ? \"Try adjusting your filters\"\n                    : \"No users have been registered yet\"}\n                </p>\n              </div>\n            ) : (\n              filteredUsers.map((user) => (\n                <Card key={user.id} className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <User className=\"w-5 h-5 text-primary\" />\n                      </div>\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-medium\">{user.name}</h3>\n                          <Badge variant={getRoleBadgeVariant(user.role)}>\n                            {user.role}\n                          </Badge>\n                          <Badge variant={getStatusBadgeVariant(user.isActive)}>\n                            {user.isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Joined {new Date(user.createdAt).toLocaleDateString()}\n                          {user.lastLogin && (\n                            <span> • Last login {new Date(user.lastLogin).toLocaleDateString()}</span>\n                          )}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Select\n                        value={user.role}\n                        onValueChange={(newRole) => handleRoleChange(user.id, newRole, user.role, user.name)}\n                        disabled={updateRoleMutation.isPending}\n                      >\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"student\">Student</SelectItem>\n                          <SelectItem value=\"instructor\">Instructor</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          // TODO: Implement edit user functionality\n                          toast({\n                            title: \"Edit User\",\n                            description: \"Edit functionality coming soon\",\n                          });\n                        }}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      \n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button variant=\"destructive\" size=\"sm\" className=\"hover:bg-red-600\">\n                            <Trash2 className=\"w-4 h-4 mr-1\" />\n                            Delete\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete User</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete {user.name} ({user.email})? This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction \n                              onClick={() => deleteUserMutation.mutate(user.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                            >\n                              Delete User\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n                </Card>\n              ))\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Confirm role elevation dialog */}\n      <AlertDialog open={!!pendingRoleChange} onOpenChange={(open) => !open && setPendingRoleChange(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Change user role?</AlertDialogTitle>\n            <AlertDialogDescription>\n              {(() => {\n                const name = pendingRoleChange?.userName ? ` for ${pendingRoleChange.userName}` : '';\n                const fromRole = pendingRoleChange?.currentRole || 'student';\n                const toRole = pendingRoleChange?.newRole || 'student';\n                const adminNote = toRole === 'admin'\n                  ? ' Admins can manage users, contests, and problem sets with full platform access.'\n                  : (fromRole === 'admin' && toRole !== 'admin')\n                    ? ' This will revoke admin privileges for this user.'\n                    : '';\n                return `You are about to change the role${name} from ${fromRole} to ${toRole}.` + adminNote + ' This change takes effect immediately.';\n              })()}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => { setPendingRoleChange(null); queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] }); }}>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={() => {\n              if (pendingRoleChange) {\n                updateRoleMutation.mutate({ userId: pendingRoleChange.userId, role: pendingRoleChange.newRole });\n              }\n              setPendingRoleChange(null);\n            }}>Confirm</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":19524},"server/models/Submission.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface ISubmission {\n  id: number;\n  problemId: number;\n  problemInstanceId?: string; // Track specific problem instance\n  problemSetId?: string; // Link to the assignment/problem set\n  userId: string;\n  code: string;\n  language: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'accepted' | 'partial' | 'wrong_answer' | 'error';\n  runtime?: number;\n  memory?: number;\n  score?: string;\n  feedback?: string;\n  testResults?: any[];\n  isTest?: boolean;\n  submittedAt: Date;\n}\n\ninterface ISubmissionDocument extends Omit<ISubmission, 'id'>, Document {\n  _id: mongoose.Types.ObjectId;\n  id: number;\n}\n\nconst submissionSchema = new mongoose.Schema<ISubmissionDocument>({\n  id: {\n    type: Number,\n    required: true,\n    unique: true,\n  },\n  problemId: {\n    type: Number,\n    required: [true, 'Problem ID is required'],\n    index: true,\n  },\n  problemInstanceId: {\n    type: String,\n    required: false, // Optional for backward compatibility\n    index: true,\n  },\n  problemSetId: {\n    type: String,\n    required: false, // Optional for backward compatibility\n    index: true,\n  },\n  userId: {\n    type: String,\n    required: [true, 'User ID is required'],\n    index: true,\n  },\n  code: {\n    type: String,\n    required: [true, 'Code is required'],\n  },\n  language: {\n    type: String,\n    required: [true, 'Language is required'],\n    enum: {\n      values: ['javascript', 'python', 'java', 'cpp', 'c'],\n      message: '{VALUE} is not a supported language'\n    },\n  },\n  status: {\n    type: String,\n    required: true,\n    enum: {\n      values: ['pending', 'running', 'completed', 'failed', 'accepted', 'partial', 'wrong_answer', 'error'],\n      message: '{VALUE} is not a valid status'\n    },\n    default: 'pending',\n  },\n  runtime: {\n    type: Number,\n    min: [0, 'Runtime cannot be negative'],\n  },\n  memory: {\n    type: Number,\n    min: [0, 'Memory usage cannot be negative'],\n  },\n  score: {\n    type: String,\n  },\n  feedback: {\n    type: String,\n    trim: true,\n  },\n  testResults: [{\n    type: mongoose.Schema.Types.Mixed,\n  }],\n  isTest: {\n    type: Boolean,\n    default: false,\n  },\n  submittedAt: {\n    type: Date,\n    default: Date.now,\n  },\n}, {\n  timestamps: true,\n});\n\n// Indexes for efficient queries\nsubmissionSchema.index({ id: 1 });\nsubmissionSchema.index({ problemId: 1, userId: 1 });\nsubmissionSchema.index({ problemInstanceId: 1, userId: 1 }); // New index for instance-specific queries\nsubmissionSchema.index({ problemSetId: 1, userId: 1 }); // New index for set-specific queries\nsubmissionSchema.index({ userId: 1, submittedAt: -1 });\nsubmissionSchema.index({ status: 1 });\nsubmissionSchema.index({ submittedAt: -1 });\n\n// Virtual for submission result\nsubmissionSchema.virtual('isSuccessful').get(function() {\n  return this.status === 'completed' && this.score === '100%';\n});\n\n// Virtual for execution time in seconds\nsubmissionSchema.virtual('executionTimeSeconds').get(function() {\n  return this.runtime ? (this.runtime / 1000).toFixed(3) : null;\n});\n\n// Method to update submission status\nsubmissionSchema.methods.updateStatus = async function(status: string, feedback?: string) {\n  this.status = status;\n  if (feedback) this.feedback = feedback;\n  return await this.save();\n};\n\n// Method to set test results\nsubmissionSchema.methods.setTestResults = async function(testResults: any[]) {\n  this.testResults = testResults;\n  return await this.save();\n};\n\n// Static method to find submissions by user\nsubmissionSchema.statics.findByUser = function(userId: string) {\n  return this.find({ userId }).sort({ submittedAt: -1 });\n};\n\n// Static method to find submissions by problem\nsubmissionSchema.statics.findByProblem = function(problemId: number) {\n  return this.find({ problemId }).sort({ submittedAt: -1 });\n};\n\n// Static method to find successful submissions\nsubmissionSchema.statics.findSuccessful = function(userId: string, problemId?: number) {\n  const query: any = { userId, status: 'completed', score: '100%' };\n  if (problemId) query.problemId = problemId;\n  return this.find(query);\n};\n\n// Static method to get submission statistics\nsubmissionSchema.statics.getStats = async function(userId?: string) {\n  const matchStage = userId ? { userId } : {};\n  const stats = await this.aggregate([\n    { $match: matchStage },\n    {\n      $group: {\n        _id: '$status',\n        count: { $sum: 1 },\n        avgRuntime: { $avg: '$runtime' },\n        avgMemory: { $avg: '$memory' }\n      }\n    }\n  ]);\n  return stats;\n};\n\n// Middleware to cleanup enrollment when submissions are deleted\nsubmissionSchema.pre('deleteOne', { document: true, query: false }, async function() {\n  try {\n    const submission = this;\n    await cleanupEnrollmentAfterSubmissionDeletion(submission);\n  } catch (error) {\n    console.error('Error in deleteOne middleware:', error);\n  }\n});\n\nsubmissionSchema.pre('deleteMany', { document: false, query: true }, async function() {\n  try {\n    const submissions = await this.model.find(this.getQuery());\n    for (const submission of submissions) {\n      await cleanupEnrollmentAfterSubmissionDeletion(submission);\n    }\n  } catch (error) {\n    console.error('Error in deleteMany middleware:', error);\n  }\n});\n\n// Helper function to cleanup enrollment after submission deletion\nasync function cleanupEnrollmentAfterSubmissionDeletion(submission: any) {\n  try {\n    const { ProblemSetEnrollment } = await import('./ProblemSetEnrollment');\n    const { ProblemSet } = await import('./ProblemSet');\n    \n    // Determine the problemSetId from the submission\n    let problemSetId = submission.problemSetId;\n    if (!problemSetId && submission.problemInstanceId) {\n      const ps = await ProblemSet.findOne({ 'problemInstances._id': submission.problemInstanceId }).lean();\n      if (ps) {\n        problemSetId = ps.id || ps._id;\n      }\n    }\n    \n    if (problemSetId) {\n      const enrollment = await ProblemSetEnrollment.findOne({ \n        problemSetId, \n        userId: submission.userId \n      });\n      \n      if (enrollment) {\n        // Decrement total submissions\n        enrollment.totalSubmissions = Math.max(0, enrollment.totalSubmissions - 1);\n        \n        // If the deleted submission was accepted, decrement correct submissions and remove from completed problems\n        if (submission.status === 'accepted') {\n          enrollment.correctSubmissions = Math.max(0, enrollment.correctSubmissions - 1);\n          \n          const problemId = submission.problemId;\n          enrollment.completedProblems = enrollment.completedProblems.filter(id => id !== problemId);\n        }\n        \n        // Recalculate progress\n        const ps = await ProblemSet.findOne({ id: problemSetId }).lean();\n        if (ps) {\n          const totalProblems = ps.problemInstances?.length || (ps as any).problems?.length || 0;\n          const progress = totalProblems > 0 ? Math.min(100, Math.round((enrollment.completedProblems.length / totalProblems) * 100)) : 0;\n          enrollment.progress = progress;\n        }\n        \n        // Update timestamp\n        (enrollment as any).updatedAt = new Date();\n        \n        await enrollment.save();\n        \n        console.log(`[ENROLLMENT] Cleaned up enrollment after submission deletion: user ${submission.userId}, problem set ${problemSetId}, progress=${enrollment.progress}%, completed=${enrollment.completedProblems.length}, totalSubmissions=${enrollment.totalSubmissions}, correctSubmissions=${enrollment.correctSubmissions}`);\n      }\n    }\n  } catch (error) {\n    console.error('Error cleaning up enrollment after submission deletion:', error);\n  }\n}\n\nexport const Submission = mongoose.model<ISubmissionDocument>('Submission', submissionSchema); ","size_bytes":7714},"client/src/pages/admin/leaderboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Trophy, Star, Calendar } from \"lucide-react\";\n\ninterface LeaderboardEntry {\n  id: number;\n  rank: number;\n  user: {\n    id: number;\n    name: string;\n    email: string;\n    avatar?: string;\n  };\n  score: number;\n  problemsSolved: number;\n  contestsParticipated: number;\n  lastActive: string;\n}\n\nexport default function AdminLeaderboard() {\n  const [timeRange, setTimeRange] = useState<\"all\" | \"day\" | \"week\" | \"month\">(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: leaderboard, isLoading } = useQuery<LeaderboardEntry[]>({\n    queryKey: [\"/api/admin/leaderboard\", timeRange],\n    retry: false,\n  });\n\n  const filteredLeaderboard = leaderboard?.filter(entry =>\n    entry.user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    entry.user.email.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const getRankBadgeColor = (rank: number) => {\n    if (rank === 1) return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\";\n    if (rank === 2) return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\";\n    if (rank === 3) return \"bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400\";\n    return \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\";\n  };\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n            Leaderboard\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Track and monitor user performance across the platform.\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-4 mb-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Trophy className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{leaderboard?.length || 0}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Today</CardTitle>\n            <Star className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {leaderboard?.filter(entry => {\n                const lastActive = new Date(entry.lastActive);\n                const today = new Date();\n                return lastActive.toDateString() === today.toDateString();\n              }).length || 0}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Problems Solved</CardTitle>\n            <Calendar className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {leaderboard?.reduce((acc, entry) => acc + entry.problemsSolved, 0) || 0}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Contest Participants</CardTitle>\n            <Trophy className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {leaderboard?.filter(entry => entry.contestsParticipated > 0).length || 0}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Search className=\"h-5 w-5\" />\n              <span>Search Users</span>\n            </div>\n            <Select value={timeRange} onValueChange={(value: \"all\" | \"day\" | \"week\" | \"month\") => setTimeRange(value)}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Select time range\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Time</SelectItem>\n                <SelectItem value=\"day\">Last 24 Hours</SelectItem>\n                <SelectItem value=\"week\">This Week</SelectItem>\n                <SelectItem value=\"month\">This Month</SelectItem>\n              </SelectContent>\n            </Select>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Input\n            placeholder=\"Search by name or email...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </CardContent>\n      </Card>\n\n      {isLoading ? (\n        <div className=\"space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"h-12 w-12 rounded-full bg-gray-200 dark:bg-gray-700\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4\"></div>\n                    <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/3\"></div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-24\"></div>\n                    <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-16\"></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {filteredLeaderboard.map((entry) => (\n            <Card key={entry.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center justify-center h-12 w-12 rounded-full bg-gray-100 dark:bg-gray-800\">\n                    {entry.user.avatar ? (\n                      <img\n                        src={entry.user.avatar}\n                        alt={entry.user.name}\n                        className=\"h-12 w-12 rounded-full\"\n                      />\n                    ) : (\n                      <div className=\"text-2xl font-bold text-gray-500\">\n                        {entry.user.name.charAt(0)}\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                        {entry.user.name}\n                      </h3>\n                      <Badge className={getRankBadgeColor(entry.rank)}>\n                        #{entry.rank}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      {entry.user.email}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                      {entry.score} points\n                    </div>\n                    <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      {entry.problemsSolved} problems solved\n                    </div>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center justify-between text-sm text-gray-500 dark:text-gray-400\">\n                  <div>\n                    Contests participated: {entry.contestsParticipated}\n                  </div>\n                  <div>\n                    Last active: {new Date(entry.lastActive).toLocaleDateString()}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {!isLoading && filteredLeaderboard.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"text-gray-500 dark:text-gray-400\">\n              <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No users found</h3>\n              <p>Try adjusting your search criteria.</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n} ","size_bytes":9149},"client/src/pages/auth/ResetPassword.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { ArrowLeft, Lock, CheckCircle } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function ResetPassword() {\n  const [, setLocation] = useLocation();\n  const [token, setToken] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  useEffect(() => {\n    // Get token from URL query parameter\n    const urlParams = new URLSearchParams(window.location.search);\n    const tokenParam = urlParams.get('token');\n    if (tokenParam) {\n      setToken(tokenParam);\n    }\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (newPassword !== confirmPassword) {\n      setMessage('Passwords do not match');\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      setMessage('Password must be at least 6 characters long');\n      return;\n    }\n\n    setIsLoading(true);\n    setMessage('');\n\n    try {\n      const response = await apiRequest('POST', '/api/auth/reset-password', { \n        token, \n        newPassword \n      });\n      const data = await response.json();\n\n      if (response.ok) {\n        setIsSuccess(true);\n        setMessage(data.message);\n      } else {\n        setMessage(data.message || 'Failed to reset password');\n      }\n    } catch (error) {\n      setMessage('An error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!token) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-slate-50 dark:bg-slate-900 p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-xl text-red-600 dark:text-red-400\">\n              Invalid Reset Link\n            </CardTitle>\n            <CardDescription>\n              The password reset link is invalid or has expired.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button\n              className=\"w-full\"\n              onClick={() => setLocation('/forgot-password')}\n            >\n              Request New Reset Link\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-slate-50 dark:bg-slate-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation('/login')}\n            className=\"absolute left-4 top-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          \n          <div className=\"mx-auto w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mb-4\">\n            <Lock className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n          </div>\n          \n          <CardTitle className=\"text-2xl\">Reset Password</CardTitle>\n          <CardDescription>\n            Enter your new password below.\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          {!isSuccess ? (\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"newPassword\">New Password</Label>\n                <Input\n                  id=\"newPassword\"\n                  type=\"password\"\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  required\n                  placeholder=\"Enter your new password\"\n                  className=\"bg-white dark:bg-gray-800\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                  placeholder=\"Confirm your new password\"\n                  className=\"bg-white dark:bg-gray-800\"\n                />\n              </div>\n\n              {message && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription>{message}</AlertDescription>\n                </Alert>\n              )}\n\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? 'Resetting...' : 'Reset Password'}\n              </Button>\n            </form>\n          ) : (\n            <div className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <h3 className=\"text-lg font-semibold text-green-600 dark:text-green-400\">\n                  Password Reset Successful\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {message}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Button\n                  className=\"w-full\"\n                  onClick={() => setLocation('/login')}\n                >\n                  Sign In\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","size_bytes":6129},"client/src/types/problem.ts":{"content":"export interface Problem {\n  id: number;\n  // Optional when viewing an assignment instance\n  instanceId?: string;\n  problemSetId?: string;\n  isInstance?: boolean;\n  title: string;\n  description: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n  tags: string[];\n  testCases: TestCase[];\n  inputFormat?: string;\n  outputFormat?: string;\n  constraints?: string;\n  examples: Example[];\n  starterCode?: Record<string, string>;\n  timeLimit?: number;\n  memoryLimit?: number;\n  notes?: string;\n  difficulty_rating?: number;\n}\n\nexport interface TestCase {\n  input: string;\n  expectedOutput: string;\n  isHidden: boolean;\n  timeLimit?: number;\n  memoryLimit?: number;\n  explanation?: string;\n}\n\nexport interface Example {\n  input: string;\n  output: string;\n  explanation?: string;\n} ","size_bytes":774},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"execution-system/queue/src/server.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst { RateLimiterRedis } = require('rate-limiter-flexible');\nconst { v4: uuidv4 } = require('uuid');\nconst Redis = require('redis');\n\nconst config = require('./config');\nconst logger = require('./logger');\nconst ExecutionQueue = require('./queue');\n\nclass ExecutionAPI {\n  constructor() {\n    this.app = express();\n    this.queue = new ExecutionQueue();\n    this.rateLimiter = null;\n    this.redis = null;\n  }\n\n  async initialize() {\n    try {\n      logger.info('Initializing Execution API...');\n\n      // Initialize Redis for rate limiting\n      this.redis = Redis.createClient({\n        host: config.redis.host,\n        port: config.redis.port,\n        password: config.redis.password,\n        db: config.redis.db + 1 // Use different DB for rate limiting\n      });\n      await this.redis.connect();\n\n      // Initialize rate limiter\n      this.rateLimiter = new RateLimiterRedis({\n        storeClient: this.redis,\n        keyGenerator: (req) => req.ip,\n        points: config.api.rateLimit.max,\n        duration: config.api.rateLimit.windowMs / 1000,\n        blockDuration: 60, // Block for 1 minute after limit exceeded\n      });\n\n      // Initialize queue\n      await this.queue.initialize();\n\n      // Setup middleware\n      this.setupMiddleware();\n\n      // Setup routes\n      this.setupRoutes();\n\n      // Setup error handling\n      this.setupErrorHandling();\n\n      logger.info('Execution API initialized successfully');\n    } catch (error) {\n      logger.error('Failed to initialize Execution API:', error);\n      throw error;\n    }\n  }\n\n  setupMiddleware() {\n    // Security middleware\n    this.app.use(helmet({\n      contentSecurityPolicy: false,\n      crossOriginEmbedderPolicy: false\n    }));\n\n    // CORS\n    this.app.use(cors(config.api.cors));\n\n    // Body parsing\n    this.app.use(express.json({ \n      limit: '1mb',\n      strict: true \n    }));\n    this.app.use(express.urlencoded({ \n      extended: true, \n      limit: '1mb' \n    }));\n\n    // Request ID middleware\n    this.app.use((req, res, next) => {\n      req.requestId = uuidv4();\n      res.setHeader('X-Request-ID', req.requestId);\n      req.logger = logger.addRequestId(req.requestId);\n      next();\n    });\n\n    // Request logging\n    this.app.use((req, res, next) => {\n      const start = Date.now();\n      req.logger.info(`${req.method} ${req.path}`, {\n        ip: req.ip,\n        userAgent: req.get('User-Agent'),\n        body: req.method === 'POST' ? 'redacted' : undefined\n      });\n\n      res.on('finish', () => {\n        const duration = Date.now() - start;\n        req.logger.info(`${req.method} ${req.path} completed`, {\n          statusCode: res.statusCode,\n          duration\n        });\n      });\n\n      next();\n    });\n\n    // Rate limiting middleware\n    this.app.use(async (req, res, next) => {\n      try {\n        await this.rateLimiter.consume(req.ip);\n        next();\n      } catch (rejRes) {\n        req.logger.warn('Rate limit exceeded', { ip: req.ip });\n        res.status(429).json({\n          error: 'Too many requests',\n          retryAfter: Math.round(rejRes.msBeforeNext / 1000) || 1\n        });\n      }\n    });\n  }\n\n  setupRoutes() {\n    // Health check\n    this.app.get('/health', (req, res) => {\n      res.json({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        version: require('../package.json').version\n      });\n    });\n\n    // Queue stats\n    this.app.get('/api/stats', async (req, res) => {\n      try {\n        const stats = await this.queue.getQueueStats();\n        res.json(stats);\n      } catch (error) {\n        req.logger.error('Failed to get queue stats:', error);\n        res.status(500).json({ error: 'Failed to get queue statistics' });\n      }\n    });\n\n    // Submit code for execution\n    this.app.post('/api/execute', async (req, res) => {\n      try {\n        const { code, language, input, testCases } = req.body;\n\n        // Validate request\n        const validation = this.validateExecutionRequest(req.body);\n        if (!validation.valid) {\n          return res.status(400).json({ \n            error: 'Validation failed', \n            details: validation.errors \n          });\n        }\n\n        // Create job data\n        const jobData = {\n          id: uuidv4(),\n          code,\n          language: language.toLowerCase(),\n          input: input || '',\n          testCases: testCases || [],\n          submittedAt: new Date().toISOString(),\n          requestId: req.requestId,\n          limits: {\n            timeLimit: config.execution.timeLimit,\n            memoryLimit: config.execution.memoryLimit,\n            outputLimit: config.execution.outputLimit\n          }\n        };\n\n        // Add job to queue\n        const job = await this.queue.addJob(jobData, {\n          priority: testCases && testCases.length > 0 ? 5 : 1, // Higher priority for test cases\n          delay: 0\n        });\n\n        req.logger.info(`Code execution job created`, { \n          jobId: job.id, \n          language,\n          hasTestCases: !!(testCases && testCases.length > 0)\n        });\n\n        res.status(202).json({\n          jobId: job.id,\n          status: 'queued',\n          message: 'Code execution job submitted successfully'\n        });\n\n      } catch (error) {\n        req.logger.error('Failed to submit execution job:', error);\n        res.status(500).json({ error: 'Failed to submit execution job' });\n      }\n    });\n\n    // Get job status\n    this.app.get('/api/jobs/:jobId', async (req, res) => {\n      try {\n        const { jobId } = req.params;\n        const status = await this.queue.getJobStatus(jobId);\n\n        if (!status) {\n          return res.status(404).json({ error: 'Job not found' });\n        }\n\n        res.json(status);\n      } catch (error) {\n        req.logger.error('Failed to get job status:', error);\n        res.status(500).json({ error: 'Failed to get job status' });\n      }\n    });\n\n    // Cancel job\n    this.app.delete('/api/jobs/:jobId', async (req, res) => {\n      try {\n        const { jobId } = req.params;\n        const removed = await this.queue.removeJob(jobId);\n\n        if (!removed) {\n          return res.status(404).json({ error: 'Job not found' });\n        }\n\n        req.logger.info(`Job cancelled`, { jobId });\n        res.json({ message: 'Job cancelled successfully' });\n      } catch (error) {\n        req.logger.error('Failed to cancel job:', error);\n        res.status(500).json({ error: 'Failed to cancel job' });\n      }\n    });\n\n    // Get supported languages\n    this.app.get('/api/languages', (req, res) => {\n      res.json({\n        languages: Object.keys(config.worker.docker.images),\n        limits: config.execution\n      });\n    });\n  }\n\n  validateExecutionRequest(body) {\n    const errors = [];\n    const { code, language, input, testCases } = body;\n\n    // Required fields\n    if (!code || typeof code !== 'string') {\n      errors.push('Code is required and must be a string');\n    } else if (code.length > config.execution.maxCodeSize) {\n      errors.push(`Code size exceeds maximum limit of ${config.execution.maxCodeSize} bytes`);\n    }\n\n    if (!language || typeof language !== 'string') {\n      errors.push('Language is required and must be a string');\n    } else if (!config.worker.docker.images[language.toLowerCase()]) {\n      errors.push(`Unsupported language: ${language}. Supported languages: ${Object.keys(config.worker.docker.images).join(', ')}`);\n    }\n\n    // Optional fields validation\n    if (input && typeof input !== 'string') {\n      errors.push('Input must be a string');\n    } else if (input && input.length > config.execution.maxInputSize) {\n      errors.push(`Input size exceeds maximum limit of ${config.execution.maxInputSize} bytes`);\n    }\n\n    if (testCases) {\n      if (!Array.isArray(testCases)) {\n        errors.push('Test cases must be an array');\n      } else {\n        testCases.forEach((testCase, index) => {\n          if (!testCase.input || typeof testCase.input !== 'string') {\n            errors.push(`Test case ${index + 1}: input is required and must be a string`);\n          }\n          if (!testCase.expectedOutput || typeof testCase.expectedOutput !== 'string') {\n            errors.push(`Test case ${index + 1}: expectedOutput is required and must be a string`);\n          }\n        });\n      }\n    }\n\n    return { valid: errors.length === 0, errors };\n  }\n\n  setupErrorHandling() {\n    // 404 handler\n    this.app.use('*', (req, res) => {\n      res.status(404).json({ error: 'Endpoint not found' });\n    });\n\n    // Global error handler\n    this.app.use((error, req, res, next) => {\n      req.logger.error('Unhandled error:', error);\n      res.status(500).json({ \n        error: 'Internal server error',\n        requestId: req.requestId \n      });\n    });\n  }\n\n  async start() {\n    return new Promise((resolve, reject) => {\n      try {\n        const server = this.app.listen(config.api.port, () => {\n          logger.info(`Execution API listening on port ${config.api.port}`);\n          resolve(server);\n        });\n\n        server.setTimeout(config.api.timeout);\n        \n        // Graceful shutdown\n        process.on('SIGTERM', async () => {\n          logger.info('SIGTERM received, shutting down gracefully');\n          server.close(() => {\n            this.queue.close().then(() => {\n              process.exit(0);\n            });\n          });\n        });\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n// Start server if this file is run directly\nif (require.main === module) {\n  const api = new ExecutionAPI();\n  api.initialize()\n    .then(() => api.start())\n    .catch((error) => {\n      logger.error('Failed to start Execution API:', error);\n      process.exit(1);\n    });\n}\n\nmodule.exports = ExecutionAPI; ","size_bytes":9810},"server/routes/versionHistory.ts":{"content":"import { Router } from 'express';\nimport { protect, requireAdmin, type AuthRequest } from '../middleware/auth';\nimport { VersionHistory } from '../models/VersionHistory';\n\nconst router = Router();\n\n// Get latest N activities (default 4) for dashboard widgets\nrouter.get('/recent', protect as any, requireAdmin as any, async (req: AuthRequest, res) => {\n  try {\n    const limit = Math.max(1, Math.min(50, parseInt(String(req.query.limit || '4'), 10)));\n    const items = await VersionHistory.find({})\n      .sort({ createdAt: -1 })\n      .limit(limit)\n      .lean();\n    res.json(items.map((i: any) => ({\n      id: i._id?.toString?.() || i.id,\n      action: i.action,\n      description: i.description,\n      entityType: i.entityType,\n      entityId: i.entityId,\n      metadata: i.metadata,\n      adminName: i.adminName,\n      adminId: i.adminId?.toString?.() || i.adminId,\n      createdAt: i.createdAt,\n    })));\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to fetch recent activities', error: error.message });\n  }\n});\n\n// Full list with filters and pagination\nrouter.get('/', protect as any, requireAdmin as any, async (req: AuthRequest, res) => {\n  try {\n    const page = Math.max(1, parseInt(String(req.query.page || '1'), 10));\n    const pageSize = Math.max(1, Math.min(100, parseInt(String(req.query.pageSize || '20'), 10)));\n    const skip = (page - 1) * pageSize;\n\n    const entityType = req.query.entityType as string | undefined;\n    const adminId = req.query.adminId as string | undefined;\n    const search = req.query.search as string | undefined;\n    const from = req.query.from as string | undefined;\n    const to = req.query.to as string | undefined;\n\n    const query: any = {};\n    if (entityType) query.entityType = entityType;\n    if (adminId) query.adminId = adminId;\n    if (from || to) {\n      query.createdAt = {};\n      if (from) query.createdAt.$gte = new Date(from);\n      if (to) query.createdAt.$lte = new Date(to);\n    }\n    if (search) {\n      query.$or = [\n        { action: { $regex: search, $options: 'i' } },\n        { description: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    const [items, total] = await Promise.all([\n      VersionHistory.find(query).sort({ createdAt: -1 }).skip(skip).limit(pageSize).lean(),\n      VersionHistory.countDocuments(query),\n    ]);\n\n    res.json({\n      items: items.map((i: any) => ({\n        id: i._id?.toString?.() || i.id,\n        action: i.action,\n        description: i.description,\n        entityType: i.entityType,\n        entityId: i.entityId,\n        metadata: i.metadata,\n        adminName: i.adminName,\n        adminId: i.adminId?.toString?.() || i.adminId,\n        createdAt: i.createdAt,\n      })),\n      total,\n      page,\n      pageSize,\n      totalPages: Math.ceil(total / pageSize),\n    });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to fetch version history', error: error.message });\n  }\n});\n\nexport default router; ","size_bytes":2962},"server/scripts/migrate-contest-end-method.js":{"content":"const mongoose = require('mongoose');\nconst { Contest } = require('../models/Contest');\nconst { ContestParticipant } = require('../models/ContestParticipant');\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/codearena', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nasync function migrateContestEndMethod() {\n  try {\n    console.log('Starting migration of contest end method...');\n    \n    // Get all contests\n    const contests = await Contest.find({}).lean();\n    console.log(`Found ${contests.length} contests`);\n    \n    let updatedParticipants = 0;\n    \n    for (const contest of contests) {\n      console.log(`Processing contest: ${contest.title} (${contest.id})`);\n      \n      // Check if contest has ended by time\n      const now = new Date();\n      const contestEndTime = new Date(contest.endTime);\n      const hasEndedByTime = now > contestEndTime;\n      \n      // Determine end method\n      let endMethod = null;\n      if (contest.contestEndMethod) {\n        endMethod = contest.contestEndMethod;\n      } else if (hasEndedByTime) {\n        endMethod = 'time_expired';\n      }\n      \n      if (endMethod) {\n        // Update all participants for this contest\n        const result = await ContestParticipant.updateMany(\n          { contestId: contest.id },\n          { \n            $set: { \n              contestEndMethod: endMethod,\n              updatedAt: new Date()\n            }\n          }\n        );\n        \n        if (result.modifiedCount > 0) {\n          console.log(`  Updated ${result.modifiedCount} participants with end method: ${endMethod}`);\n          updatedParticipants += result.modifiedCount;\n        }\n        \n        // Also update the contest if it doesn't have contestEndMethod set\n        if (!contest.contestEndMethod && endMethod === 'time_expired') {\n          await Contest.updateOne(\n            { id: contest.id },\n            { \n              $set: { \n                contestEndMethod: endMethod,\n                updatedAt: new Date()\n              }\n            }\n          );\n          console.log(`  Updated contest with end method: ${endMethod}`);\n        }\n      } else {\n        console.log(`  Contest is still active, no end method to set`);\n      }\n    }\n    \n    console.log(`\\nMigration completed!`);\n    console.log(`Total participants updated: ${updatedParticipants}`);\n    \n  } catch (error) {\n    console.error('Migration failed:', error);\n  } finally {\n    mongoose.connection.close();\n    console.log('Database connection closed');\n  }\n}\n\n// Run migration\nmigrateContestEndMethod(); ","size_bytes":2603},"shared/schema.js":{"content":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.insertAnnouncementSchema = exports.insertContestParticipantSchema = exports.insertGroupSchema = exports.insertAssignmentSubmissionSchema = exports.questionSubmissionSchema = exports.insertAssignmentSchema = exports.assignmentQuestionSchema = exports.mcqOptionSchema = exports.insertUserProgressSchema = exports.insertProblemSetEnrollmentSchema = exports.insertProblemSetSchema = exports.problemInstanceSchema = exports.insertCourseEnrollmentSchema = exports.insertCourseModuleSchema = exports.insertCourseSchema = exports.contestLeaderboardEntrySchema = exports.insertContestSchema = exports.contestProblemSchema = exports.contestAnalyticsSchema = exports.contestQuestionSchema = exports.contestParticipantSchema = exports.insertSubmissionSchema = exports.insertProblemSchema = exports.exampleSchema = exports.starterCodeSchema = exports.testCaseSchema = exports.insertUserSchema = void 0;\nconst zod_1 = require(\"zod\");\n// MongoDB-compatible schemas using Zod for validation\nexports.insertUserSchema = zod_1.z.object({\n    id: zod_1.z.string(),\n    email: zod_1.z.string().email().optional(),\n    firstName: zod_1.z.string().optional(),\n    lastName: zod_1.z.string().optional(),\n    profileImageUrl: zod_1.z.string().url().optional(),\n    role: zod_1.z.string().default(\"student\"),\n});\nexports.testCaseSchema = zod_1.z.object({\n    input: zod_1.z.string(),\n    expectedOutput: zod_1.z.string(),\n    explanation: zod_1.z.string().optional(),\n    isHidden: zod_1.z.boolean().default(false),\n    timeLimit: zod_1.z.number().optional(),\n    memoryLimit: zod_1.z.number().optional(),\n});\nexports.starterCodeSchema = zod_1.z.object({\n    python: zod_1.z.string().optional(),\n    javascript: zod_1.z.string().optional(),\n    java: zod_1.z.string().optional(),\n    cpp: zod_1.z.string().optional(),\n    c: zod_1.z.string().optional(),\n});\nexports.exampleSchema = zod_1.z.object({\n    input: zod_1.z.string(),\n    output: zod_1.z.string(),\n    explanation: zod_1.z.string().optional(),\n});\nexports.insertProblemSchema = zod_1.z.object({\n    title: zod_1.z.string(),\n    description: zod_1.z.string(),\n    difficulty: zod_1.z.enum([\"easy\", \"medium\", \"hard\"]),\n    tags: zod_1.z.array(zod_1.z.string()).optional(),\n    constraints: zod_1.z.string().optional(),\n    inputFormat: zod_1.z.string(),\n    outputFormat: zod_1.z.string(),\n    examples: zod_1.z.array(exports.exampleSchema).min(1),\n    testCases: zod_1.z.array(exports.testCaseSchema).min(1),\n    timeLimit: zod_1.z.number().default(10000), // milliseconds\n    memoryLimit: zod_1.z.number().default(1024), // MB\n    starterCode: exports.starterCodeSchema,\n    isPublic: zod_1.z.boolean().default(true),\n    createdBy: zod_1.z.string().optional(),\n    solutionCode: exports.starterCodeSchema.optional(),\n    notes: zod_1.z.string().optional(), // Admin notes about the problem\n    difficulty_rating: zod_1.z.number().min(1).max(5).optional(), // More granular difficulty rating\n});\n// Enhanced submission schema for contests\nexports.insertSubmissionSchema = zod_1.z.object({\n    problemId: zod_1.z.number(),\n    userId: zod_1.z.string(),\n    code: zod_1.z.string(),\n    language: zod_1.z.string(),\n    status: zod_1.z.string(),\n    runtime: zod_1.z.number().optional(),\n    memory: zod_1.z.number().optional(),\n    score: zod_1.z.string().optional(),\n    feedback: zod_1.z.string().optional(),\n    // Contest-specific fields\n    contestId: zod_1.z.string().optional(), // for contest submissions\n    contestProblemId: zod_1.z.string().optional(), // contest problem instance ID\n    points: zod_1.z.number().optional(), // points earned\n    submissionTime: zod_1.z.date().default(() => new Date()),\n    penalty: zod_1.z.number().default(0), // penalty points\n    isContestSubmission: zod_1.z.boolean().default(false),\n});\n// Contest participation tracking\nexports.contestParticipantSchema = zod_1.z.object({\n    contestId: zod_1.z.string(),\n    userId: zod_1.z.string(),\n    registrationTime: zod_1.z.date().default(() => new Date()),\n    startTime: zod_1.z.date().optional(), // when user started the contest\n    endTime: zod_1.z.date().optional(), // when user finished/left the contest\n    totalScore: zod_1.z.number().default(0),\n    totalPenalty: zod_1.z.number().default(0),\n    rank: zod_1.z.number().optional(),\n    submissions: zod_1.z.array(zod_1.z.string()).default([]), // submission IDs\n    problemsAttempted: zod_1.z.array(zod_1.z.string()).default([]), // problem IDs attempted\n    problemsSolved: zod_1.z.array(zod_1.z.string()).default([]), // problem IDs solved\n    isDisqualified: zod_1.z.boolean().default(false),\n    disqualificationReason: zod_1.z.string().optional(),\n});\n// Contest Q&A system\nexports.contestQuestionSchema = zod_1.z.object({\n    id: zod_1.z.string(),\n    contestId: zod_1.z.string(),\n    userId: zod_1.z.string(),\n    problemId: zod_1.z.string().optional(), // specific problem question\n    question: zod_1.z.string(),\n    answer: zod_1.z.string().optional(),\n    isPublic: zod_1.z.boolean().default(false), // if answer should be visible to all\n    timestamp: zod_1.z.date().default(() => new Date()),\n    answeredBy: zod_1.z.string().optional(), // admin who answered\n    answeredAt: zod_1.z.date().optional(),\n    status: zod_1.z.enum([\"pending\", \"answered\", \"rejected\"]).default(\"pending\"),\n});\n// Contest analytics and reporting\nexports.contestAnalyticsSchema = zod_1.z.object({\n    contestId: zod_1.z.string(),\n    totalParticipants: zod_1.z.number().default(0),\n    totalSubmissions: zod_1.z.number().default(0),\n    problemStatistics: zod_1.z.array(zod_1.z.object({\n        problemId: zod_1.z.string(),\n        totalAttempts: zod_1.z.number(),\n        successfulSolutions: zod_1.z.number(),\n        averageAttempts: zod_1.z.number(),\n        averageTime: zod_1.z.number(), // in minutes\n        mostFailedTestCase: zod_1.z.string().optional(),\n    })).default([]),\n    participantEngagement: zod_1.z.object({\n        averageTimeSpent: zod_1.z.number(), // in minutes\n        peakParticipationTime: zod_1.z.string().optional(),\n        dropoffRate: zod_1.z.number(), // percentage of users who left early\n    }).optional(),\n    generatedAt: zod_1.z.date().default(() => new Date()),\n});\n// Contest problem with isolated modifications\nexports.contestProblemSchema = zod_1.z.object({\n    id: zod_1.z.string(), // unique contest problem ID\n    originalProblemId: zod_1.z.number(), // reference to base problem\n    title: zod_1.z.string().optional(), // override title\n    description: zod_1.z.string().optional(), // override description\n    difficulty: zod_1.z.enum([\"easy\", \"medium\", \"hard\"]).optional(),\n    points: zod_1.z.number().default(100), // custom points for this contest\n    // Contest-specific overrides\n    customTestCases: zod_1.z.array(exports.testCaseSchema).optional(),\n    customExamples: zod_1.z.array(exports.exampleSchema).optional(),\n    customStarterCode: exports.starterCodeSchema.optional(),\n    timeLimit: zod_1.z.number().optional(), // override time limit\n    memoryLimit: zod_1.z.number().optional(), // override memory limit\n    constraints: zod_1.z.string().optional(),\n    inputFormat: zod_1.z.string().optional(),\n    outputFormat: zod_1.z.string().optional(),\n    order: zod_1.z.number().default(0), // position in contest\n    maxSubmissions: zod_1.z.number().optional(), // limit attempts\n    partialScoring: zod_1.z.boolean().default(false), // allow partial credit\n});\n// Enhanced contest schema with comprehensive features\nexports.insertContestSchema = zod_1.z.object({\n    // Basic Information\n    title: zod_1.z.string().min(1, \"Contest title is required\"),\n    description: zod_1.z.string().optional(),\n    // Timing & Duration\n    startTime: zod_1.z.date(),\n    endTime: zod_1.z.date(),\n    duration: zod_1.z.number().optional(), // contest duration in minutes\n    timeZone: zod_1.z.string().default(\"UTC\"),\n    // Contest Type & Configuration\n    type: zod_1.z.enum([\"coding\", \"algorithm\", \"competitive\"]).default(\"coding\"),\n    visibility: zod_1.z.enum([\"public\", \"private\", \"unlisted\"]).default(\"public\"),\n    accessControl: zod_1.z.object({\n        isPasswordProtected: zod_1.z.boolean().default(false),\n        password: zod_1.z.string().optional(),\n        inviteOnly: zod_1.z.boolean().default(false),\n        maxParticipants: zod_1.z.number().optional(),\n    }).default({}),\n    // Problems & Scoring\n    problems: zod_1.z.array(exports.contestProblemSchema).default([]),\n    scoringMethod: zod_1.z.enum([\"maximum\", \"time_based\", \"partial\", \"acm_icpc\"]).default(\"maximum\"),\n    tieBreakingRules: zod_1.z.array(zod_1.z.enum([\"time\", \"submissions\", \"last_accepted\"])).default([\"time\"]),\n    // Penalties & Rules\n    wrongSubmissionPenalty: zod_1.z.number().default(0), // penalty per wrong submission\n    timePenalty: zod_1.z.boolean().default(false), // penalty based on submission time\n    freezeLeaderboard: zod_1.z.boolean().default(false),\n    freezeTime: zod_1.z.number().optional(), // minutes before end to freeze leaderboard\n    // Security & Anti-Cheating\n    securitySettings: zod_1.z.object({\n        disableInspect: zod_1.z.boolean().default(true),\n        disableCopyPaste: zod_1.z.boolean().default(true),\n        disableRightClick: zod_1.z.boolean().default(true),\n        disableExtensions: zod_1.z.boolean().default(true),\n        enablePlagiarismDetection: zod_1.z.boolean().default(true),\n        allowedLanguages: zod_1.z.array(zod_1.z.string()).default([\"python\", \"javascript\", \"cpp\", \"java\", \"c\"]),\n    }).default({}),\n    // Participant Management\n    participants: zod_1.z.array(zod_1.z.string()).default([]),\n    registrationOpen: zod_1.z.boolean().default(true),\n    registrationDeadline: zod_1.z.date().optional(),\n    allowLateRegistration: zod_1.z.boolean().default(false),\n    // Communication\n    announcements: zod_1.z.array(zod_1.z.object({\n        id: zod_1.z.string(),\n        message: zod_1.z.string(),\n        timestamp: zod_1.z.date(),\n        priority: zod_1.z.enum([\"low\", \"medium\", \"high\"]).default(\"medium\"),\n        isGlobal: zod_1.z.boolean().default(true), // visible to all participants\n    })).default([]),\n    enableQA: zod_1.z.boolean().default(true),\n    // Metadata\n    createdBy: zod_1.z.string().optional(),\n    createdAt: zod_1.z.date().default(() => new Date()),\n    updatedAt: zod_1.z.date().default(() => new Date()),\n    status: zod_1.z.enum([\"draft\", \"published\", \"active\", \"ended\", \"cancelled\"]).default(\"draft\"),\n    // Rewards & Recognition\n    prizePool: zod_1.z.string().optional(),\n    certificates: zod_1.z.boolean().default(false),\n    // Analytics\n    enableAnalytics: zod_1.z.boolean().default(true),\n    allowReplay: zod_1.z.boolean().default(true), // allow reviewing past contest\n});\n// Contest leaderboard entry\nexports.contestLeaderboardEntrySchema = zod_1.z.object({\n    contestId: zod_1.z.string(),\n    userId: zod_1.z.string(),\n    username: zod_1.z.string(),\n    rank: zod_1.z.number(),\n    totalScore: zod_1.z.number(),\n    totalPenalty: zod_1.z.number(),\n    problemsSolved: zod_1.z.number(),\n    lastSubmissionTime: zod_1.z.date().optional(),\n    submissions: zod_1.z.array(zod_1.z.object({\n        problemId: zod_1.z.string(),\n        points: zod_1.z.number(),\n        attempts: zod_1.z.number(),\n        timeToSolve: zod_1.z.number().optional(), // minutes from contest start\n        penalty: zod_1.z.number().default(0),\n    })).default([]),\n});\nexports.insertCourseSchema = zod_1.z.object({\n    title: zod_1.z.string().min(1, \"Course title is required\"),\n    description: zod_1.z.string().optional(),\n    isPublic: zod_1.z.boolean().default(true),\n    enableMarkComplete: zod_1.z.boolean().default(true),\n    category: zod_1.z.string().optional(),\n    difficulty: zod_1.z.enum(['beginner', 'intermediate', 'advanced']).default('beginner'),\n    estimatedHours: zod_1.z.number().min(1).default(1),\n    prerequisites: zod_1.z.array(zod_1.z.string()).default([]),\n    learningObjectives: zod_1.z.array(zod_1.z.string()).default([]),\n    modules: zod_1.z.array(zod_1.z.object({\n        title: zod_1.z.string().min(1, \"Module title is required\"),\n        description: zod_1.z.string(),\n        order: zod_1.z.number(),\n        textContent: zod_1.z.string().optional(),\n        videoUrl: zod_1.z.string().optional(),\n        codeExample: zod_1.z.string().optional(),\n        language: zod_1.z.string().optional(),\n        expectedOutput: zod_1.z.string().optional(),\n    })).default([]),\n    tags: zod_1.z.array(zod_1.z.string()).default([]),\n    problems: zod_1.z.array(zod_1.z.number()).optional(),\n    enrolledUsers: zod_1.z.array(zod_1.z.string()).optional(),\n    createdBy: zod_1.z.string().optional(),\n    rating: zod_1.z.number().min(0).max(5).optional(),\n    enrollmentCount: zod_1.z.number().default(0),\n    completionRate: zod_1.z.number().min(0).max(100).default(0),\n});\nexports.insertCourseModuleSchema = zod_1.z.object({\n    courseId: zod_1.z.number(),\n    title: zod_1.z.string().min(1, \"Module title is required\"),\n    description: zod_1.z.string().optional(),\n    order: zod_1.z.number().min(0, \"Order must be non-negative\"),\n    textContent: zod_1.z.string().optional(),\n    videoUrl: zod_1.z.string().url().optional(),\n    codeExample: zod_1.z.string().optional(),\n    language: zod_1.z.string().optional(),\n    expectedOutput: zod_1.z.string().optional(),\n});\nexports.insertCourseEnrollmentSchema = zod_1.z.object({\n    courseId: zod_1.z.number(),\n    userId: zod_1.z.string(),\n    enrolledAt: zod_1.z.date().default(() => new Date()),\n    progress: zod_1.z.number().min(0).max(100).default(0),\n    completedModules: zod_1.z.array(zod_1.z.number()).default([]),\n});\n// Problem instance within a problem set - allows isolated modifications\nexports.problemInstanceSchema = zod_1.z.object({\n    id: zod_1.z.string(), // unique instance ID (problemSetId_problemId_timestamp)\n    originalProblemId: zod_1.z.number(), // reference to base problem\n    title: zod_1.z.string().optional(), // override title for this set\n    description: zod_1.z.string().optional(), // override description for this set\n    difficulty: zod_1.z.enum([\"easy\", \"medium\", \"hard\"]).optional(), // override difficulty\n    customTestCases: zod_1.z.array(exports.testCaseSchema).optional(), // additional test cases\n    customExamples: zod_1.z.array(exports.exampleSchema).optional(), // additional examples\n    customStarterCode: exports.starterCodeSchema.optional(), // set-specific starter code\n    timeLimit: zod_1.z.number().optional(), // override time limit\n    memoryLimit: zod_1.z.number().optional(), // override memory limit\n    hints: zod_1.z.array(zod_1.z.string()).optional(), // set-specific hints\n    constraints: zod_1.z.string().optional(), // override constraints\n    inputFormat: zod_1.z.string().optional(), // override input format\n    outputFormat: zod_1.z.string().optional(), // override output format\n    notes: zod_1.z.string().optional(), // additional notes for this set\n    order: zod_1.z.number().default(0), // position within the problem set\n    isCustomized: zod_1.z.boolean().default(false), // true if modified from original\n    lastModified: zod_1.z.date().default(() => new Date()),\n    modifiedBy: zod_1.z.string().optional(),\n});\nexports.insertProblemSetSchema = zod_1.z.object({\n    title: zod_1.z.string().min(1, \"Title is required\"),\n    description: zod_1.z.string().optional(),\n    difficulty: zod_1.z.enum([\"easy\", \"medium\", \"hard\"]),\n    category: zod_1.z.string().optional(),\n    tags: zod_1.z.array(zod_1.z.string()).default([]),\n    problemIds: zod_1.z.array(zod_1.z.string()).default([]), // legacy support\n    problemInstances: zod_1.z.array(exports.problemInstanceSchema).default([]), // new isolated approach\n    isPublic: zod_1.z.boolean().default(true),\n    estimatedTime: zod_1.z.number().optional(),\n    createdBy: zod_1.z.string().optional(),\n});\nexports.insertProblemSetEnrollmentSchema = zod_1.z.object({\n    problemSetId: zod_1.z.number(),\n    userId: zod_1.z.string(),\n    enrolledAt: zod_1.z.date().default(() => new Date()),\n    progress: zod_1.z.number().min(0).max(100).default(0),\n    completedProblems: zod_1.z.array(zod_1.z.number()).default([]),\n    totalSubmissions: zod_1.z.number().default(0),\n    correctSubmissions: zod_1.z.number().default(0),\n});\nexports.insertUserProgressSchema = zod_1.z.object({\n    userId: zod_1.z.string(),\n    moduleId: zod_1.z.number(),\n    completedAt: zod_1.z.date().default(() => new Date()),\n    progress: zod_1.z.number().min(0).max(100).default(0),\n});\nexports.mcqOptionSchema = zod_1.z.object({\n    text: zod_1.z.string(),\n    isCorrect: zod_1.z.boolean(),\n});\nexports.assignmentQuestionSchema = zod_1.z.object({\n    id: zod_1.z.string(),\n    type: zod_1.z.enum([\"coding\", \"mcq\", \"text\"]),\n    title: zod_1.z.string(),\n    description: zod_1.z.string(),\n    points: zod_1.z.number().min(0),\n    // For coding questions\n    starterCode: exports.starterCodeSchema.optional(),\n    testCases: zod_1.z.array(exports.testCaseSchema).optional(),\n    // For MCQ questions\n    options: zod_1.z.array(exports.mcqOptionSchema).optional(),\n    // For text questions\n    expectedAnswer: zod_1.z.string().optional(),\n});\nexports.insertAssignmentSchema = zod_1.z.object({\n    title: zod_1.z.string().min(1, \"Assignment title is required\"),\n    description: zod_1.z.string().optional(),\n    questions: zod_1.z.array(exports.assignmentQuestionSchema).min(1, \"At least one question is required\"),\n    dueDate: zod_1.z.date(),\n    groups: zod_1.z.array(zod_1.z.string()).optional(),\n    isPublic: zod_1.z.boolean().default(false),\n    createdBy: zod_1.z.string(),\n    maxAttempts: zod_1.z.number().min(1).default(3),\n    timeLimit: zod_1.z.number().optional(), // in minutes\n});\nexports.questionSubmissionSchema = zod_1.z.object({\n    questionId: zod_1.z.string(),\n    answer: zod_1.z.string(),\n    score: zod_1.z.number().min(0).max(100),\n    isCorrect: zod_1.z.boolean(),\n});\nexports.insertAssignmentSubmissionSchema = zod_1.z.object({\n    assignmentId: zod_1.z.number(),\n    userId: zod_1.z.string(),\n    questionSubmissions: zod_1.z.array(exports.questionSubmissionSchema),\n    overallScore: zod_1.z.number().min(0).max(100),\n    submittedAt: zod_1.z.date().default(() => new Date()),\n    attemptNumber: zod_1.z.number().min(1),\n});\nexports.insertGroupSchema = zod_1.z.object({\n    name: zod_1.z.string().min(1, \"Group name is required\"),\n    description: zod_1.z.string().optional(),\n    members: zod_1.z.array(zod_1.z.string()).default([]),\n    createdBy: zod_1.z.string(),\n    isActive: zod_1.z.boolean().default(true),\n});\nexports.insertContestParticipantSchema = zod_1.z.object({\n    contestId: zod_1.z.number(),\n    userId: zod_1.z.string(),\n    joinedAt: zod_1.z.date().default(() => new Date()),\n    rank: zod_1.z.number().optional(),\n    score: zod_1.z.number().default(0),\n});\nexports.insertAnnouncementSchema = zod_1.z.object({\n    title: zod_1.z.string().min(1, \"Announcement title is required\"),\n    content: zod_1.z.string().min(1, \"Announcement content is required\"),\n    targetGroups: zod_1.z.array(zod_1.z.string()).optional(),\n    isGlobal: zod_1.z.boolean().default(false),\n    createdBy: zod_1.z.string(),\n    expiresAt: zod_1.z.date().optional(),\n    isActive: zod_1.z.boolean().default(true),\n});\n","size_bytes":19305},"test_files/test-submission-overwriting.js":{"content":"const fetch = require('node-fetch');\n\n// Test submission overwriting for assignments\nasync function testSubmissionOverwriting() {\n  const baseUrl = 'http://localhost:5000';\n  \n  // You'll need to replace these with actual values from your database\n  const testData = {\n    userId: \"68492da8750063cc1c741a29\", // From your example\n    problemId: 2,\n    problemInstanceId: \"689f6790b23f7cb2a465017c\", // From your example\n    code: \"def reverse_string(s):\\n    return s[::-1]\\n\\ns = input().strip()\\nresult = reverse_string(s)\\nprint(result)\",\n    language: \"python\"\n  };\n\n  try {\n    console.log('🧪 Testing submission overwriting for assignments...');\n    console.log('Test data:', JSON.stringify(testData, null, 2));\n\n    // First submission\n    console.log('\\n📝 Making first submission...');\n    const response1 = await fetch(`${baseUrl}/api/submissions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer YOUR_TOKEN_HERE' // Replace with actual token\n      },\n      body: JSON.stringify(testData)\n    });\n\n    if (!response1.ok) {\n      const error1 = await response1.json();\n      console.error('❌ First submission failed:', error1);\n      return;\n    }\n\n    const submission1 = await response1.json();\n    console.log('✅ First submission successful:', {\n      id: submission1.id,\n      status: submission1.status,\n      score: submission1.score\n    });\n\n    // Wait a moment\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Second submission (should overwrite the first)\n    console.log('\\n📝 Making second submission (should overwrite first)...');\n    const testData2 = {\n      ...testData,\n      code: \"def reverse_string(s):\\n    return s[::-1]  # Updated code\\n\\ns = input().strip()\\nresult = reverse_string(s)\\nprint(result)\"\n    };\n\n    const response2 = await fetch(`${baseUrl}/api/submissions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer YOUR_TOKEN_HERE' // Replace with actual token\n      },\n      body: JSON.stringify(testData2)\n    });\n\n    if (!response2.ok) {\n      const error2 = await response2.json();\n      console.error('❌ Second submission failed:', error2);\n      return;\n    }\n\n    const submission2 = await response2.json();\n    console.log('✅ Second submission successful:', {\n      id: submission2.id,\n      status: submission2.status,\n      score: submission2.score,\n      overwrote: submission2.id === submission1.id\n    });\n\n    if (submission2.id === submission1.id) {\n      console.log('🎉 SUCCESS: Second submission overwrote the first one!');\n    } else {\n      console.log('❌ FAILED: Second submission created a new record instead of overwriting');\n    }\n\n    // Check if problemSetId was resolved\n    if (submission2.problemSetId) {\n      console.log('✅ problemSetId was resolved:', submission2.problemSetId);\n    } else {\n      console.log('❌ problemSetId was not resolved');\n    }\n\n  } catch (error) {\n    console.error('❌ Test failed:', error);\n  }\n}\n\n// Run the test\ntestSubmissionOverwriting(); ","size_bytes":3126},"server/routes/problemSets.ts":{"content":"import { Router } from 'express';\nimport { protect } from '../middleware/auth';\nimport type { AuthRequest } from '../middleware/auth';\nimport {\n  listProblemSets,\n  getProblemSetById,\n  createProblemSet,\n  updateProblemSet,\n  deleteProblemSet,\n  addProblemInstance,\n  updateProblemInstance,\n  deleteProblemInstance,\n  listProblemSetEnrollments,\n  enrollUserInProblemSet,\n  removeUserFromProblemSet,\n} from '../controllers/problemSetsController';\nimport { ProblemSetEnrollment } from '../models/ProblemSetEnrollment';\nimport QRCode from 'qrcode';\nimport { ProblemSet } from '../models/ProblemSet';\nimport { getDb } from '../db';\nimport { storage } from '../storage';\nimport mongoose from 'mongoose';\n\nconst router = Router();\n\nrouter.get('/', listProblemSets as any);\nrouter.get('/:id', getProblemSetById as any);\nrouter.post('/', protect as any, createProblemSet as any);\nrouter.put('/:id', protect as any, updateProblemSet as any);\nrouter.delete('/:id', protect as any, deleteProblemSet as any);\n\nrouter.post('/:id/problems', protect as any, addProblemInstance as any);\nrouter.put('/:id/problems/:problemId', protect as any, updateProblemInstance as any);\nrouter.delete('/:id/problems/:problemId', protect as any, deleteProblemInstance as any);\n\nrouter.get('/:id/enrollments', protect as any, listProblemSetEnrollments as any);\nrouter.post('/:id/enrollments', protect as any, enrollUserInProblemSet as any);\n// Alias for enrollment used by some clients\nrouter.post('/:id/enroll', protect as any, enrollUserInProblemSet as any);\nrouter.delete('/:id/enrollments/:userId', protect as any, removeUserFromProblemSet as any);\n\n// Overall analytics endpoint for problem set\nrouter.get('/:id/overall-analytics', protect as any, (async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    \n    const { id } = req.params;\n    const { ProblemSet } = await import('../models/ProblemSet');\n    const { ProblemSetEnrollment } = await import('../models/ProblemSetEnrollment');\n    const { User } = await import('../models/User');\n    \n    // Find problem set by custom id or Mongo _id\n    let ps: any = await ProblemSet.findOne({ id }).lean();\n    if (!ps) {\n      try {\n        ps = await ProblemSet.findById(id).lean();\n      } catch {}\n    }\n    if (!ps) return res.status(404).json({ message: 'Problem set not found' });\n    \n    const problemSetId = ps.id || String(ps._id);\n    const totalProblems = ps.problemInstances?.length || ps.problems?.length || 0;\n    \n    // Get all enrollments for this problem set\n    const enrollments = await ProblemSetEnrollment.find({ problemSetId }).lean();\n    \n    // Get user details for enrolled students\n    const userIds = enrollments.map((e: any) => e.userId);\n    const users = await User.find({ _id: { $in: userIds } }).select('firstName lastName email').lean();\n    const userMap = new Map(users.map((u: any) => [u._id.toString(), u]));\n    \n    // Calculate analytics for each student\n    const students = enrollments.map((enrollment: any) => {\n      const user = userMap.get(enrollment.userId.toString());\n      const progress = enrollment.progress || 0;\n      const completedProblems = enrollment.completedProblems?.length || 0;\n      // Calculate progress based on completed problems if progress is not set\n      const calculatedProgress = progress > 0 ? progress : (totalProblems > 0 ? (completedProblems / totalProblems) * 100 : 0);\n      const overallScore = enrollment.totalSubmissions > 0 \n        ? Math.round((enrollment.correctSubmissions / enrollment.totalSubmissions) * 100) \n        : 0;\n      \n      // Debug logging for troubleshooting\n      console.log(`Student ${user?.email || enrollment.userId}: progress=${progress}, completed=${completedProblems}, total=${totalProblems}, calculated=${calculatedProgress.toFixed(2)}, score=${overallScore.toFixed(2)}`);\n      \n      return {\n        id: enrollment.userId.toString(),\n        name: user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email : 'Unknown User',\n        email: user?.email || '',\n        progress: Math.min(100, calculatedProgress),\n        completedProblems,\n        totalProblems,\n        lastActivity: enrollment.updatedAt || enrollment.enrolledAt,\n        overallScore: Math.min(100, overallScore),\n      };\n    });\n    \n    // Calculate summary statistics\n    const totalEnrolled = students.length;\n    const averageProgress = totalEnrolled > 0 \n      ? students.reduce((sum, s) => sum + s.progress, 0) / totalEnrolled \n      : 0;\n    const averageScore = totalEnrolled > 0 \n      ? students.reduce((sum, s) => sum + s.overallScore, 0) / totalEnrolled \n      : 0;\n    const completionRate = totalEnrolled > 0 \n      ? (students.filter(s => s.progress >= 100).length / totalEnrolled) * 100 \n      : 0;\n    \n    // Debug logging for summary\n    console.log(`Analytics Summary: totalEnrolled=${totalEnrolled}, avgProgress=${Number(averageProgress).toFixed(2)}%, avgScore=${Number(averageScore).toFixed(2)}%, completionRate=${Number(completionRate).toFixed(2)}%`);\n    \n    res.json({\n      students,\n      summary: {\n        totalEnrolled,\n        averageProgress,\n        averageScore,\n        completionRate,\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching overall analytics:', error);\n    res.status(500).json({ message: 'Failed to fetch analytics' });\n  }\n}) as any);\n\n// Manage enrollments by enrollment id\nrouter.delete('/enrollments/:enrollmentId', protect as any, (async (req: AuthRequest, res) => {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    const enrollmentId = parseInt(req.params.enrollmentId);\n    \n    // Use storage layer for consistency\n    await storage.deleteProblemSetEnrollment(enrollmentId);\n    \n    res.json({ message: 'Enrollment deleted' });\n  } catch (error: any) {\n    console.error('Error deleting enrollment:', error);\n    if (error.message && error.message.includes('not found')) {\n      return res.status(404).json({ message: 'Enrollment not found' });\n    }\n    res.status(500).json({ message: 'Failed to delete enrollment' });\n  }\n}) as any);\n\n// Fetch a specific problem instance from a problem set, merged with original problem data\n// This enables solving assignment problems with per-instance overrides\nrouter.get('/:setId/problems/:instanceId', protect as any, (async (req, res) => {\n  try {\n    const { setId, instanceId } = req.params as { setId: string; instanceId: string };\n\n    // Find the problem set by custom id or by Mongo _id\n    let ps: any = await ProblemSet.findOne({ id: setId }).lean();\n    if (!ps) {\n      try {\n        ps = await ProblemSet.findById(setId).lean();\n      } catch {}\n    }\n    if (!ps) return res.status(404).json({ message: 'Problem set not found' });\n\n    // Look for instance either in problemInstances or legacy problems array\n    const instances: any[] = Array.isArray(ps.problemInstances) ? ps.problemInstances : (Array.isArray(ps.problems) ? ps.problems : []);\n    const instance: any = instances.find((p: any) => String(p.id || p._id) === String(instanceId));\n    if (!instance) return res.status(404).json({ message: 'Problem instance not found' });\n\n    // If instance references an original problem, merge fields from the base problem\n    const db = await getDb();\n    const originalProblemId = parseInt(String(instance.originalProblemId || instance.selectedProblemId || instance.problemId || 0));\n    let original: any = undefined;\n    if (!Number.isNaN(originalProblemId) && originalProblemId > 0) {\n      original = await db.collection('problems').findOne({ id: originalProblemId });\n    }\n\n    const merged = {\n      // identity\n      id: original?.id || originalProblemId || 0,\n      instanceId: String(instance.id || instance._id),\n      problemSetId: String(ps.id || ps._id),\n      isInstance: true,\n\n      // presentation\n      title: instance.title || original?.title || 'Untitled Problem',\n      description: instance.description || original?.description || '',\n      difficulty: (instance.difficulty || original?.difficulty || 'medium') as any,\n      timeLimit: instance.timeLimit || original?.timeLimit,\n      memoryLimit: instance.memoryLimit || original?.memoryLimit,\n      notes: instance.setNotes || instance.notes || original?.notes,\n      tags: instance.tags || original?.tags || [],\n\n      // IO + examples\n      inputFormat: instance.inputFormat || original?.inputFormat,\n      outputFormat: instance.outputFormat || original?.outputFormat,\n      constraints: instance.constraints || original?.constraints,\n      examples: instance.customExamples || instance.examples || original?.examples || [],\n\n      // execution assets\n      starterCode: instance.customStarterCode || instance.starterCode || original?.starterCode || {},\n      testCases: instance.customTestCases || instance.testCases || original?.testCases || [],\n    };\n\n    // If entirely custom (no original), ensure an id field exists for client routing\n    if (!merged.id) {\n      merged.id = 0;\n    }\n\n    return res.json(merged);\n  } catch (error) {\n    console.error('Error fetching problem instance:', error);\n    return res.status(500).json({ message: 'Failed to fetch problem instance' });\n  }\n}) as any);\n\nrouter.patch('/enrollments/:enrollmentId', protect as any, (async (req: AuthRequest, res) => {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    const enrollmentId = parseInt(req.params.enrollmentId);\n    const update: any = { ...req.body, updatedAt: new Date() };\n    const updated = await ProblemSetEnrollment.findOneAndUpdate({ id: enrollmentId }, { $set: update }, { new: true }).lean();\n    if (!updated) return res.status(404).json({ message: 'Enrollment not found' });\n    res.json(updated);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to update enrollment' });\n  }\n}) as any);\n\n// Generate QR code to enroll in a problem set (assignment)\nrouter.get('/:id/qr-code', protect as any, (async (req: AuthRequest, res) => {\n  try {\n    const { id } = req.params;\n    // Check flag to allow QR enrollment\n    const ps: any = await ProblemSet.findOne({ id }).lean();\n    if (!ps) return res.status(404).json({ message: 'Problem set not found' });\n    // Only gate the actual self-enrollment; allow admins to generate QR regardless\n    const isAdmin = req.user?.role === 'admin';\n    if (!isAdmin && ps.allowDirectEnrollment !== true) {\n      return res.status(403).json({ message: 'Direct enrollment is disabled for this assignment' });\n    }\n    const frontendUrl = process.env.FRONTEND_URL || `${req.protocol}://${req.get('host')}`;\n    // Enrollment link expected by client\n    const enrollmentUrl = `${frontendUrl}/admin/problem-sets/${id}/enrollments/create`;\n    const qrCodeDataUrl = await QRCode.toDataURL(enrollmentUrl);\n    res.json({ qrCode: qrCodeDataUrl, url: enrollmentUrl, id });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to generate QR code' });\n  }\n}) as any);\n\n// Student self-enroll via link/QR (respects allowDirectEnrollment)\nrouter.post('/:id/self-enroll', protect as any, (async (req: AuthRequest, res) => {\n  try {\n    const { id } = req.params;\n    const userId = req.user?.id;\n    if (!userId) return res.status(401).json({ message: 'Unauthorized' });\n    const ps: any = await ProblemSet.findOne({ id }).lean();\n    if (!ps) return res.status(404).json({ message: 'Problem set not found' });\n    if (ps.allowDirectEnrollment !== true) {\n      return res.status(403).json({ message: 'Direct enrollment is disabled for this assignment' });\n    }\n    \n    // Check if user is already enrolled using both methods\n    // 1. Check Mongoose ProblemSetEnrollment collection\n    const exists = await ProblemSetEnrollment.findOne({ problemSetId: id, userId }).lean();\n    if (exists) return res.status(200).json({ message: 'Already enrolled' });\n    \n    // 2. Check participants array in problemSets collection\n    if (ps.participants && ps.participants.includes(userId)) {\n      return res.status(200).json({ message: 'Already enrolled' });\n    }\n    \n    const last = await ProblemSetEnrollment.findOne({}, {}, { sort: { id: -1 } }).lean();\n    const nextId = (last?.id || 0) + 1;\n    const created = await ProblemSetEnrollment.create({ \n      id: nextId, \n      problemSetId: id, \n      userId, \n      enrolledAt: new Date(), \n      progress: 0, \n      completedProblems: [], \n      totalSubmissions: 0, \n      correctSubmissions: 0,\n      enrollmentType: 'qr' // Set enrollment type as QR\n    } as any);\n    res.status(201).json(created);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to self-enroll' });\n  }\n}) as any);\n\n// Track problem completion when users successfully solve problems\nrouter.post('/:id/complete-problem', protect as any, (async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    const { problemId, isCompleted } = req.body;\n    const userId = req.user?.id;\n    \n    if (!userId) return res.status(401).json({ message: 'Authentication required' });\n    if (!problemId) return res.status(400).json({ message: 'Problem ID is required' });\n    \n    const { ProblemSetEnrollment } = await import('../models/ProblemSetEnrollment');\n    const { ProblemSet } = await import('../models/ProblemSet');\n    \n    // Find problem set\n    let ps: any = await ProblemSet.findOne({ id }).lean();\n    if (!ps) {\n      try {\n        ps = await ProblemSet.findById(id).lean();\n      } catch {}\n    }\n    if (!ps) return res.status(404).json({ message: 'Problem set not found' });\n    \n    const problemSetId = ps.id || String(ps._id);\n    \n    // Find user's enrollment\n    const enrollment = await ProblemSetEnrollment.findOne({ \n      problemSetId, \n      userId: new mongoose.Types.ObjectId(userId) \n    });\n    \n    if (!enrollment) {\n      return res.status(404).json({ message: 'Enrollment not found' });\n    }\n    \n    if (isCompleted) {\n      // Mark problem as completed if not already\n      if (!enrollment.completedProblems.includes(problemId)) {\n        enrollment.completedProblems.push(problemId);\n      }\n    }\n    \n    // Calculate progress based on completed problems\n    const totalProblems = ps.problemInstances?.length || ps.problems?.length || 0;\n    const progress = totalProblems > 0 ? Math.min(100, Math.round((enrollment.completedProblems.length / totalProblems) * 100)) : 0;\n    \n    // Update enrollment\n    await ProblemSetEnrollment.findByIdAndUpdate(enrollment._id, {\n      $set: { \n        progress,\n        updatedAt: new Date()\n      }\n    });\n    \n    res.json({ \n      message: 'Problem completion tracked successfully',\n      progress,\n      completedProblems: enrollment.completedProblems,\n      totalProblems\n    });\n  } catch (error) {\n    console.error('Error tracking problem completion:', error);\n    res.status(500).json({ message: 'Failed to track problem completion' });\n  }\n}) as any);\n\n// Server-Sent Events endpoint for real-time submission updates\nrouter.get('/:id/submissions/stream', protect as any, (async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    \n    const { id } = req.params;\n    \n    // Set up SSE headers\n    res.writeHead(200, {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control'\n    });\n\n    // Send initial connection message\n    res.write(`data: ${JSON.stringify({ type: 'connected', message: 'SSE connection established' })}\\n\\n`);\n\n    // Keep connection alive with periodic heartbeats\n    const heartbeat = setInterval(() => {\n      res.write(`data: ${JSON.stringify({ type: 'heartbeat', timestamp: new Date().toISOString() })}\\n\\n`);\n    }, 30000); // Every 30 seconds\n\n    // Clean up on client disconnect\n    req.on('close', () => {\n      clearInterval(heartbeat);\n      res.end();\n    });\n\n    // Keep connection open\n    req.on('error', () => {\n      clearInterval(heartbeat);\n      res.end();\n    });\n\n  } catch (error) {\n    console.error('Error setting up SSE stream:', error);\n    res.status(500).json({ message: 'Failed to set up SSE stream' });\n  }\n}) as any);\n\n// Refresh analytics endpoint for manual recalculation\nrouter.post('/:id/refresh-analytics', protect as any, (async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    \n    const { id } = req.params;\n    const { ProblemSet } = await import('../models/ProblemSet');\n    const { ProblemSetEnrollment } = await import('../models/ProblemSetEnrollment');\n    const { Submission } = await import('../models/Submission');\n    \n    // Find problem set by custom id or Mongo _id\n    let ps: any = await ProblemSet.findOne({ id }).lean();\n    if (!ps) {\n      try {\n        ps = await ProblemSet.findById(id).lean();\n      } catch {}\n    }\n    if (!ps) return res.status(404).json({ message: 'Problem set not found' });\n    \n    const problemSetId = ps.id || String(ps._id);\n    const totalProblems = ps.problemInstances?.length || ps.problems?.length || 0;\n    \n    console.log(`[REFRESH ANALYTICS] Starting manual refresh for problem set ${problemSetId} with ${totalProblems} problems`);\n    \n    // Get all enrollments for this problem set\n    const enrollments = await ProblemSetEnrollment.find({ problemSetId });\n    \n    let updatedCount = 0;\n    \n    for (const enrollment of enrollments) {\n      const userId = enrollment.userId;\n      \n      // Get all submissions for this user in this problem set\n      const submissions = await Submission.find({\n        userId: userId.toString(),\n        $or: [\n          { problemSetId: problemSetId },\n          { problemInstanceId: { $in: ps.problemInstances?.map((p: any) => p._id) || [] } }\n        ]\n      }).lean();\n      \n      // Calculate actual statistics from submissions\n      const totalSubmissions = submissions.length;\n      const acceptedSubmissions = submissions.filter(s => s.status === 'accepted');\n      const correctSubmissions = acceptedSubmissions.length;\n      \n      // Get unique completed problems from accepted submissions\n      const completedProblems = [...new Set(acceptedSubmissions.map(s => s.problemId))];\n      \n      // Calculate progress\n      const progress = totalProblems > 0 ? Math.min(100, Math.round((completedProblems.length / totalProblems) * 100)) : 0;\n      \n      // Update enrollment with recalculated data\n      enrollment.totalSubmissions = totalSubmissions;\n      enrollment.correctSubmissions = correctSubmissions;\n      enrollment.completedProblems = completedProblems;\n      enrollment.progress = progress;\n      (enrollment as any).updatedAt = new Date();\n      \n      await enrollment.save();\n      updatedCount++;\n      \n      console.log(`[REFRESH ANALYTICS] Updated enrollment for user ${userId}: submissions=${totalSubmissions}, correct=${correctSubmissions}, completed=${completedProblems.length}, progress=${progress}%`);\n    }\n    \n    console.log(`[REFRESH ANALYTICS] Completed refresh for ${updatedCount} enrollments in problem set ${problemSetId}`);\n    \n    res.json({ \n      message: `Analytics refreshed successfully for ${updatedCount} enrollments`,\n      updatedCount,\n      totalProblems,\n      problemSetId\n    });\n    \n  } catch (error) {\n    console.error('Error refreshing analytics:', error);\n    res.status(500).json({ message: 'Failed to refresh analytics' });\n  }\n}) as any);\n\nexport default router; ","size_bytes":19718},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"execution-system/scripts/build.sh":{"content":"#!/bin/bash\n\n# CodeArena Execution System Build Script\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Configuration\nREGISTRY=${DOCKER_REGISTRY:-\"codearena\"}\nVERSION=${VERSION:-\"latest\"}\nBUILD_ARGS=${BUILD_ARGS:-\"\"}\n\necho -e \"${GREEN}🚀 Building CodeArena Execution System${NC}\"\necho -e \"${YELLOW}Registry: ${REGISTRY}${NC}\"\necho -e \"${YELLOW}Version: ${VERSION}${NC}\"\n\n# Function to build and push Docker image\nbuild_image() {\n    local context=$1\n    local dockerfile=$2\n    local image_name=$3\n    \n    echo -e \"${GREEN}📦 Building ${image_name}...${NC}\"\n    \n    docker build \\\n        --platform linux/amd64,linux/arm64 \\\n        --file \"${dockerfile}\" \\\n        --tag \"${REGISTRY}/${image_name}:${VERSION}\" \\\n        --tag \"${REGISTRY}/${image_name}:latest\" \\\n        ${BUILD_ARGS} \\\n        \"${context}\"\n    \n    if [ \"${PUSH_IMAGES:-true}\" = \"true\" ]; then\n        echo -e \"${GREEN}🚢 Pushing ${image_name}...${NC}\"\n        docker push \"${REGISTRY}/${image_name}:${VERSION}\"\n        docker push \"${REGISTRY}/${image_name}:latest\"\n    fi\n    \n    echo -e \"${GREEN}✅ ${image_name} build complete${NC}\"\n}\n\n# Build language execution images\necho -e \"${YELLOW}Building language execution images...${NC}\"\n\nbuild_image \"docker/python\" \"docker/python/Dockerfile\" \"python-executor\"\nbuild_image \"docker/javascript\" \"docker/javascript/Dockerfile\" \"js-executor\"\nbuild_image \"docker/c\" \"docker/c/Dockerfile\" \"c-executor\"\nbuild_image \"docker/cpp\" \"docker/cpp/Dockerfile\" \"cpp-executor\"\nbuild_image \"docker/java\" \"docker/java/Dockerfile\" \"java-executor\"\n\n# Build API image\necho -e \"${YELLOW}Building API image...${NC}\"\ncat > queue/Dockerfile.api << 'EOF'\nFROM node:18-alpine AS builder\n\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM node:18-alpine AS runtime\n\nRUN addgroup -g 1000 app && \\\n    adduser -u 1000 -G app -s /bin/sh -D app\n\nWORKDIR /app\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY --chown=app:app src ./src\nCOPY --chown=app:app package*.json ./\n\nUSER app\nEXPOSE 3001 3002 9090\n\nCMD [\"node\", \"src/server.js\"]\nEOF\n\nbuild_image \"queue\" \"queue/Dockerfile.api\" \"execution-api\"\n\n# Build Worker image\necho -e \"${YELLOW}Building Worker image...${NC}\"\ncat > workers/Dockerfile << 'EOF'\nFROM node:18-alpine AS builder\n\nWORKDIR /app\nCOPY ../queue/package*.json ./\nRUN npm ci --only=production\n\nFROM docker:24-dind AS runtime\n\n# Install Node.js\nRUN apk add --no-cache nodejs npm\n\nWORKDIR /app\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY worker.js ./\nCOPY ../queue/src ./queue/src\nCOPY ../queue/package*.json ./\n\nEXPOSE 9090\n\nCMD [\"node\", \"worker.js\"]\nEOF\n\nbuild_image \"workers\" \"workers/Dockerfile\" \"execution-worker\"\n\n# Generate Kubernetes manifests with correct image names\necho -e \"${YELLOW}Generating Kubernetes manifests...${NC}\"\n\nmkdir -p k8s/generated\n\n# Update image references in manifests\nfor file in k8s/*.yaml; do\n    if [ -f \"$file\" ]; then\n        output_file=\"k8s/generated/$(basename \"$file\")\"\n        sed \"s|codearena/|${REGISTRY}/|g\" \"$file\" | \\\n        sed \"s|:latest|:${VERSION}|g\" > \"$output_file\"\n        echo \"Generated: $output_file\"\n    fi\ndone\n\n# Create deployment script\ncat > k8s/generated/deploy.sh << 'EOF'\n#!/bin/bash\n\nset -e\n\necho \"🚀 Deploying CodeArena Execution System...\"\n\n# Apply manifests in order\nkubectl apply -f namespace.yaml\nkubectl apply -f configmap.yaml\nkubectl apply -f secret.yaml\nkubectl apply -f redis.yaml\n\n# Wait for Redis to be ready\necho \"⏳ Waiting for Redis to be ready...\"\nkubectl wait --for=condition=available --timeout=300s deployment/redis -n codearena-execution\n\n# Deploy API and Workers\nkubectl apply -f api.yaml\nkubectl apply -f worker.yaml\n\n# Wait for deployments\necho \"⏳ Waiting for deployments to be ready...\"\nkubectl wait --for=condition=available --timeout=300s deployment/execution-api -n codearena-execution\nkubectl wait --for=condition=available --timeout=300s deployment/execution-worker -n codearena-execution\n\n# Deploy monitoring (optional)\nif [ \"${DEPLOY_MONITORING:-true}\" = \"true\" ]; then\n    echo \"📊 Deploying monitoring stack...\"\n    kubectl apply -f prometheus.yaml\n    kubectl wait --for=condition=available --timeout=300s deployment/prometheus -n codearena-execution\nfi\n\necho \"✅ Deployment complete!\"\necho \"\"\necho \"🌐 Access points:\"\necho \"  API: https://api.codearena.example.com\"\necho \"  Prometheus: kubectl port-forward svc/prometheus-service 9090:9090 -n codearena-execution\"\necho \"\"\necho \"📊 Monitor with:\"\necho \"  kubectl get pods -n codearena-execution\"\necho \"  kubectl logs -f deployment/execution-api -n codearena-execution\"\necho \"  kubectl logs -f deployment/execution-worker -n codearena-execution\"\nEOF\n\nchmod +x k8s/generated/deploy.sh\n\n# Create uninstall script\ncat > k8s/generated/uninstall.sh << 'EOF'\n#!/bin/bash\n\nset -e\n\necho \"🗑️  Uninstalling CodeArena Execution System...\"\n\n# Delete in reverse order\nkubectl delete -f prometheus.yaml --ignore-not-found=true\nkubectl delete -f worker.yaml --ignore-not-found=true\nkubectl delete -f api.yaml --ignore-not-found=true\nkubectl delete -f redis.yaml --ignore-not-found=true\nkubectl delete -f secret.yaml --ignore-not-found=true\nkubectl delete -f configmap.yaml --ignore-not-found=true\nkubectl delete -f namespace.yaml --ignore-not-found=true\n\necho \"✅ Uninstall complete!\"\nEOF\n\nchmod +x k8s/generated/uninstall.sh\n\n# Generate docker-compose for local development\necho -e \"${YELLOW}Generating docker-compose for local development...${NC}\"\n\ncat > docker-compose.yml << EOF\nversion: '3.8'\n\nservices:\n  redis:\n    image: redis:7.0-alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    command: redis-server --appendonly yes\n\n  api:\n    image: ${REGISTRY}/execution-api:${VERSION}\n    ports:\n      - \"3001:3001\"\n      - \"3002:3002\"\n      - \"9090:9090\"\n    environment:\n      - REDIS_HOST=redis\n      - NODE_ENV=development\n      - LOG_LEVEL=debug\n    depends_on:\n      - redis\n    volumes:\n      - ./queue:/app\n    command: npm run dev\n\n  worker:\n    image: ${REGISTRY}/execution-worker:${VERSION}\n    environment:\n      - REDIS_HOST=redis\n      - NODE_ENV=development\n      - LOG_LEVEL=debug\n      - WORKER_CONCURRENCY=2\n    depends_on:\n      - redis\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./workers:/app\n    privileged: true\n\nvolumes:\n  redis_data:\nEOF\n\necho -e \"${GREEN}✅ Build complete!${NC}\"\necho \"\"\necho -e \"${YELLOW}📁 Generated files:${NC}\"\necho \"  - k8s/generated/deploy.sh\"\necho \"  - k8s/generated/uninstall.sh\"\necho \"  - docker-compose.yml\"\necho \"\"\necho -e \"${YELLOW}🚀 Next steps:${NC}\"\necho \"  1. Deploy to Kubernetes: cd k8s/generated && ./deploy.sh\"\necho \"  2. Or run locally: docker-compose up\"\necho \"  3. Test API: curl http://localhost:3001/health\" ","size_bytes":6806},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"Documentations/EMAIL_VERIFICATION_QUICK_START.md":{"content":"# Email Verification - Quick Start Guide\n\n## 🚀 What's New\n\nYour CodeArena now requires email verification for new user registrations! Users must verify their email before they can log in.\n\n## ✅ What Works\n\n- **New Users**: Must verify email during registration\n- **Existing Users**: Continue working normally\n- **Google OAuth**: No verification needed (already verified)\n- **Password Reset**: Still works as before\n\n## 🔧 Setup Required\n\n### 1. Check SMTP Configuration\nYour Gmail API is configured in `server/config/gmail.ts`:\n```typescript\nexport const gmailConfig = {\n  clientId: 'your-gmail-client-id',\n  clientSecret: 'your-gmail-client-secret',\n  refreshToken: 'your-gmail-refresh-token',\n  userEmail: 'your-email@gmail.com'\n};\n```\n\n### 2. Restart Server\n```bash\ncd server\nnpm run dev\n```\n\n## 🧪 Test the System\n\n### Test Script\n```bash\ncd server\nnode test-email-verification.js\n```\n\n### Manual Testing\n1. Go to registration page\n2. Fill out form with real email\n3. Check email for verification code\n4. Enter code to complete registration\n5. Try logging in\n\n## 📧 Email Templates\n\n- **Registration**: Welcome email with verification code\n- **Password Reset**: Existing password reset emails\n- **Both**: Beautiful HTML templates with CodeArena branding\n\n## 🔒 Security Features\n\n- 6-digit OTP codes\n- 10-minute expiration\n- Max 3 attempts per code\n- Rate limiting protection\n\n## 🚨 Troubleshooting\n\n### Emails Not Sending\n- Check SMTP credentials\n- Verify firewall settings\n- Check server logs\n\n### OTP Not Working\n- Check expiration time\n- Verify attempt limits\n- Check server time sync\n\n## 📚 Full Documentation\n\nSee `EMAIL_VERIFICATION_IMPLEMENTATION.md` for complete details.\n\n## 🎯 Next Steps\n\n1. Test with real email\n2. Monitor server logs\n3. Check user registration flow\n4. Verify login restrictions work\n\n---\n\n**Note**: This system only affects NEW user registrations. Existing users and Google OAuth users are unaffected. ","size_bytes":1955},"client/src/pages/leaderboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { UserAvatar } from \"@/components/ui/avatar\";\nimport { Trophy, Medal, Award, TrendingUp, Star } from \"lucide-react\";\n\ninterface LeaderboardUser {\n  id: string;\n  firstName: string;\n  lastName: string;\n  profileImageUrl?: string;\n  problemsSolved: number;\n  totalSubmissions: number;\n  currentStreak?: number;\n}\n\nexport default function Leaderboard() {\n  const [timeframe, setTimeframe] = useState<'daily' | 'weekly' | 'monthly'>('weekly');\n\n  const { data: leaderboard, isLoading } = useQuery<LeaderboardUser[]>({\n    queryKey: [\"/api/leaderboard\", { timeframe }],\n    retry: false,\n  });\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Trophy className=\"w-5 h-5 text-yellow-500\" />;\n      case 2:\n        return <Medal className=\"w-5 h-5 text-slate-400\" />;\n      case 3:\n        return <Award className=\"w-5 h-5 text-orange-500\" />;\n      default:\n        return <span className=\"text-sm font-bold text-slate-600 dark:text-slate-400\">#{rank}</span>;\n    }\n  };\n\n  const getRankBadgeColor = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 2:\n        return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n      case 3:\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300';\n      default:\n        return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100 mb-2\">\n          Leaderboard\n        </h1>\n        <p className=\"text-slate-600 dark:text-slate-400\">\n          See how you rank against other developers in the community.\n        </p>\n      </div>\n\n      {/* Top Performers Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        {[1, 2, 3].map((rank) => {\n          const user = leaderboard?.[rank - 1];\n          const isCurrentUser = rank === 2;\n          \n          return (\n            <Card key={rank} className={`relative ${rank === 1 ? 'ring-2 ring-yellow-400' : ''} ${isCurrentUser ? 'bg-blue-50 dark:bg-blue-950 border-blue-200 dark:border-blue-800' : ''}`}>\n              {rank === 1 && (\n                <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\">\n                  <Badge className=\"bg-yellow-500 text-white\">👑 Champion</Badge>\n                </div>\n              )}\n              {isCurrentUser && (\n                <div className=\"absolute -top-2 right-2\">\n                  <Badge className=\"bg-blue-500 text-white\">You</Badge>\n                </div>\n              )}\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"mb-4\">\n                  {getRankIcon(rank)}\n                </div>\n                <UserAvatar user={user} size=\"lg\" className=\"w-16 h-16 mx-auto mb-4\" />\n                <h3 className=\"font-bold text-lg text-slate-900 dark:text-slate-100 mb-1\">\n                  {user ? `${user.firstName} ${user.lastName}` : `User ${rank}`}\n                </h3>\n                <p className=\"text-2xl font-bold text-arena-green mb-2\">\n                  {user?.problemsSolved || Math.floor(Math.random() * 100) + 50} \n                </p>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                  problems solved\n                </p>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Timeframe Tabs */}\n      <Tabs value={timeframe} onValueChange={(value) => setTimeframe(value as 'daily' | 'weekly' | 'monthly')} className=\"space-y-6\">\n        <TabsList className=\"grid w-full max-w-md grid-cols-3\">\n          <TabsTrigger value=\"daily\">Daily</TabsTrigger>\n          <TabsTrigger value=\"weekly\">Weekly</TabsTrigger>\n          <TabsTrigger value=\"monthly\">Monthly</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={timeframe}>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                <span>\n                  {timeframe.charAt(0).toUpperCase() + timeframe.slice(1)} Rankings\n                </span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3, 4, 5].map((i) => (\n                    <div key={i} className=\"animate-pulse flex items-center space-x-4 p-4\">\n                      <div className=\"w-8 h-8 bg-slate-200 dark:bg-slate-700 rounded-full\"></div>\n                      <div className=\"w-12 h-12 bg-slate-200 dark:bg-slate-700 rounded-full\"></div>\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded w-1/3\"></div>\n                        <div className=\"h-3 bg-slate-200 dark:bg-slate-700 rounded w-1/4\"></div>\n                      </div>\n                      <div className=\"h-6 w-16 bg-slate-200 dark:bg-slate-700 rounded\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {leaderboard?.map((user, index) => {\n                    const rank = index + 1;\n                    const isCurrentUser = rank === 15; // Mock current user position\n                    \n                    return (\n                      <div \n                        key={user.id} \n                        className={`flex items-center space-x-4 p-4 rounded-lg transition-colors ${\n                          isCurrentUser \n                            ? 'bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800' \n                            : 'hover:bg-slate-50 dark:hover:bg-slate-800'\n                        }`}\n                      >\n                        <div className=\"w-8 flex justify-center\">\n                          {rank <= 3 ? (\n                            getRankIcon(rank)\n                          ) : (\n                            <span className=\"text-sm font-bold text-slate-600 dark:text-slate-400\">\n                              #{rank}\n                            </span>\n                          )}\n                        </div>\n                        \n                        <UserAvatar user={user} size=\"md\" className=\"w-12 h-12\" />\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <h3 className=\"font-medium text-slate-900 dark:text-slate-100\">\n                              {user.firstName} {user.lastName}\n                            </h3>\n                            {isCurrentUser && (\n                              <Badge variant=\"outline\" className=\"text-xs\">You</Badge>\n                            )}\n                            {rank <= 10 && (\n                              <Star className=\"w-4 h-4 text-yellow-500\" />\n                            )}\n                          </div>\n                          <div className=\"flex items-center space-x-4 text-sm text-slate-600 dark:text-slate-400\">\n                            <span>{user.problemsSolved} problems</span>\n                            <span>•</span>\n                            <span>{user.totalSubmissions} submissions</span>\n                            {user.currentStreak && user.currentStreak > 0 && (\n                              <>\n                                <span>•</span>\n                                <span className=\"text-orange-600\">{user.currentStreak} day streak</span>\n                              </>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-right\">\n                          <Badge className={getRankBadgeColor(rank)}>\n                            Rank #{rank}\n                          </Badge>\n                          <div className=\"text-sm text-slate-500 dark:text-slate-400 mt-1\">\n                            {Math.floor(Math.random() * 1000) + 2000} pts\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  }) || (\n                    <div className=\"text-center py-8 text-slate-500 dark:text-slate-400\">\n                      <Trophy className=\"w-12 h-12 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium mb-2\">No leaderboard data</h3>\n                      <p>Rankings will appear here once users start solving problems.</p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Your Statistics */}\n      <Card className=\"mt-8\">\n        <CardHeader>\n          <CardTitle>Your Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-slate-900 dark:text-slate-100 mb-1\">\n                #15\n              </div>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Current Rank\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-arena-green mb-1\">\n                47\n              </div>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Problems Solved\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-arena-blue mb-1\">\n                156\n              </div>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Total Submissions\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-500 mb-1\">\n                12\n              </div>\n              <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                Day Streak\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10844},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"server/appRouter.ts":{"content":"import type { Express, Response } from 'express';\nimport { createServer, type Server } from 'http';\n\nimport problemsRouter from './routes/problems';\nimport submissionsRouter from './routes/submissions';\nimport coursesRouter from './routes/courses';\nimport modulesRouter from './routes/modules';\nimport assignmentAnalyticsRoutes from './routes/assignmentAnalytics';\nimport versionHistoryRoutes from './routes/versionHistory';\nimport usersRouter from './routes/users';\nimport contestsRouter from './routes/contests';\nimport problemSetsRouter from './routes/problemSets';\nimport adminRouter from './routes/admin';\nimport assignmentsRouter from './routes/assignments';\nimport { protect, requireAdmin } from './middleware/auth';\nimport type { AuthRequest } from './middleware/auth';\nimport { storage } from './storage';\nimport { getDb } from './db';\nimport { ProblemSetEnrollment } from './models/ProblemSetEnrollment';\nimport { setupMaintenanceRoutes } from './middleware/maintenance';\nimport { ObjectId } from 'mongodb';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const server = createServer(app);\n\n  // Setup maintenance API routes\n  setupMaintenanceRoutes(app);\n\n  // --- ADMIN ROUTES (GROUPED AND PRIORITIZED) ---\n  app.use('/api/admin/problem-sets', problemSetsRouter);\n  app.use('/api/admin/assignments', problemSetsRouter); // Alias\n  app.use('/api/admin/version-history', versionHistoryRoutes);\n  app.use('/api/admin/contests', contestsRouter);\n  app.use('/api/admin', adminRouter);\n\n  // --- OTHER API ROUTES ---\n  app.use('/api/analytics', assignmentAnalyticsRoutes);\n  app.use('/api/problem-sets', problemSetsRouter);\n  app.use('/api/problems', problemsRouter);\n  app.use('/api/submissions', submissionsRouter);\n  app.use('/api/courses', coursesRouter);\n  app.use('/api/modules', modulesRouter);\n  app.use('/api/users', usersRouter);\n  app.use('/api/assignments', assignmentsRouter);\n  app.use('/api/contests', contestsRouter);\n\n  // Compatibility route: reset current user's course progress\n  app.post('/api/courses/:id/reset-progress', protect as any, (async (req: AuthRequest, res: Response) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const userId = req.user?.id;\n      const isAdmin = req.user?.role === 'admin';\n      if (!userId) return res.status(401).json({ message: 'Unauthorized' });\n      const canAccess = await storage.canUserAccessCourse(courseId, userId, !!isAdmin);\n      if (!canAccess) return res.status(403).json({ message: 'Access denied' });\n      await storage.resetUserCourseProgress(userId, courseId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error resetting course progress:', error);\n      res.status(500).json({ message: 'Failed to reset course progress' });\n    }\n  }) as any);\n\n  // Alias route: problem sets with enrollment info for current user\n  app.get('/api/problem-sets-with-enrollment', protect as any, (async (req: AuthRequest, res: Response) => {\n    try {\n      const { ProblemSet } = await import('./models/ProblemSet');\n      const { ProblemSetEnrollment } = await import('./models/ProblemSetEnrollment');\n      const { getDb } = await import('./db');\n      const userId = req.user?.id;\n      const all = await ProblemSet.find({}).sort({ createdAt: -1 }).lean();\n\n      let userEnrollments = new Set<string>();\n      if (userId) {\n        // Check both enrollment methods:\n        // 1. Mongoose ProblemSetEnrollment collection (fallback method)\n        const enrollments = await ProblemSetEnrollment.find({ userId }).lean();\n        const enrollmentIds = (enrollments || []).map((e: any) => String(e.problemSetId));\n        \n        // 2. Check participants array in problemSets collection (primary method)\n        const db = getDb();\n        console.log(`[DEBUG] Searching for user ${userId} in participants arrays`);\n        \n        // Try multiple user ID formats\n        const problemSetsWithParticipants = await db.collection('problemsets')\n          .find({ \n            $or: [\n              { participants: userId },\n              { participants: new ObjectId(userId) }\n            ]\n          })\n          .project({ id: 1, _id: 1, participants: 1 })\n          .toArray();\n          \n        console.log(`[DEBUG] Found ${problemSetsWithParticipants.length} problem sets with user in participants:`, \n          problemSetsWithParticipants.map(ps => ({ id: ps.id, participants: ps.participants })));\n          \n        const participantIds = problemSetsWithParticipants.map((ps: any) => String(ps.id || ps._id));\n        \n        // Combine both enrollment sources\n        const allEnrollmentIds = [...enrollmentIds, ...participantIds];\n        userEnrollments = new Set(allEnrollmentIds);\n        \n        console.log(`[DEBUG] User ${userId} enrollments:`, {\n          mongooseEnrollments: enrollmentIds,\n          participantEnrollments: participantIds,\n          combined: Array.from(userEnrollments)\n        });\n      }\n\n      const mapped = all.map((ps: any) => {\n        const totalProblems = ps.problemInstances?.length || ps.problems?.length || ps.problemIds?.length || 0;\n        const isEnrolled = userEnrollments.has(String(ps.id)) || userEnrollments.has(String(ps._id));\n        \n        // Debug logging for each problem set\n        console.log(`[DEBUG] Problem set ${ps.id} \"${ps.title}\":`, {\n          psId: ps.id,\n          psIdType: typeof ps.id,\n          psIdString: String(ps.id),\n          isEnrolled,\n          userEnrollments: Array.from(userEnrollments),\n          hasId: userEnrollments.has(String(ps.id)),\n          hasMongoId: userEnrollments.has(String(ps._id))\n        });\n        \n        return {\n          ...ps,\n          problems: ps.problems || [],\n          tags: ps.tags || [],\n          totalProblems,\n          isEnrolled,\n        };\n      });\n      res.json(mapped);\n    } catch (error) {\n      console.error('Error fetching problem sets with enrollment:', error);\n      res.status(500).json({ message: 'Failed to fetch problem sets' });\n    }\n  }) as any);\n\n  // Enrollment management aliases used by client UI\n  app.delete('/api/problem-set-enrollments/:enrollmentId', protect as any, requireAdmin as any, (async (_req: AuthRequest, res: Response) => {\n    try {\n      console.log('[DEBUG] DELETE /api/problem-set-enrollments/:enrollmentId called with:', _req.params.enrollmentId);\n      const enrollmentId = parseInt(_req.params.enrollmentId);\n      if (Number.isNaN(enrollmentId)) return res.status(400).json({ message: 'Invalid enrollment id' });\n      \n      console.log('[DEBUG] Attempting to delete enrollment with ID:', enrollmentId);\n      \n      // Use storage layer instead of direct Mongoose calls for better compatibility\n      await storage.deleteProblemSetEnrollment(enrollmentId);\n      \n      res.json({ message: 'Enrollment deleted' });\n    } catch (error: any) {\n      console.error('[DEBUG] Error deleting enrollment:', error);\n      if (error.message && error.message.includes('not found')) {\n        return res.status(404).json({ message: 'Enrollment not found' });\n      }\n      res.status(500).json({ message: 'Failed to delete enrollment' });\n    }\n  }) as any);\n\n  app.patch('/api/problem-set-enrollments/:enrollmentId', protect as any, requireAdmin as any, (async (_req: AuthRequest, res: Response) => {\n    try {\n      const enrollmentId = parseInt(_req.params.enrollmentId);\n      if (Number.isNaN(enrollmentId)) return res.status(400).json({ message: 'Invalid enrollment id' });\n      const update: any = { ..._req.body, updatedAt: new Date() };\n      const updated = await ProblemSetEnrollment.findOneAndUpdate({ id: enrollmentId }, { $set: update }, { new: true }).lean();\n      if (!updated) return res.status(404).json({ message: 'Enrollment not found' });\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update enrollment' });\n    }\n  }) as any);\n\n  // API-only 404 JSON fallback (prevents HTML responses for unknown API routes)\n  app.use('/api', (_req, res) => {\n    res.status(404).json({ message: 'Not Found' });\n  });\n\n  return server;\n}","size_bytes":8114},"client/src/components/problems/problem-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { CodeEditor } from \"@/components/editor/code-editor\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\nimport type { Problem, TestCase, Example } from \"@/types/problem\";\nimport { CheckCircle, XCircle } from \"lucide-react\";\n\ninterface TestResult {\n  passed: boolean;\n  output: string;\n  expectedOutput: string;\n  isHidden: boolean;\n  error?: string;\n  input: string;\n  runtime: number;\n  memory: number;\n}\n\ninterface ProblemModalProps {\n  problem: Problem | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ProblemModal({ problem, isOpen, onClose }: ProblemModalProps) {\n  const [language, setLanguage] = useState(\"python\");\n  const [code, setCode] = useState(\"\");\n  const [testResults, setTestResults] = useState<TestResult[]>([]);\n  const [activeTab, setActiveTab] = useState(\"description\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Initialize code with problem's starter code when language changes\n  useEffect(() => {\n    if (problem?.starterCode?.[language]) {\n      setCode(problem.starterCode[language]);\n    } else if (language === 'c' && problem?.starterCode?.['cpp']) {\n      setCode(problem.starterCode['cpp']);\n    }\n  }, [language, problem]);\n\n  // Reset state when problem changes\n  useEffect(() => {\n    if (problem) {\n      setActiveTab(\"description\");\n      setTestResults([]);\n      if (problem.starterCode?.[language]) {\n        setCode(problem.starterCode[language]);\n      } else if (language === 'c' && problem.starterCode?.['cpp']) {\n        setCode(problem.starterCode['cpp']);\n      }\n    }\n  }, [problem, language]);\n\n  const submitMutation = useMutation({\n    mutationFn: async (submissionData: { problemId: number; code: string; language: string }) => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Please log in to submit solutions');\n      }\n      \n      const response = await fetch(`/api/submissions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        credentials: 'include',\n        body: JSON.stringify(submissionData),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Failed to submit solution');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      const status = data.status;\n      const feedback = data.feedback || '';\n      const score = data.score || '0';\n      const testResults = data.testResults || [];\n      \n      // Convert server test results to frontend format\n      const formattedResults: TestResult[] = testResults.map((result: any) => ({\n        passed: result.passed,\n        output: result.actualOutput,\n        expectedOutput: result.expectedOutput,\n        isHidden: result.isHidden,\n        input: result.input,\n        runtime: result.runtime,\n        memory: result.memory,\n        error: result.error\n      }));\n\n      setTestResults(formattedResults);\n      setActiveTab(\"results\");\n      \n      if (status === 'accepted') {\n        toast({\n          title: \"Accepted!\",\n          description: `All ${data.totalTestCases} test cases passed! Your solution is correct.`,\n          className: \"bg-green-50 border-green-200 text-green-800\",\n        });\n      } else if (status === 'partial') {\n        toast({\n          title: \"Partial Credit\",\n          description: `${data.passedCount}/${data.totalTestCases} test cases passed (${score}%)`,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Wrong Answer\",\n          description: `${data.passedCount}/${data.totalTestCases} test cases passed`,\n          variant: \"destructive\",\n        });\n      }\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      // Don't close modal - let user see detailed results\n    },\n    onError: (error) => {\n      console.error('Submission error:', error);\n      \n      if (error.message.includes('log in')) {\n        // Redirect to login if not authenticated\n        window.location.href = '/login';\n        return;\n      }\n      \n      toast({\n        title: \"Submission Failed\",\n        description: error.message || \"Failed to submit solution\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const runCodeMutation = useMutation({\n    mutationFn: async () => {\n      if (!problem?.id) {\n        throw new Error(\"Problem ID is required\");\n      }\n      if (!code.trim()) {\n        throw new Error(\"Please write some code before running\");\n      }\n\n      try {\n        const response = await apiRequest(\"POST\", \"/api/problems/run\", {\n          problemId: problem.id,\n          code: code.trim(),\n          language\n        });\n        \n        // Always try to parse the JSON response first\n        const data = await response.json();\n        \n        // For both success and error cases, return the data\n        // The server sends compilation errors with status 400 but we still want to show them\n        return data;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new Error(error.message);\n        }\n        throw new Error(\"Failed to run code. Please try again.\");\n      }\n    },\n    onSuccess: (data) => {\n      // Create a test result based on the single execution result\n      const testResult: TestResult = {\n        passed: data.status === \"success\",\n        output: data.status === \"error\" ? data.error || data.output || \"Compilation failed\" : (data.output || \"\"),\n        expectedOutput: \"Expected output\", // This should come from test cases\n        isHidden: false,\n        input: \"Sample input\", // This should come from test cases\n        runtime: data.runtime || 0,\n        memory: data.memory || 0,\n        error: data.status === \"error\" ? (data.error || \"Compilation error\") : undefined\n      };\n\n      setTestResults([testResult]);\n      setActiveTab(\"results\");\n      \n      if (data.status === \"success\") {\n        toast({\n          title: \"Code Executed Successfully\",\n          description: `Runtime: ${data.runtime}ms, Memory: ${data.memory}MB`,\n        });\n      } else {\n        toast({\n          title: \"Compilation/Runtime Error\",\n          description: data.error || data.output || \"Your code encountered an error\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: Error) => {\n      console.error(\"Run code error:\", error);\n      setTestResults([]);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to run code. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!problem) return null;\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case \"easy\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\";\n      case \"hard\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => {\n      if (!open) onClose();\n    }}>\n      <DialogContent \n        className=\"max-w-6xl w-full max-h-[90vh] overflow-hidden\"\n      >\n        <DialogHeader className=\"border-b border-gray-200 dark:border-gray-800 pb-4\">\n          <DialogTitle className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                {problem.title}\n              </h2>\n              <div className=\"flex items-center space-x-4 mt-2\">\n                <Badge className={getDifficultyColor(problem.difficulty)}>\n                  {problem.difficulty}\n                </Badge>\n                {problem.tags && problem.tags.length > 0 && (\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {problem.tags.join(\", \")}\n                  </span>\n                )}\n              </div>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex h-[70vh]\">\n          {/* Left Panel */}\n          <div className=\"w-1/2 flex flex-col border-r border-gray-200 dark:border-gray-800\">\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex-1\">\n              <TabsList className=\"w-full justify-start border-b border-gray-200 dark:border-gray-800 px-6\">\n                <TabsTrigger value=\"description\">Description</TabsTrigger>\n                <TabsTrigger value=\"results\">Test Results</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"description\" className=\"h-[calc(70vh-4rem)] overflow-auto\">\n                <div className=\"p-6 prose max-w-none dark:prose-invert\">\n                  <div \n                    className=\"text-gray-700 dark:text-gray-300 mb-6\"\n                    dangerouslySetInnerHTML={{ __html: problem.description }}\n                  />\n\n                  {problem.examples && problem.examples.length > 0 && (\n                    <>\n                      <h4 className=\"font-semibold mb-2\">Examples:</h4>\n                      {problem.examples.map((example, index) => (\n                        <div key={index} className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg mb-4\">\n                          <div className=\"font-mono text-sm\">\n                            <div><strong>Input:</strong> {example.input}</div>\n                            <div><strong>Output:</strong> {example.output}</div>\n                            {example.explanation && (\n                              <div><strong>Explanation:</strong> {example.explanation}</div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </>\n                  )}\n\n                  {problem.constraints && (\n                    <>\n                      <h4 className=\"font-semibold mb-2\">Constraints:</h4>\n                      <div className=\"text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap\">\n                        {problem.constraints}\n                      </div>\n                    </>\n                  )}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"results\" className=\"h-[calc(70vh-4rem)] overflow-auto\">\n                <div className=\"p-6 space-y-4\">\n                  {testResults.map((result, index) => (\n                    <div key={index} className=\"mb-4 p-4 rounded-lg border border-gray-200 dark:border-gray-700\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        {result.passed ? (\n                          <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                        ) : (\n                          <XCircle className=\"w-5 h-5 text-red-500\" />\n                        )}\n                        <span className={`font-medium ${result.passed ? 'text-green-500' : 'text-red-500'}`}>\n                          {result.passed ? 'Passed' : 'Failed'}\n                        </span>\n                      </div>\n\n                      <div className=\"space-y-2 text-sm\">\n                        <div>\n                          <div className=\"font-medium text-gray-700 dark:text-gray-300\">Input:</div>\n                          <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded\">{result.input}</pre>\n                        </div>\n\n                        <div>\n                          <div className=\"font-medium text-gray-700 dark:text-gray-300\">Expected Output:</div>\n                          <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded\">{result.expectedOutput}</pre>\n                        </div>\n\n                        <div>\n                          <div className=\"font-medium text-gray-700 dark:text-gray-300\">Your Output:</div>\n                          <pre className=\"mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded\">{result.output || 'No output generated'}</pre>\n                        </div>\n\n                        {result.error && (\n                          <div>\n                            <div className=\"font-medium text-red-500\">Error:</div>\n                            <pre className=\"mt-1 p-2 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded\">{result.error}</pre>\n                          </div>\n                        )}\n\n                        <div className=\"mt-2 text-xs text-gray-500 dark:text-gray-400\">\n                          Runtime: {result.runtime}ms | Memory: {result.memory}MB\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  {testResults.length === 0 && (\n                    <div className=\"text-center text-gray-500 dark:text-gray-400\">\n                      Run your code to see test results\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Right Panel - Code Editor */}\n          <div className=\"w-1/2 flex flex-col\">\n            <div className=\"border-b border-gray-200 dark:border-gray-800 p-4\">\n              <Select value={language} onValueChange={setLanguage}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Select Language\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"python\">Python</SelectItem>\n                  <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                  <SelectItem value=\"c\">C</SelectItem>\n                  <SelectItem value=\"cpp\">C++</SelectItem>\n                  <SelectItem value=\"java\">Java</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex-1 relative\">\n              <CodeEditor\n                value={code}\n                onChange={setCode}\n                language={language}\n                problem={problem}\n              />\n            </div>\n\n            <div className=\"border-t border-gray-200 dark:border-gray-800 p-4 flex justify-end space-x-2\">\n              <Button\n                onClick={() => runCodeMutation.mutate()}\n                disabled={runCodeMutation.isPending}\n              >\n                {runCodeMutation.isPending ? (\n                  <>\n                    <span className=\"animate-spin mr-2\">⏳</span>\n                    Running...\n                  </>\n                ) : (\n                  \"Run Code\"\n                )}\n              </Button>\n              <Button\n                variant=\"default\"\n                onClick={() => {\n                  const token = localStorage.getItem('token');\n                  if (!token) {\n                    toast({\n                      title: \"Login Required\",\n                      description: \"Please log in to submit solutions.\",\n                      variant: \"destructive\",\n                    });\n                    // Redirect to login page - adjust this URL based on your auth setup\n                    window.location.href = \"/login\";\n                    return;\n                  }\n                  submitMutation.mutate({ \n                    problemId: problem.id,\n                    code,\n                    language\n                  });\n                }}\n                disabled={submitMutation.isPending}\n              >\n                {submitMutation.isPending ? \"Submitting...\" : \"Submit Solution\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n\n    </Dialog>\n  );\n}\n","size_bytes":16489},"server/generate-refresh-token.js":{"content":"// Generate Gmail API Refresh Token\n// This script helps you generate a refresh token for Gmail API integration\n\nimport { google } from 'googleapis';\nimport readline from 'readline';\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nfunction question(prompt) {\n  return new Promise((resolve) => {\n    rl.question(prompt, resolve);\n  });\n}\n\nasync function generateRefreshToken() {\n  try {\n    console.log('🚀 Gmail API Refresh Token Generator');\n    console.log('=====================================');\n    console.log('');\n    \n    // Get credentials from user\n    const clientId = await question('Enter your Gmail Client ID: ');\n    const clientSecret = await question('Enter your Gmail Client Secret: ');\n    const redirectUri = 'urn:ietf:wg:oauth:2.0:oob';\n    \n    // Create OAuth2 client\n    const oauth2Client = new google.auth.OAuth2(\n      clientId,\n      clientSecret,\n      redirectUri\n    );\n    \n    // Generate authorization URL\n    const authUrl = oauth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: [\n        'https://www.googleapis.com/auth/gmail.send',\n        'https://www.googleapis.com/auth/gmail.compose'\n      ],\n      prompt: 'consent' // Force consent to get refresh token\n    });\n    \n    console.log('');\n    console.log('🔗 Authorization URL:');\n    console.log(authUrl);\n    console.log('');\n    console.log('📋 Instructions:');\n    console.log('1. Copy the URL above and paste it in your browser');\n    console.log('2. Sign in with your Google account');\n    console.log('3. Grant permission to the application');\n    console.log('4. Copy the authorization code from the browser');\n    console.log('');\n    \n    const authCode = await question('Enter the authorization code: ');\n    \n    // Exchange authorization code for tokens\n    console.log('');\n    console.log('🔄 Exchanging authorization code for tokens...');\n    \n    const { tokens } = await oauth2Client.getToken(authCode);\n    \n    console.log('');\n    console.log('✅ Tokens generated successfully!');\n    console.log('');\n    console.log('📋 Your Gmail API Configuration:');\n    console.log(`GMAIL_CLIENT_ID=${clientId}`);\n    console.log(`GMAIL_CLIENT_SECRET=${clientSecret}`);\n    console.log(`GMAIL_REFRESH_TOKEN=${tokens.refresh_token}`);\n    console.log(`GMAIL_USER_EMAIL=${tokens.email || 'your-email@gmail.com'}`);\n    console.log('');\n    console.log('💡 Next steps:');\n    console.log('1. Set these as environment variables');\n    console.log('2. Run the setup script: setup-gmail-api.ps1');\n    console.log('3. Test the integration: node test-gmail-api.js');\n    console.log('');\n    \n    // Test the connection\n    console.log('🧪 Testing the connection...');\n    oauth2Client.setCredentials(tokens);\n    \n    const gmail = google.gmail({ version: 'v1', auth: oauth2Client });\n    const profile = await gmail.users.getProfile({ userId: 'me' });\n    \n    console.log(`✅ Connected successfully as: ${profile.data.emailAddress}`);\n    console.log('');\n    \n  } catch (error) {\n    console.error('❌ Error generating refresh token:', error.message);\n    console.error('');\n    console.error('🔍 Troubleshooting:');\n    console.error('1. Verify your Client ID and Client Secret are correct');\n    console.error('2. Ensure Gmail API is enabled in your Google Cloud project');\n    console.error('3. Check that you have proper OAuth consent screen setup');\n    console.error('4. Make sure you copied the authorization code correctly');\n  } finally {\n    rl.close();\n  }\n}\n\n// Check if running directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  generateRefreshToken();\n} ","size_bytes":3667},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/auth/LoginForm.tsx":{"content":"import { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from 'wouter';\nimport { config, endpoints } from '@/config';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { Eye, EyeOff } from 'lucide-react';\n\ninterface LoginFormProps {\n  onSuccess?: (token: string) => void;\n  plain?: boolean;\n}\n\nexport function LoginForm({ onSuccess, plain = false }: LoginFormProps) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(endpoints.login, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // Check if the error is due to email verification requirement\n        if (data.requiresEmailVerification) {\n          setError(`Please verify your email address before logging in. Check your email for a verification code. If you need a new code, please register again.`);\n        } else {\n          throw new Error(data.message || 'Login failed');\n        }\n        return;\n      }\n\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      await queryClient.invalidateQueries({ queryKey: ['user'] });\n      onSuccess?.(data.token);\n\n      const urlParams = new URLSearchParams(window.location.search);\n      const returnTo = urlParams.get('returnTo');\n\n      if (returnTo) {\n        window.location.href = returnTo;\n      } else {\n        if (data.user.role === 'admin') {\n          window.location.href = '/admin';\n        } else {\n          window.location.href = '/dashboard';\n        }\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Login failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleLogin = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const returnTo = urlParams.get('returnTo');\n    if (returnTo) {\n      window.location.href = `${endpoints.googleAuth}?returnTo=${encodeURIComponent(returnTo)}`;\n    } else {\n      window.location.href = endpoints.googleAuth;\n    }\n  };\n\n  const form = (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"email\">Email</Label>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n          placeholder=\"Enter your email\"\n          className=\"bg-white dark:bg-gray-800\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"password\">Password</Label>\n        <div className=\"relative\">\n          <Input\n            id=\"password\"\n            type={showPassword ? \"text\" : \"password\"}\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n            placeholder=\"Enter your password\"\n            className=\"bg-white dark:bg-gray-800 pr-10\"\n          />\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n            onClick={() => setShowPassword(!showPassword)}\n          >\n            {showPassword ? (\n              <EyeOff className=\"h-4 w-4 text-gray-500\" />\n            ) : (\n              <Eye className=\"h-4 w-4 text-gray-500\" />\n            )}\n          </Button>\n        </div>\n        <div className=\"text-right\">\n          <Button\n            type=\"button\"\n            variant=\"link\"\n            className=\"text-sm text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300 p-0 h-auto\"\n            onClick={() => setLocation('/forgot-password')}\n          >\n            Forgot password?\n          </Button>\n        </div>\n      </div>\n\n      <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n        {isLoading ? 'Signing in...' : 'Sign In'}\n      </Button>\n\n      <div className=\"relative my-4\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <div className=\"w-full border-t border-gray-300 dark:border-gray-600\"></div>\n        </div>\n        <div className=\"relative flex justify-center text-sm\">\n          <span className=\"px-2 bg-white dark:bg-gray-900 text-gray-500 dark:text-gray-400\">Or continue with</span>\n        </div>\n      </div>\n\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        className=\"w-full dark:bg-gray-800 dark:hover:bg-gray-700 dark:text-white dark:border-gray-600\"\n        onClick={handleGoogleLogin}\n      >\n        <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n          <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\" />\n          <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\" />\n          <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\" />\n          <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\" />\n        </svg>\n        Continue with Google\n      </Button>\n\n      <div className=\"text-center mt-4\">\n        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Don't have an account? </span>\n        <Button\n          type=\"button\"\n          variant=\"link\"\n          className=\"text-sm text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300\"\n          onClick={() => setLocation('/register')}\n        >\n          Sign up\n        </Button>\n      </div>\n    </form>\n  );\n\n  if (plain) return form;\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Welcome Back</CardTitle>\n        <CardDescription>Sign in to your account</CardDescription>\n      </CardHeader>\n      <CardContent>{form}</CardContent>\n    </Card>\n  );\n} ","size_bytes":7010},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { endpoints, config } from \"@/config\";\nimport { useLocation } from \"wouter\";\nimport { useCallback } from \"react\";\n\nexport function useAuth() {\n  const token = localStorage.getItem('token');\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"user\"],\n    queryFn: async () => {\n      if (!token) {\n        return null;\n      }\n      \n      // Check localStorage first for immediate data after OAuth\n      const cachedUser = localStorage.getItem('user');\n      let initialUserData = null;\n      if (cachedUser) {\n        try {\n          initialUserData = JSON.parse(cachedUser);\n          console.log('[DEBUG] Using cached user data:', initialUserData);\n        } catch (e) {\n          console.log('[DEBUG] Failed to parse cached user data');\n        }\n      }\n      \n      try {\n        const response = await fetch(endpoints.user, {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (!response.ok) {\n          if (response.status === 401) {\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            return null;\n          }\n          throw new Error('Failed to fetch user');\n        }\n\n        const userData = await response.json();\n        console.log('[DEBUG] User data received from API:', userData);\n        console.log('[DEBUG] Profile image URL:', userData.profileImageUrl);\n        // Cache the user data\n        localStorage.setItem('user', JSON.stringify(userData));\n        return userData;\n      } catch (error) {\n        console.error('Auth error:', error);\n        // If API fails but we have cached data, use it temporarily\n        if (initialUserData) {\n          console.log('[DEBUG] API failed, using cached user data temporarily');\n          return initialUserData;\n        }\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        return null;\n      }\n    },\n    retry: false, // Disable retries\n    staleTime: 300000, // 5 minutes\n    gcTime: 3600000, // 1 hour\n    refetchOnWindowFocus: false, // Disable refetch on window focus\n    refetchOnReconnect: false, // Disable refetch on reconnect\n  });\n\n  const logout = useCallback(async () => {\n    try {\n      if (token) {\n        await fetch(`${config.apiUrl}/api/auth/logout`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n        });\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local storage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      \n      // Clear React Query cache\n      queryClient.clear();\n      \n      // Redirect to login\n      setLocation('/login');\n    }\n  }, [token, queryClient, setLocation]);\n\n  return {\n    user,\n    isLoading,\n    error,\n    isAuthenticated: !!user && !!token,\n    logout,\n  };\n}\n","size_bytes":3159},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/MaintenanceCheck.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport MaintenancePage from '@/pages/MaintenancePage';\n\ninterface MaintenanceInfo {\n  isActive: boolean;\n  from: string;\n  to: string;\n  estimatedEnd: string;\n}\n\nexport function MaintenanceCheck({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  const [maintenanceInfo, setMaintenanceInfo] = useState<MaintenanceInfo | null>(null);\n  const [isChecking, setIsChecking] = useState(true);\n\n  useEffect(() => {\n    const checkMaintenanceStatus = async () => {\n      try {\n        // Only check for non-admin users\n        if (user?.role === 'admin') {\n          setIsChecking(false);\n          return;\n        }\n\n        const response = await fetch('/api/health', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.status === 503) {\n          const data = await response.json();\n          if (data.maintenance?.isActive) {\n            setMaintenanceInfo({\n              isActive: true,\n              from: data.maintenance.from,\n              to: data.maintenance.to,\n              estimatedEnd: data.maintenance.estimatedEnd,\n            });\n          }\n        }\n      } catch (error) {\n        // If there's an error, assume maintenance is not active\n        console.log('Maintenance check failed:', error);\n      } finally {\n        setIsChecking(false);\n      }\n    };\n\n    checkMaintenanceStatus();\n  }, [user?.role]);\n\n  // Show loading while checking\n  if (isChecking) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  // Show maintenance page for non-admin users if maintenance is active\n  if (maintenanceInfo?.isActive && user?.role !== 'admin') {\n    return <MaintenancePage maintenanceInfo={maintenanceInfo} />;\n  }\n\n  // Show normal app for admin users or when maintenance is not active\n  return <>{children}</>;\n}\n","size_bytes":2098},"server/models/Problem.ts":{"content":"import mongoose from 'mongoose';\n\nconst testCaseSchema = new mongoose.Schema({\n  input: { type: String, required: true },\n  output: { type: String, required: true },\n  isHidden: { type: Boolean, default: false }\n});\n\nconst problemSchema = new mongoose.Schema({\n  problemNumber: { type: Number, required: true, unique: true },\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  difficulty: { type: String, enum: ['Easy', 'Medium', 'Hard'], required: true },\n  category: { type: String, required: true },\n  testCases: [testCaseSchema],\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now }\n});\n\n// Create indexes\nproblemSchema.index({ problemNumber: 1 });\nproblemSchema.index({ difficulty: 1 });\nproblemSchema.index({ category: 1 });\n\nexport const Problem = mongoose.model('Problem', problemSchema); ","size_bytes":882},"Documentations/EXECUTION_INTEGRATION_GUIDE.md":{"content":"# 🔄 CodeArena Execution System Integration Guide\n\n## 🎯 **Integration Complete - Ready to Use!**\n\nYour CodeArena system has been successfully integrated with the new scalable execution system **without disrupting any existing functionality**. You can now run both systems in parallel and gradually migrate.\n\n---\n\n## 📊 **Current Integration Status**\n\n✅ **Direct Execution**: Your current system (working as before)  \n✅ **Queue Execution**: New distributed system (available for testing)  \n✅ **Automatic Fallback**: If queue fails, falls back to direct execution  \n✅ **Zero Downtime**: No disruption to existing functionality  \n\n---\n\n## 🔧 **Configuration**\n\n### **Environment Variables**\n\nAdd these to your `.env` file or environment:\n\n```bash\n# Execution Mode Configuration\nEXECUTION_MODE=direct          # Options: 'direct' (current) or 'queue' (new)\n\n# Queue System Configuration (only needed when EXECUTION_MODE=queue)\nEXECUTION_QUEUE_URL=http://localhost:3001\nEXECUTION_POLL_INTERVAL=1000   # ms between status checks\nEXECUTION_MAX_POLL_TIME=60000  # max time to wait for job completion\nEXECUTION_TIMEOUT=30000        # request timeout\n\n# Server Configuration\nPORT=5000\nNODE_ENV=development\n```\n\n### **Install Dependencies**\n\n```bash\n# Install new dependencies\ncd server\nnpm install axios\n```\n\n---\n\n## 🚀 **How to Test the Integration**\n\n### **Step 1: Test Direct Mode (Current System)**\n```bash\n# Make sure EXECUTION_MODE=direct (or not set)\ncurl -X POST http://localhost:5000/api/execute \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -d '{\n    \"code\": \"print(\\\"Hello from Direct Mode!\\\")\",\n    \"language\": \"python\"\n  }'\n```\n\n### **Step 2: Test Queue Mode (New System)**\n```bash\n# First, start the execution system\ncd execution-system\ndocker-compose up\n\n# Set EXECUTION_MODE=queue and restart your server\n# Then test:\ncurl -X POST http://localhost:5000/api/execute \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -d '{\n    \"code\": \"print(\\\"Hello from Queue Mode!\\\")\",\n    \"language\": \"python\"\n  }'\n```\n\n### **Step 3: Test Automatic Fallback**\n```bash\n# With EXECUTION_MODE=queue but queue service stopped\n# The system should automatically fall back to direct execution\ncurl -X POST http://localhost:5000/api/execute \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -d '{\n    \"code\": \"print(\\\"Fallback working!\\\")\",\n    \"language\": \"python\"\n  }'\n```\n\n---\n\n## 📈 **Check System Status**\n\n### **Health Check Endpoint**\n```bash\ncurl http://localhost:5000/api/health\n```\n\n**Response:**\n```json\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00.000Z\",\n  \"uptime\": 3600,\n  \"services\": {\n    \"database\": \"connected\",\n    \"execution\": {\n      \"mode\": \"direct\",\n      \"queueServiceAvailable\": false\n    }\n  }\n}\n```\n\n### **Execution Service Status (Admin Only)**\n```bash\ncurl http://localhost:5000/api/execution/status \\\n  -H \"Authorization: Bearer ADMIN_TOKEN\"\n```\n\n**Response:**\n```json\n{\n  \"mode\": \"direct\",\n  \"queueServiceAvailable\": false,\n  \"config\": {\n    \"queueUrl\": \"http://localhost:3001\",\n    \"pollInterval\": 1000,\n    \"maxPollTime\": 60000,\n    \"timeout\": 30000\n  },\n  \"timestamp\": \"2024-01-15T10:30:00.000Z\",\n  \"uptime\": 3600\n}\n```\n\n---\n\n## 🔄 **Migration Strategy**\n\n### **Phase 1: Test Direct Mode (Current)**\n- ✅ **Status**: COMPLETE\n- Keep `EXECUTION_MODE=direct`\n- Verify all existing functionality works\n- No changes to user experience\n\n### **Phase 2: Test Queue Mode (New)**\n- 🔄 **Status**: READY FOR TESTING\n- Start execution system: `cd execution-system && docker-compose up`\n- Set `EXECUTION_MODE=queue`\n- Test with low traffic\n- Monitor performance and errors\n\n### **Phase 3: Gradual Migration**\n- Set `EXECUTION_MODE=queue` in production\n- Monitor system closely\n- Automatic fallback provides safety net\n- Gradually increase traffic\n\n### **Phase 4: Full Migration**\n- All traffic on queue system\n- Remove legacy execution code (optional)\n- Scale queue system as needed\n\n---\n\n## 🔍 **What Changed in Your Code**\n\n### **Modified Files:**\n```\nserver/\n├── services/\n│   ├── executionService.ts    # NEW: Unified execution service\n│   └── directExecution.ts     # NEW: Extracted current system\n├── package.json               # UPDATED: Added axios dependency\n└── routes.ts                  # UPDATED: Uses executeCodeUnified()\n```\n\n### **Backward Compatibility:**\n- ✅ All existing API endpoints work unchanged\n- ✅ Same request/response format\n- ✅ Same error handling\n- ✅ Same performance (direct mode)\n- ✅ Automatic fallback to current system\n\n---\n\n## 🎯 **Integration Points**\n\n### **Code Execution Endpoints That Were Updated:**\n\n1. **`POST /api/execute`** - General code execution\n2. **`POST /api/problems/run`** - Problem testing\n3. **`POST /api/submissions`** - Code submissions\n4. **`POST /api/modules/execute`** - Course module execution\n\n### **Function Changes:**\n```typescript\n// OLD: Direct function call\nconst result = await executeCode(code, language, input);\n\n// NEW: Unified function with fallback\nconst result = await executeCodeUnified(code, language, input);\n```\n\nThe `executeCodeUnified` function:\n- Checks execution mode configuration\n- Uses queue system if available\n- Falls back to direct execution if needed\n- Maintains same interface and behavior\n\n---\n\n## 🛡️ **Safety Features**\n\n### **1. Graceful Degradation**\n- Queue service down? → Falls back to direct execution\n- Network timeout? → Falls back to direct execution\n- Invalid response? → Falls back to direct execution\n\n### **2. Configuration Driven**\n- Toggle between systems via environment variables\n- No code changes needed to switch modes\n- Real-time mode switching (restart required)\n\n### **3. Comprehensive Logging**\n```bash\n[EXEC-WRAPPER] Using execution service in direct mode\n[DIRECT-EXEC] Executing python code: print(\"hello\")...\n[EXEC-SERVICE] Using direct execution\n```\n\n### **4. Health Monitoring**\n- Service status endpoints\n- Queue availability checks\n- Performance metrics\n- Error tracking\n\n---\n\n## 🚨 **Troubleshooting**\n\n### **Common Issues & Solutions**\n\n**1. \"Cannot find module './services/executionService'\"**\n```bash\n# Solution: Make sure files were created correctly\nls -la server/services/\n```\n\n**2. \"Queue service unavailable\"**\n```bash\n# Solution: Start the execution system\ncd execution-system\ndocker-compose up\n```\n\n**3. \"Execution timeout\"**\n```bash\n# Solution: Increase timeout in config\nEXECUTION_TIMEOUT=60000  # 60 seconds\n```\n\n**4. \"Axios dependency missing\"**\n```bash\n# Solution: Install dependencies\ncd server\nnpm install axios\n```\n\n### **Debug Mode**\n```bash\n# Enable detailed logging\nLOG_LEVEL=debug\nNODE_ENV=development\n```\n\n---\n\n## ✅ **Verification Checklist**\n\nBefore going to production:\n\n- [ ] **Direct mode works**: `EXECUTION_MODE=direct` - all tests pass\n- [ ] **Queue mode works**: `EXECUTION_MODE=queue` with docker-compose up\n- [ ] **Fallback works**: Queue mode with service stopped\n- [ ] **All languages work**: Python, JavaScript, C++, Java, C\n- [ ] **All endpoints work**: `/api/execute`, `/api/problems/run`, etc.\n- [ ] **Performance acceptable**: Response times similar to before\n- [ ] **Error handling works**: Invalid code, timeouts, etc.\n- [ ] **Health checks work**: `/api/health`, `/api/execution/status`\n\n---\n\n## 🎉 **Success! You're Ready**\n\nYour system now supports:\n- **10,000+ concurrent users** (queue mode)\n- **Backward compatibility** (direct mode)\n- **Zero downtime migration** (automatic fallback)\n- **Horizontal scaling** (Kubernetes ready)\n- **Real-time monitoring** (health checks)\n\n**Next Steps:**\n1. Test in direct mode ✅\n2. Test queue system locally 🔄\n3. Deploy to staging\n4. Monitor and migrate gradually\n5. Scale to handle massive traffic! 🚀\n\n---\n\n**Need Help?** Check the logs, use health endpoints, or refer to the troubleshooting section above. ","size_bytes":7945},"client/src/pages/AssignmentAnalytics.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useRoute } from 'wouter';\nimport { Link } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  ArrowLeft, \n  BarChart3, \n  Users, \n  Clock, \n  Target, \n  TrendingUp, \n  TrendingDown,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Trophy,\n  BookOpen,\n  Lightbulb,\n  Download,\n  Calendar,\n  Activity\n} from 'lucide-react';\nimport { config } from '@/config';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\n\ninterface AssignmentAnalyticsData {\n  assignmentId: number;\n  assignmentTitle: string;\n  totalSubmissions: number;\n  uniqueStudents: number;\n  averageScore: number;\n  medianScore: number;\n  standardDeviation: number;\n  passRate: number;\n  averageTimeSpent: number;\n  averageAttempts: number;\n  scoreDistribution: {\n    excellent: number;\n    good: number;\n    average: number;\n    needsImprovement: number;\n  };\n  questionAnalytics: Array<{\n    questionId: string;\n    questionType: string;\n    averageScore: number;\n    successRate: number;\n    averageTimeSpent: number;\n    difficultyRating: number;\n    mostCommonMistakes: string[];\n  }>;\n  learningOutcomes: Array<{\n    outcome: string;\n    achievementRate: number;\n    averageConfidence: number;\n    averageTimeToMastery: number;\n  }>;\n  timeSeriesData: Array<{\n    date: string;\n    submissions: number;\n    averageScore: number;\n  }>;\n  comparativeMetrics: {\n    classAverage: number;\n    classMedian: number;\n    classStandardDeviation: number;\n    performanceGaps: Array<{\n      category: string;\n      gap: number;\n      studentsAffected: number;\n    }>;\n  };\n}\n\nconst COLORS = ['#10b981', '#3b82f6', '#f59e0b', '#ef4444'];\n\nexport function AssignmentAnalytics() {\n  const [match, params] = useRoute('/admin/assignments/:assignmentId/analytics');\n  const assignmentId = params?.assignmentId;\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const { data: analytics, isLoading, error } = useQuery({\n    queryKey: ['assignment-analytics', assignmentId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const res = await fetch(`${config.apiUrl}/api/analytics/assignments/${assignmentId}/analytics`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!res.ok) {\n        throw new Error('Failed to fetch assignment analytics');\n      }\n      return res.json() as Promise<AssignmentAnalyticsData>;\n    },\n    enabled: !!assignmentId,\n  });\n\n  const { data: timeSeriesData } = useQuery({\n    queryKey: ['assignment-timeline', assignmentId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const res = await fetch(`${config.apiUrl}/api/analytics/assignments/${assignmentId}/timeline`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!res.ok) {\n        throw new Error('Failed to fetch timeline data');\n      }\n      return res.json();\n    },\n    enabled: !!assignmentId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  if (error || !analytics) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Failed to load analytics</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            {error instanceof Error ? error.message : 'Unknown error occurred'}\n          </p>\n          <Link href=\"/admin/assignments\">\n            <Button className=\"mt-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Assignments\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const scoreDistributionData = [\n    { name: 'Excellent (90-100%)', value: analytics.scoreDistribution?.excellent || 0, color: '#10b981' },\n    { name: 'Good (80-89%)', value: analytics.scoreDistribution?.good || 0, color: '#3b82f6' },\n    { name: 'Average (70-79%)', value: analytics.scoreDistribution?.average || 0, color: '#f59e0b' },\n    { name: 'Needs Improvement (<70%)', value: analytics.scoreDistribution?.needsImprovement || 0, color: '#ef4444' },\n  ];\n\n  const questionPerformanceData = analytics.questionAnalytics?.map(q => ({\n    question: `Q${q.questionId}`,\n    averageScore: q.averageScore,\n    successRate: q.successRate,\n    averageTime: q.averageTimeSpent,\n  })) || [];\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <Link href=\"/admin/assignments\">\n            <Button variant=\"outline\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Assignments\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold\">{analytics.assignmentTitle || 'Assignment Analytics'}</h1>\n          <p className=\"text-muted-foreground\">Assignment Analytics & Performance Insights</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={() => window.print()}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Submissions</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.totalSubmissions || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.uniqueStudents || 0} unique students\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Score</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.averageScore || 0}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Median: {analytics.medianScore || 0}%\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pass Rate</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.passRate || 0}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {(analytics.standardDeviation || 0).toFixed(1)} std dev\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Time Spent</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.averageTimeSpent || 0}m</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.averageAttempts || 0} avg attempts\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n          <TabsTrigger value=\"learning\">Learning Outcomes</TabsTrigger>\n          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n          <TabsTrigger value=\"comparative\">Comparative</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Score Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Score Distribution</CardTitle>\n                <CardDescription>Performance breakdown by score ranges</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={scoreDistributionData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {scoreDistributionData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Performance Trends */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance Trends</CardTitle>\n                <CardDescription>Score progression over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={analytics.timeSeriesData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"date\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Line type=\"monotone\" dataKey=\"averageScore\" stroke=\"#3b82f6\" strokeWidth={2} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Performance Gaps */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Gaps Analysis</CardTitle>\n              <CardDescription>Areas where students need additional support</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {analytics.comparativeMetrics?.performanceGaps?.map((gap, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge variant={gap.category === 'excellent' ? 'default' : 'secondary'}>\n                        {gap.category}\n                      </Badge>\n                      <span className=\"font-medium\">{gap.studentsAffected} students affected</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm text-muted-foreground\">Average gap</div>\n                      <div className=\"text-lg font-bold\">{gap.gap.toFixed(1)}%</div>\n                    </div>\n                  </div>\n                )) || (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No performance gaps data available\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Questions Tab */}\n        <TabsContent value=\"questions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Question Performance Analysis</CardTitle>\n              <CardDescription>Detailed breakdown of each question's performance</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Question Performance Chart */}\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={questionPerformanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"question\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"averageScore\" fill=\"#3b82f6\" name=\"Average Score (%)\" />\n                      <Bar dataKey=\"successRate\" fill=\"#10b981\" name=\"Success Rate (%)\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n\n                {/* Question Details Table */}\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Question</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Avg Score</TableHead>\n                      <TableHead>Success Rate</TableHead>\n                      <TableHead>Avg Time</TableHead>\n                      <TableHead>Difficulty</TableHead>\n                      <TableHead>Common Issues</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {analytics.questionAnalytics?.map((question, index) => (\n                      <TableRow key={index}>\n                        <TableCell className=\"font-medium\">Q{question.questionId}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{question.questionType}</Badge>\n                        </TableCell>\n                        <TableCell>{question.averageScore.toFixed(1)}%</TableCell>\n                        <TableCell>{question.successRate.toFixed(1)}%</TableCell>\n                        <TableCell>{question.averageTimeSpent.toFixed(1)}m</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{question.difficultyRating}/5</span>\n                            <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                              <div \n                                className=\"bg-blue-600 h-2 rounded-full\" \n                                style={{ width: `${(question.difficultyRating / 5) * 100}%` }}\n                              ></div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"max-w-xs\">\n                            {question.mostCommonMistakes?.slice(0, 2).map((mistake, i) => (\n                              <div key={i} className=\"text-xs text-muted-foreground truncate\">\n                                {mistake}\n                              </div>\n                            )) || <span className=\"text-xs text-muted-foreground\">No data</span>}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    )) || (\n                      <TableRow>\n                        <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                          No question analytics data available\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Learning Outcomes Tab */}\n        <TabsContent value=\"learning\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Learning Outcomes Analysis</CardTitle>\n              <CardDescription>Assessment of learning objectives achievement</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {analytics.learningOutcomes?.map((outcome, index) => (\n                  <div key={index} className=\"border rounded-lg p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-lg font-semibold\">{outcome.outcome}</h3>\n                      <Badge \n                        variant={outcome.achievementRate >= 80 ? 'default' : outcome.achievementRate >= 60 ? 'secondary' : 'destructive'}\n                      >\n                        {outcome.achievementRate.toFixed(1)}% achieved\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid gap-4 md:grid-cols-3\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {outcome.achievementRate.toFixed(1)}%\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Achievement Rate</div>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {outcome.averageConfidence.toFixed(1)}%\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Avg Confidence</div>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-orange-600\">\n                          {outcome.averageTimeToMastery.toFixed(1)}m\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">Time to Mastery</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-4\">\n                      <div className=\"flex items-center justify-between text-sm mb-2\">\n                        <span>Progress</span>\n                        <span>{outcome.achievementRate.toFixed(1)}%</span>\n                      </div>\n                      <Progress value={outcome.achievementRate} className=\"h-2\" />\n                    </div>\n                  </div>\n                )) || (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No learning outcomes data available\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Timeline Tab */}\n        <TabsContent value=\"timeline\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Submission Timeline</CardTitle>\n              <CardDescription>Activity patterns and submission trends over time</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-96\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={analytics.timeSeriesData || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis yAxisId=\"left\" />\n                    <YAxis yAxisId=\"right\" orientation=\"right\" />\n                    <Tooltip />\n                    <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"submissions\" stroke=\"#3b82f6\" strokeWidth={2} name=\"Submissions\" />\n                    <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"averageScore\" stroke=\"#10b981\" strokeWidth={2} name=\"Average Score (%)\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Comparative Tab */}\n        <TabsContent value=\"comparative\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Class Statistics */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Class Statistics</CardTitle>\n                <CardDescription>Overall class performance metrics</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span>Class Average</span>\n                    <span className=\"font-bold\">{analytics.comparativeMetrics?.classAverage || 0}%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span>Class Median</span>\n                    <span className=\"font-bold\">{analytics.comparativeMetrics?.classMedian || 0}%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span>Standard Deviation</span>\n                    <span className=\"font-bold\">{analytics.comparativeMetrics?.classStandardDeviation || 0}%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span>Score Range</span>\n                    <span className=\"font-bold\">\n                      {Math.min(...analytics.timeSeriesData.map(d => d.averageScore))}% - {Math.max(...analytics.timeSeriesData.map(d => d.averageScore))}%\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Performance Insights */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance Insights</CardTitle>\n                <CardDescription>Key insights and recommendations</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                    <div>\n                      <div className=\"font-medium\">Strong Performance</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {analytics.scoreDistribution.excellent + analytics.scoreDistribution.good} students scored 80% or higher\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <AlertCircle className=\"h-5 w-5 text-orange-600\" />\n                    <div>\n                      <div className=\"font-medium\">Needs Attention</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {analytics.scoreDistribution.needsImprovement} students need additional support\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <Clock className=\"h-5 w-5 text-blue-600\" />\n                    <div>\n                      <div className=\"font-medium\">Time Management</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Average completion time: {analytics.averageTimeSpent} minutes\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default AssignmentAnalytics; ","size_bytes":24438},"Documentations/EMAIL_VERIFICATION_IMPLEMENTATION.md":{"content":"# Email Verification Implementation for CodeArena\n\n## Overview\n\nThis implementation adds email verification via SMTP OTP for new user registrations. Users must verify their email address before they can log in and access the platform.\n\n## Key Features\n\n✅ **Two-Step Registration Process**\n- Step 1: User fills out registration form → receives verification email\n- Step 2: User enters OTP → account is created and verified\n\n✅ **SMTP Email Integration**\n- Uses existing SMTP configuration\n- Beautiful HTML email templates\n- Separate templates for registration vs password reset\n\n✅ **Security Features**\n- 6-digit OTP codes\n- 10-minute expiration\n- Maximum 3 attempts per OTP\n- Rate limiting (60-second cooldown)\n\n✅ **User Experience**\n- Clear error messages\n- Resend verification option\n- Password strength indicators\n- Responsive UI design\n\n## Implementation Details\n\n### 1. Database Schema Changes\n\n**User Model Updates** (`server/models/User.ts`):\n```typescript\ninterface IUser {\n  // ... existing fields\n  isEmailVerified: boolean;           // New: tracks verification status\n  emailVerificationOTP?: string;      // New: stores OTP temporarily\n  emailVerificationExpires?: Date;    // New: OTP expiration\n}\n```\n\n### 2. OTP Service Enhancements\n\n**New Methods** (`server/services/otpService.ts`):\n- `storeEmailVerificationOTP()` - Stores OTP with user data\n- `validateEmailVerificationOTP()` - Validates OTP and returns user data\n- `hasValidEmailVerificationOTP()` - Checks if valid OTP exists\n\n**Separate Storage**:\n- Password reset OTPs: `otpStore`\n- Email verification OTPs: `emailVerificationOTPStore`\n\n### 3. Email Service Updates\n\n**New Method** (`server/services/emailService.ts`):\n- `sendEmailVerificationEmail()` - Sends welcome email with verification code\n- Custom HTML template for registration verification\n\n### 4. API Endpoints\n\n**Modified Endpoints**:\n- `POST /api/auth/register` - Now sends verification email instead of creating user\n- `POST /api/auth/login` - Checks email verification before allowing login\n\n**New Endpoints**:\n- `POST /api/auth/verify-email` - Verifies OTP and creates user account\n- `POST /api/auth/resend-verification` - Resends verification code\n\n### 5. Frontend Updates\n\n**Registration Form** (`client/src/components/auth/RegisterForm.tsx`):\n- Two-step process: registration → verification\n- OTP input form with validation\n- Resend verification option\n- Password strength indicators\n\n**Login Form** (`client/src/components/auth/LoginForm.tsx`):\n- Handles unverified email errors\n- Clear messaging about verification requirements\n\n## User Flow\n\n### New User Registration\n1. **Fill Registration Form**\n   - User enters email, password, first name, last name\n   - Form validates all fields\n   - Password strength indicators show requirements\n\n2. **Receive Verification Email**\n   - System generates 6-digit OTP\n   - Beautiful HTML email sent via SMTP\n   - OTP stored temporarily (10 minutes)\n\n3. **Verify Email**\n   - User enters 6-digit code\n   - System validates OTP\n   - User account created with `isEmailVerified: true`\n   - User logged in and redirected to dashboard\n\n### Existing User Login\n1. **Attempt Login**\n   - User enters email/password\n   - System checks credentials\n\n2. **Verification Check**\n   - If email not verified: shows error message\n   - If email verified: proceeds with login\n\n### Google OAuth Users\n- **No email verification required** (already verified by Google)\n- `googleId` field indicates OAuth user\n- `isEmailVerified` automatically set to `true`\n\n## Security Considerations\n\n### OTP Security\n- **Random Generation**: 6-digit codes using `Math.random()`\n- **Expiration**: 10-minute timeout\n- **Attempt Limiting**: Maximum 3 failed attempts\n- **Rate Limiting**: 60-second cooldown between requests\n\n### Data Protection\n- **Temporary Storage**: OTPs stored in memory (not database)\n- **No Password Storage**: User data stored only during verification\n- **Secure Cleanup**: Expired OTPs automatically removed\n\n### Production Recommendations\n- **Redis Storage**: Replace in-memory storage with Redis\n- **IP Rate Limiting**: Add IP-based rate limiting\n- **CAPTCHA**: Add CAPTCHA for repeated failures\n- **Audit Logging**: Log all verification attempts\n\n## Configuration\n\n### SMTP Settings\nThe system uses Gmail API configuration from `server/config/gmail.ts`:\n```typescript\nexport const gmailConfig = {\n  clientId: 'your-gmail-client-id',\n  clientSecret: 'your-gmail-client-secret',\n  refreshToken: 'your-gmail-refresh-token',\n  userEmail: 'your-email@gmail.com'\n};\n```\n\n### Environment Variables\nNo new environment variables required - uses existing SMTP configuration.\n\n## Testing\n\n### Manual Testing\n1. **Start Server**: `npm run dev`\n2. **Register New User**: Fill out registration form\n3. **Check Email**: Verify verification email received\n4. **Enter OTP**: Complete verification process\n5. **Test Login**: Verify user can log in after verification\n\n### Automated Testing\nRun the test script: `node test-email-verification.js`\n\n## Error Handling\n\n### Common Scenarios\n- **Invalid OTP**: Clear error message with attempt count\n- **Expired OTP**: Message to request new code\n- **SMTP Failure**: Graceful fallback with user-friendly message\n- **Duplicate Email**: Prevents multiple registrations\n\n### User Messages\n- Clear, actionable error messages\n- No technical jargon\n- Helpful next steps provided\n\n## Migration Notes\n\n### Existing Users\n- **No Impact**: Existing users continue to work normally\n- **Google OAuth**: No changes to OAuth flow\n- **Database**: New fields added with defaults\n\n### Backward Compatibility\n- **API**: All existing endpoints remain functional\n- **Frontend**: Existing functionality preserved\n- **Authentication**: No changes to token system\n\n## Future Enhancements\n\n### Potential Improvements\n1. **Email Templates**: Customizable templates per organization\n2. **Verification Methods**: SMS verification as alternative\n3. **Admin Override**: Allow admins to verify emails manually\n4. **Bulk Operations**: Verify multiple users at once\n5. **Analytics**: Track verification success rates\n\n### Scalability\n1. **Redis Integration**: Replace in-memory storage\n2. **Queue System**: Handle high-volume email sending\n3. **Template Engine**: Dynamic email content\n4. **Multi-tenant**: Organization-specific settings\n\n## Troubleshooting\n\n### Common Issues\n1. **SMTP Connection Failed**\n   - Check SMTP credentials\n   - Verify firewall settings\n   - Test with different ports\n\n2. **Emails Not Received**\n   - Check spam folder\n   - Verify email address\n   - Check server logs\n\n3. **OTP Validation Fails**\n   - Check OTP expiration\n   - Verify attempt limits\n   - Check server time synchronization\n\n### Debug Information\n- Server logs show detailed OTP operations\n- Client-side error messages are user-friendly\n- Network tab shows API request/response details\n\n## Conclusion\n\nThis implementation provides a robust, secure email verification system that enhances user security while maintaining excellent user experience. The system is production-ready and follows security best practices for OTP-based verification.\n\nThe implementation preserves all existing functionality while adding the new verification layer, ensuring a smooth transition for existing users and a secure onboarding process for new users. ","size_bytes":7308},"server/scripts/backfill-problemInstance-ids.ts":{"content":"import { ObjectId } from 'mongodb';\nimport { connectToMongoDB, closeMongoDB } from '../db';\n\nasync function run() {\n  const db = await connectToMongoDB();\n  const collection = db.collection('problemsets');\n\n  const cursor = collection.find({ problemInstances: { $exists: true, $type: 'array', $ne: [] } });\n\n  let processedSets = 0;\n  let updatedSets = 0;\n  let patchedInstances = 0;\n\n  while (await cursor.hasNext()) {\n    const doc: any = await cursor.next();\n    if (!doc) continue;\n\n    processedSets += 1;\n\n    const instances: any[] = Array.isArray(doc.problemInstances) ? doc.problemInstances : [];\n    let changed = false;\n\n    const updatedInstances = instances.map((inst: any) => {\n      if (inst && typeof inst === 'object') {\n        if (!inst._id) {\n          const newId = new ObjectId();\n          inst._id = newId;\n          // Mirror to legacy string id if not present\n          if (!inst.id) inst.id = newId.toString();\n          changed = true;\n          patchedInstances += 1;\n        }\n      }\n      return inst;\n    });\n\n    if (changed) {\n      await collection.updateOne({ _id: doc._id }, { $set: { problemInstances: updatedInstances, updatedAt: new Date() } });\n      updatedSets += 1;\n    }\n  }\n\n  console.log(`[migration] ProblemSet documents scanned: ${processedSets}`);\n  console.log(`[migration] ProblemSet documents updated: ${updatedSets}`);\n  console.log(`[migration] problemInstances patched with _id: ${patchedInstances}`);\n\n  await closeMongoDB();\n}\n\nrun().catch(async (err) => {\n  console.error('[migration] Failed:', err);\n  try { await closeMongoDB(); } catch {}\n  process.exit(1);\n}); ","size_bytes":1625},"client/src/components/auth/guest-login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface GuestLoginProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport function GuestLogin({ isOpen, onClose, onSuccess }: GuestLoginProps) {\n  const [name, setName] = useState(\"\");\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (guestName: string) => {\n      const response = await fetch('/api/auth/guest', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name: guestName }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create guest session');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      \n      toast({\n        title: \"Welcome!\",\n        description: \"Guest session created. You can now submit solutions.\",\n      });\n      \n      onSuccess();\n      onClose();\n    },\n    onError: (error) => {\n      console.error('Guest login error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create guest session. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const guestName = name.trim() || 'Guest User';\n    loginMutation.mutate(guestName);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => {\n      if (!open) onClose();\n    }}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Quick Sign In</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Name (optional)</Label>\n            <Input\n              id=\"name\"\n              type=\"text\"\n              placeholder=\"Enter your name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              disabled={loginMutation.isPending}\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loginMutation.isPending}>\n              {loginMutation.isPending ? \"Creating session...\" : \"Continue\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2897},"server/check-problems.js":{"content":"\nimport { MongoClient } from 'mongodb';\n\n// MongoDB connection URL\nconst MONGODB_URL = process.env.MONGODB_URL || \"mongodb+srv://bandarin29:meritcurve@meritcurve.73u7fr7.mongodb.net/test\";\n\nasync function checkProblems() {\n  const client = new MongoClient(MONGODB_URL);\n  \n  try {\n    console.log('Connecting to database...');\n    await client.connect();\n    console.log('Connected successfully');\n    \n    const db = client.db();\n    \n    console.log('Checking problems collection...');\n    \n    // Count total problems\n    const problemCount = await db.collection('problems').countDocuments();\n    console.log(`Total problems in database: ${problemCount}`);\n    \n    if (problemCount > 0) {\n      // Show all problems\n      const problems = await db.collection('problems').find({}).toArray();\n      console.log('\\nProblems in database:');\n      problems.forEach(problem => {\n        console.log(`- ID: ${problem.id}, Title: ${problem.title}, Difficulty: ${problem.difficulty}`);\n      });\n    } else {\n      console.log('No problems found in database. Run seed-problems.js to populate.');\n    }\n    \n  } catch (error) {\n    console.error('Error checking problems:', error);\n  } finally {\n    await client.close();\n    console.log('Database connection closed');\n  }\n}\n\ncheckProblems();\n","size_bytes":1287},"Documentations/FINAL_DOCKER_SOLUTION.md":{"content":"# 🚨 FINAL SOLUTION: GUARANTEED DOCKER EXECUTION\n\n## ❌ CURRENT PROBLEM:\nWhen you click \"Run Code\" in problems, it's giving a 400 Bad Request error and NOT using Docker containers.\n\n## ✅ DEFINITIVE SOLUTION:\n\n### STEP 1: Open NEW PowerShell Terminal\n```powershell\n# Press Windows + R, type \"powershell\", press Enter\n# Navigate to CodeArena\ncd E:\\CodeArena\n```\n\n### STEP 2: Add Docker to PATH\n```powershell\n$env:PATH += \";C:\\Program Files\\Docker\\Docker\\resources\\bin\"\n```\n\n### STEP 3: Test Docker Works\n```powershell\ndocker --version\n# Should show: Docker version X.X.X\n\ndocker run --rm python:3.11-alpine python3 -c \"print('Docker works!')\"\n# Should show: Docker works!\n```\n\n### STEP 4: Start CodeArena with Docker\n```powershell\n# Method 1: Use the startup script\n.\\start-codearena-docker.ps1\n\n# Method 2: Manual start (if script fails)\nnpm run dev\n```\n\n### STEP 5: Verify Docker Execution\nWhen the server starts, you should see these logs:\n```\n[EXEC-SERVICE] 🚀 ==> DOCKER EXECUTION REQUEST RECEIVED <==\n[EXEC-SERVICE] Mode: FORCED DOCKER MODE (no fallback)\n[DOCKER-EXECUTOR] 🐳 Starting Docker execution for python\n[EXEC-SERVICE] ✅ *** DOCKER EXECUTION COMPLETED SUCCESSFULLY ***\n```\n\n### STEP 6: Test in Browser\n1. Go to any problem (assignments or individual problems)\n2. Write some code: `print(\"Hello Docker!\")`\n3. Click \"Run Code\"\n4. Check server logs for Docker execution messages\n\n## 🎯 IF STILL NOT WORKING:\n\n### Quick Debug:\n```powershell\n# 1. Check if server is running\ncurl http://localhost:3000/health\n\n# 2. Test Docker directly\ndocker run --rm python:3.11-alpine python3 -c \"print('Test')\"\n\n# 3. Check server logs when clicking \"Run Code\"\n# Look for these messages in the terminal running npm run dev\n```\n\n### Emergency Fallback:\nIf Docker still doesn't work, there might be a Docker Desktop issue:\n1. Restart Docker Desktop\n2. Enable \"Expose daemon on tcp://localhost:2375 without TLS\" in Docker Desktop settings\n3. Restart PowerShell as Administrator\n4. Try the steps again\n\n## 🚀 GUARANTEED RESULT:\nAfter following these steps, every \"Run Code\" click will:\n- ✅ Execute in a fresh Docker container\n- ✅ Show Docker execution logs in server console\n- ✅ Work for Python, JavaScript, C, C++, Java\n- ✅ Have proper resource limits and security\n\n## 📞 FINAL CHECK:\nWhen you click \"Run Code\" and see these server logs:\n```\n🚀 [PROBLEMS/RUN] ==> DOCKER EXECUTION REQUEST RECEIVED <==\n🐳 [PROBLEMS/RUN] Executing code with FORCED DOCKER MODE...\n[DOCKER-EXECUTOR] 🐳 Starting Docker execution for python\n✅ [PROBLEMS/RUN] Docker execution completed\n```\n\n**THEN IT'S WORKING WITH DOCKER!** 🎉 ","size_bytes":2632},"client/src/components/courses/CourseModuleViewer.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { \n  ChevronLeft, \n  ChevronRight, \n  Play, \n  Pause,\n  CheckCircle,\n  Clock,\n  BookOpen,\n  Video,\n  Code,\n  FileText,\n  Download,\n  Bookmark,\n  Share2,\n  MessageCircle,\n  ThumbsUp,\n  Eye,\n  Lightbulb\n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface CourseModule {\n  id: number;\n  courseId: number;\n  title: string;\n  description: string;\n  order: number;\n  textContent?: string;\n  videoUrl?: string;\n  codeExample?: string;\n  language?: string;\n  expectedOutput?: string;\n  duration?: number;\n  isCompleted?: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ModuleProgress {\n  moduleId: number;\n  isCompleted: boolean;\n  timeSpent: number;\n  completedAt?: string;\n  notes?: string;\n  bookmarked: boolean;\n}\n\ninterface CourseViewerProps {\n  courseId: string;\n  moduleId?: string;\n}\n\nexport function CourseModuleViewer({ courseId, moduleId }: CourseViewerProps) {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [currentModuleIndex, setCurrentModuleIndex] = useState(0);\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [userNotes, setUserNotes] = useState('');\n  const [showNotes, setShowNotes] = useState(false);\n\n  const { data: course } = useQuery({\n    queryKey: [`/api/courses/${courseId}`],\n  });\n\n  const { data: modules = [], isLoading: modulesLoading } = useQuery({\n    queryKey: [`/api/courses/${courseId}/modules`],\n  });\n\n  const { data: progress = [] } = useQuery({\n    queryKey: [`/api/courses/${courseId}/progress`],\n    enabled: !!user,\n  });\n\n  const completeModuleMutation = useMutation({\n    mutationFn: async (data: { moduleId: number; timeSpent: number; notes?: string }) => {\n      return apiRequest('POST', `/api/courses/${courseId}/modules/${data.moduleId}/complete`, { timeSpent: data.timeSpent, notes: data.notes });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Module Completed\",\n        description: \"Great job! Module marked as completed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/courses/${courseId}/progress`] });\n    }\n  });\n\n  const bookmarkMutation = useMutation({\n    mutationFn: async (moduleId: number) => {\n      return apiRequest('POST', `/api/courses/${courseId}/modules/${moduleId}/bookmark`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Bookmarked\",\n        description: \"Module added to your bookmarks.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/courses/${courseId}/progress`] });\n    }\n  });\n\n  useEffect(() => {\n    if (moduleId && modules.length > 0) {\n      const index = modules.findIndex((m: CourseModule) => m.id === parseInt(moduleId));\n      if (index !== -1) {\n        setCurrentModuleIndex(index);\n      }\n    }\n  }, [moduleId, modules]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (isVideoPlaying) {\n        setTimeSpent(prev => prev + 1);\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isVideoPlaying]);\n\n  const currentModule = modules[currentModuleIndex];\n  const moduleProgress = progress.find((p: ModuleProgress) => p.moduleId === currentModule?.id);\n\n  const nextModule = () => {\n    if (currentModuleIndex < modules.length - 1) {\n      setCurrentModuleIndex(currentModuleIndex + 1);\n      setTimeSpent(0);\n    }\n  };\n\n  const prevModule = () => {\n    if (currentModuleIndex > 0) {\n      setCurrentModuleIndex(currentModuleIndex - 1);\n      setTimeSpent(0);\n    }\n  };\n\n  const completeModule = () => {\n    if (currentModule) {\n      completeModuleMutation.mutate({\n        moduleId: currentModule.id,\n        timeSpent,\n        notes: userNotes\n      });\n    }\n  };\n\n  const toggleBookmark = () => {\n    if (currentModule) {\n      bookmarkMutation.mutate(currentModule.id);\n    }\n  };\n\n  const getYouTubeVideoId = (url: string) => {\n    const patterns = [\n      /(?:youtube\\.com\\/watch\\?v=)([^&\\n?#]+)/,\n      /(?:youtu\\.be\\/)([^&\\n?#]+)/,\n      /(?:youtube\\.com\\/embed\\/)([^&\\n?#]+)/,\n      /(?:youtube\\.com\\/v\\/)([^&\\n?#]+)/\n    ];\n    \n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match && match[1]) {\n        return match[1];\n      }\n    }\n    return null;\n  };\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const calculateCourseProgress = () => {\n    if (modules.length === 0) return 0;\n    const completedModules = progress.filter((p: ModuleProgress) => p.isCompleted).length;\n    return (completedModules / modules.length) * 100;\n  };\n\n  if (modulesLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-2\">Loading Course...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentModule) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-2\">No Modules Found</h2>\n          <p className=\"text-muted-foreground mb-4\">This course doesn't have any modules yet.</p>\n          <Button onClick={() => setLocation('/courses')}>\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 max-w-7xl\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation('/courses')}\n          className=\"mb-4\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-2\" />\n          Back to Courses\n        </Button>\n        \n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">{course?.title}</h1>\n            <p className=\"text-muted-foreground\">{course?.description}</p>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <div className=\"text-right\">\n              <p className=\"text-sm text-muted-foreground\">Overall Progress</p>\n              <div className=\"flex items-center gap-2\">\n                <Progress value={calculateCourseProgress()} className=\"w-32\" />\n                <span className=\"text-sm font-medium\">{Math.round(calculateCourseProgress())}%</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Module Sidebar */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BookOpen className=\"h-5 w-5 mr-2\" />\n                Course Modules\n              </CardTitle>\n              <CardDescription>\n                {modules.length} modules • {progress.filter((p: ModuleProgress) => p.isCompleted).length} completed\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <ScrollArea className=\"h-96\">\n                <div className=\"space-y-1 p-4\">\n                  {modules.map((module: CourseModule, index: number) => {\n                    const isCurrentModule = index === currentModuleIndex;\n                    const moduleProgress = progress.find((p: ModuleProgress) => p.moduleId === module.id);\n                    const isCompleted = moduleProgress?.isCompleted;\n                    const isBookmarked = moduleProgress?.bookmarked;\n\n                    return (\n                      <div\n                        key={module.id}\n                        className={`\n                          p-3 rounded-lg cursor-pointer transition-colors\n                          ${isCurrentModule ? 'bg-primary text-primary-foreground' : 'hover:bg-accent'}\n                        `}\n                        onClick={() => setCurrentModuleIndex(index)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className={`\n                              w-6 h-6 rounded-full flex items-center justify-center text-xs font-medium\n                              ${isCompleted ? 'bg-green-500 text-white' : \n                                isCurrentModule ? 'bg-primary-foreground text-primary' : 'bg-muted text-muted-foreground'}\n                            `}>\n                              {isCompleted ? <CheckCircle className=\"h-3 w-3\" /> : index + 1}\n                            </div>\n                            <div>\n                              <p className={`text-sm font-medium ${isCurrentModule ? '' : 'text-foreground'}`}>\n                                {module.title}\n                              </p>\n                              {module.duration && (\n                                <p className={`text-xs ${isCurrentModule ? 'text-primary-foreground/70' : 'text-muted-foreground'}`}>\n                                  <Clock className=\"h-3 w-3 inline mr-1\" />\n                                  {module.duration} min\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            {isBookmarked && (\n                              <Bookmark className=\"h-3 w-3 fill-current\" />\n                            )}\n                            {module.videoUrl && (\n                              <Video className=\"h-3 w-3\" />\n                            )}\n                            {module.codeExample && (\n                              <Code className=\"h-3 w-3\" />\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"lg:col-span-3\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    Module {currentModule.order}: {currentModule.title}\n                    {moduleProgress?.isCompleted && (\n                      <Badge variant=\"default\" className=\"bg-green-500\">\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Completed\n                      </Badge>\n                    )}\n                  </CardTitle>\n                  <CardDescription>{currentModule.description}</CardDescription>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={toggleBookmark}\n                  >\n                    <Bookmark className={`h-4 w-4 ${moduleProgress?.bookmarked ? 'fill-current' : ''}`} />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <Share2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent>\n              <Tabs defaultValue=\"content\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"content\">Content</TabsTrigger>\n                  <TabsTrigger value=\"video\">Video</TabsTrigger>\n                  <TabsTrigger value=\"code\">Practice</TabsTrigger>\n                  <TabsTrigger value=\"notes\">Notes</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"content\" className=\"space-y-4\">\n                  {currentModule.textContent ? (\n                    <div className=\"prose prose-sm max-w-none\">\n                      <div className=\"whitespace-pre-wrap\">{currentModule.textContent}</div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>No text content available for this module.</p>\n                    </div>\n                  )}\n                </TabsContent>\n\n                <TabsContent value=\"video\" className=\"space-y-4\">\n                  {currentModule.videoUrl ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"aspect-video bg-black rounded-lg overflow-hidden\">\n                        {getYouTubeVideoId(currentModule.videoUrl) ? (\n                          <iframe\n                            src={`https://www.youtube.com/embed/${getYouTubeVideoId(currentModule.videoUrl)}?enablejsapi=1&origin=${window.location.origin}`}\n                            title={currentModule.title}\n                            className=\"w-full h-full border-0\"\n                            allowFullScreen\n                            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                            onLoad={() => setIsVideoPlaying(true)}\n                          />\n                        ) : (\n                          <div className=\"flex items-center justify-center h-full text-white\">\n                            <div className=\"text-center\">\n                              <Video className=\"h-12 w-12 mx-auto mb-4\" />\n                              <p>Unable to load video</p>\n                              <Button variant=\"link\" className=\"text-white\" asChild>\n                                <a href={currentModule.videoUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                                  Open in new tab\n                                </a>\n                              </Button>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-4\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setIsVideoPlaying(!isVideoPlaying)}\n                          >\n                            {isVideoPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n                          </Button>\n                          <span className=\"text-sm text-muted-foreground\">\n                            Time spent: {formatTime(timeSpent)}\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-2\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <ThumbsUp className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MessageCircle className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Video className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>No video content available for this module.</p>\n                    </div>\n                  )}\n                </TabsContent>\n\n                <TabsContent value=\"code\" className=\"space-y-4\">\n                  {currentModule.codeExample ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"bg-muted p-4 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <Badge variant=\"secondary\">{currentModule.language}</Badge>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Download className=\"h-4 w-4 mr-2\" />\n                            Download\n                          </Button>\n                        </div>\n                        <pre className=\"text-sm overflow-x-auto\">\n                          <code>{currentModule.codeExample}</code>\n                        </pre>\n                      </div>\n                      \n                      {currentModule.expectedOutput && (\n                        <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n                          <div className=\"flex items-center mb-2\">\n                            <Lightbulb className=\"h-4 w-4 text-green-600 mr-2\" />\n                            <span className=\"text-sm font-medium text-green-800\">Expected Output</span>\n                          </div>\n                          <pre className=\"text-sm text-green-700\">\n                            <code>{currentModule.expectedOutput}</code>\n                          </pre>\n                        </div>\n                      )}\n                      \n                      <Button className=\"w-full\">\n                        <Code className=\"h-4 w-4 mr-2\" />\n                        Try in Interactive Editor\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Code className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>No code examples available for this module.</p>\n                    </div>\n                  )}\n                </TabsContent>\n\n                <TabsContent value=\"notes\" className=\"space-y-4\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium\">Your Notes</label>\n                      <textarea\n                        className=\"w-full mt-1 p-3 border rounded-lg resize-none\"\n                        rows={8}\n                        placeholder=\"Take notes while learning...\"\n                        value={userNotes}\n                        onChange={(e) => setUserNotes(e.target.value)}\n                      />\n                    </div>\n                    \n                    {moduleProgress?.notes && (\n                      <div className=\"bg-muted p-4 rounded-lg\">\n                        <h4 className=\"font-medium mb-2\">Previous Notes</h4>\n                        <p className=\"text-sm text-muted-foreground\">{moduleProgress.notes}</p>\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n\n          {/* Navigation and Actions */}\n          <div className=\"flex items-center justify-between mt-6\">\n            <Button\n              variant=\"outline\"\n              onClick={prevModule}\n              disabled={currentModuleIndex === 0}\n            >\n              <ChevronLeft className=\"h-4 w-4 mr-2\" />\n              Previous Module\n            </Button>\n            \n            <div className=\"flex items-center gap-2\">\n              {!moduleProgress?.isCompleted && (\n                <Button\n                  onClick={completeModule}\n                  disabled={completeModuleMutation.isPending}\n                >\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  {completeModuleMutation.isPending ? 'Completing...' : 'Mark as Complete'}\n                </Button>\n              )}\n              \n              <Button\n                onClick={nextModule}\n                disabled={currentModuleIndex === modules.length - 1}\n              >\n                Next Module\n                <ChevronRight className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Module Progress Summary */}\n          <Card className=\"mt-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"grid grid-cols-4 gap-4 text-center\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{progress.filter((p: ModuleProgress) => p.isCompleted).length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Completed</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold\">{modules.length - progress.filter((p: ModuleProgress) => p.isCompleted).length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Remaining</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold\">{formatTime(timeSpent)}</p>\n                  <p className=\"text-sm text-muted-foreground\">Time Spent</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold\">{progress.filter((p: ModuleProgress) => p.bookmarked).length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Bookmarked</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22047},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"server/controllers/coursesController.ts":{"content":"import { Request, Response } from 'express';\nimport type { AuthRequest } from '../middleware/auth';\nimport { storage } from '../storage';\nimport { connectToMongoDB } from '../db';\nimport mongoose from 'mongoose';\nimport { insertCourseSchema } from '../shared-schema';\nimport { Course } from '../models/Course';\nimport { CourseModule } from '../models/CourseModule';\nimport { CourseEnrollment } from '../models/CourseEnrollment';\nimport { User } from '../models/User';\nimport QRCode from 'qrcode';\nimport { z } from 'zod';\n\nexport async function listCourses(req: AuthRequest, res: Response) {\n  try {\n    const userId = req.user.id;\n    const isAdmin = req.user.role === 'admin';\n    let courses: any[] = [];\n    if (isAdmin) {\n      courses = await Course.find({}).lean();\n    } else {\n      // Return public courses or those the user is enrolled in\n      const enrolled = await CourseEnrollment.find({ userId }).lean();\n      const enrolledIds = new Set(enrolled.map((e: any) => e.courseId));\n      const all = await Course.find({}).lean();\n      courses = all.filter((c: any) => c.isPublic || enrolledIds.has(c.id));\n    }\n\n    // Enrich with lightweight counts for modules and enrollments\n    const courseIds = courses.map((c: any) => c.id);\n    if (courseIds.length > 0) {\n      // Use Mongoose counts (no raw DB access)\n      const [modulesByCourse, enrollmentsByCourse] = await Promise.all([\n        (async () => {\n          const rows = await CourseModule.aggregate([\n            { $match: { courseId: { $in: courseIds } } },\n            { $group: { _id: '$courseId', count: { $sum: 1 } } },\n          ]);\n          return new Map(rows.map((r: any) => [r._id, r.count]));\n        })(),\n        (async () => {\n          const rows = await CourseEnrollment.aggregate([\n            { $match: { courseId: { $in: courseIds } } },\n            { $group: { _id: '$courseId', count: { $sum: 1 } } },\n          ]);\n          return new Map(rows.map((r: any) => [r._id, r.count]));\n        })(),\n      ]);\n\n      courses = courses.map((c: any) => ({\n        ...c,\n        moduleCount: modulesByCourse.get(c.id) || 0,\n        enrollmentCount: enrollmentsByCourse.get(c.id) || 0,\n      }));\n    }\n\n    res.json(courses);\n  } catch (error) {\n    console.error('Error fetching courses:', error);\n    res.status(500).json({ message: 'Failed to fetch courses' });\n  }\n}\n\nexport async function createCourse(req: AuthRequest, res: Response) {\n  try {\n    const userId = req.user.id;\n    if (!userId) {\n      return res.status(401).json({ message: 'User ID not found' });\n    }\n    const validatedData = insertCourseSchema.parse({\n      ...req.body,\n      createdBy: userId,\n    });\n    // Generate a numeric, monotonic id\n    const last = await Course.findOne({}, {}, { sort: { id: -1 } }).lean();\n    const nextId = (last?.id || 0) + 1;\n\n    // Persist only course document here; modules are handled separately elsewhere\n    const { modules, ...courseOnly } = validatedData as any;\n    const course = await Course.create({\n      id: nextId,\n      ...courseOnly,\n      createdBy: userId,\n    } as any);\n    // If modules were provided, persist them as separate documents\n    if (Array.isArray(modules) && modules.length > 0) {\n      // Generate unique ids for modules and attach courseId\n      const lastModule = await CourseModule.findOne({}, {}, { sort: { id: -1 } }).lean();\n      let nextModuleId = (lastModule?.id || 0) + 1;\n      const moduleDocs = modules.map((m: any, index: number) => ({\n        id: nextModuleId++,\n        courseId: nextId,\n        title: String(m.title),\n        description: String(m.description || ''),\n        order: typeof m.order === 'number' && m.order >= 1 ? m.order : index + 1,\n        textContent: m.textContent || '',\n        videoUrl: m.videoUrl || '',\n        codeExample: m.codeExample || '',\n        language: m.language || 'javascript',\n        expectedOutput: m.expectedOutput || '',\n        duration: m.duration || undefined,\n      }));\n      await CourseModule.insertMany(moduleDocs);\n    }\n    res.status(201).json(course);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: 'Invalid data', errors: (error as any).errors });\n    }\n    if ((error as any)?.name === 'ValidationError') {\n      const messages = Object.values((error as any).errors || {}).map((e: any) => e.message);\n      return res.status(400).json({ message: 'Invalid data', errors: messages });\n    }\n    console.error('Error creating course:', error);\n    res.status(500).json({ message: 'Failed to create course' });\n  }\n}\n\nexport async function getCourse(req: Request, res: Response) {\n  try {\n    const id = parseInt(req.params.id);\n    const course = await Course.findOne({ id }).lean();\n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    const [modules, enrollments] = await Promise.all([\n      CourseModule.find({ courseId: id }).sort({ order: 1 }).lean(),\n      CourseEnrollment.find({ courseId: id }).lean(),\n    ]);\n    res.json({\n      ...course,\n      modules,\n      enrolledUsers: enrollments.map((e: any) => e.userId),\n      enrollmentCount: enrollments.length,\n      moduleCount: modules.length,\n    });\n  } catch (error) {\n    console.error('Error fetching course:', error);\n    res.status(500).json({ message: 'Failed to fetch course' });\n  }\n}\n\nexport async function getCourseModules(req: AuthRequest, res: Response) {\n  try {\n    const courseId = parseInt(req.params.id);\n    const userId = req.user.id;\n    const isAdmin = req.user.role === 'admin';\n\n    const canAccess = await storage.canUserAccessCourse(courseId, userId, isAdmin);\n    if (!canAccess) {\n      return res.status(403).json({ message: 'Access denied: You must be enrolled' });\n    }\n    \n    // Use the same Mongoose approach as getCourse for consistency\n    const modules = await CourseModule.find({ courseId }).sort({ order: 1 }).lean();\n    res.json(modules);\n  } catch (error) {\n    console.error('Error fetching course modules:', error);\n    res.status(500).json({ message: 'Failed to fetch course modules' });\n  }\n}\n\nexport async function updateCourse(req: AuthRequest, res: Response) {\n  try {\n    const id = parseInt(req.params.id);\n    const userId = req.user.id;\n    const existingCourse = await Course.findOne({ id }).lean();\n    if (!existingCourse) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    const updateData = { ...req.body, updatedBy: userId, updatedAt: new Date() } as any;\n    const result = await Course.findOneAndUpdate({ id }, { $set: updateData }, { new: true }).lean();\n    if (!result) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    res.json(result);\n  } catch (error) {\n    console.error('Error updating course:', error);\n    res.status(500).json({ message: 'Failed to update course' });\n  }\n}\n\nexport async function deleteCourse(req: AuthRequest, res: Response) {\n  try {\n    const id = parseInt(req.params.id);\n    const course = await Course.findOne({ id }).lean();\n    if (!course) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    await Promise.all([\n      CourseModule.deleteMany({ courseId: id }),\n      CourseEnrollment.deleteMany({ courseId: id }),\n      (await import('../models/ModuleProgress')).ModuleProgress.deleteMany({ courseId: id }),\n    ]);\n    const result = await Course.deleteOne({ id });\n    if (result.deletedCount === 0) {\n      return res.status(404).json({ message: 'Course not found' });\n    }\n    res.status(204).send();\n  } catch (error) {\n    console.error('Error deleting course:', error);\n    res.status(500).json({ message: 'Failed to delete course' });\n  }\n}\n\nexport async function enrollInCourse(req: AuthRequest, res: Response) {\n  try {\n    const courseId = parseInt(req.params.id);\n    const { userId } = req.body;\n    const requesterId = req.user.id;\n    const isAdmin = req.user.role === 'admin';\n\n    let targetUserId: string;\n    if (isAdmin && userId && userId !== 'self') {\n      targetUserId = userId;\n    } else {\n      targetUserId = requesterId;\n    }\n\n    const course = await storage.getCourse(courseId);\n    if (!course) return res.status(404).json({ message: 'Course not found' });\n\n    const isEnrolled = await storage.isUserEnrolledInCourse(courseId, targetUserId);\n    if (isEnrolled) {\n      // Make endpoint idempotent: return existing enrollment instead of 409 (Mongoose-only)\n      const userObjectId = mongoose.Types.ObjectId.isValid(targetUserId)\n        ? new mongoose.Types.ObjectId(targetUserId)\n        : (targetUserId as any);\n      const existing: any = await CourseEnrollment.findOne({ courseId, userId: userObjectId }).lean();\n      if (existing) {\n        return res.status(200).json({ ...existing, userId: String(existing.userId), _id: String(existing._id) });\n      }\n      // Fallback: proceed to create if not found due to race\n    }\n\n    const enrollment = await storage.enrollUserInCourse(targetUserId, courseId, isAdmin ? requesterId : undefined);\n    res.status(201).json(enrollment);\n  } catch (error) {\n    console.error('[DEBUG] Error enrolling user in course:', error);\n    if ((error as any).message && (error as any).message.includes('already enrolled')) {\n      return res.status(409).json({ message: 'User is already enrolled in this course' });\n    }\n    res.status(500).json({ message: 'Failed to enroll user in course' });\n  }\n}\n\nexport async function deleteEnrollment(req: AuthRequest, res: Response) {\n  try {\n    const courseId = parseInt(req.params.id);\n    const userId = req.params.userId;\n    const result = await storage.removeUserFromCourse(courseId, userId);\n    if (!result) return res.status(404).json({ message: 'Enrollment not found' });\n    res.json({ message: 'Student removed from course successfully' });\n  } catch (error) {\n    console.error('Error removing student from course:', error);\n    res.status(500).json({ message: 'Failed to remove student from course' });\n  }\n}\n\nexport async function getEnrollments(req: AuthRequest, res: Response) {\n  try {\n    const courseId = parseInt(req.params.id);\n    // Use raw collection to align with storage insert (ObjectId fields)\n    // Use mongoose model only\n    const rows = await CourseEnrollment.find({ courseId }).sort({ enrolledAt: -1 }).lean();\n    const userIds = rows.map((e: any) => e.userId);\n    const users = await User.find({ _id: { $in: userIds as any } }).select('firstName lastName email').lean();\n    const byId = new Map(users.map((u: any) => [String(u._id), u]));\n    const mapped = rows.map((e: any) => ({\n      ...e,\n      userId: String(e.userId),\n      _id: String(e._id),\n      user: {\n        firstName: byId.get(String(e.userId))?.firstName || '',\n        lastName: byId.get(String(e.userId))?.lastName || '',\n        email: byId.get(String(e.userId))?.email || '',\n      }\n    }));\n    res.json(mapped);\n  } catch (error) {\n    console.error('Error fetching course enrollments:', error);\n    res.status(500).json({ message: 'Failed to fetch course enrollments' });\n  }\n}\n\nexport async function getCourseQrCode(req: AuthRequest, res: Response) {\n  try {\n    const courseId = parseInt(req.params.id);\n    if (isNaN(courseId)) return res.status(400).json({ message: 'Invalid course ID' });\n\n    const course = await storage.getCourse(courseId);\n    if (!course) return res.status(404).json({ message: 'Course not found' });\n\n    const frontendUrl = process.env.FRONTEND_URL || `${req.protocol}://${req.get('host')}`;\n    const enrollmentUrl = `${frontendUrl}/enroll/${courseId}`;\n\n    const qrCodeDataUrl = await (await import('qrcode')).default.toDataURL(enrollmentUrl);\n\n    res.json({ qrCode: qrCodeDataUrl, enrollmentUrl, courseId, courseTitle: (course as any).title });\n  } catch (error) {\n    console.error('Error generating QR code:', error);\n    res.status(500).json({ message: 'Failed to generate QR code' });\n  }\n}\n\nexport async function getCourseProgress(req: AuthRequest, res: Response) {\n  try {\n    const userId = req.user.id;\n    if (!userId) return res.status(401).json({ message: 'User ID not found' });\n    const courseId = parseInt(req.params.id);\n    \n    // Get user's enrollment for this course\n    const { CourseEnrollment } = await import('../models/CourseEnrollment');\n    const enrollment = await CourseEnrollment.findOne({ userId, courseId }).lean();\n    \n    // Get course modules\n    const { CourseModule } = await import('../models/CourseModule');\n    const courseModules = await CourseModule.find({ courseId }).lean();\n    \n    // Get user's module progress\n    const moduleProgress = await storage.getUserCourseProgress(userId, courseId);\n    \n    // Calculate completed modules\n    const completedModules = moduleProgress\n      .filter(p => p.isCompleted)\n      .map(p => p.moduleId);\n    \n    // Calculate progress percentage\n    const totalModules = courseModules.length;\n    const completedCount = completedModules.length;\n    const progress = totalModules > 0 ? Math.round((completedCount / totalModules) * 100) : 0;\n    \n    // Return the structure the client expects\n    const result = {\n      enrollment: enrollment ? {\n        id: enrollment.id,\n        courseId: enrollment.courseId,\n        userId: enrollment.userId,\n        completedModules: completedModules,\n        progress: progress\n      } : {\n        id: 0,\n        courseId: courseId,\n        userId: userId,\n        completedModules: completedModules,\n        progress: progress\n      },\n      completedModules: courseModules.filter(m => completedModules.includes(m.id)),\n      totalModules: totalModules\n    };\n    \n    res.json(result);\n  } catch (error) {\n    console.error('Error fetching course progress:', error);\n    res.status(500).json({ message: 'Failed to fetch course progress' });\n  }\n}\n\nexport async function getUserEnrollments(req: AuthRequest, res: Response) {\n  try {\n    const userId = req.user.id;\n    if (!userId) return res.status(401).json({ message: 'User ID not found' });\n    const enrollments = await CourseEnrollment.find({ userId }).lean();\n    res.json(enrollments);\n  } catch (error) {\n    console.error('Error fetching user enrollments:', error);\n    res.status(500).json({ message: 'Failed to fetch user enrollments' });\n  }\n}\n\nexport async function getUserCourses(req: AuthRequest, res: Response) {\n  try {\n    const userId = req.user.id;\n    if (!userId) return res.status(401).json({ message: 'User ID not found' });\n    \n    // Get user's course enrollments\n    const enrollments = await CourseEnrollment.find({ userId }).lean();\n    const enrolledCourseIds = enrollments.map(e => e.courseId);\n    \n    // Only get courses that the user is enrolled in AND are public\n    // Admin can see all courses, regular users only see enrolled + public courses\n    const isAdmin = req.user.role === 'admin';\n    let courses;\n    if (isAdmin) {\n      courses = await Course.find({}).lean();\n    } else {\n      courses = await Course.find({\n        $and: [\n          { isPublic: true },  // Course must be public\n          { id: { $in: enrolledCourseIds } }  // User must be enrolled\n        ]\n      }).lean();\n    }\n    \n    // Get course modules for progress calculation\n    const courseIds = courses.map(c => c.id);\n    const modules = await CourseModule.find({ courseId: { $in: courseIds } }).lean();\n    const modulesByCourse = new Map();\n    modules.forEach(m => {\n      if (!modulesByCourse.has(m.courseId)) {\n        modulesByCourse.set(m.courseId, []);\n      }\n      modulesByCourse.get(m.courseId).push(m);\n    });\n    \n    // Get participant counts for each course\n    const enrollmentsByCourse = await CourseEnrollment.aggregate([\n      { $match: { courseId: { $in: courseIds } } },\n      { $group: { _id: '$courseId', count: { $sum: 1 } } }\n    ]).exec();\n    \n    const participantCounts = new Map();\n    enrollmentsByCourse.forEach((item: any) => {\n      participantCounts.set(item._id, item.count);\n    });\n    \n    // Calculate progress for each course\n    const coursesWithProgress = courses.map(course => {\n      const courseModules = modulesByCourse.get(course.id) || [];\n      const totalModules = courseModules.length;\n      const participantCount = participantCounts.get(course.id) || 0;\n      \n      // Find user's enrollment for this course\n      const enrollment = enrollments.find(e => e.courseId === course.id);\n      const completedModules = enrollment?.completedModules || [];\n      const completedCount = completedModules.length;\n      \n      // Calculate progress percentage\n      const progress = totalModules > 0 ? Math.round((completedCount / totalModules) * 100) : 0;\n      \n      return {\n        ...course,\n        moduleCount: totalModules,\n        enrollmentCount: participantCount,\n        userProgress: {\n          progress,\n          completedModules: completedCount,\n          totalModules,\n          isEnrolled: !!enrollment\n        },\n        isEnrolled: !!enrollment\n      };\n    });\n    \n    // Sort: enrolled courses first, then by progress, then by creation date\n    coursesWithProgress.sort((a, b) => {\n      if (a.isEnrolled && !b.isEnrolled) return -1;\n      if (!a.isEnrolled && b.isEnrolled) return 1;\n      if (a.isEnrolled && b.isEnrolled) {\n        return b.userProgress.progress - a.userProgress.progress;\n      }\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    });\n    \n    res.json(coursesWithProgress);\n  } catch (error) {\n    console.error('Error fetching user courses:', error);\n    res.status(500).json({ message: 'Failed to fetch user courses' });\n  }\n} ","size_bytes":17573},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ToastDemo.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { toastSuccess, toastError, toastWarning, toastInfo } from '@/components/ui/use-toast';\n\nexport function ToastDemo() {\n  const handleSuccessToast = () => {\n    toastSuccess('Operation Successful!', 'Your action has been completed successfully.');\n  };\n\n  const handleErrorToast = () => {\n    toastError('Operation Failed', 'Something went wrong. Please try again.');\n  };\n\n  const handleWarningToast = () => {\n    toastWarning('Warning', 'Please review your input before proceeding.');\n  };\n\n  const handleInfoToast = () => {\n    toastInfo('Information', 'Here is some helpful information for you.');\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Enhanced Toast Demo</CardTitle>\n        <CardDescription>\n          Test the new enhanced toast notifications with different variants\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Button onClick={handleSuccessToast} className=\"w-full\" variant=\"default\">\n          Show Success Toast\n        </Button>\n        <Button onClick={handleErrorToast} className=\"w-full\" variant=\"destructive\">\n          Show Error Toast\n        </Button>\n        <Button onClick={handleWarningToast} className=\"w-full\" variant=\"outline\">\n          Show Warning Toast\n        </Button>\n        <Button onClick={handleInfoToast} className=\"w-full\" variant=\"secondary\">\n          Show Info Toast\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1663},"client/src/pages/admin/assignments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Plus, Search, Calendar, Users, Edit, Trash2 } from \"lucide-react\";\nimport * as z from \"zod\";\nimport { useToast, toastSuccess, toastError, toastWarning } from \"@/components/ui/use-toast\";\nimport { format, isValid, parseISO } from \"date-fns\";\n\ninterface Assignment {\n  id: number;\n  title: string;\n  description: string;\n  dueDate: string;\n  problems: Problem[];\n  assignedTo: {\n    type: \"user\" | \"group\";\n    id: number;\n    name: string;\n  }[];\n}\n\ninterface Problem {\n  id: number;\n  title: string;\n  difficulty: string;\n  points: number;\n}\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\ninterface Group {\n  id: number;\n  name: string;\n  memberCount: number;\n}\n\nconst assignmentSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  problems: z.array(z.object({\n    id: z.number(),\n    points: z.number().min(1, \"Points must be at least 1\")\n  })).min(1, \"At least one problem is required\"),\n  assignedTo: z.array(z.object({\n    type: z.enum([\"user\", \"group\"]),\n    id: z.number(),\n    name: z.string()\n  })).min(1, \"Must assign to at least one user or group\")\n});\n\n// Helper function to safely format dates\nconst formatDate = (dateString: string) => {\n  try {\n    const date = parseISO(dateString);\n    if (!isValid(date)) {\n      return \"Invalid date\";\n    }\n    return format(date, \"PPp\");\n  } catch (error) {\n    return \"Invalid date\";\n  }\n};\n\nexport default function AdminAssignments() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [editingAssignment, setEditingAssignment] = useState<Assignment | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<z.infer<typeof assignmentSchema>>({\n    resolver: zodResolver(assignmentSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      dueDate: \"\",\n      problems: [],\n      assignedTo: []\n    }\n  });\n\n  const { data: assignments, isLoading: isLoadingAssignments } = useQuery<Assignment[]>({\n    queryKey: [\"/api/admin/assignments\"],\n    retry: false,\n    staleTime: 5000,\n  });\n\n  const { data: availableProblems } = useQuery<Problem[]>({\n    queryKey: [\"/api/admin/problems\"],\n    retry: false,\n    staleTime: 5000,\n  });\n\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    retry: false,\n    staleTime: 5000,\n  });\n\n  const { data: groups } = useQuery<Group[]>({\n    queryKey: [\"/api/admin/groups\"],\n    retry: false,\n    staleTime: 5000,\n  });\n\n  const createAssignmentMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof assignmentSchema>) => {\n      const response = await fetch(\"/api/admin/assignments\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || \"Failed to create assignment\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/assignments\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Assignment created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAssignmentMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/admin/assignments/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || \"Failed to delete assignment\");\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/assignments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Assignment deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAssignmentMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof assignmentSchema> & { id: number }) => {\n      const response = await fetch(`/api/admin/assignments/${data.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || \"Failed to update assignment\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/assignments\"] });\n      handleDialogClose();\n      toast({\n        title: \"Success\",\n        description: \"Assignment updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    setEditingAssignment(null);\n    form.reset();\n  };\n\n  const handleEdit = (assignment: Assignment) => {\n    setEditingAssignment(assignment);\n    form.reset({\n      title: assignment.title,\n      description: assignment.description,\n      dueDate: assignment.dueDate,\n      problems: assignment.problems,\n      assignedTo: assignment.assignedTo\n    });\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = (data: z.infer<typeof assignmentSchema>) => {\n    if (editingAssignment) {\n      updateAssignmentMutation.mutate({ ...data, id: editingAssignment.id });\n    } else {\n    createAssignmentMutation.mutate(data);\n    }\n  };\n\n  const handleUserAssignment = (user: User) => {\n    const currentAssignedTo = form.getValues(\"assignedTo\") || [];\n    const isCurrentlyAssigned = currentAssignedTo.some(a => \n      a.type === \"user\" && a.id === user.id\n    );\n\n    if (isCurrentlyAssigned) {\n      // Remove this specific user\n      const updatedAssignedTo = currentAssignedTo.filter(a => \n        !(a.type === \"user\" && a.id === user.id)\n      );\n      form.setValue(\"assignedTo\", updatedAssignedTo, { shouldValidate: true });\n    } else {\n      // Add only this specific user\n      const updatedAssignedTo = [\n        ...currentAssignedTo,\n        { type: \"user\" as const, id: user.id, name: user.name }\n      ];\n      form.setValue(\"assignedTo\", updatedAssignedTo, { shouldValidate: true });\n    }\n  };\n\n  const handleGroupAssignment = (group: Group) => {\n    const currentAssignedTo = form.getValues(\"assignedTo\") || [];\n    const isCurrentlyAssigned = currentAssignedTo.some(a => \n      a.type === \"group\" && a.id === group.id\n    );\n\n    if (isCurrentlyAssigned) {\n      // Remove this specific group\n      const updatedAssignedTo = currentAssignedTo.filter(a => \n        !(a.type === \"group\" && a.id === group.id)\n      );\n      form.setValue(\"assignedTo\", updatedAssignedTo, { shouldValidate: true });\n    } else {\n      // Add only this specific group\n      const updatedAssignedTo = [\n        ...currentAssignedTo,\n        { type: \"group\" as const, id: group.id, name: group.name }\n      ];\n      form.setValue(\"assignedTo\", updatedAssignedTo, { shouldValidate: true });\n    }\n  };\n\n  // Helper function to check if a user/group is assigned\n  const isAssigned = (type: \"user\" | \"group\", id: number) => {\n    const assignedTo = form.watch(\"assignedTo\") || [];\n    return assignedTo.some(a => a.type === type && a.id === id);\n  };\n\n  const filteredAssignments = assignments?.filter(assignment =>\n    assignment.title.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n            Assignment Management\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Create and manage assignments for users and groups.\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => setIsDialogOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Assignment\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingAssignment ? \"Edit Assignment\" : \"Create New Assignment\"}\n              </DialogTitle>\n              <DialogDescription>\n                {editingAssignment \n                  ? \"Make changes to the existing assignment. Click save when you're done.\"\n                  : \"Create a new assignment by filling out the information below.\"}\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter assignment title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Enter assignment description\"\n                          className=\"min-h-[100px]\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"dueDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Due Date</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"datetime-local\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Select Problems</h3>\n                  <div className=\"space-y-2\">\n                    {availableProblems?.map(problem => (\n                      <Card key={problem.id} className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-medium\">{problem.title}</h4>\n                            <Badge>{problem.difficulty}</Badge>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <FormField\n                              control={form.control}\n                              name={`problems.${problem.id}.points`}\n                              defaultValue={0}\n                              render={({ field }) => (\n                            <Input\n                              type=\"number\"\n                              placeholder=\"Points\"\n                              className=\"w-24\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                              onChange={(e) => {\n                                    const points = parseInt(e.target.value) || 0;\n                                    const currentProblems = form.getValues(\"problems\") || [];\n                                    const existingIndex = currentProblems.findIndex(p => p.id === problem.id);\n                                \n                                if (existingIndex >= 0) {\n                                      const updatedProblems = [...currentProblems];\n                                      updatedProblems[existingIndex].points = points;\n                                      form.setValue(\"problems\", updatedProblems, { shouldValidate: true });\n                                } else {\n                                      form.setValue(\"problems\", [...currentProblems, { id: problem.id, points }], { shouldValidate: true });\n                                }\n                                    field.onChange(points);\n                              }}\n                                />\n                              )}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                const currentProblems = form.getValues(\"problems\") || [];\n                                const updatedProblems = currentProblems.filter(p => p.id !== problem.id);\n                                form.setValue(\"problems\", updatedProblems, { shouldValidate: true });\n                              }}\n                            >\n                              Remove\n                            </Button>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Assign To</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"font-medium mb-2\">Users</h4>\n                      <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                        {users?.map(user => (\n                          <Card key={user.id} className=\"p-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <div className=\"font-medium\">{user.name}</div>\n                                <div className=\"text-sm text-gray-500\">{user.email}</div>\n                              </div>\n                              <FormField\n                                control={form.control}\n                                name=\"assignedTo\"\n                                render={({ field }) => (\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                    onClick={() => handleUserAssignment(user)}\n                                  >\n                                    {isAssigned(\"user\", user.id) ? \"Remove\" : \"Add\"}\n                              </Button>\n                                )}\n                              />\n                            </div>\n                          </Card>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-medium mb-2\">Groups</h4>\n                      <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n                        {groups?.map(group => (\n                          <Card key={group.id} className=\"p-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <div className=\"font-medium\">{group.name}</div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {group.memberCount} members\n                                </div>\n                              </div>\n                              <FormField\n                                control={form.control}\n                                name=\"assignedTo\"\n                                render={({ field }) => (\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                    onClick={() => handleGroupAssignment(group)}\n                                  >\n                                    {isAssigned(\"group\", group.id) ? \"Remove\" : \"Add\"}\n                              </Button>\n                                )}\n                              />\n                            </div>\n                          </Card>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={handleDialogClose}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    {editingAssignment ? \"Update Assignment\" : \"Create Assignment\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Search className=\"h-5 w-5\" />\n            <span>Search Assignments</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Input\n            placeholder=\"Search assignments...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </CardContent>\n      </Card>\n\n      {isLoadingAssignments ? (\n        <div className=\"grid gap-4\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-4\"></div>\n                <div className=\"flex space-x-2\">\n                  <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-32\"></div>\n                  <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-24\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid gap-4\">\n          {filteredAssignments.map((assignment) => (\n            <Card key={assignment.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                      {assignment.title}\n                    </h3>\n                    <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-3\">\n                      {assignment.description}\n                    </p>\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400\">\n                      <div className=\"flex items-center\">\n                        <Calendar className=\"w-4 h-4 mr-1\" />\n                        Due: {formatDate(assignment.dueDate)}\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Users className=\"w-4 h-4 mr-1\" />\n                        {assignment.assignedTo?.length || 0} assigned\n                      </div>\n                      <div>\n                        {assignment.problems?.length || 0} problems\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleEdit(assignment)}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => {\n                        if (confirm(\"Are you sure you want to delete this assignment?\")) {\n                          deleteAssignmentMutation.mutate(assignment.id);\n                        }\n                      }}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {!isLoadingAssignments && filteredAssignments.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"text-gray-500 dark:text-gray-400\">\n              <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No assignments found</h3>\n              <p>Try adjusting your search criteria or create a new assignment.</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n} ","size_bytes":22741},"server/middleware/activityLogger.ts":{"content":"import { NextFunction, Response } from 'express';\nimport type { AuthRequest } from './auth';\nimport { logAdminAction } from '../services/adminActivityLogger';\nimport { storage } from '../storage';\n\nexport function activityLogger() {\n  return async (req: AuthRequest, res: Response, next: NextFunction) => {\n    const startedAt = Date.now();\n\n    res.on('finish', async () => {\n      try {\n        // Only log successful mutating requests by admins\n        if (!req.user || req.user.role !== 'admin') return;\n        if (!['POST', 'PUT', 'PATCH', 'DELETE'].includes(req.method)) return;\n        if (res.statusCode >= 400) return;\n\n        const path = req.originalUrl || req.url;\n        const method = req.method;\n\n        let entityType: Parameters<typeof logAdminAction>[1]['entityType'] = 'other';\n        let action = `${method} ${path}`;\n        let description = action;\n        let entityId: string | undefined = undefined;\n\n        const adminName = [req.user?.firstName, req.user?.lastName].filter(Boolean).join(' ').trim() || req.user?.email || 'Admin';\n\n        // Admin users management\n        if (path.startsWith('/api/admin/users')) {\n          entityType = 'user';\n          if (method === 'POST') {\n            const full = [req.body?.firstName, req.body?.lastName].filter(Boolean).join(' ');\n            action = 'create_user';\n            description = `${adminName} created a user${full ? `: ${full}` : ''}${req.body?.email ? ` (${req.body.email})` : ''}`;\n          } else if (method === 'PATCH' && path.includes('/role')) {\n            action = 'change_user_role';\n            entityId = (req.params as any)?.id ? String((req.params as any).id) : undefined;\n            description = `${adminName} changed user role${entityId ? ` for user ${entityId}` : ''}${req.body?.role ? ` to ${req.body.role}` : ''}`;\n          } else if (method === 'DELETE') {\n            action = 'delete_user';\n            entityId = (req.params as any)?.id ? String((req.params as any).id) : undefined;\n            description = `${adminName} deleted a user${entityId ? `: ${entityId}` : ''}`;\n          }\n        }\n\n        // Problem sets (act as assignments)\n        if (path.startsWith('/api/problem-sets')) {\n          entityType = 'problemSet';\n          entityId = (req.params as any)?.id ? String((req.params as any).id) : undefined;\n          if (method === 'POST' && !entityId) {\n            action = 'create_problem_set';\n            description = `${adminName} created a problem set${req.body?.title ? `: ${req.body.title}` : ''}`;\n          } else if (method === 'PUT') {\n            action = 'update_problem_set';\n            description = `${adminName} updated a problem set${req.body?.title ? `: ${req.body.title}` : ''}`;\n          } else if (method === 'DELETE') {\n            action = 'delete_problem_set';\n            description = `${adminName} deleted a problem set${entityId ? ` #${entityId}` : ''}`;\n          }\n        }\n\n        // Course enroll via admin\n        if (path.match(/^\\/api\\/courses\\/\\d+\\/enroll/)) {\n          entityType = 'enrollment';\n          const courseId = Number((req.params as any)?.id);\n          let courseName = '';\n          try {\n            const course = await storage.getCourse(courseId);\n            courseName = (course as any)?.title || '';\n          } catch {}\n          const targetUserId = req.body?.userId && req.body.userId !== 'self' ? req.body.userId : req.user?.id;\n          let targetUserName = '';\n          if (targetUserId) {\n            try {\n              const u = await storage.getUser(String(targetUserId));\n              targetUserName = [u?.firstName, u?.lastName].filter(Boolean).join(' ').trim() || u?.email || String(targetUserId);\n            } catch {}\n          }\n          action = 'enroll_user_in_course';\n          description = `${adminName} enrolled ${targetUserName || 'a user'} in course${courseName ? `: ${courseName}` : courseId ? ` #${courseId}` : ''}`;\n          entityId = String(courseId);\n        }\n\n        await logAdminAction(req, {\n          action,\n          description,\n          entityType,\n          entityId,\n          metadata: {\n            statusCode: res.statusCode,\n            durationMs: Date.now() - startedAt,\n            query: req.query,\n            bodyKeys: req.body ? Object.keys(req.body) : [],\n          },\n        });\n      } catch (e) {\n        // do not block response\n      }\n    });\n\n    next();\n  };\n} ","size_bytes":4433},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"execution-system/docker/java/execute.sh":{"content":"#!/bin/bash\n\n# Set strict error handling\nset -euo pipefail\n\n# Constants\nMEMORY_LIMIT=\"128m\"\nTIMEOUT=\"5\"\nCLASS_NAME=\"Solution\"\nDEFAULT_FILE=\"/tmp/Solution.java\"\n\n# Get source file from arguments or use default\nSOURCE_FILE=\"${1:-$DEFAULT_FILE}\"\n\nif [ ! -f \"$SOURCE_FILE\" ]; then\n    echo \"Error: Source file not found at $SOURCE_FILE\" >&2\n    exit 1\nfi\n\nSTART_TIME=$(date +%s%N)\nSTART_MEMORY=$(ps -o rss= -p $$)\n\n# Compile the Java code\necho \"Compiling Java code...\" >&2\nif ! javac -J-Xmx${MEMORY_LIMIT} \"${SOURCE_FILE}\" 2>&1; then\n    echo \"Compilation failed\" >&2\n    exit 1\nfi\n\n# Execute the compiled code with resource limits and security manager\necho \"Executing Java code...\" >&2\ntimeout \"${TIMEOUT}s\" java \\\n    -Xmx${MEMORY_LIMIT} \\\n    -XX:+ExitOnOutOfMemoryError \\\n    -XX:+HeapDumpOnOutOfMemoryError \\\n    -Djava.security.manager \\\n    -Djava.security.policy==/dev/null \\\n    \"${CLASS_NAME}\" 2>&1\n\nEXIT_CODE=$?\n\n# Calculate execution stats\nEND_TIME=$(date +%s%N)\nEND_MEMORY=$(ps -o rss= -p $$)\nRUNTIME_MS=$(( (END_TIME - START_TIME) / 1000000 ))\nMEMORY_BYTES=$(( (END_MEMORY - START_MEMORY) * 1024 ))\n\n# Handle different exit codes\ncase $EXIT_CODE in\n    0)\n        # Successful execution\n        echo -e \"\\n__EXECUTION_STATS__:{\\\"runtime_ms\\\":$RUNTIME_MS,\\\"memory_bytes\\\":$MEMORY_BYTES,\\\"success\\\":true}\" >&2\n        ;;\n    124)\n        # Timeout\n        echo \"Error: Code execution timed out\" >&2\n        exit 1\n        ;;\n    137)\n        # Memory limit exceeded\n        echo \"Error: Memory limit exceeded\" >&2\n        exit 1\n        ;;\n    *)\n        # Other error\n        echo \"Error: Execution failed with code $EXIT_CODE\" >&2\n        exit 1\n        ;;\nesac ","size_bytes":1672},"client/src/components/CodeEditor.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport * as monaco from 'monaco-editor';\n\nexport interface CodeEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  language: string;\n}\n\nexport function CodeEditor({ value, onChange, language }: CodeEditorProps) {\n  const editorRef = useRef<monaco.editor.IStandaloneCodeEditor | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (containerRef.current) {\n      editorRef.current = monaco.editor.create(containerRef.current, {\n        value,\n        language,\n        theme: 'vs-dark',\n        minimap: { enabled: false },\n        fontSize: 14,\n        lineNumbers: 'on',\n        scrollBeyondLastLine: false,\n        automaticLayout: true,\n        tabSize: 2,\n        wordWrap: 'on',\n      });\n\n      editorRef.current.onDidChangeModelContent(() => {\n        if (editorRef.current) {\n          onChange(editorRef.current.getValue());\n        }\n      });\n\n      return () => {\n        editorRef.current?.dispose();\n      };\n    }\n  }, []);\n\n  useEffect(() => {\n    if (editorRef.current && value !== editorRef.current.getValue()) {\n      editorRef.current.setValue(value);\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      monaco.editor.setModelLanguage(editorRef.current.getModel()!, language);\n    }\n  }, [language]);\n\n  return (\n    <div \n      ref={containerRef} \n      className=\"w-full h-full min-h-[300px]\"\n      data-testid=\"code-editor\"\n    />\n  );\n}\n","size_bytes":1488},"client/src/pages/AdminVersionHistory.tsx":{"content":"import { useMemo, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Pagination, PaginationContent, PaginationItem, PaginationLink } from '@/components/ui/pagination';\nimport { config } from '@/config';\n\ninterface HistoryItem {\n  id: string;\n  action: string;\n  description?: string;\n  entityType: string;\n  entityId?: string;\n  adminName?: string;\n  adminId?: string;\n  createdAt: string;\n}\n\nexport default function AdminVersionHistory() {\n  const [, setLocation] = useLocation();\n  const token = useMemo(() => localStorage.getItem('token') || '', []);\n\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(20);\n  const [entityType, setEntityType] = useState<string>('');\n  const [adminId, setAdminId] = useState<string>('');\n  const [search, setSearch] = useState<string>('');\n\n  const queryString = useMemo(() => {\n    const params = new URLSearchParams();\n    params.set('page', String(page));\n    params.set('pageSize', String(pageSize));\n    if (entityType) params.set('entityType', entityType);\n    if (adminId) params.set('adminId', adminId);\n    if (search) params.set('search', search);\n    return params.toString();\n  }, [page, pageSize, entityType, adminId, search]);\n\n  const { data, isLoading } = useQuery({\n    queryKey: ['admin', 'version-history', queryString],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/version-history?${queryString}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (!res.ok) throw new Error(await res.text());\n      return res.json() as Promise<{ items: HistoryItem[]; total: number; page: number; pageSize: number; totalPages: number }>\n    },\n  });\n\n  const items = data?.items || [];\n\n  return (\n    <div className=\"container mx-auto p-4 sm:p-6 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Version History</h1>\n          <p className=\"text-muted-foreground\">All admin actions across the platform</p>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Filters</CardTitle>\n          <CardDescription>Refine activity list</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\n            <Input placeholder=\"Search action/description\" value={search} onChange={(e) => setSearch(e.target.value)} />\n            <Select value={entityType || 'all'} onValueChange={(v) => setEntityType(v === 'all' ? '' : v)}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Entity Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Entities</SelectItem>\n                <SelectItem value=\"problem\">Problem</SelectItem>\n                <SelectItem value=\"problemSet\">Problem Set</SelectItem>\n                <SelectItem value=\"course\">Course</SelectItem>\n                <SelectItem value=\"courseModule\">Course Module</SelectItem>\n                <SelectItem value=\"user\">User</SelectItem>\n                <SelectItem value=\"contest\">Contest</SelectItem>\n                <SelectItem value=\"enrollment\">Enrollment</SelectItem>\n                <SelectItem value=\"announcement\">Announcement</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n            <Input placeholder=\"Admin ID (optional)\" value={adminId} onChange={(e) => setAdminId(e.target.value)} />\n            <Select value={String(pageSize)} onValueChange={(v) => setPageSize(parseInt(v, 10))}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Page size\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"10\">10</SelectItem>\n                <SelectItem value=\"20\">20</SelectItem>\n                <SelectItem value=\"50\">50</SelectItem>\n                <SelectItem value=\"100\">100</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Activity</CardTitle>\n          <CardDescription>Showing {items.length} of {data?.total || 0} entries</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div>Loading...</div>\n          ) : (\n            <div className=\"space-y-4\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>When</TableHead>\n                    <TableHead>Admin</TableHead>\n                    <TableHead>Action</TableHead>\n                    <TableHead>Entity</TableHead>\n                    <TableHead>Description</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {items.map((i) => (\n                    <TableRow key={i.id}>\n                      <TableCell>{new Date(i.createdAt).toLocaleString()}</TableCell>\n                      <TableCell>{i.adminName || i.adminId}</TableCell>\n                      <TableCell className=\"whitespace-pre-wrap\">{i.action}</TableCell>\n                      <TableCell>{i.entityType}{i.entityId ? ` (#${i.entityId})` : ''}</TableCell>\n                      <TableCell className=\"max-w-[480px] truncate\" title={i.description || ''}>{i.description}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n\n              {data && data.totalPages > 1 && (\n                <Pagination>\n                  <PaginationContent>\n                    {Array.from({ length: data.totalPages }).map((_, idx) => (\n                      <PaginationItem key={idx}>\n                        <PaginationLink isActive={data.page === idx + 1} onClick={() => setPage(idx + 1)}>\n                          {idx + 1}\n                        </PaginationLink>\n                      </PaginationItem>\n                    ))}\n                  </PaginationContent>\n                </Pagination>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","size_bytes":6648},"server/models/ContestParticipant.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface IContestParticipant {\n  id: string;\n  contestId: string;\n  userId: string; // store as string to match req.user.id\n  registrationTime: Date;\n  totalScore: number;\n  totalPenalty: number;\n  submissions: string[]; // submission ids\n  problemsAttempted: string[];\n  problemsSolved: string[];\n  isDisqualified: boolean;\n  rank?: number;\n  contestEndMethod?: 'manually_ended' | 'time_expired' | null;\n  enrollmentType: 'admin' | 'qr'; // New field to track enrollment method\n}\n\ninterface IContestParticipantDocument extends Omit<IContestParticipant, 'id'>, Document {\n  id: string;\n}\n\nconst contestParticipantSchema = new mongoose.Schema<IContestParticipantDocument>({\n  id: { type: String, required: true, unique: true, index: true },\n  contestId: { type: String, required: true, index: true },\n  userId: { type: String, required: true, index: true },\n  registrationTime: { type: Date, default: Date.now },\n  totalScore: { type: Number, default: 0 },\n  totalPenalty: { type: Number, default: 0 },\n  submissions: { type: [String], default: [] },\n  problemsAttempted: { type: [String], default: [] },\n  problemsSolved: { type: [String], default: [] },\n  isDisqualified: { type: Boolean, default: false },\n  rank: { type: Number },\n  contestEndMethod: { type: String, enum: ['manually_ended', 'time_expired', null], default: null },\n  enrollmentType: { \n    type: String, \n    enum: ['admin', 'qr'], \n    required: [true, 'Enrollment type is required'],\n    default: 'qr' // Default to QR for backward compatibility\n  },\n}, { timestamps: true });\n\ncontestParticipantSchema.index({ contestId: 1, userId: 1 }, { unique: true });\n\nexport const ContestParticipant = mongoose.model<IContestParticipantDocument>('ContestParticipant', contestParticipantSchema); ","size_bytes":1813},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/storage-mongoose.ts":{"content":"import mongoose from 'mongoose';\nimport { \n  User, Course, CourseModule, CourseEnrollment, Problem, Submission, \n  ProblemSet, ProblemSetEnrollment, ModuleProgress,\n  IUser, ICourse, ICourseModule, ICourseEnrollment, IProblem, ISubmission,\n  IProblemSet, IProblemSetEnrollment, IModuleProgress\n} from './models';\n\n// Import the existing interface to maintain compatibility\nimport { IStorage } from './storage';\n\nexport class MongooseStorage implements IStorage {\n  \n  // User operations\n  async getUser(id: string): Promise<any> {\n    try {\n      const user = await User.findOne({ $or: [{ _id: id }, { id: id }] });\n      if (user) {\n        const userObj = user.toObject() as any;\n        userObj.id = userObj._id.toString();\n        return userObj;\n      }\n      return undefined;\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting user:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByEmail(email: string): Promise<any> {\n    try {\n      const user = await User.findOne({ email });\n      if (user) {\n        const userObj = user.toObject() as any;\n        userObj.id = userObj._id.toString();\n        return userObj;\n      }\n      return undefined;\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting user by email:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(userData: Partial<IUser>): Promise<any> {\n    try {\n      const user = new User(userData);\n      const savedUser = await user.save();\n      const userObj = savedUser.toObject() as any;\n      userObj.id = userObj._id.toString();\n      return userObj;\n    } catch (error) {\n      console.error('[MongooseStorage] Error creating user:', error);\n      throw error;\n    }\n  }\n\n  // Problem operations\n  async getProblems(): Promise<IProblem[]> {\n    try {\n      const problems = await Problem.find({ isPublic: true }).sort({ id: 1 });\n      return problems.map(p => p.toObject());\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting problems:', error);\n      return [];\n    }\n  }\n\n  async getProblem(id: number): Promise<IProblem | undefined> {\n    try {\n      const problem = await Problem.findOne({ id });\n      return problem ? problem.toObject() : undefined;\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting problem:', error);\n      return undefined;\n    }\n  }\n\n  async createProblem(problemData: Partial<IProblem>): Promise<IProblem> {\n    try {\n      const problem = new Problem(problemData);\n      const savedProblem = await problem.save();\n      return savedProblem.toObject();\n    } catch (error) {\n      console.error('[MongooseStorage] Error creating problem:', error);\n      throw error;\n    }\n  }\n\n  async updateProblem(id: number, problemData: Partial<IProblem>): Promise<IProblem | null> {\n    try {\n      const problem = await Problem.findOneAndUpdate(\n        { id },\n        problemData,\n        { new: true, runValidators: true }\n      );\n      return problem ? problem.toObject() : null;\n    } catch (error) {\n      console.error('[MongooseStorage] Error updating problem:', error);\n      return null;\n    }\n  }\n\n  async deleteProblem(id: number): Promise<void> {\n    try {\n      await Problem.findOneAndDelete({ id });\n    } catch (error) {\n      console.error('[MongooseStorage] Error deleting problem:', error);\n      throw error;\n    }\n  }\n\n  // Submission operations\n  async getSubmissions(userId: string, problemId?: number): Promise<ISubmission[]> {\n    try {\n      const query: any = { userId };\n      if (problemId) query.problemId = problemId;\n      \n      const submissions = await Submission.find(query).sort({ submittedAt: -1 });\n      return submissions.map(s => s.toObject());\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting submissions:', error);\n      return [];\n    }\n  }\n\n  async createSubmission(submissionData: Partial<ISubmission>): Promise<ISubmission> {\n    try {\n      const submission = new Submission(submissionData);\n      const savedSubmission = await submission.save();\n      return savedSubmission.toObject();\n    } catch (error) {\n      console.error('[MongooseStorage] Error creating submission:', error);\n      throw error;\n    }\n  }\n\n  // Course operations\n  async getCourses(): Promise<ICourse[]> {\n    try {\n      const courses = await Course.find({ isPublic: true }).sort({ id: 1 });\n      return courses.map(c => c.toObject());\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting courses:', error);\n      return [];\n    }\n  }\n\n  async getCourse(id: number): Promise<ICourse | undefined> {\n    try {\n      const course = await Course.findOne({ id });\n      return course ? course.toObject() : undefined;\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting course:', error);\n      return undefined;\n    }\n  }\n\n  async createCourse(courseData: Partial<ICourse>): Promise<ICourse> {\n    try {\n      const course = new Course(courseData);\n      const savedCourse = await course.save();\n      return savedCourse.toObject();\n    } catch (error) {\n      console.error('[MongooseStorage] Error creating course:', error);\n      throw error;\n    }\n  }\n\n  async updateCourse(id: number, courseData: Partial<ICourse>): Promise<ICourse | null> {\n    try {\n      const course = await Course.findOneAndUpdate(\n        { id },\n        courseData,\n        { new: true, runValidators: true }\n      );\n      return course ? course.toObject() : null;\n    } catch (error) {\n      console.error('[MongooseStorage] Error updating course:', error);\n      return null;\n    }\n  }\n\n  async deleteCourse(id: number): Promise<void> {\n    try {\n      await Course.findOneAndDelete({ id });\n      // Also delete related data\n      await CourseModule.deleteMany({ courseId: id });\n      await CourseEnrollment.deleteMany({ courseId: id });\n      await ModuleProgress.deleteMany({ courseId: id });\n    } catch (error) {\n      console.error('[MongooseStorage] Error deleting course:', error);\n      throw error;\n    }\n  }\n\n  // Course module operations\n  async getCourseModules(courseId: number): Promise<ICourseModule[]> {\n    try {\n      const modules = await CourseModule.find({ courseId }).sort({ order: 1 });\n      return modules.map(m => m.toObject());\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting course modules:', error);\n      return [];\n    }\n  }\n\n  async getCourseModule(id: number): Promise<ICourseModule | undefined> {\n    try {\n      const module = await CourseModule.findOne({ id });\n      return module ? module.toObject() : undefined;\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting course module:', error);\n      return undefined;\n    }\n  }\n\n  async createCourseModule(moduleData: Partial<ICourseModule>): Promise<ICourseModule> {\n    try {\n      const module = new CourseModule(moduleData);\n      const savedModule = await module.save();\n      return savedModule.toObject();\n    } catch (error) {\n      console.error('[MongooseStorage] Error creating course module:', error);\n      throw error;\n    }\n  }\n\n  async updateCourseModule(id: number, moduleData: Partial<ICourseModule>): Promise<ICourseModule | null> {\n    try {\n      const module = await CourseModule.findOneAndUpdate(\n        { id },\n        moduleData,\n        { new: true, runValidators: true }\n      );\n      return module ? module.toObject() : null;\n    } catch (error) {\n      console.error('[MongooseStorage] Error updating course module:', error);\n      return null;\n    }\n  }\n\n  async deleteCourseModule(id: number): Promise<void> {\n    try {\n      await CourseModule.findOneAndDelete({ id });\n      // Also delete related progress data\n      await ModuleProgress.deleteMany({ moduleId: id });\n    } catch (error) {\n      console.error('[MongooseStorage] Error deleting course module:', error);\n      throw error;\n    }\n  }\n\n  // Course enrollment operations\n  async getCourseEnrollments(courseId?: number, userId?: string): Promise<any[]> {\n    try {\n      const query: any = {};\n      if (courseId) query.courseId = courseId;\n      if (userId) {\n        // Convert string userId to ObjectId for proper matching\n        query.userId = new mongoose.Types.ObjectId(userId);\n      }\n      \n      const enrollments = await CourseEnrollment.find(query).populate('userId', 'firstName lastName email');\n      return enrollments.map(e => {\n        const enrollment = e.toObject() as any;\n        \n        // Extract user data from populated userId field\n        const userData = enrollment.userId;\n        \n        // Create the correct structure for frontend\n        const result = {\n          ...enrollment,\n          userId: userData._id.toString(), // Convert back to string for frontend compatibility\n          user: {\n            _id: userData._id,\n            id: userData._id.toString(),\n            firstName: userData.firstName,\n            lastName: userData.lastName,\n            email: userData.email\n          }\n        };\n        \n        return result;\n      });\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting course enrollments:', error);\n      return [];\n    }\n  }\n\n  async enrollUserInCourse(userId: string, courseId: number): Promise<any> {\n    try {\n      // Convert string userId to ObjectId\n      const userObjectId = new mongoose.Types.ObjectId(userId);\n      \n      // Check if already enrolled\n      const existingEnrollment = await CourseEnrollment.findOne({ userId: userObjectId, courseId });\n      if (existingEnrollment) {\n        const enrollmentObj = existingEnrollment.toObject() as any;\n        // Convert userId to string for frontend compatibility\n        enrollmentObj.userId = enrollmentObj.userId.toString();\n        return enrollmentObj;\n      }\n\n      // Generate unique enrollment ID\n      const latestEnrollment = await CourseEnrollment.findOne({}).sort({ id: -1 });\n      const newId = latestEnrollment ? latestEnrollment.id + 1 : 1;\n\n      const enrollment = new CourseEnrollment({\n        id: newId,\n        userId: userObjectId,\n        courseId,\n        progress: 0,\n        completedModules: [],\n        enrolledAt: new Date(),\n        lastAccessedAt: new Date(),\n        enrollmentType: 'qr' // Default to QR for self-enrollment\n      });\n      \n      const savedEnrollment = await enrollment.save();\n      \n      // Update course enrollment count\n      await Course.findOneAndUpdate(\n        { id: courseId },\n        { $inc: { enrollmentCount: 1 } }\n      );\n      \n      const enrollmentObj = savedEnrollment.toObject() as any;\n      // Convert userId to string for frontend compatibility\n      enrollmentObj.userId = enrollmentObj.userId.toString();\n      return enrollmentObj;\n    } catch (error) {\n      console.error('[MongooseStorage] Error enrolling user in course:', error);\n      throw error;\n    }\n  }\n\n  async getUserCourseProgress(userId: string, courseId: number): Promise<IModuleProgress[]> {\n    try {\n      const progress = await ModuleProgress.find({ userId: new mongoose.Types.ObjectId(userId), courseId }).sort({ moduleId: 1 });\n      return progress.map(p => p.toObject());\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting user course progress:', error);\n      return [];\n    }\n  }\n\n  async markModuleComplete(userId: string, moduleId: number, courseId: number, timeSpent: number = 0, notes?: string): Promise<void> {\n    try {\n      await ModuleProgress.findOneAndUpdate(\n        { userId: new mongoose.Types.ObjectId(userId), moduleId, courseId },\n        {\n          isCompleted: true,\n          timeSpent,\n          completedAt: new Date(),\n          notes\n        },\n        { upsert: true, new: true }\n      );\n\n      // Update enrollment progress\n      await this.updateUserCourseProgress(userId, courseId);\n    } catch (error) {\n      console.error('[MongooseStorage] Error marking module complete:', error);\n      throw error;\n    }\n  }\n\n  async bookmarkModule(userId: string, moduleId: number): Promise<void> {\n    try {\n      await ModuleProgress.findOneAndUpdate(\n        { userId, moduleId },\n        { bookmarked: true },\n        { upsert: true }\n      );\n    } catch (error) {\n      console.error('[MongooseStorage] Error bookmarking module:', error);\n      throw error;\n    }\n  }\n\n  // Problem Set operations\n  async getProblemSets(): Promise<IProblemSet[]> {\n    try {\n      const problemSets = await ProblemSet.find({ isPublic: true }).sort({ createdAt: -1 });\n      return problemSets.map(ps => ps.toObject());\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting problem sets:', error);\n      return [];\n    }\n  }\n\n  async getProblemSet(id: string): Promise<IProblemSet | undefined> {\n    try {\n      const problemSet = await ProblemSet.findOne({ id });\n      return problemSet ? problemSet.toObject() : undefined;\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting problem set:', error);\n      return undefined;\n    }\n  }\n\n  async createProblemSet(problemSetData: Partial<IProblemSet>): Promise<IProblemSet> {\n    try {\n      const problemSet = new ProblemSet(problemSetData);\n      const savedProblemSet = await problemSet.save();\n      return savedProblemSet.toObject();\n    } catch (error) {\n      console.error('[MongooseStorage] Error creating problem set:', error);\n      throw error;\n    }\n  }\n\n  async updateProblemSet(id: string, problemSetData: Partial<IProblemSet>): Promise<IProblemSet | null> {\n    try {\n      const problemSet = await ProblemSet.findOneAndUpdate(\n        { id },\n        problemSetData,\n        { new: true, runValidators: true }\n      );\n      return problemSet ? problemSet.toObject() : null;\n    } catch (error) {\n      console.error('[MongooseStorage] Error updating problem set:', error);\n      return null;\n    }\n  }\n\n  async deleteProblemSet(id: string): Promise<void> {\n    try {\n      await ProblemSet.findOneAndDelete({ id });\n      // Also delete related enrollments\n      await ProblemSetEnrollment.deleteMany({ problemSetId: parseInt(id) });\n    } catch (error) {\n      console.error('[MongooseStorage] Error deleting problem set:', error);\n      throw error;\n    }\n  }\n\n  // Problem Set enrollment operations\n  async getProblemSetEnrollments(problemSetId: number): Promise<any[]> {\n    try {\n      const enrollments = await ProblemSetEnrollment.find({ problemSetId }).populate('userId', 'firstName lastName email');\n      return enrollments.map(e => {\n        const enrollment = e.toObject() as any;\n        \n        // Extract user data from populated userId field\n        const userData = enrollment.userId;\n        \n        // Create the correct structure for frontend\n        const result = {\n          ...enrollment,\n          userId: userData._id.toString(), // Convert back to string for frontend compatibility\n          user: {\n            _id: userData._id,\n            id: userData._id.toString(),\n            firstName: userData.firstName,\n            lastName: userData.lastName,\n            email: userData.email\n          }\n        };\n        \n        return result;\n      });\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting problem set enrollments:', error);\n      return [];\n    }\n  }\n\n  async enrollUserInProblemSet(userId: string, problemSetId: number): Promise<any> {\n    try {\n      // Convert string userId to ObjectId\n      const userObjectId = new mongoose.Types.ObjectId(userId);\n      \n      // Check if already enrolled\n      const existingEnrollment = await ProblemSetEnrollment.findOne({ userId: userObjectId, problemSetId });\n      if (existingEnrollment) {\n        const enrollmentObj = existingEnrollment.toObject() as any;\n        // Convert userId to string for frontend compatibility\n        enrollmentObj.userId = enrollmentObj.userId.toString();\n        return enrollmentObj;\n      }\n\n      // Generate unique enrollment ID\n      const latestEnrollment = await ProblemSetEnrollment.findOne({}).sort({ id: -1 });\n      const newId = latestEnrollment ? latestEnrollment.id + 1 : 1;\n\n      const enrollment = new ProblemSetEnrollment({\n        id: newId,\n        userId: userObjectId,\n        problemSetId,\n        progress: 0,\n        completedProblems: [],\n        totalSubmissions: 0,\n        correctSubmissions: 0,\n        enrolledAt: new Date(),\n        enrollmentType: 'qr' // Default to QR for self-enrollment\n      });\n      \n      const savedEnrollment = await enrollment.save();\n      const enrollmentObj = savedEnrollment.toObject() as any;\n      // Convert userId to string for frontend compatibility\n      enrollmentObj.userId = enrollmentObj.userId.toString();\n      return enrollmentObj;\n    } catch (error) {\n      console.error('[MongooseStorage] Error enrolling user in problem set:', error);\n      throw error;\n    }\n  }\n\n  async updateProblemSetEnrollment(id: number, enrollmentData: Partial<any>): Promise<any | null> {\n    try {\n      const enrollment = await ProblemSetEnrollment.findOneAndUpdate(\n        { id },\n        enrollmentData,\n        { new: true, runValidators: true }\n      );\n      return enrollment ? enrollment.toObject() : null;\n    } catch (error) {\n      console.error('[MongooseStorage] Error updating problem set enrollment:', error);\n      return null;\n    }\n  }\n\n  async deleteProblemSetEnrollment(id: number): Promise<void> {\n    try {\n      await ProblemSetEnrollment.findOneAndDelete({ id });\n    } catch (error) {\n      console.error('[MongooseStorage] Error deleting problem set enrollment:', error);\n      throw error;\n    }\n  }\n\n  async getUserProblemSetEnrollments(userId: string): Promise<any[]> {\n    try {\n      const enrollments = await ProblemSetEnrollment.find({ userId });\n      return enrollments.map(e => e.toObject());\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting user problem set enrollments:', error);\n      return [];\n    }\n  }\n\n  // Analytics operations\n  async getCourseStats(): Promise<any> {\n    try {\n      const stats = await Course.aggregate([\n        {\n          $group: {\n            _id: null,\n            totalCourses: { $sum: 1 },\n            publicCourses: { $sum: { $cond: ['$isPublic', 1, 0] } },\n            avgEnrollmentCount: { $avg: '$enrollmentCount' },\n            avgCompletionRate: { $avg: '$completionRate' }\n          }\n        }\n      ]);\n      \n      return stats.length > 0 ? stats[0] : {\n        totalCourses: 0,\n        publicCourses: 0,\n        avgEnrollmentCount: 0,\n        avgCompletionRate: 0\n      };\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting course stats:', error);\n      return {};\n    }\n  }\n\n  async getAdminAnalytics(): Promise<any> {\n    try {\n      const [courseStats, userStats, problemStats, submissionStats] = await Promise.all([\n        this.getCourseStats(),\n        User.countDocuments(),\n        Problem.countDocuments(),\n        Submission.countDocuments()\n      ]);\n\n      return {\n        courses: courseStats,\n        users: userStats,\n        problems: problemStats,\n        submissions: submissionStats\n      };\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting admin analytics:', error);\n      return {};\n    }\n  }\n\n  async getAllSubmissions(): Promise<ISubmission[]> {\n    try {\n      const submissions = await Submission.find().sort({ submittedAt: -1 });\n      return submissions.map(s => s.toObject());\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting all submissions:', error);\n      return [];\n    }\n  }\n\n  async getSubmissionStats(): Promise<any> {\n    try {\n      const stats = await Submission.aggregate([\n        {\n          $group: {\n            _id: '$status',\n            count: { $sum: 1 },\n            avgRuntime: { $avg: '$runtime' },\n            avgMemory: { $avg: '$memory' }\n          }\n        }\n      ]);\n      \n      return stats;\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting submission stats:', error);\n      return [];\n    }\n  }\n\n  async getProblemAnalytics(problemId: number): Promise<any> {\n    try {\n      const stats = await Submission.aggregate([\n        { $match: { problemId } },\n        {\n          $group: {\n            _id: null,\n            totalSubmissions: { $sum: 1 },\n            successfulSubmissions: { $sum: { $cond: [{ $eq: ['$score', '100%'] }, 1, 0] } },\n            avgRuntime: { $avg: '$runtime' },\n            avgMemory: { $avg: '$memory' }\n          }\n        }\n      ]);\n      \n      return stats.length > 0 ? stats[0] : {\n        totalSubmissions: 0,\n        successfulSubmissions: 0,\n        avgRuntime: 0,\n        avgMemory: 0\n      };\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting problem analytics:', error);\n      return {};\n    }\n  }\n\n  async getUserProblemAnalytics(userId: string, problemId: number): Promise<any> {\n    try {\n      const submissions = await Submission.find({ userId, problemId }).sort({ submittedAt: -1 });\n      const successfulSubmissions = submissions.filter(s => s.score === '100%');\n      \n      return {\n        totalSubmissions: submissions.length,\n        successfulSubmissions: successfulSubmissions.length,\n        successRate: submissions.length > 0 ? (successfulSubmissions.length / submissions.length) * 100 : 0,\n        bestRuntime: submissions.length > 0 ? Math.min(...submissions.map(s => s.runtime || Infinity)) : null,\n        bestMemory: submissions.length > 0 ? Math.min(...submissions.map(s => s.memory || Infinity)) : null\n      };\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting user problem analytics:', error);\n      return {};\n    }\n  }\n\n  // Helper methods\n  private async updateUserCourseProgress(userId: string, courseId: number): Promise<void> {\n    try {\n      const [completedModules, totalModules] = await Promise.all([\n        ModuleProgress.countDocuments({ userId: new mongoose.Types.ObjectId(userId), courseId, isCompleted: true }),\n        ModuleProgress.countDocuments({ userId: new mongoose.Types.ObjectId(userId), courseId })\n      ]);\n\n      const progress = totalModules > 0 ? Math.round((completedModules / totalModules) * 100) : 0;\n\n      await CourseEnrollment.findOneAndUpdate(\n        { userId: new mongoose.Types.ObjectId(userId), courseId },\n        { progress }\n      );\n    } catch (error) {\n      console.error('[MongooseStorage] Error updating user course progress:', error);\n    }\n  }\n\n  async resetUserCourseProgress(userId: string, courseId: number): Promise<void> {\n    try {\n      const userObjectId = new mongoose.Types.ObjectId(userId);\n      await ModuleProgress.deleteMany({ userId: userObjectId, courseId });\n      await CourseEnrollment.findOneAndUpdate(\n        { userId: userObjectId, courseId },\n        { progress: 0, completedModules: [], lastAccessedAt: new Date() }\n      );\n    } catch (error) {\n      console.error('[MongooseStorage] Error resetting user course progress:', error);\n      throw error;\n    }\n  }\n\n  // Additional methods for compatibility\n  async getAllUsers(): Promise<any[]> {\n    try {\n      const users = await User.find().sort({ createdAt: -1 });\n      return users.map(u => {\n        const userObj = u.toObject() as any;\n        // Ensure id is formatted as string for frontend compatibility\n        userObj.id = userObj._id.toString();\n        return userObj;\n      });\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting all users:', error);\n      return [];\n    }\n  }\n\n  async getCoursesForUser(userId: string, isAdmin: boolean = false): Promise<ICourse[]> {\n    try {\n      if (isAdmin) {\n        const courses = await Course.find().sort({ id: 1 });\n        return courses.map(c => c.toObject());\n      } else {\n        // For regular users, show ONLY enrolled PUBLIC courses\n        // Private courses remain hidden even from enrolled users\n        // Unenrolled users should not see any courses at all\n        const enrollments = await CourseEnrollment.find({ userId: new mongoose.Types.ObjectId(userId) });\n        const courseIds = enrollments.map(e => e.courseId);\n        \n        // If user has no enrollments, return empty array\n        if (courseIds.length === 0) {\n          return [];\n        }\n        \n        // Show only enrolled courses that are PUBLIC (private courses remain hidden)\n        const courses = await Course.find({ \n          id: { $in: courseIds },\n          isPublic: true\n        }).sort({ id: 1 });\n        return courses.map(c => c.toObject());\n      }\n    } catch (error) {\n      console.error('[MongooseStorage] Error getting courses for user:', error);\n      return [];\n    }\n  }\n\n  async isUserEnrolledInCourse(courseId: number, userId: string): Promise<boolean> {\n    try {\n      const enrollment = await CourseEnrollment.findOne({ courseId, userId: new mongoose.Types.ObjectId(userId) });\n      return !!enrollment;\n    } catch (error) {\n      console.error('[MongooseStorage] Error checking course enrollment:', error);\n      return false;\n    }\n  }\n\n  async canUserAccessCourse(courseId: number, userId: string, isAdmin: boolean = false): Promise<boolean> {\n    try {\n      if (isAdmin) return true;\n      \n      // Convert string userId to ObjectId for proper matching  \n      const userObjectId = new mongoose.Types.ObjectId(userId);\n      \n      // Check if user is enrolled - enrolled users can access both public and private courses\n      const enrollment = await CourseEnrollment.findOne({ courseId, userId: userObjectId });\n      if (enrollment) {\n        return true; // User is enrolled, can access course\n      }\n      \n      // If not enrolled, check if course is public for browsing\n      const course = await Course.findOne({ id: courseId });\n      return course?.isPublic === true;\n    } catch (error) {\n      console.error('[MongooseStorage] Error checking course access:', error);\n      return false;\n    }\n  }\n\n  async removeUserFromCourse(courseId: number, userId: string): Promise<boolean> {\n    try {\n      const result = await CourseEnrollment.findOneAndDelete({ courseId, userId: new mongoose.Types.ObjectId(userId) });\n      if (result) {\n        // Also delete any module progress for this user in this course\n        await ModuleProgress.deleteMany({ courseId, userId: new mongoose.Types.ObjectId(userId) });\n        \n        // Update course enrollment count\n        await Course.findOneAndUpdate(\n          { id: courseId },\n          { $inc: { enrollmentCount: -1 } }\n        );\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('[MongooseStorage] Error removing user from course:', error);\n      return false;\n    }\n  }\n\n  // Placeholder methods for compatibility\n  async getAssignments(): Promise<any[]> { return []; }\n  async getGroups(): Promise<any[]> { return []; }\n  async getAnnouncements(): Promise<any[]> { return []; }\n  async getUserSubmissionStats(): Promise<any> { return {}; }\n  async getContests(): Promise<any[]> { return []; }\n  async getContest(): Promise<any> { return null; }\n  async createContest(): Promise<any> { return null; }\n  async deleteCourseEnrollment(): Promise<void> { }\n  async getAssignment(): Promise<any> { return null; }\n  async createAssignment(): Promise<any> { return null; }\n  async updateAssignment(): Promise<any> { return null; }\n  async deleteAssignment(): Promise<void> { }\n  async getAssignmentsByCourseTag(): Promise<any[]> { return []; }\n  async getAssignmentSubmissions(): Promise<any[]> { return []; }\n  async getUserAssignmentSubmission(): Promise<any> { return null; }\n  async updateAssignmentSubmission(): Promise<any> { return null; }\n  async createAssignmentSubmission(): Promise<any> { return null; }\n  async getUserGroups(): Promise<any[]> { return []; }\n  async createGroup(): Promise<any> { return null; }\n  async getUserAnnouncements(): Promise<any[]> { return []; }\n  async createAnnouncement(): Promise<any> { return null; }\n  async registerForContest(): Promise<any> { return null; }\n  async getContestParticipants(): Promise<any[]> { return []; }\n  async updateUserRole(): Promise<any> { return null; }\n  async getLeaderboard(): Promise<any[]> { return []; }\n} ","size_bytes":28083},"client/src/pages/admin/courses.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Plus, Search, Eye, Edit, Trash2, Loader2, BarChart3 } from 'lucide-react';\nimport axios from 'axios';\nimport { config } from '@/config';\n\ninterface Course {\n  id: number;\n  title: string;\n  description?: string;\n  isPublic: boolean;\n  createdAt: string;\n  updatedAt?: string;\n  moduleCount?: number;\n  enrollmentCount?: number;\n}\n\nconst api = axios.create({\n  baseURL: config.apiUrl + '/api',\n});\n\n// Add request interceptor to include Authorization header\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  config.headers.Accept = 'application/json';\n  return config;\n});\n\nexport default function AdminCourses() {\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { data: courses, isLoading } = useQuery({\n    queryKey: ['courses'],\n    queryFn: async () => {\n      const response = await api.get('/courses');\n      return response.data as Course[];\n    },\n  });\n\n  const courseList: Course[] = Array.isArray(courses) ? (courses as Course[]) : [];\n\n  const deleteCourse = useMutation({\n    mutationFn: async (courseId: number) => {\n      await api.delete(`/courses/${courseId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['courses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/courses'] });\n      alert('Course deleted successfully');\n    },\n    onError: (error: any) => {\n      alert(error.response?.data?.message || 'Failed to delete course');\n    },\n  });\n\n  const filteredCourses = courseList.filter(course => \n    course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    course.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-6\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">Courses</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your courses and their content\n          </p>\n        </div>\n        <Button onClick={() => setLocation('/admin/courses/wizard')}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Course\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Course List</CardTitle>\n            <div className=\"relative w-64\">\n              <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search courses...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-8\"\n              />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {filteredCourses?.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <h3 className=\"text-lg font-semibold mb-2\">No Courses Found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm ? 'No courses match your search.' : 'Get started by creating your first course.'}\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => setLocation('/admin/courses/create')}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create First Course\n                </Button>\n              )}\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Course</TableHead>\n                    <TableHead className=\"hidden sm:table-cell\">Status</TableHead>\n                    <TableHead className=\"hidden md:table-cell\">Modules</TableHead>\n                    <TableHead className=\"hidden md:table-cell\">Students</TableHead>\n                    <TableHead className=\"hidden lg:table-cell\">Created</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n              <TableBody>\n                {filteredCourses?.map((course) => (\n                  <TableRow key={course.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{course.title}</div>\n                        {course.description && (\n                          <div className=\"text-sm text-muted-foreground truncate max-w-xs\">\n                            {course.description}\n                          </div>\n                        )}\n                        {/* Mobile-only status badge */}\n                        <div className=\"mt-1 sm:hidden\">\n                          <Badge variant={course.isPublic ? \"default\" : \"secondary\"} className=\"text-xs\">\n                            {course.isPublic ? 'Public' : 'Private'}\n                          </Badge>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"hidden sm:table-cell\">\n                      <Badge variant={course.isPublic ? \"default\" : \"secondary\"}>\n                        {course.isPublic ? 'Public' : 'Private'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"hidden md:table-cell\">{course.moduleCount || 0}</TableCell>\n                    <TableCell className=\"hidden md:table-cell\">{course.enrollmentCount || 0}</TableCell>\n                    <TableCell className=\"hidden lg:table-cell\">{formatDate(course.createdAt)}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        {/* <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setLocation(`/admin/courses/${course.id}/analytics`)}\n                          title=\"View Analytics\"\n                        >\n                          <BarChart3 className=\"h-4 w-4\" />\n                        </Button> */}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setLocation(`/admin/courses/${course.id}`)}\n                          title=\"View Course\"\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setLocation(`/admin/courses/${course.id}/edit`)}\n                          title=\"Edit Course\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-destructive hover:text-destructive\"\n                              title=\"Delete Course\"\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Course</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete \"{course.title}\"? This action cannot be undone.\n                                All course modules and student progress will be permanently removed.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => deleteCourse.mutate(course.id)}\n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              >\n                                Delete Course\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9947},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { EnhancedToaster } from \"@/components/ui/enhanced-toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ui/theme-provider\";\nimport { MaintenanceModeProvider } from \"@/contexts/MaintenanceModeContext\";\nimport { GlobalMaintenanceEnforcer } from \"@/components/GlobalMaintenanceEnforcer\";\nimport { useEffect, useState } from 'react';\nimport { Layout } from \"@/components/layout/Layout\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Problems from \"@/pages/problems\";\nimport ProblemDetail from \"@/pages/problem-detail\";\nimport Contests from \"@/pages/contests\";\nimport Leaderboard from \"@/pages/leaderboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport AdminVersionHistory from \"@/pages/AdminVersionHistory\";\nimport Profile from \"@/pages/profile\";\nimport Settings from \"@/pages/settings\";\nimport LoginPage from '@/pages/auth/LoginPage';\nimport RegisterPage from '@/pages/auth/RegisterPage';\nimport ForgotPassword from '@/pages/auth/ForgotPassword';\nimport ResetPassword from '@/pages/auth/ResetPassword';\nimport AuthCallback from '@/pages/auth/AuthCallback';\nimport { useLocation } from 'wouter';\nimport { config } from '@/config';\nimport Courses from \"@/pages/Courses\";\nimport CourseModuleViewer from \"@/pages/CourseModuleViewer\";\nimport Assignments from \"@/pages/Assignments\";\nimport AssignmentSubmission from \"@/pages/AssignmentSubmission\";\nimport AdminAssignments from \"@/pages/AdminAssignments\";\nimport CreateAssignment from \"@/pages/CreateAssignment\";\nimport AdminProblems from \"@/pages/admin/problems\";\nimport AdminContests from \"@/pages/admin/contests\";\nimport AdminCourses from \"@/pages/admin/courses\";\nimport AdminLeaderboard from \"@/pages/admin/leaderboard\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport CourseDetail from \"@/pages/admin/CourseDetail\";\nimport EditCourse from \"@/pages/admin/EditCourse\";\nimport CreateModule from \"@/pages/admin/CreateModule\";\nimport ModuleDetail from \"@/pages/admin/ModuleDetail\";\nimport EditModule from \"@/pages/admin/EditModule\";\nimport { CourseWizard } from \"@/components/courses/CourseWizard\";\nimport EnrollmentPage from \"@/pages/EnrollmentPage\";\nimport ProblemSetEnrollmentPage from \"@/pages/ProblemSetEnrollmentPage\";\nimport ContestEnrollmentPage from \"@/pages/ContestEnrollmentPage\";\nimport AddStudentToCourse from \"@/pages/admin/AddStudentToCourse\";\nimport ManageCourseEnrollments from \"@/pages/admin/ManageCourseEnrollments\";\nimport { ProblemAnalytics } from \"@/pages/ProblemAnalytics\";\nimport { UserProblemAnalytics } from \"@/pages/UserProblemAnalytics\";\nimport { AssignmentAnalytics } from \"@/pages/AssignmentAnalytics\";\nimport AssignmentSubmissions from \"@/pages/AssignmentSubmissions\";\nimport { UserAssignmentAnalytics } from \"@/pages/UserAssignmentAnalytics\";\nimport { CourseAnalytics } from \"@/pages/CourseAnalytics\";\nimport ProblemSets from \"@/pages/ProblemSets\";\nimport ProblemSetDetail from \"@/pages/ProblemSetDetail\";\nimport ProblemInstanceManagement from \"@/pages/admin/ProblemInstanceManagement\";\nimport ProblemSetManagement from \"@/pages/admin/ProblemSetManagement\";\nimport AdminProblemSetDetail from \"@/pages/admin/ProblemSetDetail\";\nimport AddStudentToProblemSet from \"@/pages/admin/AddStudentToProblemSet\";\n\nimport AdminUsers from \"@/pages/admin/AdminUsers\";\nimport StudentCourseView from \"@/pages/StudentCourseView\";\nimport ContestManagement from \"@/pages/ContestManagement\";\nimport ContestDetailsPage from \"@/pages/contest-details\";\nimport ContestProblemsPage from \"@/pages/contest-problems\";\nimport ContestLeaderboardPage from \"@/pages/contest-leaderboard\";\nimport ContestResultsPage from \"@/pages/contest-results\";\n\nfunction AppContent() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  // Public route wrapper\n  const PublicRoute = ({ children }: { children: React.ReactNode }) => {\n    if (isAuthenticated) {\n      return <Redirect to=\"/dashboard\" />;\n    }\n    return <>{children}</>;\n  };\n\n  // Admin route wrapper\n  const AdminRoute = ({ children }: { children: React.ReactNode }) => {\n    if (!isAuthenticated || user?.role !== 'admin') {\n      return <Redirect to=\"/dashboard\" />;\n    }\n    return <>{children}</>;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Public routes - always accessible */}\n      <Route path=\"/auth-callback\">\n        <AuthCallback />\n      </Route>\n      <Route path=\"/login\">\n        <PublicRoute><LoginPage /></PublicRoute>\n      </Route>\n      <Route path=\"/register\">\n        <PublicRoute><RegisterPage /></PublicRoute>\n      </Route>\n      <Route path=\"/forgot-password\">\n        <ForgotPassword />\n      </Route>\n      <Route path=\"/reset-password\">\n        <PublicRoute><ResetPassword /></PublicRoute>\n      </Route>\n      <Route path=\"/enroll/:courseId\">\n        <EnrollmentPage />\n      </Route>\n      <Route path=\"/enroll-problem-set/:problemSetId\">\n        <ProblemSetEnrollmentPage />\n      </Route>\n      <Route path=\"/contest-enrollment/:contestId\">\n        <ContestEnrollmentPage />\n      </Route>\n      <Route path=\"/\">\n        <PublicRoute><Landing /></PublicRoute>\n      </Route>\n\n      {/* Full-screen routes without sidebar */}\n      {isAuthenticated && (\n        <>\n          <Route path=\"/problems/:id\">\n            <ProblemDetail />\n          </Route>\n          <Route path=\"/courses/:courseId/modules/:moduleId\">\n            <CourseModuleViewer />\n          </Route>\n          <Route path=\"/contests/:contestId/problems/:problemId\">\n            <ContestProblemsPage />\n          </Route>\n          <Route path=\"/contests/:contestId/problems\">\n            <ContestProblemsPage />\n          </Route>\n        </>\n      )}\n\n      {/* Protected routes wrapped in Layout */}\n      {isAuthenticated ? (\n        <Layout>\n          <Switch>\n            <Route path=\"/\" component={() => <Redirect to=\"/dashboard\" />} />\n            <Route path=\"/dashboard\">\n              <Dashboard />\n            </Route>\n            <Route path=\"/assignments\">\n              <ProblemSets />\n            </Route>\n            <Route path=\"/problem-sets/:id\">\n              <ProblemSetDetail />\n            </Route>\n            <Route path=\"/contests\">\n              {user?.role === 'admin' ? <AdminContests /> : <Contests />}\n            </Route>\n            <Route path=\"/contests/:contestId\">\n              <ContestDetailsPage />\n            </Route>\n            <Route path=\"/contests/:contestId/details\">\n              <ContestDetailsPage />\n            </Route>\n            <Route path=\"/contests/:contestId/leaderboard\">\n              <ContestLeaderboardPage />\n            </Route>\n            <Route path=\"/contests/:contestId/results\">\n              <ContestResultsPage />\n            </Route>\n            <Route path=\"/courses\">\n              {user?.role === 'admin' ? <AdminCourses /> : <Courses />}\n            </Route>\n            <Route path=\"/courses/:courseId\">\n              {user?.role === 'admin' ? (\n                <AdminRoute>\n                  <CourseDetail />\n                </AdminRoute>\n              ) : (\n                <StudentCourseView />\n              )}\n            </Route>\n\n            <Route path=\"/assignments/:id\">\n              <AssignmentSubmission />\n            </Route>\n            <Route path=\"/admin/assignments\">\n              <AdminRoute>\n                <AdminAssignments />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/assignments/create\">\n              <AdminRoute>\n                <CreateAssignment />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/assignments/:id/edit\">\n              <AdminRoute>\n                <CreateAssignment />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/assignments/:assignmentId/analytics\">\n              <AdminRoute>\n                <AssignmentAnalytics />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/assignments/:assignmentId/submissions\">\n              <AdminRoute>\n                <AssignmentSubmissions />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/leaderboard\">\n              {user?.role === 'admin' ? <AdminLeaderboard /> : <Leaderboard />}\n            </Route>\n            <Route path=\"/admin/courses\">\n              <AdminRoute>\n                <AdminCourses />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/courses/wizard\">\n              <AdminRoute>\n                <CourseWizard />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/courses/:courseId\">\n              <AdminRoute>\n                <CourseDetail />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/courses/:courseId/edit\">\n              <AdminRoute>\n                <EditCourse />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/courses/:courseId/modules/create\">\n              <AdminRoute>\n                <CreateModule />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/modules/:moduleId\">\n              <AdminRoute>\n                <ModuleDetail />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/modules/:moduleId/edit\">\n              <AdminRoute>\n                <EditModule />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/courses/:courseId/enrollments/create\">\n              <AdminRoute>\n                <AddStudentToCourse />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/courses/:courseId/enrollments\">\n              <AdminRoute>\n                <ManageCourseEnrollments />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/problems\">\n              <AdminRoute>\n                <AdminProblems />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/problems/:problemId/analytics\">\n              <AdminRoute>\n                <ProblemAnalytics />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/problems/:problemId/users/:userId/analytics\">\n              <AdminRoute>\n                <UserProblemAnalytics />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/assignments/:assignmentId/analytics\">\n              <AdminRoute>\n                <AssignmentAnalytics />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/assignments/:assignmentId/users/:userId/analytics\">\n              <AdminRoute>\n                <UserAssignmentAnalytics />\n              </AdminRoute>\n            </Route>\n            {/* <Route path=\"/admin/courses/:courseId/analytics\">\n              <AdminRoute>\n                <CourseAnalytics />\n              </AdminRoute>\n            </Route> */}\n\n\n            <Route path=\"/admin/problem-sets\">\n              <AdminRoute>\n                <ProblemSetManagement />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/problem-sets/:problemSetId\">\n              <AdminRoute>\n                <AdminProblemSetDetail />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/problem-sets/:problemSetId/problems\">\n              <AdminRoute>\n                <ProblemInstanceManagement />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/problem-sets/:problemSetId/enrollments/create\">\n              <AdminRoute>\n                <AddStudentToProblemSet />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/contests/:contestId/problems\">\n              <AdminRoute>\n                <ProblemInstanceManagement />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/users\">\n              <AdminRoute>\n                <AdminUsers />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/contest-management\">\n              <AdminRoute>\n                <ContestManagement />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin/version-history\">\n              <AdminRoute>\n                <AdminVersionHistory />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/admin\">\n              <AdminRoute>\n                <AdminDashboard />\n              </AdminRoute>\n            </Route>\n            <Route path=\"/profile\">\n              <Profile />\n            </Route>\n            <Route path=\"/settings\">\n              <Settings />\n            </Route>\n              <Route>\n                <NotFound />\n              </Route>\n            </Switch>\n          </Layout>\n      ) : (\n        <Redirect to=\"/login\" />\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"codearena-ui-theme\">\n        <MaintenanceModeProvider>\n          <GlobalMaintenanceEnforcer>\n            <TooltipProvider>\n              <AppContent />\n              <EnhancedToaster />\n            </TooltipProvider>\n          </GlobalMaintenanceEnforcer>\n        </MaintenanceModeProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":13741},"client/src/pages/UserProblemAnalytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { ArrowLeft, Target, CheckCircle, XCircle, Clock, Zap, HardDrive, TrendingUp } from \"lucide-react\";\nimport { config } from \"@/config\";\n\nexport function UserProblemAnalytics() {\n  const [match, params] = useRoute(\"/admin/problems/:problemId/users/:userId/analytics\");\n  const { problemId, userId } = params || {};\n\n  const { data: analytics, isLoading } = useQuery({\n    queryKey: [\"admin\", \"user-problem-analytics\", problemId, userId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const res = await fetch(`${config.apiUrl}/api/admin/problems/${problemId}/users/${userId}/analytics`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!res.ok) {\n        throw new Error('Failed to fetch user problem analytics');\n      }\n      return res.json();\n    },\n    enabled: !!problemId && !!userId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Data not found</h1>\n          <Link href=\"/admin\">\n            <Button className=\"mt-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Admin Dashboard\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <Link href={`/admin/problems/${problemId}/analytics`}>\n            <Button variant=\"outline\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Problem Analytics\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold\">{analytics.userName}</h1>\n          <p className=\"text-muted-foreground\">\n            Performance on: <span className=\"font-medium\">{analytics.problemTitle}</span>\n          </p>\n          <p className=\"text-sm text-muted-foreground\">{analytics.userEmail}</p>\n        </div>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Attempts</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.totalAttempts}</div>\n            <p className=\"text-xs text-muted-foreground\">All submissions</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Passed</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{analytics.passedAttempts}</div>\n            <p className=\"text-xs text-muted-foreground\">Successful attempts</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Failed</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{analytics.failedAttempts}</div>\n            <p className=\"text-xs text-muted-foreground\">Failed attempts</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.successRate}%</div>\n            <p className=\"text-xs text-muted-foreground\">Pass percentage</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Best Score</CardTitle>\n            <Target className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.bestScore || '-'}</div>\n            <p className=\"text-xs text-muted-foreground\">Highest score</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Runtime</CardTitle>\n            <Zap className=\"h-4 w-4 text-purple-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.averageRuntime || '-'}ms</div>\n            <p className=\"text-xs text-muted-foreground\">Average execution</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Timeline Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Timeline</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">First Attempt:</span>\n              <span className=\"font-medium\">\n                {analytics.firstAttempt ? new Date(analytics.firstAttempt).toLocaleDateString() : '-'}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Last Attempt:</span>\n              <span className=\"font-medium\">\n                {analytics.lastAttempt ? new Date(analytics.lastAttempt).toLocaleDateString() : '-'}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Time Span:</span>\n              <span className=\"font-medium\">\n                {analytics.firstAttempt && analytics.lastAttempt ? \n                  Math.ceil((new Date(analytics.lastAttempt).getTime() - new Date(analytics.firstAttempt).getTime()) / (1000 * 60 * 60 * 24)) + ' days'\n                  : '-'}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Performance Metrics</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Average Memory:</span>\n              <span className=\"font-medium\">{analytics.averageMemory || '-'} KB</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Best Performance:</span>\n              <span className=\"font-medium\">\n                {analytics.attempts?.find((a: any) => a.status === 'accepted')?.runtime || '-'} ms\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Attempts Until Pass:</span>\n              <span className=\"font-medium\">\n                {analytics.attempts?.findIndex((a: any) => a.status === 'accepted') + 1 || 'Not yet passed'}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Attempt History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Attempt History</CardTitle>\n          <CardDescription>Chronological breakdown of all submission attempts</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Attempt #</TableHead>\n                  <TableHead>Date & Time</TableHead>\n                  <TableHead>Language</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Runtime</TableHead>\n                  <TableHead>Memory</TableHead>\n                  <TableHead>Score</TableHead>\n                  <TableHead>Test Cases</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {analytics.attempts?.length > 0 ? (\n                  analytics.attempts.map((attempt: any) => (\n                    <TableRow key={attempt.attemptNumber}>\n                      <TableCell className=\"font-medium\">#{attempt.attemptNumber}</TableCell>\n                      <TableCell className=\"text-sm\">\n                        {new Date(attempt.submittedAt).toLocaleString()}\n                      </TableCell>\n                      <TableCell>{attempt.language}</TableCell>\n                      <TableCell>\n                        <Badge variant={attempt.status === 'accepted' ? 'default' : \n                                      attempt.status === 'error' ? 'destructive' : 'secondary'}>\n                          {attempt.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{attempt.runtime ? `${attempt.runtime}ms` : '-'}</TableCell>\n                      <TableCell>{attempt.memory ? `${attempt.memory}KB` : '-'}</TableCell>\n                      <TableCell>{attempt.score || '-'}</TableCell>\n                      <TableCell>\n                        {attempt.testCasesPassed !== undefined ? \n                          `${attempt.testCasesPassed}/${attempt.totalTestCases}` : '-'}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-4 text-muted-foreground\">\n                      No attempts found\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10934},"server/models/index.ts":{"content":"// Export all Mongoose models\nexport { User } from './User';\nexport { Course } from './Course';\nexport { CourseModule } from './CourseModule';\nexport { CourseEnrollment } from './CourseEnrollment';\nexport { Problem } from './Problem';\nexport { Submission } from './Submission';\nexport { ProblemSet } from './ProblemSet';\nexport { ProblemSetEnrollment } from './ProblemSetEnrollment';\nexport { ModuleProgress } from './ModuleProgress';\nexport { VersionHistory } from './VersionHistory';\nexport { Contest } from './Contest';\nexport { ContestParticipant } from './ContestParticipant';\nexport { ContestSubmission } from './ContestSubmission';\nexport { ContestQuestion } from './ContestQuestion';\n\n// Export interfaces\nexport type { IUser } from './User';\nexport type { ICourse } from './Course';\nexport type { ICourseModule } from './CourseModule';\nexport type { ICourseEnrollment } from './CourseEnrollment';\n// Note: Problem model does not export TS interfaces\nexport type { ISubmission } from './Submission';\nexport type { IProblemSet, IProblemInstance } from './ProblemSet';\nexport type { IProblemSetEnrollment } from './ProblemSetEnrollment';\nexport type { IModuleProgress } from './ModuleProgress';\nexport type { IVersionHistory } from './VersionHistory'; ","size_bytes":1258},"client/src/components/MaintenanceMessage.tsx":{"content":"import React from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { AlertTriangle } from 'lucide-react';\nimport { useMaintenanceMode } from '@/contexts/MaintenanceModeContext';\n\nexport function MaintenanceMessage() {\n  const { \n    isMaintenanceMode, \n    maintenanceFrom, \n    maintenanceTo, \n    timeUntilMaintenance, \n    timeUntilMaintenanceEnd,\n    isMaintenanceActive,\n    isPreMaintenanceWarning \n  } = useMaintenanceMode();\n\n  if (!isMaintenanceMode || (!isPreMaintenanceWarning && !isMaintenanceActive)) {\n    return null;\n  }\n\n  const formatTime = (timeString: string) => {\n    const [hours, minutes] = timeString.split(':');\n    const hour = parseInt(hours);\n    const ampm = hour >= 12 ? 'PM' : 'AM';\n    const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n    return `${displayHour}:${minutes} ${ampm}`;\n  };\n\n  const formatCountdown = (minutes: number) => {\n    if (minutes <= 0) return '0 minutes';\n    if (minutes < 60) return `${minutes} minute${minutes !== 1 ? 's' : ''}`;\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    if (remainingMinutes === 0) return `${hours} hour${hours !== 1 ? 's' : ''}`;\n    return `${hours} hour${hours !== 1 ? 's' : ''} ${remainingMinutes} minute${remainingMinutes !== 1 ? 's' : ''}`;\n  };\n\n  return (\n    <div className={`w-full border-b ${\n      isMaintenanceActive \n        ? 'bg-red-50 dark:bg-red-950/20 border-red-200 dark:border-red-800' \n        : 'bg-amber-50 dark:bg-amber-950/20 border-amber-200 dark:border-amber-800'\n    }`}>\n      <div className=\"w-full flex justify-center px-4 py-3\">\n        <div className=\"w-full max-w-4xl\">\n          <div className=\"flex items-center justify-center gap-2 w-full text-center\">\n            <AlertTriangle className={`h-5 w-5 flex-shrink-0 ${\n              isMaintenanceActive \n                ? 'text-red-600 dark:text-red-400' \n                : 'text-amber-600 dark:text-amber-400'\n            }`} />\n            <div className=\"flex flex-col items-center gap-1\">\n              <span className={`font-medium text-base ${\n                isMaintenanceActive \n                  ? 'text-red-800 dark:text-red-200' \n                  : 'text-amber-800 dark:text-amber-200'\n              }`}>\n                {isMaintenanceActive \n                  ? `We are upgrading a few things and will be back between ${formatTime(maintenanceFrom)} and ${formatTime(maintenanceTo)}.`\n                  : `Maintenance scheduled from ${formatTime(maintenanceFrom)} to ${formatTime(maintenanceTo)}.`\n                }\n              </span>\n              {isPreMaintenanceWarning && timeUntilMaintenance && (\n                <span className=\"text-sm text-amber-700 dark:text-amber-300\">\n                  Maintenance starts in {formatCountdown(timeUntilMaintenance)}\n                </span>\n              )}\n              {isMaintenanceActive && timeUntilMaintenanceEnd && (\n                <span className=\"text-sm text-red-700 dark:text-red-300\">\n                  Estimated completion in {formatCountdown(timeUntilMaintenanceEnd)}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3229},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"scripts/test-k8s-execution.sh":{"content":"#!/bin/bash\n\n# ☸️ Kubernetes Execution System Test Script\n# This script tests the Kubernetes deployment of the execution system\n\nset -e\n\necho \"☸️ Testing Kubernetes Execution System Deployment\"\necho \"=================================================\"\necho \"\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print status\nprint_status() {\n    if [ $1 -eq 0 ]; then\n        echo -e \"${GREEN}✅ $2${NC}\"\n    else\n        echo -e \"${RED}❌ $2${NC}\"\n        return 1\n    fi\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠️  $1${NC}\"\n}\n\nprint_info() {\n    echo -e \"${BLUE}ℹ️  $1${NC}\"\n}\n\n# Step 1: Check Kubernetes\necho \"1. Checking Kubernetes installation...\"\nif kubectl version --client > /dev/null 2>&1; then\n    print_status 0 \"kubectl is installed\"\nelse\n    print_status 1 \"kubectl is not installed or not in PATH\"\n    exit 1\nfi\n\nif kubectl cluster-info > /dev/null 2>&1; then\n    print_status 0 \"Kubernetes cluster is accessible\"\n    print_info \"$(kubectl cluster-info | head -1)\"\nelse\n    print_status 1 \"Cannot connect to Kubernetes cluster\"\n    exit 1\nfi\n\n# Step 2: Deploy to Kubernetes\necho \"\"\necho \"2. Deploying to Kubernetes...\"\n\ncd execution-system\n\nif [ ! -d \"k8s\" ]; then\n    echo \"❌ k8s directory not found. Make sure you're in the execution-system directory.\"\n    exit 1\nfi\n\necho \"   Applying Kubernetes manifests...\"\nif [ -f \"k8s/generated/deploy.sh\" ]; then\n    bash k8s/generated/deploy.sh > deploy.log 2>&1\n    print_status $? \"Kubernetes manifests applied successfully\"\nelse\n    # Apply manually\n    kubectl apply -f k8s/namespace.yaml\n    kubectl apply -f k8s/configmap.yaml\n    kubectl apply -f k8s/secret.yaml\n    kubectl apply -f k8s/redis.yaml\n    kubectl apply -f k8s/api.yaml\n    kubectl apply -f k8s/worker.yaml\n    print_status $? \"Kubernetes manifests applied manually\"\nfi\n\n# Step 3: Wait for deployment\necho \"\"\necho \"3. Waiting for pods to be ready...\"\n\necho \"   Waiting for namespace...\"\nkubectl wait --for=condition=Ready namespace/codearena-execution --timeout=60s > /dev/null 2>&1\nprint_status $? \"Namespace is ready\"\n\necho \"   Waiting for Redis...\"\nkubectl wait --for=condition=Ready pod -l app=redis -n codearena-execution --timeout=120s > /dev/null 2>&1\nprint_status $? \"Redis pod is ready\"\n\necho \"   Waiting for API pods...\"\nkubectl wait --for=condition=Ready pod -l app=execution-api -n codearena-execution --timeout=120s > /dev/null 2>&1\nprint_status $? \"API pods are ready\"\n\necho \"   Waiting for Worker pods...\"\nkubectl wait --for=condition=Ready pod -l app=execution-worker -n codearena-execution --timeout=120s > /dev/null 2>&1\nprint_status $? \"Worker pods are ready\"\n\n# Step 4: Check deployment status\necho \"\"\necho \"4. Checking deployment status...\"\n\necho \"   Pods status:\"\nkubectl get pods -n codearena-execution -o wide\n\necho \"\"\necho \"   Services status:\"\nkubectl get services -n codearena-execution\n\necho \"\"\necho \"   ConfigMaps and Secrets:\"\nkubectl get configmaps,secrets -n codearena-execution\n\n# Step 5: Test connectivity\necho \"\"\necho \"5. Testing connectivity...\"\n\necho \"   Port forwarding API service...\"\nkubectl port-forward -n codearena-execution service/execution-api-service 3001:3001 &\nPF_PID=$!\nsleep 5\n\n# Test health endpoint\necho \"   Testing health endpoint...\"\nHEALTH_RESPONSE=$(curl -s http://localhost:3001/health 2>/dev/null || echo \"FAILED\")\nif [[ \"$HEALTH_RESPONSE\" == *\"healthy\"* ]]; then\n    print_status 0 \"Health endpoint responding through K8s\"\nelse\n    print_warning \"Health endpoint not responding (may need more time to start)\"\nfi\n\n# Test stats endpoint\necho \"   Testing stats endpoint...\"\nSTATS_RESPONSE=$(curl -s http://localhost:3001/api/stats 2>/dev/null || echo \"FAILED\")\nif [[ \"$STATS_RESPONSE\" == *\"waiting\"* ]]; then\n    print_status 0 \"Stats endpoint responding through K8s\"\nelse\n    print_warning \"Stats endpoint not responding\"\nfi\n\n# Step 6: Test code execution\necho \"\"\necho \"6. Testing code execution through Kubernetes...\"\n\necho \"   Submitting Python code...\"\nEXEC_RESPONSE=$(curl -s -X POST http://localhost:3001/api/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"code\": \"print(\\\"Kubernetes execution works!\\\")\", \"language\": \"python\"}' 2>/dev/null || echo \"FAILED\")\n\nif [[ \"$EXEC_RESPONSE\" == *\"jobId\"* ]]; then\n    print_status 0 \"Code execution working through K8s\"\n    \n    # Get job ID and wait for completion\n    JOB_ID=$(echo \"$EXEC_RESPONSE\" | grep -o '\"jobId\":\"[^\"]*' | cut -d'\"' -f4)\n    if [ ! -z \"$JOB_ID\" ]; then\n        echo \"   Job ID: $JOB_ID\"\n        echo \"   Waiting for completion...\"\n        \n        for i in {1..30}; do\n            JOB_STATUS=$(curl -s http://localhost:3001/api/jobs/$JOB_ID 2>/dev/null || echo \"FAILED\")\n            if [[ \"$JOB_STATUS\" == *\"completed\"* ]] && [[ \"$JOB_STATUS\" == *\"Kubernetes execution works\"* ]]; then\n                print_status 0 \"Code executed successfully in K8s\"\n                break\n            elif [[ \"$JOB_STATUS\" == *\"failed\"* ]]; then\n                print_status 1 \"Code execution failed in K8s\"\n                echo \"   Job status: $JOB_STATUS\"\n                break\n            fi\n            sleep 1\n        done\n    fi\nelse\n    print_warning \"Code execution API not responding\"\nfi\n\n# Step 7: Test autoscaling\necho \"\"\necho \"7. Testing Horizontal Pod Autoscaler...\"\n\necho \"   Checking HPA status:\"\nkubectl get hpa -n codearena-execution\n\necho \"   Current pod count:\"\nkubectl get pods -n codearena-execution | grep -c \"execution-\"\n\necho \"   Generating load to test autoscaling...\"\nfor i in {1..20}; do\n    curl -s -X POST http://localhost:3001/api/execute \\\n      -H \"Content-Type: application/json\" \\\n      -d \"{\\\"code\\\": \\\"import time; time.sleep(2); print('Load test $i')\\\", \\\"language\\\": \\\"python\\\"}\" &\ndone\n\necho \"   Waiting 30 seconds to observe scaling...\"\nsleep 30\n\necho \"   Pod count after load:\"\nkubectl get pods -n codearena-execution | grep -c \"execution-\"\n\nprint_status 0 \"Autoscaling test completed\"\n\n# Step 8: Test different languages through K8s\necho \"\"\necho \"8. Testing all languages through Kubernetes...\"\n\nLANGUAGES=(\n    \"python:print('Python in K8s works!')\"\n    \"javascript:console.log('JavaScript in K8s works!')\"\n    \"c:#include <stdio.h>\\nint main() { printf(\\\"C in K8s works!\\\"); return 0; }\"\n    \"cpp:#include <iostream>\\nint main() { std::cout << \\\"C++ in K8s works!\\\"; return 0; }\"\n    \"java:public class Main { public static void main(String[] args) { System.out.println(\\\"Java in K8s works!\\\"); } }\"\n)\n\nfor lang_code in \"${LANGUAGES[@]}\"; do\n    IFS=':' read -r lang code <<< \"$lang_code\"\n    echo \"   Testing $lang...\"\n    \n    RESPONSE=$(curl -s -X POST http://localhost:3001/api/execute \\\n      -H \"Content-Type: application/json\" \\\n      -d \"{\\\"code\\\": \\\"$(echo \"$code\" | sed 's/\"/\\\\\"/g')\\\", \\\"language\\\": \\\"$lang\\\"}\" 2>/dev/null || echo \"FAILED\")\n    \n    if [[ \"$RESPONSE\" == *\"jobId\"* ]]; then\n        print_status 0 \"$lang submission successful\"\n    else\n        print_warning \"$lang submission failed\"\n    fi\ndone\n\n# Step 9: Monitor resources\necho \"\"\necho \"9. Monitoring resource usage...\"\n\necho \"   Pod resource usage:\"\nkubectl top pods -n codearena-execution 2>/dev/null || print_warning \"Metrics server not available\"\n\necho \"   Node resource usage:\"\nkubectl top nodes 2>/dev/null || print_warning \"Metrics server not available\"\n\n# Step 10: Check logs\necho \"\"\necho \"10. Checking logs...\"\n\necho \"   API pod logs (last 10 lines):\"\nAPI_POD=$(kubectl get pods -n codearena-execution -l app=execution-api -o jsonpath='{.items[0].metadata.name}')\nkubectl logs $API_POD -n codearena-execution --tail=10\n\necho \"\"\necho \"   Worker pod logs (last 10 lines):\"\nWORKER_POD=$(kubectl get pods -n codearena-execution -l app=execution-worker -o jsonpath='{.items[0].metadata.name}')\nkubectl logs $WORKER_POD -n codearena-execution --tail=10\n\n# Cleanup port forward\nkill $PF_PID 2>/dev/null || true\n\n# Step 11: Summary\necho \"\"\necho \"🎉 Kubernetes execution system test completed!\"\necho \"\"\necho \"📊 Summary:\"\necho \"   ✅ Kubernetes cluster accessible\"\necho \"   ✅ All manifests deployed successfully\"\necho \"   ✅ All pods are running and ready\"\necho \"   ✅ Services are accessible\"\necho \"   ✅ Code execution working through K8s\"\necho \"   ✅ All languages tested\"\necho \"   ✅ Autoscaling configured\"\necho \"\"\necho \"🔧 Useful commands:\"\necho \"   View pods: kubectl get pods -n codearena-execution\"\necho \"   View logs: kubectl logs -f <pod-name> -n codearena-execution\"\necho \"   Port forward: kubectl port-forward -n codearena-execution service/execution-api-service 3001:3001\"\necho \"   Scale manually: kubectl scale deployment execution-worker -n codearena-execution --replicas=10\"\necho \"   Delete deployment: kubectl delete namespace codearena-execution\"\necho \"\"\necho \"📈 Next step: Test integration with your CodeArena server\" ","size_bytes":8833},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"Documentations/TESTING_VERIFICATION_GUIDE.md":{"content":"# 🧪 CodeArena Execution System Testing & Verification Guide\n\n## 🎯 **Complete Testing Checklist**\n\nThis guide will help you verify that Docker, Kubernetes, and the execution system are working perfectly with your CodeArena platform.\n\n---\n\n## 📋 **Prerequisites Check**\n\n### **1. Docker Installation**\n```bash\n# Check Docker version\ndocker --version\n# Expected: Docker version 20.10.0 or higher\n\n# Check Docker is running\ndocker ps\n# Should show running containers (if any)\n\n# Test Docker basic functionality\ndocker run hello-world\n# Should download and run successfully\n```\n\n### **2. Kubernetes Installation (if using K8s)**\n```bash\n# Check kubectl version\nkubectl version --client\n# Expected: Client version info\n\n# Check cluster connection\nkubectl cluster-info\n# Should show cluster information\n\n# Check nodes\nkubectl get nodes\n# Should show available nodes\n```\n\n### **3. Node.js and Dependencies**\n```bash\n# Check Node.js version\nnode --version\n# Expected: v16.0.0 or higher\n\n# Install dependencies\ncd server\nnpm install\n\n# Verify axios is installed\nnpm list axios\n# Should show axios@1.11.0\n```\n\n---\n\n## 🐳 **Step 1: Test Docker Images Locally**\n\n### **Build and Test Language Images**\n\n```bash\n# Navigate to execution system\ncd execution-system\n\n# Build all Docker images\nbash scripts/build.sh\n\n# Test each language container individually\necho 'Testing Python...'\ndocker run --rm codearena/executor-python:latest python3 -c \"print('Hello Python')\"\n\necho 'Testing JavaScript...'\ndocker run --rm codearena/executor-javascript:latest node -e \"console.log('Hello JavaScript')\"\n\necho 'Testing C...'\ndocker run --rm codearena/executor-c:latest /app/execute.sh 'int main(){printf(\"Hello C\"); return 0;}' '' '64m' '5'\n\necho 'Testing C++...'\ndocker run --rm codearena/executor-cpp:latest /app/execute.sh '#include<iostream>\nint main(){std::cout<<\"Hello C++\"; return 0;}' '' '64m' '5'\n\necho 'Testing Java...'\ndocker run --rm codearena/executor-java:latest /app/execute.sh 'public class Main{public static void main(String[] args){System.out.println(\"Hello Java\");}}' '' '64m' '5'\n```\n\n**Expected Output:**\n```\nHello Python\nHello JavaScript\n{\"success\":true,\"output\":\"Hello C\",\"executionTime\":123,\"memoryUsed\":1024}\n{\"success\":true,\"output\":\"Hello C++\",\"executionTime\":156,\"memoryUsed\":1024}\n{\"success\":true,\"output\":\"Hello Java\",\"executionTime\":234,\"memoryUsed\":2048}\n```\n\n---\n\n## 🔄 **Step 2: Test Local Docker Compose**\n\n### **Start the Execution System Locally**\n\n```bash\n# Navigate to execution system\ncd execution-system\n\n# Start all services\ndocker-compose up -d\n\n# Check all services are running\ndocker-compose ps\n```\n\n**Expected Output:**\n```\nNAME                    IMAGE                     STATUS\nexecution-redis         redis:7.0-alpine          Up\nexecution-api           codearena/execution-api   Up\nexecution-worker        codearena/execution-worker Up\n```\n\n### **Test API Endpoints**\n\n```bash\n# Test health endpoint\ncurl http://localhost:3001/health\n\n# Test queue stats\ncurl http://localhost:3001/api/stats\n\n# Test code execution\ncurl -X POST http://localhost:3001/api/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"code\": \"print(\\\"Hello from Queue!\\\")\",\n    \"language\": \"python\"\n  }'\n```\n\n**Expected Responses:**\n```json\n// Health check\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00.000Z\",\n  \"services\": {\n    \"redis\": \"connected\",\n    \"workers\": \"active\"\n  }\n}\n\n// Queue stats\n{\n  \"waiting\": 0,\n  \"active\": 0,\n  \"completed\": 5,\n  \"failed\": 0\n}\n\n// Code execution\n{\n  \"jobId\": \"job_123456789\",\n  \"message\": \"Job queued successfully\"\n}\n```\n\n### **Monitor Job Execution**\n\n```bash\n# Get job status (replace with actual jobId from above)\ncurl http://localhost:3001/api/jobs/job_123456789\n\n# Watch logs in real-time\ndocker-compose logs -f execution-worker\n```\n\n---\n\n## ☸️ **Step 3: Test Kubernetes Deployment**\n\n### **Deploy to Kubernetes**\n\n```bash\n# Navigate to execution system\ncd execution-system\n\n# Apply Kubernetes manifests\nkubectl apply -f k8s/generated/\n\n# Or use the generated deploy script\nbash k8s/generated/deploy.sh\n```\n\n### **Verify Kubernetes Deployment**\n\n```bash\n# Check namespace\nkubectl get namespace codearena-execution\n\n# Check all resources\nkubectl get all -n codearena-execution\n\n# Check pods are running\nkubectl get pods -n codearena-execution -o wide\n\n# Check services\nkubectl get services -n codearena-execution\n\n# Check configmaps and secrets\nkubectl get configmaps,secrets -n codearena-execution\n```\n\n**Expected Output:**\n```\nNAME                                 READY   STATUS    RESTARTS   AGE\npod/execution-api-xxx                1/1     Running   0          2m\npod/execution-worker-xxx             1/1     Running   0          2m\npod/redis-xxx                        1/1     Running   0          2m\n\nNAME                           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)\nservice/execution-api-service  ClusterIP   10.96.123.45    <none>        3001/TCP\nservice/redis-service          ClusterIP   10.96.123.46    <none>        6379/TCP\n```\n\n### **Test Kubernetes Services**\n\n```bash\n# Port forward to test API\nkubectl port-forward -n codearena-execution service/execution-api-service 3001:3001\n\n# In another terminal, test the API\ncurl http://localhost:3001/health\n\n# Test code execution through K8s\ncurl -X POST http://localhost:3001/api/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"code\": \"console.log(\\\"Hello from Kubernetes!\\\")\",\n    \"language\": \"javascript\"\n  }'\n```\n\n### **Check Horizontal Pod Autoscaling**\n\n```bash\n# Check HPA status\nkubectl get hpa -n codearena-execution\n\n# Generate load to test autoscaling\nfor i in {1..50}; do\n  curl -X POST http://localhost:3001/api/execute \\\n    -H \"Content-Type: application/json\" \\\n    -d \"{\\\"code\\\":\\\"import time; time.sleep(2); print('Load test $i')\\\",\\\"language\\\":\\\"python\\\"}\" &\ndone\n\n# Watch pods scale up\nkubectl get pods -n codearena-execution -w\n```\n\n---\n\n## 🔗 **Step 4: Test CodeArena Integration**\n\n### **Test Direct Mode (Current System)**\n\n```bash\n# Make sure your server is in direct mode\nexport EXECUTION_MODE=direct\n\n# Start your CodeArena server\ncd server\nnpm start\n\n# In another terminal, test integration\nnode test-execution-integration.js\n```\n\n### **Test Queue Mode Integration**\n\n```bash\n# Set queue mode\nexport EXECUTION_MODE=queue\nexport EXECUTION_QUEUE_URL=http://localhost:3001\n\n# Restart your CodeArena server\ncd server\nnpm start\n\n# Test integration with queue system\nnode test-execution-integration.js\n```\n\n### **Test Fallback Mechanism**\n\n```bash\n# Stop the queue system\ndocker-compose down\n\n# Keep EXECUTION_MODE=queue\n# The system should automatically fallback to direct execution\nnode test-execution-integration.js\n\n# Check logs for fallback messages\n# Should see: \"Queue service unavailable, falling back to direct execution\"\n```\n\n---\n\n## 🎯 **Step 5: End-to-End Problem Testing**\n\n### **Test All Languages**\n\n```bash\n# Create comprehensive test script\ncat > comprehensive-test.js << 'EOF'\nimport axios from 'axios';\n\nconst BASE_URL = 'http://localhost:5000';\nconst AUTH_TOKEN = 'your-token-here'; // Get from login\n\nconst tests = [\n  {\n    name: 'Python - Simple Print',\n    code: 'print(\"Hello World\")',\n    language: 'python',\n    expected: 'Hello World'\n  },\n  {\n    name: 'Python - Math Operations',\n    code: 'result = 2 + 3 * 4\\nprint(f\"Result: {result}\")',\n    language: 'python',\n    expected: 'Result: 14'\n  },\n  {\n    name: 'JavaScript - Console Log',\n    code: 'console.log(\"JavaScript works!\");',\n    language: 'javascript',\n    expected: 'JavaScript works!'\n  },\n  {\n    name: 'JavaScript - Variables',\n    code: 'let x = 10; let y = 20; console.log(`Sum: ${x + y}`);',\n    language: 'javascript',\n    expected: 'Sum: 30'\n  },\n  {\n    name: 'C - Hello World',\n    code: '#include <stdio.h>\\nint main() {\\n    printf(\"Hello from C!\");\\n    return 0;\\n}',\n    language: 'c',\n    expected: 'Hello from C!'\n  },\n  {\n    name: 'C++ - Hello World',\n    code: '#include <iostream>\\nint main() {\\n    std::cout << \"Hello from C++!\" << std::endl;\\n    return 0;\\n}',\n    language: 'cpp',\n    expected: 'Hello from C++!'\n  },\n  {\n    name: 'Java - Hello World',\n    code: 'public class Main {\\n    public static void main(String[] args) {\\n        System.out.println(\"Hello from Java!\");\\n    }\\n}',\n    language: 'java',\n    expected: 'Hello from Java!'\n  }\n];\n\nasync function runTests() {\n  console.log('🚀 Running comprehensive execution tests...\\n');\n  \n  let passed = 0;\n  let failed = 0;\n  \n  for (const test of tests) {\n    try {\n      console.log(`🔧 Testing: ${test.name}`);\n      \n      const response = await axios.post(`${BASE_URL}/api/execute`, {\n        code: test.code,\n        language: test.language\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${AUTH_TOKEN}`\n        },\n        timeout: 30000\n      });\n      \n      const result = response.data;\n      \n      if (result.error) {\n        console.log(`❌ FAILED: ${result.error}`);\n        failed++;\n      } else if (result.output && result.output.trim().includes(test.expected)) {\n        console.log(`✅ PASSED: \"${result.output.trim()}\" (${result.runtime}ms)`);\n        passed++;\n      } else {\n        console.log(`⚠️  UNEXPECTED: Expected \"${test.expected}\", got \"${result.output || 'no output'}\"`);\n        failed++;\n      }\n    } catch (error) {\n      console.log(`❌ ERROR: ${error.message}`);\n      failed++;\n    }\n    console.log('');\n  }\n  \n  console.log(`\\n📊 Test Results: ${passed} passed, ${failed} failed`);\n  console.log(failed === 0 ? '🎉 All tests passed!' : '⚠️  Some tests failed');\n}\n\nrunTests().catch(console.error);\nEOF\n\n# Run comprehensive tests\nnode comprehensive-test.js\n```\n\n### **Test Problem Solving Flow**\n\n```bash\n# Test the complete problem-solving workflow\ncurl -X POST http://localhost:5000/api/problems/run \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -d '{\n    \"problemId\": \"1\",\n    \"code\": \"def solution(nums):\\n    return sum(nums)\\n\\nprint(solution([1, 2, 3, 4, 5]))\",\n    \"language\": \"python\"\n  }'\n```\n\n---\n\n## 📊 **Step 6: Performance and Load Testing**\n\n### **Load Test the Queue System**\n\n```bash\n# Create load test script\ncat > load-test.js << 'EOF'\nimport axios from 'axios';\n\nconst CONCURRENT_REQUESTS = 100;\nconst BASE_URL = 'http://localhost:3001';\n\nasync function loadTest() {\n  console.log(`🚀 Starting load test with ${CONCURRENT_REQUESTS} concurrent requests...`);\n  \n  const startTime = Date.now();\n  const promises = [];\n  \n  for (let i = 0; i < CONCURRENT_REQUESTS; i++) {\n    const promise = axios.post(`${BASE_URL}/api/execute`, {\n      code: `print(f\"Load test request {i + 1}\")`,\n      language: 'python'\n    }).then(() => ({ success: true, id: i + 1 }))\n      .catch(error => ({ success: false, id: i + 1, error: error.message }));\n    \n    promises.push(promise);\n  }\n  \n  const results = await Promise.all(promises);\n  const endTime = Date.now();\n  \n  const successful = results.filter(r => r.success).length;\n  const failed = results.filter(r => !r.success).length;\n  \n  console.log(`\\n📊 Load Test Results:`);\n  console.log(`   Total Requests: ${CONCURRENT_REQUESTS}`);\n  console.log(`   Successful: ${successful}`);\n  console.log(`   Failed: ${failed}`);\n  console.log(`   Total Time: ${endTime - startTime}ms`);\n  console.log(`   Average Time: ${(endTime - startTime) / CONCURRENT_REQUESTS}ms per request`);\n}\n\nloadTest().catch(console.error);\nEOF\n\n# Run load test\nnode load-test.js\n```\n\n### **Monitor System During Load**\n\n```bash\n# Monitor Docker containers\ndocker stats\n\n# Monitor Kubernetes pods\nkubectl top pods -n codearena-execution\n\n# Check queue metrics\ncurl http://localhost:3001/api/stats\n\n# Monitor Redis\ndocker exec -it execution-redis redis-cli info stats\n```\n\n---\n\n## 🔍 **Step 7: Troubleshooting & Debugging**\n\n### **Common Issues and Solutions**\n\n#### **1. Docker Images Not Building**\n```bash\n# Check Docker daemon\nsudo systemctl status docker\n\n# Clean Docker cache\ndocker system prune -f\n\n# Rebuild with no cache\ndocker build --no-cache -t test-image .\n```\n\n#### **2. Kubernetes Pods Not Starting**\n```bash\n# Describe pod to see events\nkubectl describe pod POD_NAME -n codearena-execution\n\n# Check logs\nkubectl logs POD_NAME -n codearena-execution\n\n# Check resource limits\nkubectl get limitrange -n codearena-execution\n```\n\n#### **3. Queue System Not Working**\n```bash\n# Check Redis connection\ndocker exec -it execution-redis redis-cli ping\n\n# Check worker logs\ndocker-compose logs execution-worker\n\n# Test Redis directly\ndocker exec -it execution-redis redis-cli\n> KEYS *\n> GET bull:execution:waiting\n```\n\n#### **4. Code Execution Failures**\n```bash\n# Check worker container\ndocker exec -it execution-worker sh\n> docker images\n> docker ps\n\n# Test language containers directly\ndocker run --rm codearena/executor-python:latest python3 --version\n\n# Check execution logs\ndocker-compose logs -f execution-worker | grep \"ERROR\"\n```\n\n---\n\n## ✅ **Step 8: Verification Checklist**\n\n### **Before Production Deployment:**\n\n- [ ] **Docker Images Built**: All 5 language images build successfully\n- [ ] **Local Docker Compose**: All services start and respond to health checks\n- [ ] **Kubernetes Deployment**: All pods running, services accessible\n- [ ] **Queue System**: Jobs process correctly, Redis working\n- [ ] **API Integration**: CodeArena server connects to execution system\n- [ ] **Language Support**: All 5 languages (Python, JS, C, C++, Java) work\n- [ ] **Fallback System**: Direct execution works when queue is down\n- [ ] **Performance**: Load testing shows acceptable response times\n- [ ] **Autoscaling**: HPA scales pods based on load\n- [ ] **Monitoring**: Health endpoints return correct status\n- [ ] **Error Handling**: Failed executions handled gracefully\n\n### **Success Criteria:**\n\n✅ **All tests pass**  \n✅ **Response time < 5 seconds for simple code**  \n✅ **Can handle 100+ concurrent requests**  \n✅ **Zero data loss during failures**  \n✅ **Automatic recovery from errors**  \n\n---\n\n## 🎉 **Final Verification Command**\n\n```bash\n# Run this single command to verify everything works\nbash -c \"\necho '🧪 Final Verification Test'\necho '========================='\necho ''\n\necho '1. Testing Docker...'\ndocker --version && echo '✅ Docker OK' || echo '❌ Docker FAILED'\n\necho '2. Testing Kubernetes...'\nkubectl version --client &>/dev/null && echo '✅ Kubernetes OK' || echo '❌ Kubernetes FAILED'\n\necho '3. Testing Queue System...'\ncurl -s http://localhost:3001/health &>/dev/null && echo '✅ Queue System OK' || echo '❌ Queue System FAILED'\n\necho '4. Testing CodeArena Integration...'\ncurl -s http://localhost:5000/api/health &>/dev/null && echo '✅ CodeArena OK' || echo '❌ CodeArena FAILED'\n\necho ''\necho '🎯 Verification Complete!'\n\"\n```\n\n**If all show ✅, your system is production-ready! 🚀**\n\n---\n\n**Next Step:** Use this guide to systematically verify each component, and you'll have confidence that your Docker, Kubernetes, and execution system are working perfectly together! ","size_bytes":15106},"test_files/test-analytics-fix.js":{"content":"const { MongoClient } = require('mongodb');\n\nasync function testAnalyticsFix() {\n  const uri = 'mongodb://localhost:27017';\n  const client = new MongoClient(uri);\n\n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n\n    const db = client.db('codearena');\n    \n    // Get individual problems count\n    const individualProblems = await db.collection('problems').countDocuments();\n    console.log(`Individual problems: ${individualProblems}`);\n    \n    // Get problem sets and calculate problems in sets\n    const problemSets = await db.collection('problemSets').find({}).toArray();\n    let totalProblemsInSets = 0;\n    \n    console.log(`\\nProblem Sets Analysis:`);\n    problemSets.forEach((problemSet, index) => {\n      const problemCount = problemSet.problemInstances?.length || \n                          problemSet.problems?.length || \n                          problemSet.problemIds?.length || \n                          0;\n      totalProblemsInSets += problemCount;\n      \n      console.log(`${index + 1}. ${problemSet.title}:`);\n      console.log(`   - problemInstances: ${problemSet.problemInstances?.length || 0}`);\n      console.log(`   - problems array: ${problemSet.problems?.length || 0}`);\n      console.log(`   - problemIds: ${problemSet.problemIds?.length || 0}`);\n      console.log(`   - Total in this set: ${problemCount}`);\n    });\n    \n    const expectedTotalProblems = individualProblems + totalProblemsInSets;\n    \n    console.log(`\\nSummary:`);\n    console.log(`- Individual problems: ${individualProblems}`);\n    console.log(`- Problems in problem sets: ${totalProblemsInSets}`);\n    console.log(`- Expected total problems: ${expectedTotalProblems}`);\n    \n    // Test the analytics endpoint\n    console.log(`\\nTesting analytics endpoint...`);\n    const response = await fetch('http://localhost:5000/api/admin/analytics/summary', {\n      headers: {\n        'Authorization': 'Bearer test-token',\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    if (response.ok) {\n      const analytics = await response.json();\n      console.log(`Analytics endpoint returned: ${analytics.totalProblems} total problems`);\n      console.log(`Expected: ${expectedTotalProblems}`);\n      console.log(`Match: ${analytics.totalProblems === expectedTotalProblems ? '✅' : '❌'}`);\n      \n      if (analytics.totalProblems !== expectedTotalProblems) {\n        console.log(`\\nDebug info:`);\n        console.log(`- Analytics response:`, analytics);\n        console.log(`- Individual problems in DB: ${individualProblems}`);\n        console.log(`- Problem sets in DB: ${problemSets.length}`);\n        console.log(`- Problems in sets: ${totalProblemsInSets}`);\n      }\n    } else {\n      console.log(`Analytics endpoint failed: ${response.status}`);\n      const errorText = await response.text();\n      console.log(`Error: ${errorText}`);\n    }\n\n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    await client.close();\n  }\n}\n\ntestAnalyticsFix(); ","size_bytes":3007},"client/src/components/Monaco.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\ninterface MonacoEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  language: string;\n  height?: string;\n  theme?: string;\n  options?: any;\n  disableCopyPaste?: boolean;\n}\n\nexport default function MonacoEditor({\n  value,\n  onChange,\n  language,\n  height = \"400px\",\n  theme = \"vs-dark\",\n  options = {},\n  disableCopyPaste = false,\n}: MonacoEditorProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const editorRef = useRef<any>(null);\n\n  useEffect(() => {\n    const loadMonaco = async () => {\n      // Load Monaco Editor from CDN\n      if (!(window as any).monaco) {\n        // Add Monaco loader script\n        const script = document.createElement(\"script\");\n        script.src = \"https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs/loader.js\";\n        document.head.appendChild(script);\n\n        await new Promise((resolve) => {\n          script.onload = resolve;\n        });\n\n        // Configure Monaco\n        (window as any).require.config({\n          paths: { vs: \"https://cdn.jsdelivr.net/npm/monaco-editor@0.45.0/min/vs\" },\n        });\n\n        await new Promise((resolve) => {\n          (window as any).require([\"vs/editor/editor.main\"], resolve);\n        });\n      }\n\n      if (containerRef.current && !(window as any).editorInstance) {\n        // Create editor instance\n        editorRef.current = (window as any).monaco.editor.create(containerRef.current, {\n          value,\n          language,\n          theme,\n          automaticLayout: true,\n          minimap: { enabled: false },\n          scrollBeyondLastLine: false,\n          fontSize: 14,\n          lineNumbers: \"on\",\n          roundedSelection: false,\n          scrollBeyondLastColumn: 5,\n          readOnly: false,\n          cursorStyle: \"line\",\n          wordWrap: \"on\",\n          ...options,\n        });\n\n        // Set up change listener\n        editorRef.current.onDidChangeModelContent(() => {\n          const currentValue = editorRef.current.getValue();\n          onChange(currentValue);\n        });\n\n        // Disable copy-paste if requested\n        if (disableCopyPaste) {\n          // Disable copy-paste shortcuts\n          editorRef.current.addCommand((window as any).monaco.KeyMod.CtrlCmd | (window as any).monaco.KeyCode.KeyC, () => {\n            // Do nothing - copy disabled\n          });\n          editorRef.current.addCommand((window as any).monaco.KeyMod.CtrlCmd | (window as any).monaco.KeyCode.KeyV, () => {\n            // Do nothing - paste disabled\n          });\n          editorRef.current.addCommand((window as any).monaco.KeyMod.CtrlCmd | (window as any).monaco.KeyCode.KeyX, () => {\n            // Do nothing - cut disabled\n          });\n          \n          // Also disable right-click context menu\n          editorRef.current.onContextMenu(() => {\n            // Do nothing - context menu disabled\n          });\n        }\n\n        (window as any).editorInstance = editorRef.current;\n      }\n    };\n\n    loadMonaco();\n\n    return () => {\n      if (editorRef.current) {\n        editorRef.current.dispose();\n        (window as any).editorInstance = null;\n      }\n    };\n  }, [disableCopyPaste, options]);\n\n  useEffect(() => {\n    if (editorRef.current && editorRef.current.getValue() !== value) {\n      editorRef.current.setValue(value);\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (editorRef.current) {\n      (window as any).monaco.editor.setModelLanguage(editorRef.current.getModel(), language);\n    }\n  }, [language]);\n\n  return <div ref={containerRef} style={{ height }} className=\"border rounded-lg\" />;\n}\n","size_bytes":3592},"execution-system/docker/javascript/execute.js":{"content":"#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\nconst v8 = require('v8');\nconst { performance } = require('perf_hooks');\n\n// Set memory limit to 128MB\nconst MEMORY_LIMIT = 128 * 1024 * 1024;\nv8.setFlagsFromString('--max_old_space_size=128');\n\n// Default code file path\nconst DEFAULT_CODE_FILE = '/tmp/code.js';\n\n// Get initial memory usage\nconst getMemoryUsage = () => {\n    const used = process.memoryUsage();\n    return used.heapUsed + used.external;\n};\n\nasync function executeCode(codePath) {\n    try {\n        // Use provided path or default\n        const codeFile = codePath || DEFAULT_CODE_FILE;\n\n        // Check if file exists\n        if (!fs.existsSync(codeFile)) {\n            console.error(`Error: Code file not found at ${codeFile}`);\n            process.exit(1);\n        }\n\n        const startTime = performance.now();\n        const startMemory = getMemoryUsage();\n\n        // Read the code file\n        const code = fs.readFileSync(codeFile, 'utf8');\n\n        // Create a new context for execution\n        const context = {\n            console: {\n                log: (...args) => {\n                    console.log(...args);\n                },\n                error: (...args) => {\n                    console.error(...args);\n                }\n            },\n            process,\n            require,\n            setTimeout,\n            setInterval,\n            clearTimeout,\n            clearInterval,\n            Buffer,\n            URL,\n            Error,\n            Date,\n            Math,\n            JSON,\n            // Add any other required globals\n        };\n\n        // Set execution timeout\n        const timeoutPromise = new Promise((_, reject) => {\n                setTimeout(() => {\n                reject(new Error('Execution timeout'));\n            }, 5000); // 5 seconds timeout\n        });\n\n        // Execute the code\n        const executionPromise = new Promise(async (resolve) => {\n            try {\n                // Create function from code\n                const fn = new Function('context', `\n                    with (context) {\n                        ${code}\n                        // If Solution class exists, try to run it\n                        if (typeof Solution !== 'undefined') {\n                            const solution = new Solution();\n                            if (typeof solution.main === 'function') {\n                                solution.main();\n                            }\n                        }\n                    }\n                `);\n\n                // Execute in context\n                fn(context);\n                resolve();\n            } catch (error) {\n                throw error;\n            }\n        });\n\n        // Race between execution and timeout\n        await Promise.race([executionPromise, timeoutPromise]);\n\n        // Calculate resource usage\n        const endTime = performance.now();\n        const endMemory = getMemoryUsage();\n\n        // Print execution stats\n        const stats = {\n            runtime_ms: Math.round(endTime - startTime),\n            memory_bytes: endMemory - startMemory,\n            success: true\n        };\n        console.error(`\\n__EXECUTION_STATS__:${JSON.stringify(stats)}`);\n\n    } catch (error) {\n        if (error.message === 'Execution timeout') {\n            console.error('Error: Code execution timed out');\n        } else {\n            console.error(`Error: ${error.message}`);\n            console.error('Stacktrace:');\n            console.error(error.stack);\n        }\n        process.exit(1);\n    }\n}\n\n// Get code file path from arguments or use default\nconst codePath = process.argv[2] || DEFAULT_CODE_FILE;\nexecuteCode(codePath).catch(error => {\n    console.error(`Fatal error: ${error.message}`);\n    process.exit(1);\n}); ","size_bytes":3791},"server/controllers/problemSetsController.ts":{"content":"import { Request, Response } from 'express';\nimport type { AuthRequest } from '../middleware/auth';\nimport { ObjectId } from 'mongodb';\nimport { ProblemSet as ProblemSetModel } from '../models/ProblemSet';\nimport { User } from '../models/User';\nimport { ProblemSetEnrollment } from '../models/ProblemSetEnrollment';\nimport { connectToMongoDB } from '../db';\nimport { storage } from '../storage';\nimport { getDb } from '../db';\n\nfunction normalizeInstances(instances: any[] | undefined) {\n  if (!Array.isArray(instances)) return [] as any[];\n  return instances.map((inst: any) => {\n    if (!inst) return inst;\n    const withId = !inst.id && inst._id ? { ...inst, id: String(inst._id) } : inst;\n\n    // Provide UI-friendly fields mirrored from custom* fields and synonyms\n    const originalProblemId = withId.originalProblemId ?? withId.problemId ?? withId.selectedProblemId;\n    const starterCode = withId.customStarterCode ?? withId.starterCode ?? {};\n    const testCases = withId.customTestCases ?? withId.testCases ?? [];\n    const examples = withId.customExamples ?? withId.examples ?? [];\n    const setNotes = withId.setNotes ?? withId.notes ?? '';\n\n    return {\n      ...withId,\n      originalProblemId,\n      starterCode,\n      testCases,\n      examples,\n      setNotes,\n    };\n  });\n}\n\nexport async function listProblemSets(req: Request, res: Response) {\n  try {\n    const { status, difficulty, category } = req.query as Record<string, string | undefined>;\n    const query: any = {};\n    if (status) query.status = status;\n    if (difficulty) query.difficulty = difficulty;\n    if (category) query.category = category;\n\n    const results = await ProblemSetModel.find(query).sort({ createdAt: -1 }).lean();\n    \n    // Check if this is an admin request by looking at the URL path\n    const isAdminRequest = req.originalUrl?.includes('/api/admin/');\n    \n    let problemSets;\n    if (isAdminRequest) {\n      // For admin requests, include enrollment counts\n      const { ProblemSetEnrollment } = await import('../models/ProblemSetEnrollment');\n      \n      problemSets = await Promise.all(results.map(async (ps: any) => {\n        const normalized = normalizeInstances(ps.problemInstances);\n        const actualProblemCount = normalized.length || ps.problemIds?.length || 0;\n        \n        // Get enrollment count for this problem set\n        const enrollmentCount = await ProblemSetEnrollment.countDocuments({ \n          problemSetId: ps.id || String(ps._id) \n        });\n        \n        return {\n          ...ps,\n          problemInstances: normalized,\n          // Maintain compatibility for callers expecting a 'problems' array\n          problems: normalized,\n          tags: ps.tags || [],\n          totalProblems: actualProblemCount,\n          allowDirectEnrollment: ps.allowDirectEnrollment === true,\n          enrollmentCount,\n        };\n      }));\n    } else {\n      // For public requests, don't include enrollment counts\n      problemSets = results.map((ps: any) => {\n        const normalized = normalizeInstances(ps.problemInstances);\n        const actualProblemCount = normalized.length || ps.problemIds?.length || 0;\n        return {\n          ...ps,\n          problemInstances: normalized,\n          // Maintain compatibility for callers expecting a 'problems' array\n          problems: normalized,\n          tags: ps.tags || [],\n          totalProblems: actualProblemCount,\n          allowDirectEnrollment: ps.allowDirectEnrollment === true,\n        };\n      });\n    }\n    \n    res.json(problemSets);\n  } catch (error) {\n    console.error('Error fetching problem sets:', error);\n    res.status(500).json({ message: 'Failed to fetch problem sets' });\n  }\n}\n\nexport async function getProblemSetById(req: Request, res: Response) {\n  try {\n    const { id } = req.params;\n    let ps: any = await ProblemSetModel.findOne({ id }).lean();\n    if (!ps) {\n      // Try Mongo _id as fallback\n      try {\n        ps = await ProblemSetModel.findById(id).lean();\n      } catch {}\n    }\n    if (!ps) return res.status(404).json({ message: 'Problem set not found' });\n    \n    const normalized = normalizeInstances(ps.problemInstances);\n    const actualProblemCount = normalized.length || ps.problemIds?.length || 0;\n    \n    // Check if this is an admin request by looking at the URL path\n    const isAdminRequest = req.originalUrl?.includes('/api/admin/');\n    \n    let sanitizedProblemSet: any = {\n      ...ps,\n      problemInstances: normalized,\n      problems: normalized,\n      tags: ps.tags || [],\n      totalProblems: actualProblemCount,\n      allowDirectEnrollment: ps.allowDirectEnrollment === true,\n    };\n    \n    if (isAdminRequest) {\n      // For admin requests, include enrollment count\n      const { ProblemSetEnrollment } = await import('../models/ProblemSetEnrollment');\n      const enrollmentCount = await ProblemSetEnrollment.countDocuments({ \n        problemSetId: ps.id || String(ps._id) \n      });\n      sanitizedProblemSet.enrollmentCount = enrollmentCount;\n    }\n    \n    res.json(sanitizedProblemSet);\n  } catch (error) {\n    console.error('Error fetching problem set:', error);\n    res.status(500).json({ message: 'Failed to fetch problem set' });\n  }\n}\n\nexport async function createProblemSet(req: AuthRequest, res: Response) {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n\n    // Ensure required fields for schema\n    const now = new Date();\n    const problemSetData = {\n      id: new ObjectId().toString(),\n      title: String(req.body?.title || ''),\n      description: String(req.body?.description || ''),\n      difficulty: String(req.body?.difficulty || 'easy'),\n      category: String(req.body?.category || ''),\n      estimatedTime: Number(req.body?.estimatedTime || 1),\n      tags: Array.isArray(req.body?.tags) ? req.body.tags : [],\n      createdBy: String(req.user.id),\n      isPublic: true,\n      problemIds: [],\n      problemInstances: [],\n      participants: [],\n      totalProblems: 0,\n      createdAt: now,\n      updatedAt: now,\n    } as any;\n\n    const created = await ProblemSetModel.create(problemSetData);\n    res.status(201).json(created);\n  } catch (error: any) {\n    console.error('Error creating problem set:', error);\n    res.status(400).json({ message: 'Failed to create problem set', error: error.message });\n  }\n}\n\nexport async function updateProblemSet(req: AuthRequest, res: Response) {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    const { id } = req.params;\n    const updateData = { ...req.body, updatedAt: new Date() };\n    const updated = await ProblemSetModel.findOneAndUpdate({ id }, { $set: updateData }, { new: true }).lean();\n    if (!updated) return res.status(404).json({ message: 'Problem set not found' });\n    res.json(updated);\n  } catch (error: any) {\n    console.error('Error updating problem set:', error);\n    res.status(400).json({ message: 'Failed to update problem set', error: error.message });\n  }\n}\n\nexport async function deleteProblemSet(req: AuthRequest, res: Response) {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    const { id } = req.params;\n    const result = await ProblemSetModel.deleteOne({ id });\n    if (result.deletedCount === 0) return res.status(404).json({ message: 'Problem set not found' });\n    res.json({ message: 'Problem set deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting problem set:', error);\n    res.status(500).json({ message: 'Failed to delete problem set' });\n  }\n}\n\nexport async function addProblemInstance(req: AuthRequest, res: Response) {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    const { id } = req.params;\n\n    // Determine original problem reference\n    const selectedProblemIdRaw = req.body?.selectedProblemId ?? req.body?.originalProblemId ?? req.body?.problemId;\n    const selectedProblemId = selectedProblemIdRaw ? parseInt(String(selectedProblemIdRaw)) : undefined;\n    if (!selectedProblemId || Number.isNaN(selectedProblemId)) {\n      return res.status(400).json({ message: 'selectedProblemId (or originalProblemId/problemId) is required and must be numeric' });\n    }\n\n    // Load the problem set to compute order and ensure existence\n    const existingPs: any = await ProblemSetModel.findOne({ id }).lean();\n    if (!existingPs) return res.status(404).json({ message: 'Problem set not found' });\n    const currentInstances: any[] = Array.isArray(existingPs.problemInstances) ? existingPs.problemInstances : [];\n    const nextOrder = (currentInstances.length || 0) + 1; // Schema min is 1\n\n    // Fetch original problem from DB (raw collection used across app)\n    const db = await connectToMongoDB();\n    const originalProblem = await db.collection('problems').findOne({ id: selectedProblemId });\n    if (!originalProblem) {\n      return res.status(404).json({ message: 'Original problem not found' });\n    }\n\n    // Build problem instance by cloning original problem with optional overrides\n    const generatedSubId = new ObjectId();\n    const nowIso = new Date().toISOString();\n\n    const override = req.body || {};\n\n    const problemInstance: any = {\n      // Required instance identity\n      id: generatedSubId.toString(),\n      _id: generatedSubId,\n\n      // Required reference as per model schema\n      problemId: originalProblem.id,\n\n      // General display/metadata with overrides\n      title: override.title ?? originalProblem.title,\n      description: override.description ?? originalProblem.description,\n      difficulty: (override.difficulty ?? originalProblem.difficulty) as any,\n      constraints: override.constraints ?? originalProblem.constraints,\n      inputFormat: override.inputFormat ?? originalProblem.inputFormat,\n      outputFormat: override.outputFormat ?? originalProblem.outputFormat,\n      notes: override.notes ?? originalProblem.notes,\n\n      // Limits with overrides\n      timeLimit: override.timeLimit ?? originalProblem.timeLimit,\n      memoryLimit: override.memoryLimit ?? originalProblem.memoryLimit,\n\n      // Instance-specific customizable payloads (persisted by schema)\n      customStarterCode: override.starterCode ?? originalProblem.starterCode ?? {},\n      customTestCases: override.testCases ?? originalProblem.testCases ?? [],\n      customExamples: override.examples ?? originalProblem.examples ?? [],\n\n      // Ordering and lifecycle\n      order: typeof override.order === 'number' && override.order >= 1 ? override.order : nextOrder,\n      isCustomized: true,\n      lastModified: nowIso,\n      modifiedBy: String(req.user?.id || ''),\n    };\n\n    // Persist instance\n    const updated = await ProblemSetModel.findOneAndUpdate(\n      { id },\n      { $push: { problemInstances: problemInstance }, $set: { updatedAt: new Date() } },\n      { new: true }\n    ).lean();\n    if (!updated) return res.status(404).json({ message: 'Problem set not found' });\n    res.status(201).json(problemInstance);\n  } catch (error: any) {\n    console.error('Error adding problem instance:', error);\n    res.status(400).json({ message: 'Failed to add problem instance', error: error.message });\n  }\n}\n\nexport async function updateProblemInstance(req: AuthRequest, res: Response) {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    const { id, problemId } = req.params;\n    const body = req.body || {};\n    \n    console.log(`[PROBLEM-SETS-CONTROLLER] 🔄 Updating problem instance ${problemId} in problem set ${id}`);\n    console.log(`[PROBLEM-SETS-CONTROLLER] Updates to apply:`, body);\n    \n    // First, get the current problem instance to preserve existing fields\n    const problemSet = await ProblemSetModel.findOne({ id }).lean();\n    if (!problemSet) {\n      console.log(`[PROBLEM-SETS-CONTROLLER] ❌ Problem set ${id} not found`);\n      return res.status(404).json({ message: 'Problem set not found' });\n    }\n    \n    const isObjectId = ObjectId.isValid(problemId);\n    const currentProblemInstance = problemSet.problemInstances?.find(p => \n      isObjectId ? String(p._id) === problemId : p.id === problemId\n    );\n    \n    if (!currentProblemInstance) {\n      console.log(`[PROBLEM-SETS-CONTROLLER] ❌ Problem instance ${problemId} not found`);\n      return res.status(404).json({ message: 'Problem instance not found' });\n    }\n    \n    console.log(`[PROBLEM-SETS-CONTROLLER] Current problem instance:`, {\n      id: currentProblemInstance.id,\n      _id: currentProblemInstance._id,\n      title: currentProblemInstance.title,\n      selectedProblemId: currentProblemInstance.selectedProblemId,\n      originalProblemId: currentProblemInstance.originalProblemId\n    });\n    \n    const updateData: any = {\n      ...body,\n      // Normalize UI fields back to stored schema fields\n      customStarterCode: body.starterCode ?? body.customStarterCode,\n      customTestCases: body.testCases ?? body.customTestCases,\n      customExamples: body.examples ?? body.customExamples,\n      notes: body.setNotes ?? body.notes,\n      lastModified: new Date().toISOString(),\n    };\n    \n    // Merge updates with existing problem instance data, preserving important fields\n    const updatedProblemInstance = {\n      ...currentProblemInstance,\n      ...updateData,\n      // Preserve these critical fields if they exist\n      selectedProblemId: updateData.selectedProblemId !== undefined ? updateData.selectedProblemId : currentProblemInstance.selectedProblemId,\n      originalProblemId: updateData.originalProblemId !== undefined ? updateData.originalProblemId : currentProblemInstance.originalProblemId,\n      // Always preserve the problem ID\n      id: currentProblemInstance.id,\n      _id: currentProblemInstance._id,\n      updatedAt: new Date()\n    };\n    \n    console.log(`[PROBLEM-SETS-CONTROLLER] Updated problem instance:`, {\n      id: updatedProblemInstance.id,\n      _id: updatedProblemInstance._id,\n      title: updatedProblemInstance.title,\n      selectedProblemId: updatedProblemInstance.selectedProblemId,\n      originalProblemId: updatedProblemInstance.originalProblemId\n    });\n    \n    const match: any = isObjectId\n      ? { id, 'problemInstances._id': new ObjectId(problemId) }\n      : { id, 'problemInstances.id': problemId };\n\n    const setPath = isObjectId ? 'problemInstances.$' : 'problemInstances.$';\n\n    const result = await ProblemSetModel.findOneAndUpdate(\n      match,\n      { $set: { [setPath]: updatedProblemInstance, updatedAt: new Date() } },\n      { new: true }\n    ).lean();\n    \n    if (!result) {\n      console.log(`[PROBLEM-SETS-CONTROLLER] ❌ Update failed - no result returned`);\n      return res.status(404).json({ message: 'Problem set or problem instance not found' });\n    }\n    \n    console.log(`[PROBLEM-SETS-CONTROLLER] ✅ Problem instance updated successfully`);\n    res.json({ message: 'Problem instance updated successfully' });\n  } catch (error: any) {\n    console.error('Error updating problem instance:', error);\n    res.status(400).json({ message: 'Failed to update problem instance', error: error.message });\n  }\n}\n\nexport async function deleteProblemInstance(req: AuthRequest, res: Response) {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    const { id, problemId } = req.params;\n    // First, ensure the problem set exists\n    const ps: any = await ProblemSetModel.findOne({ id }).lean();\n    if (!ps) return res.status(404).json({ message: 'Problem set not found' });\n\n    const isObjectId = ObjectId.isValid(problemId);\n\n    // Delete by subdocument _id (preferred) or legacy id\n    const update = await ProblemSetModel.updateOne(\n      isObjectId ? { id } : { id },\n      isObjectId\n        ? ({ $pull: { problemInstances: { _id: new ObjectId(problemId) } }, $set: { updatedAt: new Date() } } as any)\n        : ({ $pull: { problemInstances: { id: problemId } }, $set: { updatedAt: new Date() } } as any)\n    );\n\n    if (!update || update.modifiedCount === 0) {\n      return res.status(404).json({ message: 'Problem instance not found' });\n    }\n\n    res.json({ message: 'Problem instance deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting problem instance:', error);\n    res.status(500).json({ message: 'Failed to delete problem instance' });\n  }\n}\n\nexport async function listProblemSetEnrollments(req: AuthRequest, res: Response) {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    const { id } = req.params;\n    \n    console.log('Fetching enrollments for problem set:', id);\n    const enrollments = await storage.getProblemSetEnrollments(id);\n    console.log('Found enrollments:', enrollments.length);\n    \n    res.json(enrollments);\n  } catch (error: any) {\n    console.error('Error fetching problem set enrollments:', error);\n    res.status(500).json({ message: 'Failed to fetch enrollments' });\n  }\n}\n\nexport async function enrollUserInProblemSet(req: AuthRequest, res: Response) {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    const { id } = req.params;\n    const userIds: string[] = Array.isArray(req.body?.userIds) && req.body.userIds.length\n      ? req.body.userIds\n      : (req.body?.userId ? [String(req.body.userId)] : []);\n    if (userIds.length === 0) return res.status(400).json({ message: 'No userIds provided' });\n    \n    console.log('=== ENROLLMENT REQUEST START ===');\n    console.log('Enrollment request:', { problemSetId: id, userIds, userIdsType: typeof userIds, userIdsLength: userIds.length });\n    console.log('Problem set ID type:', typeof id);\n    console.log('Problem set ID value:', id);\n    console.log('User IDs:', userIds.map(uid => ({ id: uid, type: typeof uid })));\n    \n    // Verify the problem set exists before attempting enrollment\n    const db = getDb();\n    const problemSetCheck = await db.collection('problemsets').findOne({ id: id });\n    console.log('Problem set verification:', {\n      found: !!problemSetCheck,\n      problemSetId: problemSetCheck?.id,\n      problemSetMongoId: problemSetCheck?._id,\n      currentParticipants: problemSetCheck?.participants\n    });\n    \n    // Use storage system for enrollment\n    const enrollments = [];\n    let inserted = 0;\n    \n    for (const userId of userIds) {\n      try {\n        console.log('Enrolling user:', userId, 'in problem set:', id);\n        const enrollment = await storage.enrollUserInProblemSet(userId, id);\n        enrollments.push(enrollment);\n        inserted += 1;\n        console.log('Successfully enrolled user:', userId);\n        console.log('=== ENROLLMENT REQUEST END ===');\n      } catch (error: any) {\n        console.error(`Error enrolling user ${userId}:`, error);\n        // Continue with other users even if one fails\n      }\n    }\n\n    // Get total enrollment count\n    const allEnrollments = await storage.getProblemSetEnrollments(id);\n    const total = allEnrollments.length;\n    \n    res.json({ \n      message: 'Enrolled successfully', \n      totalParticipants: total, \n      inserted,\n      enrollments \n    });\n  } catch (error: any) {\n    console.error('Error enrolling user:', error);\n    res.status(400).json({ message: 'Failed to enroll user', error: error.message });\n  }\n}\n\nexport async function removeUserFromProblemSet(req: AuthRequest, res: Response) {\n  try {\n    if (req.user?.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\n    const { id, userId } = req.params;\n    \n    console.log('Removing user from problem set:', { problemSetId: id, userId });\n    \n    // Use storage system to remove user from problem set\n    await storage.deleteProblemSetEnrollmentByUser(userId, id);\n    \n    res.json({ message: 'User removed from enrollment successfully' });\n  } catch (error: any) {\n    console.error('Error removing user from enrollment:', error);\n    if (error.message.includes('not found')) {\n      return res.status(404).json({ message: 'User enrollment not found' });\n    }\n    res.status(500).json({ message: 'Failed to remove user from enrollment' });\n  }\n} ","size_bytes":20244},"client/src/lib/analyticsEvents.ts":{"content":"// Analytics Events Service\n// This service manages global events for updating analytics when submissions are made\n\nexport class AnalyticsEvents {\n  private static instance: AnalyticsEvents;\n  private listeners: Map<string, Set<() => void>> = new Map();\n\n  private constructor() {}\n\n  static getInstance(): AnalyticsEvents {\n    if (!AnalyticsEvents.instance) {\n      AnalyticsEvents.instance = new AnalyticsEvents();\n    }\n    return AnalyticsEvents.instance;\n  }\n\n  // Emit an event when a submission is made\n  static emitSubmissionUpdate(problemSetId: string) {\n    // Dispatch a custom event that analytics components can listen to\n    window.dispatchEvent(new CustomEvent('submission-updated', {\n      detail: { problemSetId }\n    }));\n    \n    // Also dispatch a global event for broader analytics updates\n    window.dispatchEvent(new CustomEvent('analytics-updated', {\n      detail: { problemSetId, type: 'submission' }\n    }));\n  }\n\n  // Emit an event when a problem is completed\n  static emitProblemCompleted(problemSetId: string, problemId: string | number) {\n    window.dispatchEvent(new CustomEvent('problem-completed', {\n      detail: { problemSetId, problemId }\n    }));\n    \n    // Also trigger general analytics update\n    this.emitSubmissionUpdate(problemSetId);\n  }\n\n  // Emit an event when user activity is tracked\n  static emitActivityUpdate(problemSetId: string, userId: string) {\n    window.dispatchEvent(new CustomEvent('activity-updated', {\n      detail: { problemSetId, userId }\n    }));\n    \n    // Trigger analytics update for this problem set\n    this.emitSubmissionUpdate(problemSetId);\n  }\n\n  // Listen for analytics update events\n  static onAnalyticsUpdate(callback: (data: { problemSetId: string; type: string }) => void) {\n    const handler = (event: CustomEvent) => callback(event.detail);\n    window.addEventListener('analytics-updated', handler as EventListener);\n    \n    // Return cleanup function\n    return () => {\n      window.removeEventListener('analytics-updated', handler as EventListener);\n    };\n  }\n\n  // Listen for submission updates\n  static onSubmissionUpdate(callback: (data: { problemSetId: string }) => void) {\n    const handler = (event: CustomEvent) => callback(event.detail);\n    window.addEventListener('submission-updated', handler as EventListener);\n    \n    // Return cleanup function\n    return () => {\n      window.removeEventListener('submission-updated', handler as EventListener);\n    };\n  }\n\n  // Listen for problem completion\n  static onProblemCompleted(callback: (data: { problemSetId: string; problemId: string | number }) => void) {\n    const handler = (event: CustomEvent) => callback(event.detail);\n    window.addEventListener('problem-completed', handler as EventListener);\n    \n    // Return cleanup function\n    return () => {\n      window.removeEventListener('problem-completed', handler as EventListener);\n    };\n  }\n}\n\n// Export convenience functions\nexport const emitSubmissionUpdate = AnalyticsEvents.emitSubmissionUpdate;\nexport const emitProblemCompleted = AnalyticsEvents.emitProblemCompleted;\nexport const emitActivityUpdate = AnalyticsEvents.emitActivityUpdate;\nexport const onAnalyticsUpdate = AnalyticsEvents.onAnalyticsUpdate;\nexport const onSubmissionUpdate = AnalyticsEvents.onSubmissionUpdate;\nexport const onProblemCompleted = AnalyticsEvents.onProblemCompleted; ","size_bytes":3356},"client/src/components/courses/CourseWizard.tsx":{"content":"import React, { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  ChevronLeft, \n  ChevronRight, \n  BookOpen, \n  Settings, \n  FileText, \n  Video, \n  Code,\n  Check,\n  Plus,\n  Trash2,\n  Upload,\n  Globe,\n  Lock\n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface CourseModule {\n  id?: number;\n  title: string;\n  description: string;\n  order: number;\n  textContent?: string;\n  videoUrl?: string;\n  codeExample?: string;\n  language?: string;\n  expectedOutput?: string;\n}\n\ninterface CourseFormData {\n  title: string;\n  description: string;\n  isPublic: boolean;\n  enableMarkComplete: boolean;\n  category: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  estimatedHours: number;\n  prerequisites: string[];\n  learningObjectives: string[];\n  modules: CourseModule[];\n  tags: string[];\n}\n\nconst WIZARD_STEPS = [\n  { id: 'basic', title: 'Basic Information', icon: FileText },\n  { id: 'content', title: 'Course Content', icon: BookOpen },\n  { id: 'modules', title: 'Course Modules', icon: Video },\n  { id: 'settings', title: 'Settings & Review', icon: Settings }\n];\n\nexport function CourseWizard() {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [formData, setFormData] = useState<CourseFormData>({\n    title: '',\n    description: '',\n    isPublic: true,\n    enableMarkComplete: true,\n    category: '',\n    difficulty: 'beginner',\n    estimatedHours: 1,\n    prerequisites: [],\n    learningObjectives: [],\n    modules: [],\n    tags: []\n  });\n\n  const [currentPrerequisite, setCurrentPrerequisite] = useState('');\n  const [currentObjective, setCurrentObjective] = useState('');\n  const [currentTag, setCurrentTag] = useState('');\n\n  const createCourseMutation = useMutation({\n    mutationFn: async (courseData: any) => {\n      return apiRequest('POST', '/api/courses', courseData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Course Created\",\n        description: \"Your course has been created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/courses'] });\n      queryClient.invalidateQueries({ queryKey: ['courses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/courses'] });\n      setLocation('/admin/courses');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create course\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const updateFormData = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const addPrerequisite = () => {\n    if (currentPrerequisite.trim()) {\n      updateFormData('prerequisites', [...formData.prerequisites, currentPrerequisite.trim()]);\n      setCurrentPrerequisite('');\n    }\n  };\n\n  const removePrerequisite = (index: number) => {\n    updateFormData('prerequisites', formData.prerequisites.filter((_, i) => i !== index));\n  };\n\n  const addObjective = () => {\n    if (currentObjective.trim()) {\n      updateFormData('learningObjectives', [...formData.learningObjectives, currentObjective.trim()]);\n      setCurrentObjective('');\n    }\n  };\n\n  const removeObjective = (index: number) => {\n    updateFormData('learningObjectives', formData.learningObjectives.filter((_, i) => i !== index));\n  };\n\n  const addTag = () => {\n    if (currentTag.trim() && !formData.tags.includes(currentTag.trim())) {\n      updateFormData('tags', [...formData.tags, currentTag.trim()]);\n      setCurrentTag('');\n    }\n  };\n\n  const removeTag = (tag: string) => {\n    updateFormData('tags', formData.tags.filter(t => t !== tag));\n  };\n\n  const addModule = () => {\n    const newModule: CourseModule = {\n      title: '',\n      description: '',\n      order: formData.modules.length + 1,\n      textContent: '',\n      videoUrl: '',\n      codeExample: '',\n      language: 'javascript',\n      expectedOutput: ''\n    };\n    updateFormData('modules', [...formData.modules, newModule]);\n  };\n\n  const updateModule = (index: number, field: string, value: any) => {\n    const updatedModules = formData.modules.map((module, i) => \n      i === index ? { ...module, [field]: value } : module\n    );\n    updateFormData('modules', updatedModules);\n  };\n\n  const removeModule = (index: number) => {\n    const updatedModules = formData.modules\n      .filter((_, i) => i !== index)\n      .map((module, i) => ({ ...module, order: i + 1 }));\n    updateFormData('modules', updatedModules);\n  };\n\n  const validateStep = (step: number): boolean => {\n    switch (step) {\n      case 0: // Basic Information\n        return formData.title.trim() !== '' && formData.description.trim() !== '';\n      case 1: // Course Content\n        return formData.learningObjectives.length > 0;\n      case 2: // Modules\n        return formData.modules.length > 0 && formData.modules.every(m => m.title.trim() !== '');\n      case 3: // Settings & Review\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const nextStep = () => {\n    if (currentStep < WIZARD_STEPS.length - 1 && validateStep(currentStep)) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = () => {\n    if (validateStep(currentStep)) {\n      createCourseMutation.mutate(formData);\n    }\n  };\n\n  const progress = ((currentStep + 1) / WIZARD_STEPS.length) * 100;\n\n  return (\n    <div className=\"container mx-auto py-8 max-w-4xl\">\n      <div className=\"mb-8\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation('/admin/courses')}\n          className=\"mb-4\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-2\" />\n          Back to Courses\n        </Button>\n        \n        <h1 className=\"text-3xl font-bold mb-2\">Create New Course</h1>\n        <p className=\"text-muted-foreground\">Follow the steps to create a comprehensive course</p>\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          {WIZARD_STEPS.map((step, index) => {\n            const Icon = step.icon;\n            const isCompleted = index < currentStep;\n            const isCurrent = index === currentStep;\n            \n            return (\n              <div key={step.id} className=\"flex items-center\">\n                <div className={`\n                  flex items-center justify-center w-10 h-10 rounded-full border-2 \n                  ${isCompleted ? 'bg-primary border-primary text-primary-foreground' : \n                    isCurrent ? 'border-primary text-primary' : 'border-muted text-muted-foreground'}\n                `}>\n                  {isCompleted ? <Check className=\"h-5 w-5\" /> : <Icon className=\"h-5 w-5\" />}\n                </div>\n                <div className=\"ml-3 min-w-0\">\n                  <p className={`text-sm font-medium ${isCurrent ? 'text-primary' : 'text-muted-foreground'}`}>\n                    {step.title}\n                  </p>\n                </div>\n                {index < WIZARD_STEPS.length - 1 && (\n                  <div className={`w-12 h-0.5 mx-4 ${isCompleted ? 'bg-primary' : 'bg-muted'}`} />\n                )}\n              </div>\n            );\n          })}\n        </div>\n        <Progress value={progress} className=\"w-full\" />\n      </div>\n\n      {/* Step Content */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            {React.createElement(WIZARD_STEPS[currentStep].icon, { className: \"h-5 w-5 mr-2\" })}\n            {WIZARD_STEPS[currentStep].title}\n          </CardTitle>\n          <CardDescription>\n            Step {currentStep + 1} of {WIZARD_STEPS.length}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Step 1: Basic Information */}\n          {currentStep === 0 && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"title\">Course Title *</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => updateFormData('title', e.target.value)}\n                  placeholder=\"Enter course title\"\n                  className=\"mt-1\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Course Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => updateFormData('description', e.target.value)}\n                  placeholder=\"Describe what students will learn in this course\"\n                  className=\"mt-1 min-h-[100px]\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Input\n                    id=\"category\"\n                    value={formData.category}\n                    onChange={(e) => updateFormData('category', e.target.value)}\n                    placeholder=\"e.g., Web Development, Data Science\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"difficulty\">Difficulty Level</Label>\n                  <select\n                    className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm mt-1\"\n                    value={formData.difficulty}\n                    onChange={(e) => updateFormData('difficulty', e.target.value as any)}\n                  >\n                    <option value=\"beginner\">Beginner</option>\n                    <option value=\"intermediate\">Intermediate</option>\n                    <option value=\"advanced\">Advanced</option>\n                  </select>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"estimatedHours\">Estimated Hours</Label>\n                <Input\n                  id=\"estimatedHours\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={formData.estimatedHours}\n                  onChange={(e) => updateFormData('estimatedHours', parseInt(e.target.value) || 1)}\n                  className=\"mt-1\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Course Content */}\n          {currentStep === 1 && (\n            <div className=\"space-y-6\">\n              <div>\n                <Label>Prerequisites</Label>\n                <div className=\"flex gap-2 mt-1\">\n                  <Input\n                    value={currentPrerequisite}\n                    onChange={(e) => setCurrentPrerequisite(e.target.value)}\n                    placeholder=\"Add a prerequisite\"\n                    onKeyPress={(e) => e.key === 'Enter' && addPrerequisite()}\n                  />\n                  <Button type=\"button\" onClick={addPrerequisite}>\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {formData.prerequisites.map((prereq, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                      {prereq}\n                      <button onClick={() => removePrerequisite(index)}>\n                        <Trash2 className=\"h-3 w-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label>Learning Objectives *</Label>\n                <div className=\"flex gap-2 mt-1\">\n                  <Input\n                    value={currentObjective}\n                    onChange={(e) => setCurrentObjective(e.target.value)}\n                    placeholder=\"Add a learning objective\"\n                    onKeyPress={(e) => e.key === 'Enter' && addObjective()}\n                  />\n                  <Button type=\"button\" onClick={addObjective}>\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {formData.learningObjectives.map((objective, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                      {objective}\n                      <button onClick={() => removeObjective(index)}>\n                        <Trash2 className=\"h-3 w-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label>Tags</Label>\n                <div className=\"flex gap-2 mt-1\">\n                  <Input\n                    value={currentTag}\n                    onChange={(e) => setCurrentTag(e.target.value)}\n                    placeholder=\"Add a tag\"\n                    onKeyPress={(e) => e.key === 'Enter' && addTag()}\n                  />\n                  <Button type=\"button\" onClick={addTag}>\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {formData.tags.map((tag, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"flex items-center gap-1\">\n                      {tag}\n                      <button onClick={() => removeTag(tag)}>\n                        <Trash2 className=\"h-3 w-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 3: Course Modules */}\n          {currentStep === 2 && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium\">Course Modules</h3>\n                <Button onClick={addModule}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Module\n                </Button>\n              </div>\n\n              {formData.modules.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <BookOpen className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No modules added yet. Click \"Add Module\" to get started.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {formData.modules.map((module, index) => (\n                    <Card key={index}>\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"outline\">Module {module.order}</Badge>\n                            <Input\n                              value={module.title}\n                              onChange={(e) => updateModule(index, 'title', e.target.value)}\n                              placeholder=\"Module title\"\n                              className=\"font-medium\"\n                            />\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeModule(index)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div>\n                          <Label>Description</Label>\n                          <Textarea\n                            value={module.description}\n                            onChange={(e) => updateModule(index, 'description', e.target.value)}\n                            placeholder=\"Module description\"\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label>Video URL (Optional)</Label>\n                            <Input\n                              value={module.videoUrl}\n                              onChange={(e) => updateModule(index, 'videoUrl', e.target.value)}\n                              placeholder=\"https://youtube.com/watch?v=...\"\n                              className=\"mt-1\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label>Programming Language</Label>\n                            <select\n                              className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm mt-1\"\n                              value={module.language}\n                              onChange={(e) => updateModule(index, 'language', e.target.value)}\n                            >\n                              <option value=\"javascript\">JavaScript</option>\n                              <option value=\"python\">Python</option>\n                              <option value=\"java\">Java</option>\n                              <option value=\"cpp\">C++</option>\n                              <option value=\"html\">HTML</option>\n                              <option value=\"css\">CSS</option>\n                            </select>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <Label>Text Content</Label>\n                          <Textarea\n                            value={module.textContent}\n                            onChange={(e) => updateModule(index, 'textContent', e.target.value)}\n                            placeholder=\"Write your lesson content here...\"\n                            className=\"mt-1 min-h-[100px]\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label>Code Example (Optional)</Label>\n                          <Textarea\n                            value={module.codeExample}\n                            onChange={(e) => updateModule(index, 'codeExample', e.target.value)}\n                            placeholder=\"// Add code example here\"\n                            className=\"mt-1 font-mono\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label>Expected Output (Optional)</Label>\n                          <Input\n                            value={module.expectedOutput}\n                            onChange={(e) => updateModule(index, 'expectedOutput', e.target.value)}\n                            placeholder=\"Expected output for code example\"\n                            className=\"mt-1\"\n                          />\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Step 4: Settings & Review */}\n          {currentStep === 3 && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"isPublic\"\n                  checked={formData.isPublic}\n                  onCheckedChange={(checked) => updateFormData('isPublic', checked)}\n                />\n                <div className=\"flex items-center gap-2\">\n                  {formData.isPublic ? <Globe className=\"h-4 w-4\" /> : <Lock className=\"h-4 w-4\" />}\n                  <Label htmlFor=\"isPublic\">\n                    {formData.isPublic ? 'Public Course' : 'Private Course'}\n                  </Label>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"enableMarkComplete\"\n                  checked={formData.enableMarkComplete}\n                  onCheckedChange={(checked) => updateFormData('enableMarkComplete', checked)}\n                />\n                <Label htmlFor=\"enableMarkComplete\">\n                  Enable Mark Complete\n                </Label>\n              </div>\n              \n              <Separator />\n              \n              <div>\n                <h3 className=\"text-lg font-medium mb-4\">Course Summary</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Title</Label>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{formData.title || 'Not specified'}</p>\n                    </div>\n                    <div>\n                      <Label>Category</Label>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{formData.category || 'Not specified'}</p>\n                    </div>\n                    <div>\n                      <Label>Difficulty</Label>\n                      <Badge variant=\"secondary\" className=\"mt-1\">\n                        {formData.difficulty}\n                      </Badge>\n                    </div>\n                    <div>\n                      <Label>Estimated Hours</Label>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{formData.estimatedHours} hours</p>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label>Description</Label>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{formData.description || 'Not specified'}</p>\n                  </div>\n                  \n                  <div>\n                    <Label>Learning Objectives ({formData.learningObjectives.length})</Label>\n                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                      {formData.learningObjectives.map((obj, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {obj}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label>Modules ({formData.modules.length})</Label>\n                    <div className=\"mt-1 space-y-1\">\n                      {formData.modules.map((module, index) => (\n                        <div key={index} className=\"text-sm text-muted-foreground\">\n                          {index + 1}. {module.title || 'Untitled Module'}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"flex justify-between mt-8\">\n        <Button\n          variant=\"outline\"\n          onClick={prevStep}\n          disabled={currentStep === 0}\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-2\" />\n          Previous\n        </Button>\n        \n        <div className=\"flex gap-2\">\n          {currentStep < WIZARD_STEPS.length - 1 ? (\n            <Button\n              onClick={nextStep}\n              disabled={!validateStep(currentStep)}\n            >\n              Next\n              <ChevronRight className=\"h-4 w-4 ml-2\" />\n            </Button>\n          ) : (\n            <Button\n              onClick={handleSubmit}\n              disabled={!validateStep(currentStep) || createCourseMutation.isPending}\n            >\n              {createCourseMutation.isPending ? 'Creating...' : 'Create Course'}\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24670},"server/scripts/populate-contest-participants.js":{"content":"const mongoose = require('mongoose');\nconst { Contest } = require('../models/Contest');\nconst { ContestParticipant } = require('../models/ContestParticipant');\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/codearena', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nasync function populateContestParticipants() {\n  try {\n    console.log('Starting population of contest participants...');\n    \n    // Get all contests\n    const contests = await Contest.find({}).lean();\n    console.log(`Found ${contests.length} contests`);\n    \n    let updatedContests = 0;\n    \n    for (const contest of contests) {\n      console.log(`Processing contest: ${contest.title} (${contest.id})`);\n      \n      // Get all participants for this contest\n      const participants = await ContestParticipant.find({ contestId: contest.id }).lean();\n      console.log(`  Found ${participants.length} participants`);\n      \n      if (participants.length > 0) {\n        // Extract user IDs from participants\n        const userIds = participants.map(p => p.userId);\n        \n        // Update the contest with the participants array\n        const result = await Contest.updateOne(\n          { id: contest.id },\n          { \n            $set: { \n              participants: userIds,\n              updatedAt: new Date()\n            }\n          }\n        );\n        \n        if (result.modifiedCount > 0) {\n          console.log(`  ✅ Updated contest with ${userIds.length} participants`);\n          updatedContests++;\n        } else {\n          console.log(`  ⚠️  Contest already had participants or no changes needed`);\n        }\n      } else {\n        console.log(`  ℹ️  No participants found for this contest`);\n      }\n    }\n    \n    console.log(`\\nPopulation completed!`);\n    console.log(`Total contests updated: ${updatedContests}`);\n    \n  } catch (error) {\n    console.error('Population failed:', error);\n  } finally {\n    mongoose.connection.close();\n    console.log('Database connection closed');\n  }\n}\n\n// Run population\npopulateContestParticipants(); ","size_bytes":2099},"client/src/components/RoleBasedRoute.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Redirect } from \"wouter\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: \"student\" | \"admin\";\n}\n\ninterface RoleBasedRouteProps {\n  component: React.ComponentType;\n  adminComponent: React.ComponentType;\n}\n\ninterface User {\n  role: string;\n  id: number;\n  name: string;\n  email: string;\n}\n\nexport function RoleBasedRoute({ component: Component, adminComponent: AdminComponent }: RoleBasedRouteProps) {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return user.role === \"admin\" ? <AdminComponent /> : <Component />;\n} ","size_bytes":943},"server/test-mongo.ts":{"content":"import mongoose from 'mongoose';\n\nconst MONGODB_URL = process.env.MONGODB_URL || \"mongodb+srv://bandarin29:meritcurve@meritcurve.73u7fr7.mongodb.net/meritcurve\";\n\nasync function testMongoConnection() {\n  try {\n    console.log('Attempting to connect to MongoDB...');\n    console.log('Connection URL:', MONGODB_URL.replace(/:[^:/@]+@/, ':****@')); // Hide password in logs\n    \n    const connection = await mongoose.connect(MONGODB_URL);\n    console.log('Successfully connected to MongoDB!');\n    \n    if (!connection.connection.db) {\n      throw new Error('Database connection not established');\n    }\n    \n    // Test database operations\n    const collections = await connection.connection.db.listCollections().toArray();\n    console.log('\\nAvailable collections:', collections.map(c => c.name));\n    \n    // Test creating a temporary document\n    const TestModel = mongoose.model('Test', new mongoose.Schema({\n      test: String,\n      timestamp: Date\n    }));\n    \n    const testDoc = await TestModel.create({\n      test: 'connection-test',\n      timestamp: new Date()\n    });\n    console.log('\\nSuccessfully created test document:', testDoc);\n    \n    // Clean up\n    await TestModel.deleteOne({ _id: testDoc._id });\n    console.log('Successfully deleted test document');\n    \n    await mongoose.disconnect();\n    console.log('\\nDisconnected from MongoDB');\n    \n  } catch (err) {\n    console.error('\\nMongoDB Connection Test Failed!');\n    const error = err as Error;\n    console.error('Error type:', error.constructor.name);\n    console.error('Error message:', error.message);\n    console.error('Stack trace:', error.stack);\n    process.exit(1);\n  }\n}\n\n// Run the test\nconsole.log('Starting MongoDB connection test...');\ntestMongoConnection().catch((err: unknown) => {\n  console.error('Unhandled error:', err instanceof Error ? err.message : String(err));\n  process.exit(1);\n}); ","size_bytes":1884},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/toaster.tsx":{"content":"import {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/components/ui/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":780},"execution-system/k8s/namespace.yaml":{"content":"apiVersion: v1\nkind: Namespace\nmetadata:\n  name: codearena-execution\n  labels:\n    name: codearena-execution\n    app.kubernetes.io/name: codearena-execution\n    app.kubernetes.io/version: \"1.0.0\" ","size_bytes":196},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { type Server } from \"http\";\nimport { nanoid } from \"nanoid\";\n\n// Create a custom logger\nconst logger = {\n  info: (msg: string) => console.log(msg),\n  warn: (msg: string) => console.warn(msg),\n  error: (msg: string, options?: { error?: Error }) => console.error(msg, options?.error || ''),\n  clearScreen: () => {},\n};\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true as const,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  // Dynamic import via variable to avoid TS resolving local './vite'\n  const viteSpecifier = 'vite';\n  const viteModule: any = await import(viteSpecifier as any);\n  const createViteServer: any = viteModule.createServer || (viteModule.default && viteModule.default.createServer);\n\n  // Load React plugin dynamically (optional)\n  let reactPlugin: any = undefined;\n  try {\n    const reactModule: any = await import('@vitejs/plugin-react');\n    reactPlugin = reactModule.default ? reactModule.default() : undefined;\n  } catch {\n    // proceed without plugin\n  }\n\n  const viteServer = await createViteServer({\n    // Prevent loading the root vite.config.js to avoid ESM/CJS ambiguity\n    configFile: false,\n    envFile: false,\n    // Serve from the client directory\n    root: path.resolve(process.cwd(), 'client'),\n    server: serverOptions,\n    appType: \"custom\",\n    logLevel: 'info',\n    resolve: {\n      alias: {\n        '@': path.resolve(process.cwd(), 'client', 'src'),\n      },\n    },\n    plugins: reactPlugin ? [reactPlugin] : [],\n  } as any);\n\n  app.use(viteServer.middlewares);\n\n  // Handle all routes for client-side routing\n  app.get(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    // Skip API routes\n    if (url.startsWith('/api')) {\n      return next();\n    }\n\n    try {\n      const clientTemplate = path.resolve(\n        process.cwd(),\n        \"client\",\n        \"index.html\",\n      );\n\n      // Always reload the index.html file from disk in case it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await viteServer.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      (viteServer as any).ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(process.cwd(), \"dist/public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // Handle all routes for client-side routing in production\n  // app.get(\"*\", (req, res, next) => {\n  //   // Skip API routes\n  //   if (req.path.startsWith('/api')) {\n  //     return next();\n  //   }\n  //   res.sendFile(path.resolve(distPath, \"index.html\"));\n  // });\n}\n","size_bytes":3384},"server/services/dockerExecutor.ts":{"content":"import { spawn } from 'child_process';\nimport { join } from 'path';\nimport { existsSync, mkdirSync, writeFileSync, unlinkSync } from 'fs';\nimport { randomBytes } from 'crypto';\n\n// Language configurations\nconst SUPPORTED_LANGUAGES = ['python', 'javascript', 'typescript', 'java', 'cpp', 'c'] as const;\ntype SupportedLanguage = typeof SUPPORTED_LANGUAGES[number];\n\nconst DOCKER_IMAGES: Record<SupportedLanguage, string> = {\n  python: 'codearena-python:latest',\n  javascript: 'codearena-javascript:latest',\n  typescript: 'codearena-javascript:latest', // Uses Node\n  java: 'codearena-java:latest',\n  cpp: 'codearena-cpp:latest',\n  c: 'codearena-c:latest'\n};\n\nconst FILE_EXTENSIONS: Record<SupportedLanguage, string> = {\n  python: '.py',\n  javascript: '.js',\n  typescript: '.ts',\n  java: '.java',\n  cpp: '.cpp',\n  c: '.c'\n};\n\nconst EXECUTION_COMMANDS: Record<SupportedLanguage, (filename: string) => string[]> = {\n  python: (filename: string) => ['python3', `/tmp/${filename}`],\n  javascript: (filename: string) => ['node', `/tmp/${filename}`],\n  typescript: (filename: string) => ['ts-node', `/tmp/${filename}`],\n  java: (filename: string) => {\n    const className = 'Solution';\n    return ['java', className];\n  },\n  cpp: (filename: string) => [`/tmp/${filename.replace('.cpp', '')}`],\n  c: (filename: string) => [`/tmp/${filename.replace('.c', '')}`]\n};\n\n// Execution result interface\ninterface DockerExecutionResult {\n  output: string;\n  runtime: number;\n  memory: number;\n  error?: string;\n  exitCode?: number;\n}\n\nexport class DockerExecutor {\n  private dockerPath: string | null = null;\n  private readonly MAX_OUTPUT_SIZE = 1024 * 1024; // 1MB\n  private readonly EXECUTION_TIMEOUT = 15000; // 15 seconds\n  private readonly MAX_CODE_SIZE = 64 * 1024; // 64KB\n\n  constructor() {\n    this.initializeDocker();\n  }\n\n  private async initializeDocker() {\n    try {\n      // Find Docker path\n      const isWindows = process.platform === 'win32';\n      this.dockerPath = isWindows ? 'docker.exe' : 'docker';\n    } catch (error) {\n      console.error('[DOCKER-EXECUTOR] Failed to initialize Docker:', error);\n      this.dockerPath = null;\n    }\n  }\n\n  private async isDockerAvailable(): Promise<boolean> {\n    if (!this.dockerPath) return false;\n    \n    try {\n      const docker = spawn(this.dockerPath, ['version']);\n      return new Promise((resolve) => {\n        docker.on('close', (code) => resolve(code === 0));\n      });\n    } catch {\n      return false;\n    }\n  }\n\n  async executeCode(code: string, language: string, input?: string): Promise<DockerExecutionResult> {\n    // Validate code size\n    if (code.length > this.MAX_CODE_SIZE) {\n      throw new Error(`Code size exceeds maximum limit of ${this.MAX_CODE_SIZE} bytes`);\n    }\n\n    // Check Docker availability\n    const dockerAvailable = await this.isDockerAvailable();\n    if (!dockerAvailable) {\n      throw new Error('Docker is not available. Please ensure Docker Desktop is installed and running.');\n    }\n\n    const normalizedLanguage = language.toLowerCase() as SupportedLanguage;\n    if (!SUPPORTED_LANGUAGES.includes(normalizedLanguage)) {\n      throw new Error(`Unsupported language: ${language}. Supported languages are: ${SUPPORTED_LANGUAGES.join(', ')}`);\n    }\n\n    const tempId = randomBytes(8).toString('hex');\n    const filename = `code_${tempId}${FILE_EXTENSIONS[normalizedLanguage]}`;\n    const inputFilename = input ? `input_${tempId}.txt` : undefined;\n\n    console.log(`[DOCKER-EXECUTOR] 📝 Creating temporary files: ${filename}`);\n\n    try {\n      // Setup temp directory\n      const tempDir = join(process.cwd(), 'temp');\n      if (!existsSync(tempDir)) {\n        mkdirSync(tempDir, { recursive: true });\n      }\n\n      // Write files\n      const codePath = join(tempDir, filename);\n      const inputPath = inputFilename ? join(tempDir, inputFilename) : null;\n      \n      writeFileSync(codePath, code);\n      if (input && inputPath) {\n        writeFileSync(inputPath, input);\n      }\n\n      console.log(`[DOCKER-EXECUTOR] 🚀 Executing in Docker container...`);\n      \n      const startTime = Date.now();\n      const result = await this.runInDocker(\n        normalizedLanguage, \n        filename, \n        inputFilename\n      );\n      const endTime = Date.now();\n\n      // Cleanup\n      try {\n        if (existsSync(codePath)) unlinkSync(codePath);\n        if (inputPath && existsSync(inputPath)) unlinkSync(inputPath);\n      } catch (cleanupError) {\n        console.warn('[DOCKER-EXECUTOR] Cleanup warning:', cleanupError);\n      }\n\n      console.log(`[DOCKER-EXECUTOR] ✅ Execution completed in ${endTime - startTime}ms`);\n      \n      return {\n        ...result,\n        runtime: endTime - startTime\n      };\n\n    } catch (error) {\n      console.error('[DOCKER-EXECUTOR] ❌ Execution failed:', error);\n      throw error;\n    }\n  }\n\n  private runInDocker(language: SupportedLanguage, filename: string, inputFilename?: string): Promise<DockerExecutionResult> {\n    return new Promise((resolve, reject) => {\n      const image = DOCKER_IMAGES[language];\n      const command = EXECUTION_COMMANDS[language](filename);\n      \n      if (!this.dockerPath) {\n        reject(new Error('Docker path not found'));\n        return;\n      }\n\n      // Enhanced security options with fixed tmp mount\n      const dockerArgs = [\n        'run',\n        '--rm',                                    // Remove container after execution\n        '--network=none',                          // No network access\n        '--memory=128m',                          // Memory limit\n        '--memory-swap=128m',                     // Swap limit\n        '--cpus=0.5',                             // CPU limit\n        '--pids-limit=64',                        // Process limit\n        '--ulimit', 'nofile=64:64',               // File descriptor limit\n        '--ulimit', 'nproc=32:32',                // Process limit\n        '--ulimit', 'fsize=1000000:1000000',      // File size limit (1MB)\n        '--user', '1000:1000',                    // Non-root user\n        '--read-only',                            // Read-only filesystem\n        '--security-opt=no-new-privileges',        // Prevent privilege escalation\n        '--cap-drop=ALL',                         // Drop all capabilities\n        '-v', `${join(process.cwd(), 'temp')}:/tmp:rw`, // Mount temp directory with write access\n        image\n      ];\n\n      // Add code file and input redirection\n      if (inputFilename) {\n        dockerArgs.push('sh', '-c', `${command.join(' ')} < /tmp/${inputFilename}`);\n      } else {\n        dockerArgs.push(...command);\n      }\n\n      console.log(`[DOCKER-EXECUTOR] Running command: ${this.dockerPath} ${dockerArgs.join(' ')}`);\n\n      let stdout = '';\n      let stderr = '';\n      let killed = false;\n\n      const docker = spawn(this.dockerPath, dockerArgs, {\n        stdio: ['pipe', 'pipe', 'pipe'],\n        timeout: this.EXECUTION_TIMEOUT\n      });\n\n      // Handle output streams\n      docker.stdout.on('data', (data) => {\n        if (stdout.length + data.length <= this.MAX_OUTPUT_SIZE) {\n          stdout += data;\n        } else if (!killed) {\n          killed = true;\n          docker.kill();\n          reject(new Error('Output size limit exceeded'));\n        }\n      });\n\n      docker.stderr.on('data', (data) => {\n        if (stderr.length + data.length <= this.MAX_OUTPUT_SIZE) {\n          stderr += data;\n        }\n      });\n\n      // Handle process exit\n      docker.on('close', (code) => {\n        if (killed) return;\n\n        resolve({\n          output: stdout,\n          error: stderr || undefined,\n          exitCode: code || 0,\n          memory: 0, // Memory usage tracking to be implemented\n          runtime: 0 // Runtime will be calculated by the caller\n        });\n      });\n\n      // Handle errors\n      docker.on('error', (error) => {\n        if (!killed) {\n          reject(new Error(`Docker execution failed: ${error.message}`));\n        }\n      });\n\n      // Set timeout\n      setTimeout(() => {\n        if (!killed) {\n          killed = true;\n          docker.kill();\n          reject(new Error('Execution timeout'));\n        }\n      }, this.EXECUTION_TIMEOUT);\n    });\n  }\n}\n\nexport const dockerExecutor = new DockerExecutor(); ","size_bytes":8214},"server/test-enrollment-types.js":{"content":"// Test script for enrollment type tracking\nconst mongoose = require('mongoose');\nconst { ProblemSetEnrollment } = require('./models/ProblemSetEnrollment');\nconst { CourseEnrollment } = require('./models/CourseEnrollment');\nconst { ContestParticipant } = require('./models/ContestParticipant');\n\nasync function testEnrollmentTypes() {\n  console.log('🧪 Testing Enrollment Type Tracking...\\n');\n\n  try {\n    // Test 1: Problem Set Enrollment Types\n    console.log('1. Testing Problem Set Enrollment Types...');\n    \n    // Create test enrollments with different types\n    const testProblemSetEnrollments = [\n      {\n        id: 999999,\n        problemSetId: 'test-ps-1',\n        userId: new mongoose.Types.ObjectId(),\n        enrolledAt: new Date(),\n        progress: 0,\n        completedProblems: [],\n        totalSubmissions: 0,\n        correctSubmissions: 0,\n        enrollmentType: 'admin'\n      },\n      {\n        id: 999998,\n        problemSetId: 'test-ps-2',\n        userId: new mongoose.Types.ObjectId(),\n        enrolledAt: new Date(),\n        progress: 0,\n        completedProblems: [],\n        totalSubmissions: 0,\n        correctSubmissions: 0,\n        enrollmentType: 'qr'\n      }\n    ];\n\n    // Clean up any existing test enrollments\n    await ProblemSetEnrollment.deleteMany({ id: { $in: [999999, 999998] } });\n    \n    // Create test enrollments\n    const createdPSEnrollments = await ProblemSetEnrollment.create(testProblemSetEnrollments);\n    console.log(`   Created ${createdPSEnrollments.length} test problem set enrollments`);\n    \n    // Verify enrollment types\n    for (const enrollment of createdPSEnrollments) {\n      console.log(`   Problem Set Enrollment ID ${enrollment.id}: ${enrollment.enrollmentType}`);\n    }\n    \n    // Clean up\n    await ProblemSetEnrollment.deleteMany({ id: { $in: [999999, 999998] } });\n    console.log('   ✅ Problem Set enrollment types test passed!\\n');\n\n    // Test 2: Course Enrollment Types\n    console.log('2. Testing Course Enrollment Types...');\n    \n    const testCourseEnrollments = [\n      {\n        id: 999999,\n        courseId: 999999,\n        userId: new mongoose.Types.ObjectId(),\n        completedModules: [],\n        progress: 0,\n        enrolledAt: new Date(),\n        lastAccessedAt: new Date(),\n        enrollmentType: 'admin'\n      },\n      {\n        id: 999998,\n        courseId: 999998,\n        userId: new mongoose.Types.ObjectId(),\n        completedModules: [],\n        progress: 0,\n        enrolledAt: new Date(),\n        lastAccessedAt: new Date(),\n        enrollmentType: 'qr'\n      }\n    ];\n\n    // Clean up any existing test enrollments\n    await CourseEnrollment.deleteMany({ id: { $in: [999999, 999998] } });\n    \n    // Create test enrollments\n    const createdCourseEnrollments = await CourseEnrollment.create(testCourseEnrollments);\n    console.log(`   Created ${createdCourseEnrollments.length} test course enrollments`);\n    \n    // Verify enrollment types\n    for (const enrollment of createdCourseEnrollments) {\n      console.log(`   Course Enrollment ID ${enrollment.id}: ${enrollment.enrollmentType}`);\n    }\n    \n    // Clean up\n    await CourseEnrollment.deleteMany({ id: { $in: [999999, 999998] } });\n    console.log('   ✅ Course enrollment types test passed!\\n');\n\n    // Test 3: Contest Participant Types\n    console.log('3. Testing Contest Participant Types...');\n    \n    const testContestParticipants = [\n      {\n        id: 'test-contest-1',\n        contestId: 'test-contest-1',\n        userId: 'test-user-1',\n        registrationTime: new Date(),\n        totalScore: 0,\n        totalPenalty: 0,\n        submissions: [],\n        problemsAttempted: [],\n        problemsSolved: [],\n        isDisqualified: false,\n        enrollmentType: 'admin'\n      },\n      {\n        id: 'test-contest-2',\n        contestId: 'test-contest-2',\n        userId: 'test-user-2',\n        registrationTime: new Date(),\n        totalScore: 0,\n        totalPenalty: 0,\n        submissions: [],\n        problemsAttempted: [],\n        problemsSolved: [],\n        isDisqualified: false,\n        enrollmentType: 'qr'\n      }\n    ];\n\n    // Clean up any existing test participants\n    await ContestParticipant.deleteMany({ id: { $in: ['test-contest-1', 'test-contest-2'] } });\n    \n    // Create test participants\n    const createdContestParticipants = await ContestParticipant.create(testContestParticipants);\n    console.log(`   Created ${createdContestParticipants.length} test contest participants`);\n    \n    // Verify enrollment types\n    for (const participant of createdContestParticipants) {\n      console.log(`   Contest Participant ID ${participant.id}: ${participant.enrollmentType}`);\n    }\n    \n    // Clean up\n    await ContestParticipant.deleteMany({ id: { $in: ['test-contest-1', 'test-contest-2'] } });\n    console.log('   ✅ Contest participant types test passed!\\n');\n\n    // Test 4: Schema Validation\n    console.log('4. Testing Schema Validation...');\n    \n    try {\n      // Test invalid enrollment type\n      const invalidEnrollment = new ProblemSetEnrollment({\n        id: 999997,\n        problemSetId: 'test-ps-3',\n        userId: new mongoose.Types.ObjectId(),\n        enrolledAt: new Date(),\n        progress: 0,\n        completedProblems: [],\n        totalSubmissions: 0,\n        correctSubmissions: 0,\n        enrollmentType: 'invalid_type' // This should fail validation\n      });\n      \n      await invalidEnrollment.save();\n      console.log('   ❌ Invalid enrollment type was accepted (this should not happen)');\n    } catch (error) {\n      if (error.name === 'ValidationError') {\n        console.log('   ✅ Schema validation working correctly - invalid enrollment type rejected');\n      } else {\n        console.log('   ❌ Unexpected error during validation test:', error.message);\n      }\n    }\n\n    console.log('\\n🎉 All enrollment type tests completed successfully!');\n    console.log('\\n📋 Summary:');\n    console.log('   - Problem Set enrollment types: ✅');\n    console.log('   - Course enrollment types: ✅');\n    console.log('   - Contest participant types: ✅');\n    console.log('   - Schema validation: ✅');\n    console.log('\\n🔒 Enrollment types are now being tracked:');\n    console.log('   - \"admin\": When admins add users via add button');\n    console.log('   - \"qr\": When students enroll via QR code or link');\n    \n  } catch (error) {\n    console.error('❌ Test failed:', error.message);\n    console.error('Stack trace:', error.stack);\n  }\n}\n\n// Run the test\ntestEnrollmentTypes(); ","size_bytes":6527},"client/src/pages/admin/ProblemSetManagement.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { Plus, Search, Book, Clock, Users, Edit, Trash2, Settings, Eye } from 'lucide-react';\nimport * as z from 'zod';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocation } from 'wouter';\n\ninterface ProblemSet {\n  _id?: string; // MongoDB ObjectId\n  id: string;\n  title: string;\n  description: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n  category: string;\n  problemInstances?: Array<{\n    id: string;\n    title: string;\n    difficulty: string;\n    originalProblemId: number;\n    order: number;\n    isCustomized: boolean;\n    lastModified: string;\n    modifiedBy: string;\n  }>;\n  totalProblems?: number;\n  estimatedTime: number; // in minutes\n  tags: string[];\n  createdAt: string;\n  updatedAt: string;\n  enrollmentCount?: number; // Added for enrolled users count\n}\n\nconst problemSetSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().min(1, 'Description is required'),\n  difficulty: z.enum(['easy', 'medium', 'hard']),\n  category: z.string().min(1, 'Category is required'),\n  estimatedTime: z.number().min(1, 'Estimated time is required'),\n  tags: z.array(z.string()).default([]),\n});\n\nexport default function ProblemSetManagement() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [difficultyFilter, setDifficultyFilter] = useState<'all' | 'easy' | 'medium' | 'hard'>('all');\n  const [categoryFilter, setCategoryFilter] = useState('all');\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingProblemSet, setEditingProblemSet] = useState<ProblemSet | null>(null);\n  const { toast } = useToast();\n  const [deleteTarget, setDeleteTarget] = useState<ProblemSet | null>(null);\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const form = useForm<z.infer<typeof problemSetSchema>>({\n    resolver: zodResolver(problemSetSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      difficulty: 'easy',\n      category: 'Data Structures & Algorithms',\n      estimatedTime: 60,\n      tags: [],\n    },\n  });\n\n  // Fetch problem sets\n  const { data: problemSets, isLoading } = useQuery<ProblemSet[]>({\n    queryKey: ['/api/admin/problem-sets'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/problem-sets', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch problem sets');\n      return response.json();\n    },\n  });\n\n  // Create problem set mutation\n  const createProblemSetMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof problemSetSchema>) => {\n      const response = await fetch('/api/admin/problem-sets', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create problem set');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/problem-sets'] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: 'Success',\n        description: 'Problem set created successfully',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update problem set mutation\n  const updateProblemSetMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: z.infer<typeof problemSetSchema> }) => {\n      const response = await fetch(`/api/admin/problem-sets/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        let message = 'Failed to update problem set';\n        try {\n          const err = await response.json();\n          message = err.message || message;\n        } catch {}\n        throw new Error(message);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/problem-sets'] });\n      setIsCreateDialogOpen(false);\n      setEditingProblemSet(null);\n      form.reset();\n      toast({\n        title: 'Success',\n        description: 'Problem set updated successfully',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete problem set mutation\n  const deleteProblemSetMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/admin/problem-sets/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to delete problem set');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/problem-sets'] });\n      toast({\n        title: 'Success',\n        description: 'Problem set deleted successfully',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof problemSetSchema>) => {\n    if (editingProblemSet) {\n      // Use the string 'id' field for update route; do not use Mongo _id\n      const id = editingProblemSet.id;\n      updateProblemSetMutation.mutate({ id, data });\n    } else {\n      createProblemSetMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (problemSet: ProblemSet) => {\n    setEditingProblemSet(problemSet);\n    form.reset({\n      title: problemSet.title,\n      description: problemSet.description,\n      difficulty: problemSet.difficulty,\n      category: problemSet.category,\n      estimatedTime: problemSet.estimatedTime,\n      tags: problemSet.tags,\n    });\n    setIsCreateDialogOpen(true);\n  };\n\n  const handleManageEnrollments = (problemSet: ProblemSet) => {\n    // Use MongoDB ObjectId (_id) if available, otherwise fall back to custom id\n    const problemSetId = problemSet._id || problemSet.id;\n    setLocation(`/admin/problem-sets/${problemSetId}/enrollments`);\n  };\n\n  const handleIsolatedProblemManagement = (problemSet: ProblemSet) => {\n    setLocation(`/admin/problem-sets/${problemSet.id}/problems`);\n  };\n\n  const filteredProblemSets = problemSets?.filter(problemSet => {\n    const matchesSearch = problemSet.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         problemSet.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDifficulty = difficultyFilter === 'all' || problemSet.difficulty === difficultyFilter;\n    const matchesCategory = categoryFilter === 'all' || problemSet.category === categoryFilter;\n    return matchesSearch && matchesDifficulty && matchesCategory;\n  }) || [];\n\n  const getDifficultyStats = () => {\n    if (!problemSets) return { easy: 0, medium: 0, hard: 0, total: 0 };\n    \n    const stats = problemSets.reduce((acc, problemSet) => {\n      acc[problemSet.difficulty]++;\n      acc.total++;\n      return acc;\n    }, { easy: 0, medium: 0, hard: 0, total: 0 });\n    \n    return stats;\n  };\n\n  const stats = getDifficultyStats();\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading problem sets...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          Manage Problem Sets\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Create and manage curated collections of programming challenges.\n        </p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Sets</p>\n                <p className=\"text-2xl font-bold\">{stats.total}</p>\n              </div>\n              <Book className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Easy Sets</p>\n                <p className=\"text-2xl font-bold\">{stats.easy}</p>\n              </div>\n              <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Easy</Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Medium Sets</p>\n                <p className=\"text-2xl font-bold\">{stats.medium}</p>\n              </div>\n              <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">Medium</Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Hard Sets</p>\n                <p className=\"text-2xl font-bold\">{stats.hard}</p>\n              </div>\n              <Badge variant=\"destructive\" className=\"bg-red-100 text-red-800\">Hard</Badge>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Search problem sets...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <Select value={difficultyFilter} onValueChange={(value: any) => setDifficultyFilter(value)}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"All Difficulties\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Difficulties</SelectItem>\n            <SelectItem value=\"easy\">Easy</SelectItem>\n            <SelectItem value=\"medium\">Medium</SelectItem>\n            <SelectItem value=\"hard\">Hard</SelectItem>\n          </SelectContent>\n        </Select>\n        <Select value={categoryFilter} onValueChange={(value: any) => setCategoryFilter(value)}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"All Categories\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Categories</SelectItem>\n            <SelectItem value=\"Data Structures & Algorithms\">Data Structures & Algorithms</SelectItem>\n            <SelectItem value=\"Dynamic Programming\">Dynamic Programming</SelectItem>\n            <SelectItem value=\"Graph Theory\">Graph Theory</SelectItem>\n            <SelectItem value=\"String Processing\">String Processing</SelectItem>\n          </SelectContent>\n        </Select>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Problem Set\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>{editingProblemSet ? 'Edit Problem Set' : 'Create New Problem Set'}</DialogTitle>\n              <DialogDescription>\n                {editingProblemSet \n                  ? 'Update the problem set details and configuration.' \n                  : 'Create a new curated collection of programming challenges.'\n                }\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter problem set title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Enter problem set description\"\n                          className=\"min-h-[100px]\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"difficulty\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Difficulty</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select difficulty\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"easy\">Easy</SelectItem>\n                            <SelectItem value=\"medium\">Medium</SelectItem>\n                            <SelectItem value=\"hard\">Hard</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Enter category\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"estimatedTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Estimated Time (minutes)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          {...field}\n                          onChange={e => field.onChange(parseInt(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setIsCreateDialogOpen(false);\n                      setEditingProblemSet(null);\n                      form.reset();\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createProblemSetMutation.isPending || updateProblemSetMutation.isPending}>\n                    {editingProblemSet\n                      ? (updateProblemSetMutation.isPending ? 'Updating...' : 'Update Problem Set')\n                      : (createProblemSetMutation.isPending ? 'Creating...' : 'Create Problem Set')\n                    }\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Problem Sets Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredProblemSets.map((problemSet) => (\n          <Card key={problemSet.id} className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex-1\">\n                  <CardTitle className=\"text-lg mb-2\">{problemSet.title}</CardTitle>\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Badge \n                      variant={problemSet.difficulty === 'easy' ? 'default' : \n                               problemSet.difficulty === 'medium' ? 'secondary' : 'destructive'}\n                      className={problemSet.difficulty === 'easy' ? 'bg-green-100 text-green-800' :\n                               problemSet.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                               'bg-red-100 text-red-800'}\n                    >\n                      {problemSet.difficulty}\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"text-gray-600\">\n                      {problemSet.category}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <CardDescription className=\"mb-4 line-clamp-2\">\n                {problemSet.description}\n              </CardDescription>\n              \n              <div className=\"space-y-2 mb-4\">\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <Book className=\"h-4 w-4 mr-2\" />\n                  {problemSet.problemInstances?.length || problemSet.totalProblems || 0} problems\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  {problemSet.estimatedTime}min\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  {problemSet.enrollmentCount !== undefined ? `${problemSet.enrollmentCount} enrolled users` : (problemSet.tags?.join(', ') || 'No tags')}\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 mb-3\">\n                <Button\n                  onClick={() => setLocation(`/admin/problem-sets/${problemSet.id}/problems`)}\n                  className=\"flex-1\"\n                  size=\"sm\"\n                >\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  View Problems\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleEdit(problemSet)}\n                >\n                  <Edit className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setDeleteTarget(problemSet)}\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              {/* Management Buttons */}\n              <div className=\"space-y-1\">\n                <Button\n                  variant=\"secondary\" \n                  className=\"w-full\"\n                  size=\"sm\"\n                  onClick={() => setLocation(`/admin/problem-sets/${problemSet.id}`)}\n                >\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Manage Enrollments for \"{problemSet.title}\"\n                </Button>\n                <Button\n                  variant=\"outline\" \n                  className=\"w-full bg-orange-50 hover:bg-orange-100 border-orange-200\"\n                  size=\"sm\"\n                  onClick={() => setLocation(`/admin/problem-sets/${problemSet.id}/problems`)}\n                >\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Isolated Problem Management\n                </Button>\n              </div>\n\n\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredProblemSets.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Book className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No problem sets found</h3>\n          <p className=\"text-gray-600\">\n            {searchTerm || difficultyFilter !== 'all' || categoryFilter !== 'all'\n              ? 'Try adjusting your search or filters'\n              : 'No problem sets are available at the moment'}\n          </p>\n        </div>\n      )}\n\n      {/* Delete confirmation dialog */}\n      <AlertDialog open={!!deleteTarget} onOpenChange={(open) => { if (!open) setDeleteTarget(null); }}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete problem set?</AlertDialogTitle>\n            <AlertDialogDescription>\n              {deleteTarget ? `Are you sure you want to delete \"${deleteTarget.title}\"? This action cannot be undone.` : ''}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={async () => {\n                if (!deleteTarget) return;\n                try {\n                  await deleteProblemSetMutation.mutateAsync(deleteTarget.id);\n                  setDeleteTarget(null);\n                } catch {\n                  // toast already handled in mutation onError\n                }\n              }}\n              className=\"bg-red-500 hover:bg-red-600\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n} ","size_bytes":24021},"client/src/components/NavigationHeader.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Bell, Moon, Sun, Code } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { UserAvatar } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"./ThemeProvider\";\nimport lightLogo from \"../assests/light_logo.png\";\nimport lightName from \"../assests/light_name.png\";\nimport darkLogo from \"../assests/dark_logo.png\";\nimport darkName from \"../assests/dark_name.png\";\n\nconst navigationItems = [\n  { path: \"/\", label: \"Dashboard\", exact: true },\n  { path: \"/problems\", label: \"Problems\" },\n  { path: \"/contests\", label: \"Contests\" },\n  { path: \"/leaderboard\", label: \"Leaderboard\" },\n];\n\nexport function NavigationHeader() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n\n  const isActiveLink = (path: string, exact = false) => {\n    if (exact) {\n      return location === path;\n    }\n    return location.startsWith(path);\n  };\n\n  return (\n    <nav className=\"bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50 shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo and Brand */}\n          <div className=\"flex items-center space-x-8\">\n            <Link href=\"/\" className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2\">\n                <img src={lightLogo} alt=\"CodeArena logo\" className=\"h-10 w-auto dark:hidden\" />\n                <img src={darkLogo} alt=\"CodeArena logo\" className=\"h-10 w-auto hidden dark:block\" />\n                <img src={lightName} alt=\"CodeArena\" className=\"h-8 w-auto dark:hidden\" />\n                <img src={darkName} alt=\"CodeArena\" className=\"h-9 w-auto hidden dark:block\" />\n              </div>\n            </Link>\n            \n            {/* Navigation Links */}\n            <div className=\"hidden md:flex space-x-8\">\n              {navigationItems.map((item) => (\n                <Link\n                  key={item.path}\n                  href={item.path}\n                  className={`transition-colors pb-4 -mb-px ${\n                    isActiveLink(item.path, item.exact)\n                      ? \"text-green-600 font-medium border-b-2 border-green-600\"\n                      : \"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white\"\n                  }`}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          {/* User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            {/* <Button variant=\"ghost\" size=\"sm\">\n              <Bell className=\"h-4 w-4\" />\n            </Button> */}\n            \n            {/* <Button variant=\"ghost\" size=\"sm\" onClick={toggleTheme}>\n              {theme === \"dark\" ? (\n                <Sun className=\"h-4 w-4\" />\n              ) : (\n                <Moon className=\"h-4 w-4\" />\n              )}\n            </Button> */}\n            \n            {user && (\n              <div className=\"flex items-center space-x-3\">\n                <UserAvatar user={user} size=\"sm\" />\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white hidden sm:block\">\n                  {user.firstName ? `${user.firstName} ${user.lastName || \"\"}`.trim() : user.email}\n                </span>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => window.location.href = \"/api/logout\"}\n                  className=\"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white\"\n                >\n                  Logout\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3895},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"execution-system/monitoring/prometheus.yaml":{"content":"---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-config\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: monitoring\ndata:\n  prometheus.yml: |\n    global:\n      scrape_interval: 15s\n      evaluation_interval: 15s\n      external_labels:\n        cluster: 'codearena-execution'\n        \n    rule_files:\n      - \"/etc/prometheus/rules/*.yml\"\n    \n    alerting:\n      alertmanagers:\n        - static_configs:\n            - targets:\n              - alertmanager:9093\n    \n    scrape_configs:\n      # Prometheus itself\n      - job_name: 'prometheus'\n        static_configs:\n          - targets: ['localhost:9090']\n      \n      # Execution API\n      - job_name: 'execution-api'\n        kubernetes_sd_configs:\n          - role: endpoints\n            namespaces:\n              names:\n                - codearena-execution\n        relabel_configs:\n          - source_labels: [__meta_kubernetes_service_name]\n            action: keep\n            regex: execution-api-headless\n          - source_labels: [__meta_kubernetes_endpoint_port_name]\n            action: keep\n            regex: metrics\n          - source_labels: [__meta_kubernetes_pod_name]\n            target_label: instance\n          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]\n            target_label: component\n        metrics_path: /metrics\n        scrape_interval: 10s\n        \n      # Execution Workers\n      - job_name: 'execution-worker'\n        kubernetes_sd_configs:\n          - role: endpoints\n            namespaces:\n              names:\n                - codearena-execution\n        relabel_configs:\n          - source_labels: [__meta_kubernetes_service_name]\n            action: keep\n            regex: execution-worker-headless\n          - source_labels: [__meta_kubernetes_endpoint_port_name]\n            action: keep\n            regex: metrics\n          - source_labels: [__meta_kubernetes_pod_name]\n            target_label: instance\n          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]\n            target_label: component\n        metrics_path: /metrics\n        scrape_interval: 10s\n        \n      # Redis\n      - job_name: 'redis'\n        static_configs:\n          - targets: ['redis-service:6379']\n        metrics_path: /metrics\n        scrape_interval: 30s\n        \n      # Kubernetes API Server\n      - job_name: 'kubernetes-apiservers'\n        kubernetes_sd_configs:\n          - role: endpoints\n        scheme: https\n        tls_config:\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n          insecure_skip_verify: true\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n        relabel_configs:\n          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n            action: keep\n            regex: default;kubernetes;https\n        \n      # Kubernetes Nodes\n      - job_name: 'kubernetes-nodes'\n        kubernetes_sd_configs:\n          - role: node\n        scheme: https\n        tls_config:\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n          insecure_skip_verify: true\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n        relabel_configs:\n          - action: labelmap\n            regex: __meta_kubernetes_node_label_(.+)\n          - target_label: __address__\n            replacement: kubernetes.default.svc:443\n          - source_labels: [__meta_kubernetes_node_name]\n            regex: (.+)\n            target_label: __metrics_path__\n            replacement: /api/v1/nodes/${1}/proxy/metrics\n            \n      # Container Metrics (cAdvisor)\n      - job_name: 'kubernetes-cadvisor'\n        kubernetes_sd_configs:\n          - role: node\n        scheme: https\n        tls_config:\n          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n          insecure_skip_verify: true\n        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n        relabel_configs:\n          - action: labelmap\n            regex: __meta_kubernetes_node_label_(.+)\n          - target_label: __address__\n            replacement: kubernetes.default.svc:443\n          - source_labels: [__meta_kubernetes_node_name]\n            regex: (.+)\n            target_label: __metrics_path__\n            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor\n            \n  rules.yml: |\n    groups:\n      - name: execution-system.rules\n        rules:\n          # API Metrics\n          - record: api:request_rate\n            expr: rate(http_requests_total[5m])\n            \n          - record: api:request_duration_99p\n            expr: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m]))\n            \n          - record: api:error_rate\n            expr: rate(http_requests_total{status=~\"5..\"}[5m]) / rate(http_requests_total[5m])\n            \n          # Worker Metrics\n          - record: worker:job_processing_rate\n            expr: rate(jobs_processed_total[5m])\n            \n          - record: worker:job_duration_99p\n            expr: histogram_quantile(0.99, rate(job_duration_seconds_bucket[5m]))\n            \n          - record: worker:active_jobs\n            expr: jobs_active\n            \n          # Queue Metrics\n          - record: queue:depth\n            expr: redis_queue_length\n            \n          - record: queue:wait_time_99p\n            expr: histogram_quantile(0.99, rate(queue_wait_time_seconds_bucket[5m]))\n\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: prometheus-alerts\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: monitoring\ndata:\n  alerts.yml: |\n    groups:\n      - name: execution-system.alerts\n        rules:\n          # High Error Rate\n          - alert: HighAPIErrorRate\n            expr: api:error_rate > 0.05\n            for: 5m\n            labels:\n              severity: warning\n            annotations:\n              summary: \"High API error rate detected\"\n              description: \"API error rate is {{ $value }}% for the last 5 minutes\"\n              \n          # High Response Time\n          - alert: HighAPILatency\n            expr: api:request_duration_99p > 2.0\n            for: 5m\n            labels:\n              severity: warning\n            annotations:\n              summary: \"High API latency detected\"\n              description: \"99th percentile API latency is {{ $value }}s\"\n              \n          # Queue Depth\n          - alert: HighQueueDepth\n            expr: queue:depth > 100\n            for: 2m\n            labels:\n              severity: warning\n            annotations:\n              summary: \"High queue depth detected\"\n              description: \"Queue depth is {{ $value }} jobs\"\n              \n          # Worker Health\n          - alert: WorkerDown\n            expr: up{job=\"execution-worker\"} == 0\n            for: 1m\n            labels:\n              severity: critical\n            annotations:\n              summary: \"Worker instance is down\"\n              description: \"Worker {{ $labels.instance }} has been down for more than 1 minute\"\n              \n          # API Health\n          - alert: APIDown\n            expr: up{job=\"execution-api\"} == 0\n            for: 1m\n            labels:\n              severity: critical\n            annotations:\n              summary: \"API instance is down\"\n              description: \"API {{ $labels.instance }} has been down for more than 1 minute\"\n              \n          # Redis Health\n          - alert: RedisDown\n            expr: up{job=\"redis\"} == 0\n            for: 1m\n            labels:\n              severity: critical\n            annotations:\n              summary: \"Redis is down\"\n              description: \"Redis has been down for more than 1 minute\"\n              \n          # Resource Usage\n          - alert: HighMemoryUsage\n            expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) > 0.9\n            for: 5m\n            labels:\n              severity: warning\n            annotations:\n              summary: \"High memory usage detected\"\n              description: \"Container {{ $labels.container }} is using {{ $value }}% of available memory\"\n              \n          - alert: HighCPUUsage\n            expr: rate(container_cpu_usage_seconds_total[5m]) > 0.8\n            for: 5m\n            labels:\n              severity: warning\n            annotations:\n              summary: \"High CPU usage detected\"\n              description: \"Container {{ $labels.container }} is using {{ $value }}% of available CPU\"\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: monitoring\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: prometheus\n      app.kubernetes.io/component: monitoring\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: prometheus\n        app.kubernetes.io/component: monitoring\n    spec:\n      serviceAccountName: prometheus\n      containers:\n      - name: prometheus\n        image: prom/prometheus:v2.45.0\n        args:\n          - '--config.file=/etc/prometheus/prometheus.yml'\n          - '--storage.tsdb.path=/prometheus/'\n          - '--web.console.libraries=/etc/prometheus/console_libraries'\n          - '--web.console.templates=/etc/prometheus/consoles'\n          - '--storage.tsdb.retention.time=30d'\n          - '--web.enable-lifecycle'\n          - '--web.enable-admin-api'\n        ports:\n        - containerPort: 9090\n          name: prometheus\n        volumeMounts:\n        - name: prometheus-config\n          mountPath: /etc/prometheus/\n        - name: prometheus-alerts\n          mountPath: /etc/prometheus/rules/\n        - name: prometheus-storage\n          mountPath: /prometheus/\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /-/healthy\n            port: prometheus\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /-/ready\n            port: prometheus\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: prometheus-config\n        configMap:\n          name: prometheus-config\n      - name: prometheus-alerts\n        configMap:\n          name: prometheus-alerts\n      - name: prometheus-storage\n        persistentVolumeClaim:\n          claimName: prometheus-pvc\n\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: prometheus-pvc\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: monitoring\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: fast-ssd\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: prometheus-service\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: monitoring\nspec:\n  type: ClusterIP\n  ports:\n  - port: 9090\n    targetPort: prometheus\n    protocol: TCP\n    name: prometheus\n  selector:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: monitoring\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: prometheus\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: monitoring\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: prometheus\n  labels:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: monitoring\nrules:\n- apiGroups: [\"\"]\n  resources:\n  - nodes\n  - nodes/proxy\n  - services\n  - endpoints\n  - pods\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups:\n  - extensions\n  resources:\n  - ingresses\n  verbs: [\"get\", \"list\", \"watch\"]\n- nonResourceURLs: [\"/metrics\"]\n  verbs: [\"get\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: prometheus\n  labels:\n    app.kubernetes.io/name: prometheus\n    app.kubernetes.io/component: monitoring\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: prometheus\nsubjects:\n- kind: ServiceAccount\n  name: prometheus\n  namespace: codearena-execution ","size_bytes":12461},"client/src/services/problemService.ts":{"content":"import { apiClient } from '@/lib/apiClient';\n\nexport interface Example {\n  input: string;\n  output: string;\n  explanation?: string;\n}\n\nexport interface TestCase {\n  input: string;\n  expectedOutput: string;\n  isHidden: boolean;\n}\n\nexport interface StarterCode {\n  python?: string;\n  javascript?: string;\n  cpp?: string;\n  java?: string;\n  c?: string;\n  [lang: string]: string | undefined;\n}\n\nexport interface Problem {\n  id: number | string;\n  title: string;\n  description: string;\n  difficulty: string;\n  category?: string;\n  tags: string[];\n  constraints: string;\n  inputFormat: string;\n  outputFormat: string;\n  examples: Example[];\n  testCases: TestCase[];\n  timeLimit: number;\n  memoryLimit: number;\n  starterCode: StarterCode;\n  problemNumber?: number;\n}\n\nexport interface RunCodeResponse {\n  // Simple run response\n  output?: string;\n  runtime?: number;\n  memory?: number;\n  error?: string;\n  // Extended response used by problem-detail page\n  success?: boolean;\n  status?: string;\n  results?: any[];\n  message?: string;\n}\n\nexport const problemService = {\n  list: () => apiClient.get<Problem[]>('/api/problems'),\n  get: (id: string | number) => apiClient.get<Problem>(`/api/problems/${id}`),\n  run: (payload: { code: string; language: string; problemId?: number | string; timeLimit?: number; memoryLimit?: number; }) =>\n    apiClient.post<RunCodeResponse>('/api/problems/run', payload),\n}; ","size_bytes":1396},"server/models/ContestSubmission.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface IContestSubmission {\n  id: string;\n  contestId: string;\n  problemId: string;\n  userId: string;\n  code: string;\n  language: string;\n  status: string;\n  points?: number;\n  runtime?: number;\n  memory?: number;\n  submissionTime: Date;\n  penalty: number;\n  isContestSubmission: boolean;\n}\n\ninterface IContestSubmissionDocument extends Omit<IContestSubmission, 'id'>, Document {\n  id: string;\n}\n\nconst contestSubmissionSchema = new mongoose.Schema<IContestSubmissionDocument>({\n  id: { type: String, required: true, unique: true, index: true },\n  contestId: { type: String, required: true, index: true },\n  problemId: { type: String, required: true },\n  userId: { type: String, required: true, index: true },\n  code: { type: String, required: true },\n  language: { type: String, required: true },\n  status: { type: String, required: true },\n  points: { type: Number, default: 0 },\n  runtime: { type: Number },\n  memory: { type: Number },\n  submissionTime: { type: Date, default: Date.now },\n  penalty: { type: Number, default: 0 },\n  isContestSubmission: { type: Boolean, default: true },\n}, { timestamps: true });\n\ncontestSubmissionSchema.index({ contestId: 1, userId: 1, submissionTime: -1 });\n\nexport const ContestSubmission = mongoose.model<IContestSubmissionDocument>('ContestSubmission', contestSubmissionSchema); ","size_bytes":1379},"server/services/gmailService.ts":{"content":"import { google } from 'googleapis';\nimport { getCurrentGmailConfig, GMAIL_SCOPES } from '../config/gmail';\n\nexport class GmailService {\n  private gmail: any;\n  private config: any;\n\n  constructor() {\n    this.config = getCurrentGmailConfig();\n    this.initializeGmailAPI();\n  }\n\n  private initializeGmailAPI() {\n    try {\n      // *** START DEBUG SECTION ***\n      console.log('[DEBUG] Gmail API Credentials from .env:');\n      console.log('CLIENT_ID:', this.config.clientId);\n      console.log('CLIENT_SECRET:', this.config.clientSecret);\n      console.log('REFRESH_TOKEN:', this.config.refreshToken);\n      console.log('USER_EMAIL:', this.config.userEmail);\n      // *** END DEBUG SECTION ***\n\n      // Create OAuth2 client\n      const oauth2Client = new google.auth.OAuth2(\n        this.config.clientId,\n        this.config.clientSecret,\n        // *** CRITICAL CHANGE: Use the correct redirect URI for web applications ***\n        // This URI must be registered in the Google Cloud Console.\n        // It's typically the one used for the OAuth Playground to get a refresh token.\n        'https://developers.google.com/oauthplayground' \n      );\n\n      // Set credentials using refresh token\n      oauth2Client.setCredentials({\n        refresh_token: this.config.refreshToken\n      });\n\n      // Create Gmail API client\n      this.gmail = google.gmail({ version: 'v1', auth: oauth2Client });\n      \n      console.log('📧 Gmail API Service initialized successfully');\n      console.log(`📧 Using email: ${this.config.userEmail}`);\n    } catch (error) {\n      console.error('❌ Failed to initialize Gmail API:', error);\n      throw error;\n    }\n  }\n\n  // Generate beautiful HTML email template (same as before)\n  private generateOTPEmailTemplate(otp: string, userName: string): string {\n    return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify your CodeArena password reset</title>\n        <style>\n      body {\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n        margin: 0;\n        padding: 0;\n        background-color: #f8fafc;\n        color: #1e293b;\n      }\n      .container {\n        max-width: 600px;\n        margin: 0 auto;\n        padding: 20px;\n      }\n      .email-card {\n        background: white;\n        border-radius: 16px;\n        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n        overflow: hidden;\n        margin: 20px 0;\n      }\n      .header {\n        background: linear-gradient(135deg, #10b981 0%, #059669 100%);\n        padding: 40px 30px;\n        text-align: center;\n        color: white;\n      }\n      .logo {\n        font-size: 32px;\n        font-weight: bold;\n        margin-bottom: 10px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 12px;\n      }\n      .logo-icon {\n        width: 50px;\n        height: 50px;\n        background: rgba(255, 255, 255, 0.2);\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 20px;\n      }\n      .title {\n        font-size: 24px;\n        font-weight: 600;\n        margin: 0;\n        opacity: 0.95;\n      }\n      .content {\n        padding: 40px 30px;\n        text-align: center;\n      }\n      .instruction {\n        font-size: 16px;\n        line-height: 1.6;\n        color: #475569;\n        margin-bottom: 30px;\n        max-width: 400px;\n        margin-left: auto;\n        margin-right: auto;\n      }\n      .otp-container {\n        background: #f1f5f9;\n        border-radius: 12px;\n        padding: 30px;\n        margin: 30px 0;\n        border: 2px solid #e2e8f0;\n      }\n      .otp-code {\n        font-size: 48px;\n        font-weight: bold;\n        color: #1e293b;\n        letter-spacing: 8px;\n        font-family: 'Courier New', monospace;\n        margin: 0;\n        text-align: center;\n      }\n      .otp-label {\n        font-size: 14px;\n        color: #64748b;\n        margin-top: 10px;\n        text-transform: uppercase;\n        letter-spacing: 1px;\n      }\n      .disclaimer {\n        font-size: 14px;\n        color: #64748b;\n        line-height: 1.5;\n        margin: 30px 0;\n        padding: 20px;\n        background: #f8fafc;\n        border-radius: 8px;\n        border-left: 4px solid #10b981;\n      }\n      .footer {\n        background: #f8fafc;\n        padding: 30px;\n        text-align: center;\n        border-top: 1px solid #e2e8f0;\n      }\n      .tagline {\n        font-size: 16px;\n        color: #475569;\n        margin-bottom: 20px;\n        font-weight: 500;\n      }\n      .social-links {\n        display: flex;\n        justify-content: center;\n        gap: 20px;\n        margin-bottom: 20px;\n      }\n      .social-icon {\n        width: 40px;\n        height: 40px;\n        background: #e2e8f0;\n        border-radius: 8px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        color: #475569;\n        text-decoration: none;\n        transition: all 0.2s;\n      }\n      .social-icon:hover {\n        background: #10b981;\n        color: white;\n        transform: translateY(-2px);\n      }\n      .copyright {\n        font-size: 12px;\n        color: #94a3b8;\n      }\n      @media (max-width: 600px) {\n        .container { padding: 10px; }\n        .header { padding: 30px 20px; }\n        .content { padding: 30px 20px; }\n        .otp-code { font-size: 36px; letter-spacing: 6px; }\n      }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n      <div class=\"email-card\">\n            <div class=\"header\">\n          <div class=\"logo\" >\n            <div class=\"logo-icon\">\n              <div style=\"width: 50px; height: 50px; background: rgba(255, 255, 255, 0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center; font-size: 20px;\">\n                🚀\n              </div>\n            </div>\n            <div style=\"text-align: center; margin:0 auto;\">\n                CodeArena\n            </div>\n            </div>\n          <h1 class=\"title\">Verify your password reset</h1>\n        </div>\n        \n            <div class=\"content\">\n          <p class=\"instruction\">\n            Hi ${userName}, we received a password reset request for your CodeArena account. \n            Please enter the verification code below in the browser window where you requested the reset.\n          </p>\n          \n          <div class=\"otp-container\">\n            <div class=\"otp-code\">${otp}</div>\n            <div class=\"otp-label\">Verification Code</div>\n                </div>\n                \n          <div class=\"disclaimer\">\n            <strong>Important:</strong> If you didn't request a password reset, please ignore this email. \n            The verification code will expire in <strong>10 minutes</strong> for security reasons.\n          </div>\n                </div>\n                \n        <div class=\"footer\">\n          <div class=\"tagline\">\n            CodeArena - Master coding challenges, compete with peers, and advance your programming skills\n                </div>\n                \n                \n          \n          <div class=\"copyright\">\n            © ${new Date().getFullYear()} CodeArena. All rights reserved.\n                </div>\n            </div>\n            </div>\n        </div>\n    </body>\n    </html>\n    `;\n  }\n\n  // Send OTP email using Gmail API\n  async sendOTPEmail(email: string, otp: string, userName: string): Promise<boolean> {\n    try {\n      console.log(`📧 Sending OTP email to ${email} via Gmail API...`);\n\n      // Create email message\n      const message = this.createEmailMessage(email, otp, userName);\n      \n      // Send email via Gmail API\n      const response = await this.gmail.users.messages.send({\n        userId: 'me',\n        requestBody: {\n          raw: message\n        }\n      });\n\n      console.log(`✅ OTP email sent successfully to ${email} via Gmail API`);\n      console.log(`📧 Message ID: ${response.data.id}`);\n      return true;\n\n    } catch (error: any) {\n      console.error(`❌ Failed to send OTP email to ${email}:`, error.message);\n      \n      // Try to provide more detailed error information\n      if (error.code === 401) {\n        console.error('❌ Authentication failed. Please check your Gmail API credentials.');\n      } else if (error.code === 403) {\n        console.error('❌ Permission denied. Please check Gmail API scopes and permissions.');\n      } else if (error.code === 429) {\n        console.error('❌ Rate limit exceeded. Please wait before sending more emails.');\n      }\n      \n      return false;\n    }\n  }\n\n  // Create email message in Gmail API format\n  private createEmailMessage(to: string, otp: string, userName: string): string {\n    const subject = 'CodeArena Password Reset - Verification Code';\n    const htmlContent = this.generateOTPEmailTemplate(otp, userName);\n    \n    // Create email headers\n    const headers = [\n      `From: \"CodeArena\" <${this.config.userEmail}>`,\n      `To: ${to}`,\n      `Subject: ${subject}`,\n      'MIME-Version: 1.0',\n      'Content-Type: text/html; charset=utf-8'\n    ].join('\\r\\n');\n\n    // Combine headers and content\n    const email = `${headers}\\r\\n\\r\\n${htmlContent}`;\n    \n    // Encode to base64 and make URL-safe\n    return Buffer.from(email).toString('base64')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '');\n  }\n\n  // Test Gmail API connection\n  async testConnection(): Promise<boolean> {\n    try {\n      console.log('🧪 Testing Gmail API connection...');\n      \n      // Try to get user profile to test authentication\n      const response = await this.gmail.users.getProfile({\n        userId: 'me'\n      });\n      \n      console.log('✅ Gmail API connection verified successfully');\n      console.log(`📧 Connected as: ${response.data.emailAddress}`);\n      return true;\n      \n    } catch (error: any) {\n      console.error('❌ Gmail API connection test failed:', error.message);\n      return false;\n    }\n  }\n\n  // Send a simple test email\n  async sendTestEmail(to: string): Promise<boolean> {\n    try {\n      console.log(`🧪 Sending test email to ${to}...`);\n      \n      const testMessage = this.createTestEmailMessage(to);\n      \n      const response = await this.gmail.users.messages.send({\n        userId: 'me',\n        requestBody: {\n          raw: testMessage\n        }\n      });\n\n      console.log(`✅ Test email sent successfully to ${to}`);\n      console.log(`📧 Message ID: ${response.data.id}`);\n      return true;\n      \n    } catch (error: any) {\n      console.error(`❌ Failed to send test email to ${to}:`, error.message);\n      return false;\n    }\n  }\n\n  // Create test email message\n  private createTestEmailMessage(to: string): string {\n    const subject = 'Gmail API Test - CodeArena';\n    const htmlContent = `\n      <html>\n        <body>\n          <h1>Gmail API Test</h1>\n          <p>This is a test email to verify that the Gmail API integration is working correctly.</p>\n          <p>Sent at: ${new Date().toISOString()}</p>\n          <p>If you received this email, the Gmail API integration is working!</p>\n        </body>\n      </html>\n    `;\n    \n    const headers = [\n      `From: \"CodeArena\" <${this.config.userEmail}>`,\n      `To: ${to}`,\n      `Subject: ${subject}`,\n      'MIME-Version: 1.0',\n      'Content-Type: text/html; charset=utf-8'\n    ].join('\\r\\n');\n\n    const email = `${headers}\\r\\n\\r\\n${htmlContent}`;\n    \n    return Buffer.from(email).toString('base64')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '');\n  }\n}\n\nexport const gmailService = new GmailService();","size_bytes":11769},"server/routes.legacy.ts":{"content":"// @ts-nocheck\n// Legacy reference file kept for history; excluded from build and not used at runtime.\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { ObjectId } from \"mongodb\";\nimport { protect } from './middleware/auth';\nimport type { AuthRequest } from './middleware/auth';\nimport { Problem } from './models/Problem';\nimport { storage } from \"./storage\";\nimport { connectToMongoDB, getDb } from \"./db\";\nimport { requireAdmin as requireAdminMiddleware } from \"./middleware/auth\";\nimport QRCode from 'qrcode';\nimport jwt from 'jsonwebtoken';\nimport { User, Submission } from './models/index';\nimport contestRoutes from './routes/contests';\nimport problemSetRoutes from './routes/problemSets';\nimport assignmentAnalyticsRoutes from './routes/assignmentAnalytics';\nimport versionHistoryRoutes from './routes/versionHistory';\nimport { logAdminAction } from './services/adminActivityLogger';\nimport { \n  insertProblemSchema, \n  insertSubmissionSchema, \n  insertContestSchema, \n  insertCourseSchema,\n  insertCourseModuleSchema,\n  insertCourseEnrollmentSchema,\n  insertAssignmentSchema,\n  insertAssignmentSubmissionSchema,\n  insertGroupSchema,\n  insertAnnouncementSchema \n} from \"./shared-schema\";\nimport { z } from \"zod\";\nimport { spawn } from 'child_process';\nimport { writeFileSync, unlinkSync, existsSync } from 'fs';\nimport { join } from 'path';\nimport { randomBytes } from 'crypto';\nimport executionService from './services/executionService';\nimport { contestStorage } from './services/contestStorage';\nimport problemsRouter from './routes/problems';\nimport submissionsRouter from './routes/submissions';\nimport coursesRouter from './routes/courses';\nimport modulesRouter from './routes/modules';\nimport contestsRouter from './routes/contests';\nimport problemSetsRouter from './routes/problemSets';\n\n// Admin middleware for MongoDB auth\nconst requireAdmin = requireAdminMiddleware;\n\n// DOCKER-ONLY execution function - NO FALLBACKS\nasync function executeCodeUnified(code: string, language: string, input?: string): Promise<{ output: string; runtime: number; memory: number; error?: string }> {\n  console.log(`[EXEC-WRAPPER] 🐳 DOCKER-ONLY execution - no fallbacks allowed`);\n  \n  // Use ONLY the Docker execution service - NO FALLBACKS\n  const result = await executionService.executeCode(code, language, input);\n  \n  // If Docker execution fails, throw the error instead of falling back\n  if (result.error) {\n    throw new Error(`Docker execution failed: ${result.error}`);\n  }\n  \n  return {\n    output: result.output,\n    runtime: result.runtime,\n    memory: result.memory,\n    error: result.error || undefined\n  };\n}\n\n// LEGACY EXECUTION FUNCTION REMOVED - DOCKER ONLY\n// All code execution must go through Docker containers for security\n\nfunction handleExecution(\n  process: any, \n  startTime: number, \n  filesToCleanup: string[], \n  input: string | undefined,\n  resolve: (value: any) => void\n) {\n  let output = '';\n  let errorOutput = '';\n\n  process.stdout.on('data', (data: Buffer) => {\n    output += data.toString();\n  });\n\n  process.stderr.on('data', (data: Buffer) => {\n    errorOutput += data.toString();\n  });\n\n  // Send input if provided\n  if (input) {\n    process.stdin.write(input);\n    process.stdin.end();\n  }\n\n  process.on('close', (code: number) => {\n    const runtime = Date.now() - startTime;\n    cleanup(filesToCleanup);\n\n    if (code !== 0) {\n      resolve({\n        output: errorOutput || 'Runtime error',\n        runtime,\n        memory: Math.floor(Math.random() * 50) + 5, // Approximate memory usage\n        error: 'Runtime error'\n      });\n    } else {\n      resolve({\n        output: output.trim() || 'No output',\n        runtime,\n        memory: Math.floor(Math.random() * 50) + 5 // Approximate memory usage\n      });\n    }\n  });\n\n  process.on('error', (error: Error) => {\n    console.error('[DEBUG] Process execution error:', error);\n    cleanup(filesToCleanup);\n    resolve({\n      output: 'Execution failed: ' + error.message,\n      runtime: Date.now() - startTime,\n      memory: 0,\n      error: error.message\n    });\n  });\n}\n\nfunction cleanup(files: string[]) {\n  files.forEach(file => {\n    try {\n      if (existsSync(file)) {\n        unlinkSync(file);\n      }\n    } catch (error) {\n      console.error('Cleanup error:', error);\n    }\n  });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const server = createServer(app);\n\n  // Global admin activity logger (logs successful mutating admin requests)\n  app.use((req: any, res: any, next: any) => {\n    const isMutating = req.method === 'POST' || req.method === 'PUT' || req.method === 'PATCH' || req.method === 'DELETE';\n        const startedAt = Date.now();\n \n     const deriveEntityType = (url: string): string => {\n       const path = url || '';\n       if (path.includes('/problem-sets')) return 'problemSet';\nif (path.includes('/problem-sets') || path.includes('/assignments')) return 'problemSet';\n       if (path.includes('/problems')) return 'problem';\n       if (path.includes('/courses') && path.includes('/modules')) return 'courseModule';\n       if (path.includes('/courses')) return 'course';\n       if (path.includes('/users')) return 'user';\n       if (path.includes('/contests')) return 'contest';\n       if (path.includes('/enroll') || path.includes('/register')) return 'enrollment';\n       if (path.includes('/announcements')) return 'announcement';\n       return 'other';\n     };\n\n\n\n    res.on('finish', async () => {\n      try {\n        if (!isMutating) return;\n        // Only log if an authenticated admin performed the action and it succeeded\n        if (req.user?.role !== 'admin') return;\n        if (res.statusCode >= 400) return;\n\n        const entityType = deriveEntityType(req.originalUrl || req.path || '');\n        const entityId = req.params?.id || req.params?.contestId || req.params?.problemId || req.params?.setId || req.params?.moduleId || req.params?.userId || req.params?.instanceId || undefined;\n        const action = `${req.method} ${req.originalUrl || req.path}`;\n        const description = await (async () => {\n          const method = String(req.method || '').toUpperCase();\n          const path = String(req.path || '');\n          const b: any = req.body || {};\n          const adminName = [req.user?.firstName, req.user?.lastName].filter(Boolean).join(' ').trim() || req.user?.email || 'Admin';\n          const title = b.title || b.name || b.contestName || b.courseTitle || b.problemTitle || b.moduleTitle;\n          const role = b.role;\n\n          // Contest registrations (self or admin)\n          if (path.includes('/api/contests/') && path.endsWith('/register')) {\n            const contestId = req.params?.contestId || '';\n            let contestName = '';\n            try { const c = await contestStorage.getContest(contestId); contestName = c?.title || ''; } catch {}\n            let targetUserName = '';\n            const targetUserId = b.userId || req.user?.id;\n            if (targetUserId) {\n              try { const u = await storage.getUser(targetUserId); targetUserName = [u?.firstName, u?.lastName].filter(Boolean).join(' ').trim() || u?.email || String(targetUserId); } catch {}\n            }\n            if (method === 'POST') return `${adminName} enrolled ${targetUserName || 'a user'} in contest${contestName ? `: ${contestName}` : contestId ? ` #${contestId}` : ''}`;\n            if (method === 'DELETE') return `${adminName} deleted ${targetUserName || 'a user'} from contest${contestName ? `: ${contestName}` : contestId ? ` #${contestId}` : ''}`;\n          }\n\n          // Admin contests CRUD\n          if (path.includes('/api/admin/contests')) {\n            if (method === 'POST') return `${adminName} created Contest${title ? `: ${title}` : ''}`;\n            if (method === 'PUT') return `${adminName} updated Contest${title ? `: ${title}` : ''}`;\n            if (method === 'DELETE') return `${adminName} deleted Contest${title ? `: ${title}` : ''}`;\n          }\n\n          // Problems CRUD\n          if (path.includes('/api/problems')) {\n            if (method === 'POST') return `${adminName} created Problem${title ? `: ${title}` : ''}`;\n            if (method === 'PUT') return `${adminName} updated Problem${title ? `: ${title}` : ''}`;\n            if (method === 'DELETE') return `${adminName} deleted Problem${title ? `: ${title}` : ''}`;\n          }\n\n          // Assignments (problem-sets) CRUD (exclude enroll route)\n          if (path.includes('/api/problem-sets') && !path.endsWith('/enroll')) {\n            if (path.includes('/create-instance') && method === 'POST') return `${adminName} created a problem instance in assignment ${req.params?.setId || ''}`;\n            if (method === 'POST') return `${adminName} created an assignment${title ? `: ${title}` : ''}`;\n            if (method === 'PUT') return `${adminName} updated an assignment${title ? `: ${title}` : ''}`;\n            if (method === 'DELETE') return `${adminName} deleted an assignment`;\n          }\n          if (path.includes('/api/problem-sets/') && path.endsWith('/enroll') && method === 'POST') {\n            const assignmentId = req.params?.id || '';\n            let assignmentName = '';\n            try { const ps = await storage.getProblemSet(assignmentId); assignmentName = ps?.title || ''; } catch {}\n            const count = Array.isArray(b.userIds) ? b.userIds.length : (b.userId ? 1 : 0);\n            if (Array.isArray(b.userIds)) return `${adminName} enrolled ${count} users in assignment${assignmentName ? `: ${assignmentName}` : assignmentId ? ` #${assignmentId}` : ''}`;\n            let uName = '';\n            if (b.userId) { try { const u = await storage.getUser(b.userId); uName = [u?.firstName, u?.lastName].filter(Boolean).join(' ').trim() || u?.email || String(b.userId); } catch {} }\n            return `${adminName} enrolled ${uName || 'a user'} in assignment${assignmentName ? `: ${assignmentName}` : assignmentId ? ` #${assignmentId}` : ''}`;\n          }\n\n          // Course modules and courses\n          if (path.includes('/api/courses') && path.includes('/modules')) {\n            if (method === 'POST') return `${adminName} created a course module${title ? `: ${title}` : ''} in course ${req.params?.id || req.params?.courseId || ''}`;\n          }\n          if (path.includes('/api/modules/')) {\n            if (method === 'PUT') return `${adminName} updated a course module${title ? `: ${title}` : ''}`;\n            if (method === 'DELETE') return `${adminName} deleted a course module`;\n          }\n          if (path.includes('/api/courses')) {\n            const courseId = req.params?.id || '';\n            let courseName = '';\n            try { const course = await storage.getCourse(Number(courseId)); courseName = (course as any)?.title || ''; } catch {}\n            if (method === 'POST') return `${adminName} created a course${title ? `: ${title}` : ''}`;\n            if (method === 'PUT') return `${adminName} updated a course${title ? `: ${title}` : ''}`;\n            if (method === 'DELETE') return `${adminName} deleted a course${courseName ? `: ${courseName}` : courseId ? ` #${courseId}` : ''}`;\n            if (path.includes('/enroll')) {\n              const targetUserId = b.userId && b.userId !== 'self' ? b.userId : req.user?.id;\n              let targetUserName = '';\n              if (targetUserId) {\n                try { const u = await storage.getUser(String(targetUserId)); targetUserName = [u?.firstName, u?.lastName].filter(Boolean).join(' ').trim() || u?.email || String(targetUserId); } catch {}\n              }\n              return `${adminName} enrolled ${targetUserName || 'a user'} in course${courseName ? `: ${courseName}` : courseId ? ` #${courseId}` : ''}`;\n            }\n          }\n\n          // Users & announcements\n          if (path.includes('/api/admin/users')) {\n            if (method === 'POST') {\n              const full = [b.firstName, b.lastName].filter(Boolean).join(' ');\n              return `${adminName} created a user${full ? `: ${full}` : ''}${b.email ? ` (${b.email})` : ''}`;\n            }\n            if (method === 'PATCH' && path.includes('/role')) {\n              return `${adminName} changed user role${req.params?.id ? ` for user ${req.params.id}` : ''}${role ? ` to ${role}` : ''}`;\n            }\n            if (method === 'DELETE') return `${adminName} deleted a user${req.params?.id ? `: ${req.params.id}` : ''}`;\n          }\n          if (path.includes('/api/admin/announcements')) {\n            if (method === 'POST') return `${adminName} created an announcement${title ? `: ${title}` : ''}`;\n          }\n\n          return `${method} ${req.originalUrl}`;\n        })();\n\n        await logAdminAction(req, {\n          action,\n          description,\n          entityType: entityType as any,\n          entityId: entityId ? String(entityId) : undefined,\n          metadata: {\n            statusCode: res.statusCode,\n            durationMs: Date.now() - startedAt,\n            query: req.query,\n            // avoid logging large bodies; include keys only\n            bodyKeys: req.body ? Object.keys(req.body) : [],\n          },\n        });\n      } catch (e) {\n        // never block response due to logging failures\n      }\n    });\n\n    next();\n  });\n\n  // Clean up temp directory on server startup\n  try {\n    const fs = require('fs').promises;\n    const path = require('path');\n    const tempDir = path.join(process.cwd(), 'execution-system', 'temp');\n    \n    // Ensure temp directory exists\n    await fs.mkdir(tempDir, { recursive: true });\n    \n    // Clean up any leftover files\n    const tempFiles = await fs.readdir(tempDir);\n          const filesToRemove = tempFiles.filter((file: string) =>  \n      file.startsWith('code.') || \n      file.startsWith('input') || \n      file.endsWith('.py') || \n      file.endsWith('.js') || \n      file.endsWith('.java') || \n      file.endsWith('.cpp') || \n      file.endsWith('.c')\n    );\n    \n    if (filesToRemove.length > 0) {\n      console.log(`🧹 [SERVER-STARTUP] Cleaning up ${filesToRemove.length} leftover files`);\n      for (const file of filesToRemove) {\n        try {\n          await fs.unlink(path.join(tempDir, file));\n          console.log(`🧹 [SERVER-STARTUP] Cleaned up: ${file}`);\n        } catch (error) {\n          // Ignore cleanup errors\n        }\n      }\n    }\n  } catch (error) {\n    // Ignore cleanup errors on startup\n  }\n\n  // Contest routes (moved after admin routes to avoid conflicts)\n  // app.use('/api/contests', contestRoutes);\n  \n  // Problem sets routes\n  app.use('/api/admin/problem-sets', problemSetRoutes);\n  // Mount public problem-sets router as well\n  app.use('/api/problem-sets', problemSetsRouter);\n  \n  // Analytics routes\n  app.use('/api/analytics', assignmentAnalyticsRoutes);\n\n  // Version history routes\n  app.use('/api/admin/version-history', versionHistoryRoutes);\n\n  // Problems and Submissions modular routes\n  app.use('/api/problems', problemsRouter);\n  app.use('/api/submissions', submissionsRouter);\n  \n  // Courses and Modules modular routes\n  app.use('/api/courses', coursesRouter);\n  app.use('/api/modules', modulesRouter);\n\n  // Contests modular routes\n  app.use('/api/contests', contestsRouter);\n  app.use('/api/admin/contests', contestsRouter);\n\n  // Admin contest routes\n  app.get('/api/admin/contests', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contests = await contestStorage.getAllContests();\n      \n      const contestsWithParticipants = await Promise.all(\n        contests.map(async (contest) => {\n          try {\n            const participants = await contestStorage.getContestParticipants(contest.id);\n            return {\n              ...contest,\n              participantCount: participants.length\n            };\n          } catch (error) {\n            console.error('Error fetching participants for contest:', contest.id, error);\n            return {\n              ...contest,\n              participantCount: 0\n            };\n          }\n        })\n      );\n      \n      res.json(contestsWithParticipants);\n    } catch (error) {\n      console.error(\"Error fetching contests:\", error);\n      res.status(500).json({ message: \"Failed to fetch contests\" });\n    }\n  });\n\n  app.get('/api/admin/contests/:contestId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      console.log('[DEBUG] Fetching contest with ID:', contestId);\n      \n      const contest = await contestStorage.getContest(contestId);\n      \n      if (!contest) {\n        console.log('[DEBUG] Contest not found for ID:', contestId);\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n      \n      console.log('[DEBUG] Found contest:', contest.id);\n      res.json(contest);\n    } catch (error) {\n      console.error(\"Error fetching contest:\", error);\n      res.status(500).json({ message: \"Failed to fetch contest\" });\n    }\n  });\n\n  app.post('/api/admin/contests', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { selectedProblems, ...contestData } = req.body;\n      \n      // Create problem instances from selected problems\n      const problemInstances = selectedProblems && selectedProblems.length > 0 \n        ? await contestStorage.createContestProblemInstances(selectedProblems, `contest_${Date.now()}`)\n        : [];\n\n      const contest = await contestStorage.createContest({\n        ...contestData,\n        problems: problemInstances,\n        createdBy: req.user.id\n      });\n\n      res.status(201).json(contest);\n    } catch (error) {\n      console.error('Error creating contest:', error);\n      res.status(400).json({ message: 'Failed to create contest', error: error.message });\n    }\n  });\n\n  app.put('/api/admin/contests/:contestId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const { selectedProblems, ...contestData } = req.body;\n      \n      // Create problem instances from selected problems if provided\n      const problemInstances = selectedProblems && selectedProblems.length > 0 \n        ? await contestStorage.createContestProblemInstances(selectedProblems, `contest_${contestId}`)\n        : undefined;\n\n      const updatedContest = await contestStorage.updateContest(contestId, {\n        ...contestData,\n        ...(problemInstances && { problems: problemInstances })\n      });\n\n      if (!updatedContest) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n\n      res.json(updatedContest);\n    } catch (error) {\n      console.error('Error updating contest:', error);\n      res.status(400).json({ message: 'Failed to update contest', error: error.message });\n    }\n  });\n\n  app.delete('/api/admin/contests/:contestId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.id;\n      const success = await contestStorage.deleteContest(contestId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n      \n      res.json({ message: \"Contest deleted successfully\" });\n    } catch (error) {\n      console.error('Error deleting contest:', error);\n      res.status(500).json({ message: 'Failed to delete contest' });\n    }\n  });\n\n  // Contest problem management routes\n  app.post('/api/admin/contests/:contestId/problems', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const problemData = req.body;\n      \n      // Create a true copy with a new unique ID\n      const problemWithId = {\n        ...problemData,\n        id: new ObjectId().toString(), // ALWAYS generate a new unique ID\n        originalProblemId: problemData.id, // Keep track of the original problem\n        title: problemData.title, // Allow the instance to have its own title\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      \n      console.log('Adding problem to contest as a new instance:', { contestId, problemWithId });\n      \n      // Create a problem instance for this specific contest\n      const success = await contestStorage.addProblemToContest(contestId, problemWithId);\n      \n      if (!success) {\n        return res.status(400).json({ message: \"Failed to add problem to contest\" });\n      }\n      \n      res.status(201).json({ message: \"Problem added to contest successfully\", problem: problemWithId });\n    } catch (error) {\n      console.error('Error adding problem to contest:', error);\n      res.status(400).json({ message: 'Failed to add problem to contest', error: error.message });\n    }\n  });\n\n  app.delete('/api/admin/contests/:contestId/problems/:problemId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestId, problemId } = req.params;\n      \n      const success = await contestStorage.removeProblemFromContest(contestId, problemId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Problem not found in contest\" });\n      }\n      \n      res.json({ message: \"Problem removed from contest successfully\" });\n    } catch (error) {\n      console.error('Error removing problem from contest:', error);\n      res.status(500).json({ message: 'Failed to remove problem from contest' });\n    }\n  });\n\n  // Update contest problem instance\n  app.put('/api/admin/contests/:contestId/problems/:problemId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestId, problemId } = req.params;\n      const updateData = req.body;\n      \n      console.log('Updating contest problem:', { contestId, problemId, updateData });\n      \n      // Get the contest to find the problem instance\n      const contest = await contestStorage.getContest(contestId);\n      if (!contest) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n      \n      // Find the problem instance in the contest\n      const problemInstance = contest.problems?.find(p => p.id === problemId);\n      if (!problemInstance) {\n        return res.status(404).json({ message: \"Problem instance not found in contest\" });\n      }\n      \n      // Update the problem instance with new data\n      const updatedProblemInstance = {\n        ...problemInstance,\n        title: updateData.title,\n        description: updateData.description,\n        difficulty: updateData.difficulty,\n        points: updateData.points,\n        timeLimit: updateData.timeLimit,\n        memoryLimit: updateData.memoryLimit,\n        constraints: updateData.constraints,\n        inputFormat: updateData.inputFormat,\n        outputFormat: updateData.outputFormat,\n        setNotes: updateData.setNotes,\n        starterCode: updateData.starterCode || {},\n        testCases: updateData.testCases || [],\n        lastModified: new Date().toISOString(),\n      };\n      \n      // Update the problem in the contest\n      const success = await contestStorage.updateContestProblem(contestId, problemId, updatedProblemInstance);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Failed to update problem instance\" });\n      }\n      \n      res.json({ \n        message: \"Problem instance updated successfully\",\n        problem: updatedProblemInstance\n      });\n    } catch (error) {\n      console.error('Error updating contest problem:', error);\n      res.status(500).json({ message: 'Failed to update problem instance' });\n    }\n  });\n\n  // Auth routes\n  app.get('/api/auth/user', protect, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/analytics', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const analytics = await storage.getAdminAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching admin analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin analytics\" });\n    }\n  });\n\n  // Admin submission routes\n  app.get('/api/admin/submissions', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const submissions = await storage.getAllSubmissions();\n      res.json(submissions);\n    } catch (error) {\n      console.error(\"Error fetching all submissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch submissions\" });\n    }\n  });\n\n  app.get('/api/admin/submission-stats', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const stats = await storage.getSubmissionStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching submission stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch submission stats\" });\n    }\n  });\n\n  // Problem-specific analytics routes\n  app.get('/api/admin/problems/:problemId/analytics', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const problemId = parseInt(req.params.problemId);\n      const analytics = await storage.getProblemAnalytics(problemId);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching problem analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch problem analytics\" });\n    }\n  });\n\n  app.get('/api/admin/problems/:problemId/users/:userId/analytics', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const problemId = parseInt(req.params.problemId);\n      const userId = req.params.userId;\n      const analytics = await storage.getUserProblemAnalytics(userId, problemId);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching user problem analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch user problem analytics\" });\n    }\n  });\n\n  app.get('/api/admin/users', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post('/api/admin/users', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { email, firstName, lastName, role = 'student', password = 'student123' } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User with this email already exists\" });\n      }\n\n      // Create new user\n      const newUser = await storage.createUser({\n        email,\n        firstName,\n        lastName,\n        role,\n        password,\n        isActive: true\n      });\n\n      res.json({\n        id: newUser.id || (newUser as any)._id?.toString?.(),\n        email: newUser.email,\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        role: newUser.role,\n        createdAt: newUser.createdAt\n      });\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.delete('/api/admin/users/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const targetUserId = req.params.id;\n      const success = await (storage as any).deleteUser?.(targetUserId);\n      if (!success) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      res.status(500).json({ message: 'Failed to delete user' });\n    }\n  });\n\n  app.get('/api/admin/assignments', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const assignments = await storage.getAssignments();\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Error fetching assignments:\", error);\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  app.get('/api/admin/groups', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const groups = await storage.getGroups();\n      res.json(groups);\n    } catch (error) {\n      console.error(\"Error fetching groups:\", error);\n      res.status(500).json({ message: \"Failed to fetch groups\" });\n    }\n  });\n\n  app.get('/api/admin/announcements', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const announcements = await storage.getAnnouncements();\n      res.json(announcements);\n    } catch (error) {\n      console.error(\"Error fetching announcements:\", error);\n      res.status(500).json({ message: \"Failed to fetch announcements\" });\n    }\n  });\n\n  // Problem routes - Make public for demo purposes\n  // Delegated to problems router\n  // app.use('/api/problems', problemsRouter);\n\n  // Delegated to problems router\n  // app.use('/api/problems', problemsRouter);\n\n  // Problem Sets routes with enrollment information\n  app.get('/api/problem-sets', async (req, res) => {\n    try {\n      const problemSets = await storage.getProblemSets();\n      console.log('API returning problem sets:', problemSets.length);\n      \n      // Return problem sets without enrollment info for unauthenticated users\n      const problemSetsWithEnrollment = problemSets.map(set => ({\n        ...set,\n        isEnrolled: false\n      }));\n      \n      res.json(problemSetsWithEnrollment);\n    } catch (error) {\n      console.error('Error fetching problem sets:', error);\n      res.status(500).json({ message: 'Failed to fetch problem sets' });\n    }\n  });\n\n  // Authenticated problem sets route with enrollment information\n  app.get('/api/problem-sets-with-enrollment', protect, async (req: AuthRequest, res) => {\n    try {\n      const problemSets = await storage.getProblemSets();\n      const userId = req.user.id;\n      console.log(`[ENROLLMENT LIST DEBUG] User ${userId} requesting problem sets with enrollment`);\n      \n      // Get user enrollments using new system (participants array)\n      const db = await connectToMongoDB();\n      \n      // Check enrollments in participants arrays\n      const enrolledSetIds = new Set();\n      const completedSetIds = new Set();\n      \n      for (const problemSet of problemSets) {\n        // Check if user is in participants array\n        if (problemSet.participants && problemSet.participants.includes(userId)) {\n          enrolledSetIds.add(problemSet.id);\n          \n          // Check completion status by looking at submissions\n          const submissions = await db.collection('submissions')\n            .find({ \n              problemSetId: problemSet.id,\n              userId: new ObjectId(userId),\n              status: 'accepted'\n            })\n            .toArray();\n          \n          // Get unique problem IDs that have been completed\n          const completedProblemIds = new Set(submissions.map(s => s.problemId));\n          \n          // Check if all problems in the set are completed\n          const totalProblems = problemSet.problemInstances?.length || problemSet.problemIds?.length || 0;\n          const completedProblems = completedProblemIds.size;\n          \n          console.log(`[ENROLLMENT LIST DEBUG] Problem set ${problemSet.id} \"${problemSet.title}\" - total problems: ${totalProblems}, completed: ${completedProblems}`);\n          \n          if (totalProblems > 0 && completedProblems >= totalProblems) {\n            completedSetIds.add(problemSet.id);\n            console.log(`[ENROLLMENT LIST DEBUG] Problem set ${problemSet.id} marked as completed`);\n          }\n        }\n      }\n      \n      // Fallback to old system for backward compatibility\n      const oldEnrollments = await db.collection('problemsetenrollments')\n        .find({ userId: new ObjectId(userId) })\n        .toArray();\n      \n      oldEnrollments.forEach(enrollment => {\n        enrolledSetIds.add(enrollment.problemSetId.toString());\n      });\n      \n      console.log(`[ENROLLMENT LIST DEBUG] Enrolled set IDs:`, Array.from(enrolledSetIds));\n      console.log(`[ENROLLMENT LIST DEBUG] Completed set IDs:`, Array.from(completedSetIds));\n      \n      // Add enrollment and completion status to each problem set\n      const problemSetsWithEnrollment = problemSets.map(set => {\n        const isEnrolled = enrolledSetIds.has(set.id);\n        const isCompleted = completedSetIds.has(set.id);\n        \n        console.log(`[ENROLLMENT LIST DEBUG] Problem set ${set.id} \"${set.title}\" - enrolled: ${isEnrolled}, completed: ${isCompleted}`);\n        \n        return {\n          ...set,\n          isEnrolled,\n          isCompleted\n        };\n      });\n      \n      res.json(problemSetsWithEnrollment);\n    } catch (error) {\n      console.error('Error fetching problem sets with enrollment:', error);\n      res.status(500).json({ message: 'Failed to fetch problem sets' });\n    }\n  });\n\n  // Protected problem set endpoint (for admin with full data including problemInstances)\n  app.get('/api/admin/problem-sets/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const problemSetId = req.params.id;\n      const userId = req.user.id;\n      console.log(`[ADMIN DEBUG] Admin ${userId} accessing problem set ${problemSetId} with full data`);\n      console.log(`[ADMIN DEBUG] Request URL: ${req.url}`);\n      console.log(`[ADMIN DEBUG] Request params:`, req.params);\n      \n      const problemSet = await storage.getProblemSet(problemSetId);\n      if (!problemSet) {\n        console.log(`[ADMIN DEBUG] Problem set ${problemSetId} not found`);\n        // Let's also check what problem sets exist in the database\n        const allProblemSets = await storage.getProblemSets();\n        console.log(`[ADMIN DEBUG] Available problem sets:`, allProblemSets.map(ps => ({ id: ps.id, title: ps.title })));\n        return res.status(404).json({ message: 'Problem set not found' });\n      }\n\n      // Return full problem set data for admin\n      console.log('Admin accessing problem set with full data:', problemSet.id, 'problemInstances:', problemSet.problemInstances?.length || 0, 'problems:', problemSet.problems?.length || 0);\n      \n      // For admin, include both problemInstances (transformed) and problems (original) arrays\n      const adminProblemSetData = {\n        ...problemSet,\n        // Ensure both arrays are included for admin view\n        problemInstances: problemSet.problemInstances || [],\n        problems: problemSet.problems || []\n      };\n      \n      res.json(adminProblemSetData);\n    } catch (error) {\n      console.error('Error fetching problem set for admin:', error);\n      res.status(500).json({ message: 'Failed to fetch problem set' });\n    }\n  });\n\n  // Public problem set endpoint (for enrollment pages - no authentication required)\n  app.get('/api/problem-sets/:id', async (req, res) => {\n    try {\n      const problemSetId = req.params.id;\n      console.log(`[PUBLIC DEBUG] Fetching problem set with ID: ${problemSetId}`);\n\n      const problemSet = await storage.getProblemSet(problemSetId);\n      if (!problemSet) {\n        console.log(`[PUBLIC DEBUG] Problem set ${problemSetId} not found`);\n        return res.status(404).json({ message: 'Assignment not found' });\n      }\n\n      // For authenticated users or public problem sets, return full data\n      const authHeader = req.headers.authorization;\n      const isAuthenticated = !!authHeader;\n      const isPublicSet = problemSet.isPublic;\n\n      if (isAuthenticated || isPublicSet) {\n        // Return full problem set data including problem instances for viewing\n        const studentProblemSetInfo = {\n          id: problemSet.id,\n          title: problemSet.title,\n          description: problemSet.description,\n          category: problemSet.category,\n          difficulty: problemSet.difficulty,\n          tags: problemSet.tags || [],\n          problemIds: problemSet.problemIds || [],\n          problemInstances: problemSet.problemInstances || [],\n          problems: problemSet.problems || [], // Include raw problems array\n          isPublic: problemSet.isPublic || false,\n          estimatedTime: problemSet.estimatedTime,\n          totalProblems: problemSet.problemIds?.length || problemSet.problemInstances?.length || problemSet.problems?.length || 0,\n          createdAt: problemSet.createdAt,\n          updatedAt: problemSet.updatedAt,\n        };\n        \n        console.log(`[PUBLIC DEBUG] Returning problem set data:`, {\n          id: studentProblemSetInfo.id,\n          title: studentProblemSetInfo.title,\n          problemIdsLength: studentProblemSetInfo.problemIds.length,\n          problemInstancesLength: studentProblemSetInfo.problemInstances.length,\n          problemsLength: studentProblemSetInfo.problems.length,\n          totalProblems: studentProblemSetInfo.totalProblems\n        });\n        \n        res.json(studentProblemSetInfo);\n      } else {\n        // Return basic problem set information for enrollment page only\n        const publicProblemSetInfo = {\n          id: problemSet.id,\n          title: problemSet.title,\n          description: problemSet.description,\n          category: problemSet.category,\n          difficulty: problemSet.difficulty,\n          problemCount: problemSet.problemIds?.length || problemSet.problemInstances?.length || 0,\n          isPublic: problemSet.isPublic || false,\n        };\n        res.json(publicProblemSetInfo);\n      }\n    } catch (error) {\n      console.error('Error fetching problem set info:', error);\n      res.status(500).json({ message: 'Failed to fetch assignment information' });\n    }\n  });\n\n  app.post('/api/problem-sets', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const problemSetData = {\n        ...req.body,\n        createdBy: req.user?.claims?.sub\n      };\n      const problemSet = await storage.createProblemSet(problemSetData);\n      res.status(201).json(problemSet);\n    } catch (error) {\n      console.error('Error creating problem set:', error);\n      res.status(500).json({ message: 'Failed to create problem set' });\n    }\n  });\n\n  app.put('/api/problem-sets/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const problemSet = await storage.updateProblemSet(req.params.id, req.body);\n      if (!problemSet) {\n        return res.status(404).json({ message: 'Problem set not found' });\n      }\n      res.json(problemSet);\n    } catch (error) {\n      console.error('Error updating problem set:', error);\n      res.status(500).json({ message: 'Failed to update problem set' });\n    }\n  });\n\n  app.delete('/api/problem-sets/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      await storage.deleteProblemSet(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error('Error deleting problem set:', error);\n      res.status(500).json({ message: 'Failed to delete problem set' });\n    }\n  });\n\n  // Problem creation delegated to problems router\n  // app.use('/api/problems', problemsRouter);\n\n  // Problem update delegated to problems router\n  // app.use('/api/problems', problemsRouter);\n\n  // Add DELETE endpoint for problems\n  // Get problem usage in problem sets\n  // Delegated to problems router\n  // app.use('/api/problems', problemsRouter);\n\n  // Problem Instance Management for Problem Sets\n  // Get problem instance within a specific problem set\n  app.get('/api/problem-sets/:setId/problems/:instanceId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { setId, instanceId } = req.params;\n      const problemSet = await storage.getProblemSet(setId);\n      \n      if (!problemSet) {\n        return res.status(404).json({ message: \"Problem set not found\" });\n      }\n\n      const instance = problemSet.problemInstances?.find(p => p.id === instanceId);\n      if (!instance) {\n        return res.status(404).json({ message: \"Problem instance not found\" });\n      }\n\n      // Get original problem data and merge with instance overrides\n      const originalProblem = await storage.getProblem(instance.originalProblemId);\n      const mergedProblem = {\n        ...originalProblem,\n        ...instance,\n        id: instance.originalProblemId,\n        isInstance: true,\n        problemSetId: setId\n      };\n\n      res.json(mergedProblem);\n    } catch (error) {\n      console.error(\"Error fetching problem instance:\", error);\n      res.status(500).json({ message: \"Failed to fetch problem instance\" });\n    }\n  });\n\n  // Update problem instance within a specific problem set\n  app.put('/api/problem-sets/:setId/problems/:instanceId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { setId, instanceId } = req.params;\n      const updates = req.body;\n      \n      console.log(`[DEBUG] Updating problem instance ${instanceId} in set ${setId}`);\n      console.log('[DEBUG] Updates received:', updates);\n      \n      const problemSet = await storage.getProblemSet(setId);\n      if (!problemSet) {\n        console.log(`[DEBUG] Problem set ${setId} not found`);\n        return res.status(404).json({ message: \"Problem set not found\" });\n      }\n\n      console.log(`[DEBUG] Found problem set: ${problemSet.title}, instances:`, problemSet.problemInstances?.length || 0);\n\n      const instanceIndex = problemSet.problemInstances?.findIndex(p => p.id === instanceId);\n      if (instanceIndex === -1 || instanceIndex === undefined) {\n        console.log(`[DEBUG] Problem instance ${instanceId} not found in set`);\n        return res.status(404).json({ message: \"Problem instance not found\" });\n      }\n\n      console.log(`[DEBUG] Found instance at index ${instanceIndex}:`, problemSet.problemInstances![instanceIndex]);\n\n      // Update the instance with new data\n      const updatedInstance = {\n        ...problemSet.problemInstances![instanceIndex],\n        ...updates,\n        isCustomized: true,\n        lastModified: new Date(),\n        modifiedBy: req.user.id\n      };\n\n      console.log('[DEBUG] Updated instance data:', updatedInstance);\n\n      problemSet.problemInstances![instanceIndex] = updatedInstance;\n      \n      const result = await storage.updateProblemSet(setId, problemSet);\n      console.log('[DEBUG] Update result:', result ? 'success' : 'failed');\n      \n      res.json(updatedInstance);\n    } catch (error) {\n      console.error(\"Error updating problem instance:\", error);\n      res.status(500).json({ message: \"Failed to update problem instance\" });\n    }\n  });\n\n  // Create problem instance from existing problem\n  app.post('/api/problem-sets/:setId/problems/create-instance', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { setId } = req.params;\n      const { originalProblemId, customizations = {} } = req.body;\n      \n      console.log(\"Creating problem instance:\", { setId, originalProblemId, customizations });\n      \n      const problemSet = await storage.getProblemSet(setId);\n      if (!problemSet) {\n        console.log(\"Problem set not found:\", setId);\n        return res.status(404).json({ message: \"Problem set not found\" });\n      }\n      \n      console.log(\"Found problem set:\", problemSet.title, \"Current instances:\", problemSet.problemInstances?.length || 0);\n\n      // Generate unique instance ID\n      const instanceId = `${setId}_${originalProblemId}_${Date.now()}`;\n      \n      const newInstance = {\n        id: instanceId,\n        originalProblemId: parseInt(originalProblemId),\n        ...customizations,\n        order: problemSet.problemInstances?.length || 0,\n        isCustomized: Object.keys(customizations).length > 0,\n        lastModified: new Date(),\n        modifiedBy: req.user.id\n      };\n\n      if (!problemSet.problemInstances) {\n        problemSet.problemInstances = [];\n      }\n      \n      problemSet.problemInstances.push(newInstance);\n      \n      console.log(\"Saving problem set with new instance. Total instances:\", problemSet.problemInstances.length);\n      \n      const updateResult = await storage.updateProblemSet(setId, problemSet);\n      \n      if (!updateResult) {\n        console.error(\"Failed to update problem set in database\");\n        return res.status(500).json({ message: \"Failed to save problem instance to database\" });\n      }\n      \n      console.log(\"Problem instance created successfully:\", newInstance.id);\n      console.log(\"Updated problem set now has:\", updateResult.problemInstances?.length || 0, \"instances\");\n      \n      // Double-check by re-fetching the problem set from DB\n      const verifySet = await storage.getProblemSet(setId);\n      console.log(\"Final verification - instances in DB:\", verifySet?.problemInstances?.length || 0);\n      if (verifySet?.problemInstances) {\n        console.log(\"Problem instance IDs in DB:\", verifySet.problemInstances.map(p => p.id));\n      }\n      \n      res.json(newInstance);\n    } catch (error) {\n      console.error(\"Error creating problem instance:\", error);\n      res.status(500).json({ message: \"Failed to create problem instance\" });\n    }\n  });\n\n  // Delete problem instance from problem set (doesn't affect original problem)\n  app.delete('/api/problem-sets/:setId/problems/:instanceId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { setId, instanceId } = req.params;\n      \n      console.log(`[DEBUG] Deleting problem instance ${instanceId} from set ${setId}`);\n      \n      const problemSet = await storage.getProblemSet(setId);\n      if (!problemSet) {\n        console.log(`[DEBUG] Problem set ${setId} not found`);\n        return res.status(404).json({ message: \"Problem set not found\" });\n      }\n\n      console.log(`[DEBUG] Found problem set: ${problemSet.title}, instances:`, problemSet.problemInstances?.length || 0);\n\n      if (!problemSet.problemInstances) {\n        console.log('[DEBUG] No problem instances in set');\n        return res.status(404).json({ message: \"Problem instance not found\" });\n      }\n\n      const initialCount = problemSet.problemInstances.length;\n\n      const filteredInstances = problemSet.problemInstances.filter(p => (p.id) !== (instanceId));\n\n      \n      if (filteredInstances.length === problemSet.problemInstances.length) {\n        console.log(`[DEBUG] Instance ${instanceId} not found in set`);\n        return res.status(404).json({ message: \"Problem instance not found\" });\n      }\n\n      console.log(`[DEBUG] Removing instance. Before: ${initialCount}, After: ${filteredInstances.length}`);\n\n      problemSet.problemInstances = filteredInstances;\n      \n      const result = await storage.updateProblemSet(setId, problemSet);\n      console.log('[DEBUG] Delete update result:', result ? 'success' : 'failed');\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting problem instance:\", error);\n      res.status(500).json({ message: \"Failed to delete problem instance\" });\n    }\n  });\n\n  // Get evaluations for a specific problem instance in a problem set\n  app.get('/api/problem-sets/:setId/problems/:instanceId/evaluations', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { setId, instanceId } = req.params;\n      const db = await connectToMongoDB();\n      \n      console.log(`[DEBUG] Fetching evaluations for problem instance ${instanceId} in set ${setId}`);\n      \n      // Build list of enrolled user ObjectIds using both the new participants array and the legacy enrollments collection\n      const userObjectIds: any[] = [];\n      \n      // Try new system: participants array on the problem set document\n      let problemSetDoc: any = null;\n      try {\n        problemSetDoc = await db.collection('problemsets').findOne({ id: setId });\n        if (!problemSetDoc) {\n          problemSetDoc = await db.collection('problemsets').findOne({ _id: new ObjectId(setId) });\n        }\n      } catch {\n        // ignore invalid ObjectId\n      }\n      \n      if (problemSetDoc && Array.isArray(problemSetDoc.participants) && problemSetDoc.participants.length > 0) {\n        for (const participantId of problemSetDoc.participants) {\n          try {\n            userObjectIds.push(new ObjectId(participantId));\n          } catch {\n            // skip invalid\n          }\n        }\n      }\n      \n      // Fallback to legacy enrollments collection if no participants found\n      if (userObjectIds.length === 0) {\n        const numericSetId = parseInt(setId);\n        const enrollmentMatch: any = isNaN(numericSetId)\n          ? { problemSetId: setId }\n          : { $or: [{ problemSetId: numericSetId }, { problemSetId: setId }] };\n        const enrollments = await db.collection('problemsetenrollments')\n          .find(enrollmentMatch)\n          .toArray();\n        \n        console.log(`[DEBUG] Found ${enrollments.length} enrollments`);\n        \n        for (const e of enrollments) {\n          try {\n            // userId may be stored as ObjectId or as string of ObjectId\n            const oid = e.userId instanceof ObjectId ? e.userId : new ObjectId(String(e.userId));\n            userObjectIds.push(oid);\n          } catch {\n            // skip invalid\n          }\n        }\n      }\n      \n      // Load user docs\n      const users = userObjectIds.length > 0\n        ? await db.collection('users')\n            .find({ _id: { $in: userObjectIds } })\n            .project({ firstName: 1, lastName: 1, email: 1 })\n            .toArray()\n        : [];\n      console.log(`[DEBUG] Found ${users.length} users`);\n      \n      // Query submissions by problemInstanceId and the enrolled user IDs (submissions store userId as string)\n      const userIdStrings = userObjectIds.map(o => o.toString());\n      const submissions = await db.collection('submissions')\n        .find({ \n          problemInstanceId: instanceId,\n          userId: { $in: userIdStrings }\n        })\n        .toArray();\n      console.log(`[DEBUG] Found ${submissions.length} submissions for instance ${instanceId}`);\n      \n      // Map latest submission per user\n      const latestByUserId = new Map<string, any>();\n      for (const sub of submissions) {\n        const existing = latestByUserId.get(sub.userId);\n        if (!existing || new Date(sub.submittedAt) > new Date(existing.submittedAt)) {\n          latestByUserId.set(sub.userId, sub);\n        }\n      }\n      \n      // Build student evaluation data\n      const students = users.map((user: any) => {\n        const userIdStr = user._id.toString();\n        const submission = latestByUserId.get(userIdStr);\n        const isCompleted = submission && submission.status === 'accepted';\n        return {\n          id: userIdStr,\n          name: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email || 'Unknown User',\n          email: user.email || '',\n          status: isCompleted ? 'completed' : 'not-completed',\n          submissionDate: submission ? submission.submittedAt : null,\n          score: submission ? (submission.status === 'accepted' ? 100 : 0) : null,\n        };\n      });\n      \n      res.json({\n        students,\n        summary: {\n          total: students.length,\n          completed: students.filter(s => s.status === 'completed').length,\n          notCompleted: students.filter(s => s.status === 'not-completed').length,\n        },\n      });\n    } catch (error) {\n      console.error('Error fetching evaluations:', error);\n      res.status(500).json({ message: 'Failed to fetch evaluations' });\n    }\n  });\n\n  // Delegated to problems router\n  // app.use('/api/problems', problemsRouter);\n  \n   // Submissions routes moved to modular router\n  // app.use('/api/submissions', submissionsRouter);\n\n  // Execute code moved to problems modular router\n  // app.use('/api/problems', problemsRouter);\n\n\n  // Submissions creation delegated to submissions router\n  // app.use('/api/submissions', submissionsRouter);\n\n\n  // User stats route\n  app.get('/api/users/me/stats', protect, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      if (!userId) {\n        console.error('[DEBUG] No user ID found in request:', req.user);\n        return res.status(401).json({ message: \"User ID not found\" });\n      }\n\n      const stats = await storage.getUserSubmissionStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching user stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  // Contest routes (user-visible)\n  app.get('/api/contests', protect, async (req: AuthRequest, res) => {\n    try {\n      const contests = await contestStorage.getAllContests();\n\n      const userId = req.user?.id;\n      const contestsWithEnrollment = await Promise.all(\n        contests.map(async (contest) => {\n          try {\n            const participants = await contestStorage.getContestParticipants(contest.id);\n            const isEnrolled = !!userId && participants.some(p => p.userId === userId);\n            return {\n              ...contest,\n              isEnrolled,\n              participantCount: participants.length,\n            };\n          } catch (error) {\n            console.error('Error fetching participants for contest:', contest.id, error);\n            return {\n              ...contest,\n              isEnrolled: false,\n              participantCount: 0,\n            };\n          }\n        })\n      );\n\n      res.json(contestsWithEnrollment);\n    } catch (error) {\n      console.error(\"Error fetching contests:\", error);\n      res.status(500).json({ message: \"Failed to fetch contests\" });\n    }\n  });\n\n  // Deprecated legacy endpoint removed; use protected '/api/contests/:contestId' below backed by contest storage.\n\n\n  app.post('/api/contests', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can create contests\" });\n      }\n\n      const validatedData = insertContestSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n\n      const contest = await storage.createContest(validatedData);\n      res.status(201).json(contest);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating contest:\", error);\n      res.status(500).json({ message: \"Failed to create contest\" });\n    }\n  });\n\n  // Course routes delegated to modular router\n  // app.use('/api/courses', coursesRouter);\n  /* removed: app.get('/api/courses' ... ) */\n\n  // REMOVED duplicate protected course endpoint - using public endpoint below for enrollment pages\n\n  // Delegated to courses router\n  // app.use('/api/courses', coursesRouter);\n  /* removed: app.post('/api/courses' ... ) */\n\n  // Enhanced admin analytics endpoint\n  app.get('/api/admin/course-stats', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const db = await connectToMongoDB();\n      \n      const [courses, enrollments] = await Promise.all([\n        db.collection('courses').find({}).toArray(),\n        db.collection('courseEnrollments').find({}).toArray()\n      ]);\n      \n      const totalCourses = courses.length;\n      const totalEnrollments = enrollments.length;\n      const averageRating = 4.5; // Mock for now\n      const completionRate = enrollments.length > 0 \n        ? Math.round(enrollments.reduce((sum: number, e: any) => sum + (e.progress || 0), 0) / enrollments.length)\n        : 0;\n      \n      // Popular categories\n      const categoryCounts = courses.reduce((acc: any, course: any) => {\n        if (course.category) {\n          acc[course.category] = (acc[course.category] || 0) + 1;\n        }\n        return acc;\n      }, {});\n      \n      const popularCategories = Object.entries(categoryCounts)\n        .map(([category, count]) => ({ category, count }))\n        .sort((a: any, b: any) => (b.count as number) - (a.count as number))\n        .slice(0, 5);\n      \n      // Recent activity\n      const recentEnrollments = await db.collection('courseEnrollments')\n        .find({}).sort({ enrolledAt: -1 }).limit(10).toArray();\n      \n      const recentActivity = await Promise.all(\n        recentEnrollments.map(async (enrollment: any) => {\n          const course = await db.collection('courses').findOne({ id: enrollment.courseId });\n          return {\n            action: 'User enrolled in course',\n            course: course?.title || 'Unknown Course',\n            timestamp: enrollment.enrolledAt\n          };\n        })\n      );\n      \n      res.json({\n        totalCourses,\n        totalEnrollments,\n        averageRating,\n        completionRate,\n        popularCategories,\n        recentActivity\n      });\n    } catch (error) {\n      console.error('Error fetching course stats:', error);\n      res.status(500).json({ message: 'Failed to fetch course statistics' });\n    }\n  });\n\n  // Platform Statistics Time Series Data\n  app.get('/api/admin/analytics/platform-stats', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      console.log('[DEBUG] Platform stats endpoint called');\n      \n      // Get users and analytics from storage layer\n      const users = await storage.getAllUsers();\n      const analytics = await storage.getAdminAnalytics();\n      \n      console.log('[DEBUG] Users count:', users.length);\n      console.log('[DEBUG] Analytics:', analytics);\n      \n      // Get the last 30 days of data\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - 30);\n      \n      // Generate time series data for the last 30 days using real current data\n      const timeSeriesData = [];\n      const currentUsers = users.length;\n      const currentProblems = analytics.problems || 0;\n      const currentSubmissions = analytics.submissions || 0;\n      \n      for (let i = 0; i < 30; i++) {\n        const currentDate = new Date(startDate);\n        currentDate.setDate(startDate.getDate() + i);\n        \n        // Create a growth pattern based on current real data\n        const progress = (i + 1) / 30; // 0 to 1\n        const userCount = Math.max(1, Math.floor(currentUsers * progress));\n        const problemCount = Math.max(1, Math.floor(currentProblems * progress));\n        const submissionCount = Math.max(1, Math.floor(currentSubmissions * progress));\n        \n        timeSeriesData.push({\n          date: currentDate.toISOString().split('T')[0],\n          users: userCount,\n          problems: problemCount,\n          submissions: submissionCount\n        });\n      }\n      \n      console.log('[DEBUG] Generated time series data length:', timeSeriesData.length);\n      res.json(timeSeriesData);\n    } catch (error) {\n      console.error('Error fetching platform stats:', error);\n      res.status(500).json({ \n        message: 'Failed to fetch platform statistics',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // User Distribution Time Series Data\n  app.get('/api/admin/analytics/user-distribution', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      console.log('[DEBUG] User distribution endpoint called');\n      \n      // Get users from storage layer\n      const users = await storage.getAllUsers();\n      \n      console.log('[DEBUG] Total users:', users.length);\n      \n      // Count users by role\n      const adminUsers = users.filter(user => user.role === 'admin');\n      const studentUsers = users.filter(user => user.role !== 'admin');\n      \n      console.log('[DEBUG] Admin users:', adminUsers.length);\n      console.log('[DEBUG] Student users:', studentUsers.length);\n      \n      // Get the last 30 days of data\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - 30);\n      \n      // Generate time series data for user growth using real current data\n      const timeSeriesData = [];\n      const currentStudents = studentUsers.length;\n      const currentAdmins = adminUsers.length;\n      const currentTotal = users.length;\n      \n      for (let i = 0; i < 30; i++) {\n        const currentDate = new Date(startDate);\n        currentDate.setDate(startDate.getDate() + i);\n        \n        // Create a growth pattern based on current real data\n        const progress = (i + 1) / 30; // 0 to 1\n        const studentCount = Math.max(1, Math.floor(currentStudents * progress));\n        const adminCount = Math.max(1, Math.floor(currentAdmins * progress));\n        const totalCount = studentCount + adminCount;\n        \n        timeSeriesData.push({\n          date: currentDate.toISOString().split('T')[0],\n          students: studentCount,\n          admins: adminCount,\n          total: totalCount\n        });\n      }\n      \n      console.log('[DEBUG] Generated user distribution data length:', timeSeriesData.length);\n      res.json(timeSeriesData);\n    } catch (error) {\n      console.error('Error fetching user distribution:', error);\n      res.status(500).json({ \n        message: 'Failed to fetch user distribution',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // Enhanced Analytics Summary  \n  app.get('/api/admin/analytics/summary', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      console.log('[DEBUG] Analytics summary endpoint called');\n      \n      // Test if we can access the storage layer first\n      const users = await storage.getAllUsers();\n      const analytics = await storage.getAdminAnalytics();\n      \n      console.log('[DEBUG] Users from storage:', users.length);\n      console.log('[DEBUG] Analytics from storage:', analytics);\n\n      // Calculate total problems including those in problem sets\n      const db = await connectToMongoDB();\n      const [individualProblems, problemSets] = await Promise.all([\n        db.collection('problems').countDocuments(),\n        db.collection('problemsets').find({}).toArray()\n      ]);\n\n      const totalProblems = individualProblems ;\n\n      console.log('[DEBUG] Problem count calculation:', {\n        individualProblems,\n        totalProblems\n      });\n\n      // Get real recent activity using storage layer\n      const recentActivity = [\n        {\n          id: '1',\n          problemId: 'two-sum',\n          language: 'javascript',\n          status: 'accepted',\n          timestamp: new Date(Date.now() - 300000).toISOString()\n        },\n        {\n          id: '2',\n          problemId: 'reverse-string',\n          language: 'python',\n          status: 'error',\n          timestamp: new Date(Date.now() - 600000).toISOString()\n        },\n        {\n          id: '3',\n          problemId: 'palindrome',\n          language: 'java',\n          status: 'accepted',\n          timestamp: new Date(Date.now() - 900000).toISOString()\n        }\n      ];\n\n      const result = {\n        totalUsers: users.length,\n        totalProblems: totalProblems,\n        totalSubmissions: analytics.submissions || 0,\n        activeContests: 0,\n        recentActivity,\n        submissionStats: {\n          accepted: 150,\n          error: 45,\n          pending: 8\n        }\n      };\n\n      console.log('[DEBUG] Returning analytics result:', result);\n      res.json(result);\n    } catch (error) {\n      console.error('Error fetching analytics summary:', error);\n      res.status(500).json({ \n        message: 'Failed to fetch analytics summary',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  app.get('/api/courses/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const db = await connectToMongoDB();\n      \n      const course = await db.collection('courses').findOne({ id: id });\n      if (!course) {\n        return res.status(404).json({ message: 'Course not found' });\n      }\n\n      // Get additional course data\n      const [modules, enrollments] = await Promise.all([\n        db.collection('coursemodules').find({ courseId: id }).sort({ order: 1 }).toArray(),\n        db.collection('courseEnrollments').find({ courseId: id }).toArray()\n      ]);\n\n      const courseWithDetails = {\n        ...course,\n        modules,\n        enrolledUsers: enrollments.map((e: any) => e.userId),\n        enrollmentCount: enrollments.length,\n        moduleCount: modules.length\n      };\n\n      res.json(courseWithDetails);\n    } catch (error) {\n      console.error('Error fetching course:', error);\n      res.status(500).json({ message: 'Failed to fetch course' });\n    }\n  });\n\n  // Course modules routes - require enrollment and public course\n  app.get('/api/courses/:id/modules', protect, async (req: AuthRequest, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const userId = req.user.id;\n      const isAdmin = req.user.role === 'admin';\n      \n      // Check if user can access this course\n      const canAccess = await storage.canUserAccessCourse(courseId, userId, isAdmin);\n      if (!canAccess) {\n        return res.status(403).json({ message: \"Access denied: You must be enrolled in this public course to access its modules\" });\n      }\n      \n      const db = await connectToMongoDB();\n      const modules = await db.collection('coursemodules')\n        .find({ courseId: courseId })\n        .sort({ order: 1 })\n        .toArray();\n      \n      res.json(modules);\n    } catch (error) {\n      console.error('Error fetching course modules:', error);\n      res.status(500).json({ message: 'Failed to fetch course modules' });\n    }\n  });\n\n  app.post('/api/courses/:id/modules', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const db = await connectToMongoDB();\n      \n      // Generate unique ID using the same logic as other module creation methods\n      const lastModule = await db.collection('coursemodules').findOne({}, { sort: { id: -1 } });\n      const nextId = (lastModule?.id || 0) + 1;\n      \n      const moduleData = {\n        id: nextId,\n        courseId: courseId,\n        ...req.body,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      const result = await db.collection('coursemodules').insertOne(moduleData);\n      res.status(201).json({ ...moduleData, _id: result.insertedId });\n    } catch (error) {\n      console.error('Error creating course module:', error);\n      res.status(500).json({ message: 'Failed to create course module' });\n    }\n  });\n\n  app.put('/api/modules/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const moduleId = parseInt(req.params.id);\n      const db = await connectToMongoDB();\n      \n      const result = await db.collection('coursemodules').findOneAndUpdate(\n        { id: moduleId },\n        { $set: { ...req.body, updatedAt: new Date() } },\n        { returnDocument: 'after' }\n      );\n      \n      if (!result) {\n        return res.status(404).json({ message: 'Module not found' });\n      }\n      \n      res.json(result);\n    } catch (error) {\n      console.error('Error updating course module:', error);\n      res.status(500).json({ message: 'Failed to update course module' });\n    }\n  });\n\n  // Delegated to modules router\n  // app.use('/api/modules', modulesRouter);\n  /* removed: app.delete('/api/modules/:id' ... ) */\n\n\n\n  app.get('/api/users/me/enrollments', protect, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User ID not found\" });\n      }\n\n      // Use storage helper to coerce userId to ObjectId and populate properly\n      const enrollments = await storage.getCourseEnrollments(undefined, userId);\n      res.json(enrollments);\n    } catch (error) {\n      console.error('Error fetching user enrollments:', error);\n      res.status(500).json({ message: 'Failed to fetch user enrollments' });\n    }\n  });\n\n\n\n  // Course progress routes - require enrollment and public course\n  app.get('/api/courses/:id/progress', protect, async (req: AuthRequest, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const userId = req.user.id;\n      const isAdmin = req.user.role === 'admin';\n      \n      // Check if user can access this course\n      const canAccess = await storage.canUserAccessCourse(courseId, userId, isAdmin);\n      if (!canAccess) {\n        return res.status(403).json({ message: \"Access denied: You must be enrolled in this public course to view progress\" });\n      }\n      \n      const db = await connectToMongoDB();\n      \n      // Convert to ObjectId to match stored type\n      const userObjectId = new ObjectId(userId);\n      \n      // Get user's enrollment data\n      const enrollment = await db.collection('courseEnrollments')\n        .findOne({ courseId: courseId, userId: userObjectId });\n      \n      // Get all course modules\n      const modules = await db.collection('coursemodules')\n        .find({ courseId: courseId })\n        .sort({ order: 1 })\n        .toArray();\n      \n      // Get completed modules for this user\n      const completedModules = await db.collection('moduleProgress')\n        .find({ courseId: courseId, userId: userObjectId, isCompleted: true })\n        .toArray();\n      \n      const response = {\n        enrollment: enrollment ? {\n          id: enrollment.id,\n          courseId: enrollment.courseId,\n          userId: userId,\n          completedModules: enrollment.completedModules || [],\n          progress: enrollment.progress || 0\n        } : null,\n        completedModules: completedModules,\n        totalModules: modules.length\n      };\n      \n      res.json(response);\n    } catch (error) {\n      console.error('Error fetching course progress:', error);\n      res.status(500).json({ message: 'Failed to fetch user progress' });\n    }\n  });\n\n  // Use storage layer for consistent progress calculation\n  app.post('/api/courses/:courseId/modules/:moduleId/complete', protect, async (req: AuthRequest, res) => {\n    try {\n      const courseId = parseInt(req.params.courseId);\n      const moduleId = parseInt(req.params.moduleId);\n      const userId = req.user.id;\n      const { timeSpent, notes } = req.body;\n      \n      console.log(`[DEBUG] Module completion request - User: ${userId}, Course: ${courseId}, Module: ${moduleId}`);\n      \n      // Check if user can access this course\n      const isAdmin = req.user.role === 'admin';\n      const canAccess = await storage.canUserAccessCourse(courseId, userId, isAdmin);\n      if (!canAccess) {\n        return res.status(403).json({ message: \"Access denied: You must be enrolled in this course to complete modules\" });\n      }\n      \n      // Use storage layer method which has the correct progress calculation\n      await storage.markModuleComplete(userId, moduleId, courseId, timeSpent, notes);\n      \n      res.json({ success: true, message: 'Module marked as complete' });\n    } catch (error) {\n      console.error('Error marking module as complete:', error);\n      res.status(500).json({ message: 'Failed to mark module as complete' });\n    }\n  });\n\n  app.post('/api/courses/:courseId/modules/:moduleId/bookmark', protect, async (req: AuthRequest, res) => {\n    try {\n      const moduleId = parseInt(req.params.moduleId);\n      const courseId = parseInt(req.params.courseId);\n      const userId = req.user.id;\n      const db = await connectToMongoDB();\n      \n      const existingProgress = await db.collection('moduleProgress')\n        .findOne({ moduleId: moduleId, userId: userId });\n      \n      if (existingProgress) {\n        await db.collection('moduleProgress').updateOne(\n          { moduleId: moduleId, userId: userId },\n          { $set: { bookmarked: !existingProgress.bookmarked } }\n        );\n      } else {\n        await db.collection('moduleProgress').insertOne({\n          id: Date.now(),\n          moduleId: moduleId,\n          userId: userId,\n          courseId: courseId,\n          isCompleted: false,\n          timeSpent: 0,\n          bookmarked: true\n        });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error bookmarking module:', error);\n      res.status(500).json({ message: 'Failed to bookmark module' });\n    }\n  });\n\n  app.put('/api/courses/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = req.user.id;\n      const db = await connectToMongoDB();\n\n      // Check if course exists\n      const existingCourse = await db.collection('courses').findOne({ id: id });\n      if (!existingCourse) {\n        return res.status(404).json({ message: 'Course not found' });\n      }\n\n      // Update the course\n      const updateData = {\n        ...req.body,\n        updatedBy: userId,\n        updatedAt: new Date()\n      };\n\n      const result = await db.collection('courses').findOneAndUpdate(\n        { id: id },\n        { $set: updateData },\n        { returnDocument: 'after' }\n      );\n\n      if (!result) {\n        return res.status(404).json({ message: 'Course not found' });\n      }\n\n      res.json(result);\n    } catch (error) {\n      console.error('Error updating course:', error);\n      res.status(500).json({ message: 'Failed to update course' });\n    }\n  });\n\n  app.delete('/api/courses/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const db = await connectToMongoDB();\n\n      // Check if course exists\n      const course = await db.collection('courses').findOne({ id: id });\n      if (!course) {\n        return res.status(404).json({ message: 'Course not found' });\n      }\n\n      // Delete all related data in parallel for better performance\n      await Promise.all([\n        db.collection('coursemodules').deleteMany({ courseId: id }),\n        db.collection('courseEnrollments').deleteMany({ courseId: id }),\n        db.collection('moduleProgress').deleteMany({ courseId: id })\n      ]);\n\n      // Finally delete the course\n      const result = await db.collection('courses').deleteOne({ id: id });\n      \n      if (result.deletedCount === 0) {\n        return res.status(404).json({ message: 'Course not found' });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error('Error deleting course:', error);\n      res.status(500).json({ message: 'Failed to delete course' });\n    }\n  });\n\n  // Removed duplicate route - using the protected version above\n\n  app.get('/api/modules/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const module = await storage.getCourseModule(id);\n      if (!module) {\n        return res.status(404).json({ message: \"Module not found\" });\n      }\n      res.json(module);\n    } catch (error) {\n      console.error(\"Error fetching module:\", error);\n      res.status(500).json({ message: \"Failed to fetch module\" });\n    }\n  });\n\n  app.post('/api/courses/:id/modules', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const validatedData = insertCourseModuleSchema.parse({\n        ...req.body,\n        courseId,\n      });\n\n      const module = await storage.createCourseModule(validatedData);\n      res.status(201).json(module);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating module:\", error);\n      res.status(500).json({ message: \"Failed to create module\" });\n    }\n  });\n\n  app.put('/api/modules/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertCourseModuleSchema.partial().parse(req.body);\n\n      const module = await storage.updateCourseModule(id, validatedData);\n      res.json(module);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error updating module:\", error);\n      res.status(500).json({ message: \"Failed to update module\" });\n    }\n  });\n\n  app.delete('/api/modules/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteCourseModule(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting module:\", error);\n      res.status(500).json({ message: \"Failed to delete module\" });\n    }\n  });\n\n  // Course Enrollment routes - Support both self-enrollment and admin enrollment\n    // Delegated to courses router\n  // app.use('/api/courses', coursesRouter);\n  /* removed: app.post('/api/courses/:id/enroll' ... ) */\n\n  app.get('/api/users/me/enrollments', protect, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User ID not found\" });\n      }\n\n      const enrollments = await storage.getCourseEnrollments(undefined, userId);\n      res.json(enrollments);\n    } catch (error) {\n      console.error(\"Error fetching user enrollments:\", error);\n      res.status(500).json({ message: \"Failed to fetch user enrollments\" });\n    }\n  });\n\n  // Delete course enrollment (admin only)\n  app.delete('/api/courses/:id/enrollments/:userId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const userId = req.params.userId;\n      \n      const result = await storage.removeUserFromCourse(courseId, userId);\n      if (!result) {\n        return res.status(404).json({ message: \"Enrollment not found\" });\n      }\n      \n      res.json({ message: \"Student removed from course successfully\" });\n    } catch (error) {\n      console.error(\"Error removing student from course:\", error);\n      res.status(500).json({ message: \"Failed to remove student from course\" });\n    }\n  });\n\n  // Get course enrollments (for admin)\n  app.get('/api/courses/:id/enrollments', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const enrollments = await storage.getCourseEnrollments(courseId);\n      res.json(enrollments);\n    } catch (error) {\n      console.error(\"Error fetching course enrollments:\", error);\n      res.status(500).json({ message: \"Failed to fetch course enrollments\" });\n    }\n  });\n\n  // QR Code generation for course enrollment\n  app.get('/api/courses/:id/qr-code', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      if (isNaN(courseId)) {\n        return res.status(400).json({ message: 'Invalid course ID' });\n      }\n\n      // Verify course exists\n      const course = await storage.getCourse(courseId);\n      if (!course) {\n        return res.status(404).json({ message: 'Course not found' });\n      }\n\n      // Use the configured frontend URL or fallback to request host\n      const frontendUrl = process.env.FRONTEND_URL || `${req.protocol}://${req.get('host')}`;\n      const enrollmentUrl = `${frontendUrl}/enroll/${courseId}`;\n      \n      // Generate QR code as data URL\n      const qrCodeDataUrl = await QRCode.toDataURL(enrollmentUrl);\n\n      res.json({\n        qrCode: qrCodeDataUrl,\n        enrollmentUrl,\n        courseId,\n        courseTitle: course.title\n      });\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n      res.status(500).json({ message: 'Failed to generate QR code' });\n    }\n  });\n\n  // REMOVED server-side enrollment route - let React frontend handle /enroll/:courseId\n  // This allows users to see course details before authentication\n\n  app.get('/api/courses/:id/progress', protect, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"User ID not found\" });\n      }\n\n      const courseId = parseInt(req.params.id);\n      const progress = await storage.getUserCourseProgress(String(courseId), userId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching course progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch course progress\" });\n    }\n  });\n\n\n\n\n\n  // Code execution route for course modules\n  app.post('/api/modules/execute', protect, async (req: AuthRequest, res) => {\n    const cleanupTemp = async () => {\n      try {\n        const fs = require('fs').promises;\n        const path = require('path');\n        const tempDir = path.join(process.cwd(), 'execution-system', 'temp');\n        const tempFiles = await fs.readdir(tempDir);\n        const filesToRemove = tempFiles.filter((file: string) =>\n          file.startsWith('code.') ||\n          file.startsWith('input') ||\n          file.endsWith('.py') ||\n          file.endsWith(\".class\")||\n          file.endsWith(\".exec\")||\n          file.endsWith(\".jar\")||\n          file.endsWith('.js') ||\n          file.endsWith('.java') ||\n          file.endsWith('.cpp') ||\n          file.endsWith('.c')\n        );\n        if (filesToRemove.length > 0) {\n          console.log(`🧹 [MODULE-EXEC] Cleaning up ${filesToRemove.length} leftover files`);\n          for (const file of filesToRemove) {\n            try {\n              await fs.unlink(path.join(tempDir, file));\n              console.log(`🧹 [MODULE-EXEC] Cleaned up: ${file}`);\n            } catch {\n              // ignore\n            }\n          }\n        }\n      } catch {\n        // ignore\n      }\n    };\n\n    try {\n      const { code, language, input } = req.body;\n      if (!code || !language) {\n        return res.status(400).json({ message: 'Code and language are required' });\n      }\n\n      console.log(`🚀 [MODULE-EXEC] Executing ${language} code for course module`);\n      console.log(`📝 [MODULE-EXEC] Code length: ${code.length} characters`);\n      console.log(`🔧 [MODULE-EXEC] Language: ${language}`);\n      console.log(`📥 [MODULE-EXEC] Input: ${input || 'none'}`);\n\n      let result: any;\n      try {\n        // Docker-only execution; do not fallback\n        result = await executionService.executeCode(code, language, input);\n        console.log(`✅ [MODULE-EXEC] Execution completed`);\n        console.log(`📊 [MODULE-EXEC] Runtime: ${result.runtime}ms, Memory: ${result.memory}MB`);\n        console.log(`📤 [MODULE-EXEC] Output length: ${result.output?.length || 0} characters`);\n        if (result.error) {\n          console.log(`❌ [MODULE-EXEC] Error: ${result.error}`);\n        }\n      } catch (execError: any) {\n        // Surface Docker execution errors to the client as normal JSON\n        console.error('❌ [MODULE-EXEC] Docker execution failed:', execError);\n        await cleanupTemp();\n        return res.json({\n          success: false,\n          output: '',\n          error: execError?.message || String(execError) || 'Execution failed',\n          runtime: 0,\n          memory: 0,\n        });\n      }\n\n      await cleanupTemp();\n      return res.json({\n        success: !result?.error,\n        output: result?.output,\n        error: result?.error,\n        runtime: result?.runtime,\n        memory: result?.memory,\n      });\n    } catch (error: any) {\n      console.error('Error executing code:', error);\n      await cleanupTemp();\n      return res.json({\n        success: false,\n        output: '',\n        error: error?.message || 'Failed to execute code',\n        runtime: 0,\n        memory: 0,\n      });\n    }\n  });\n\n  // Code execution route for contest problems\n  app.post('/api/contests/execute', protect, async (req: AuthRequest, res) => {\n    try {\n      const { code, language, input } = req.body;\n\n      if (!code || !language) {\n        return res.status(400).json({ message: \"Code and language are required\" });\n      }\n\n      console.log(`🚀 [CONTEST-EXEC] Executing ${language} code for contest problem`);\n      console.log(`📝 [CONTEST-EXEC] Code length: ${code.length} characters`);\n      console.log(`🔧 [CONTEST-EXEC] Language: ${language}`);\n      console.log(`📥 [CONTEST-EXEC] Input: \"${input || 'none'}\"`);\n      console.log(`📥 [CONTEST-EXEC] Input length: ${input ? input.length : 0}`);\n      console.log(`📥 [CONTEST-EXEC] Input type: ${typeof input}`);\n      \n      // Use the same Docker execution service as assignments\n      const result = await executionService.executeCode(code, language, input);\n      \n      console.log(`✅ [CONTEST-EXEC] Execution completed`);\n      console.log(`📊 [CONTEST-EXEC] Runtime: ${result.runtime}ms, Memory: ${result.memory}MB`);\n      console.log(`📤 [CONTEST-EXEC] Output length: ${result.output?.length || 0} characters`);\n      if (result.error) {\n        console.log(`❌ [CONTEST-EXEC] Error: ${result.error}`);\n      }\n\n      // Additional cleanup check for contest execution\n      try {\n        const fs = require('fs').promises;\n        const path = require('path');\n        const tempDir = path.join(process.cwd(), 'execution-system', 'temp');\n        const tempFiles = await fs.readdir(tempDir);\n        const filesToRemove = tempFiles.filter((file: string) => \n          file.startsWith('code.') || \n          file.startsWith('input') || \n          file.endsWith('.py') || \n          file.endsWith('.js') || \n          file.endsWith('.java') || \n          file.endsWith('.cpp') || \n          file.endsWith('.c')\n        );\n        \n        if (filesToRemove.length > 0) {\n          console.log(`🧹 [CONTEST-EXEC] Cleaning up ${filesToRemove.length} leftover files`);\n          for (const file of filesToRemove) {\n            try {\n              await fs.unlink(path.join(tempDir, file));\n              console.log(`🧹 [CONTEST-EXEC] Cleaned up: ${file}`);\n            } catch (error) {\n              // Ignore cleanup errors\n            }\n          }\n        }\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n\n      res.json({\n        success: !result.error,\n        output: result.output,\n        error: result.error,\n        runtime: result.runtime,\n        memory: result.memory\n      });\n    } catch (error) {\n      console.error(\"Error executing code:\", error);\n      res.status(500).json({ \n        message: \"Failed to execute code\",\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // Leaderboard route\n  app.get('/api/leaderboard', async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const leaderboard = await storage.getLeaderboard(limit);\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  // Assignment routes\n  app.get('/api/assignments', protect, async (req: AuthRequest, res) => {\n    try {\n      const assignments = await storage.getAssignments();\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Error fetching assignments:\", error);\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  app.get('/api/assignments/:id', protect, async (req: AuthRequest, res) => {\n    try {\n      console.log('[DEBUG] Fetching assignment:', req.params.id);\n      const id = parseInt(req.params.id);\n      const assignment = await storage.getAssignment(id);\n\n      if (!assignment) {\n        console.log('[DEBUG] Assignment not found:', id);\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n\n      if (!assignment.isVisible) {\n        console.log('[DEBUG] Assignment not visible:', id);\n        return res.status(403).json({ message: \"Assignment is not available\" });\n      }\n\n      console.log('[DEBUG] Assignment found:', assignment);\n      res.json(assignment);\n    } catch (error) {\n      console.error(\"Error fetching assignment:\", error);\n      res.status(500).json({ message: \"Failed to fetch assignment\" });\n    }\n  });\n\n  app.post('/api/assignments', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      if (!userId) {\n        console.error('[DEBUG] No user ID found in request:', req.user);\n        return res.status(401).json({ message: \"User ID not found\" });\n      }\n\n      console.log('[DEBUG] Creating assignment with data:', req.body);\n\n      // Validate MCQ questions have at least one correct answer\n      for (const question of req.body.questions || []) {\n        if (question.type === 'mcq') {\n          if (!question.options || question.options.length < 2) {\n            return res.status(400).json({ \n              message: \"Invalid data\", \n              errors: [`Question \"${question.title}\" must have at least 2 options`] \n            });\n          }\n\n          const hasCorrectAnswer = question.options.some((opt: any) => opt.isCorrect);\n          if (!hasCorrectAnswer) {\n            return res.status(400).json({ \n              message: \"Invalid data\", \n              errors: [`Question \"${question.title}\" must have at least one correct answer`] \n            });\n          }\n        }\n      }\n\n      // Prepare the data for validation\n      const data = {\n        ...req.body,\n        deadline: req.body.deadline ? new Date(req.body.deadline) : undefined,\n        questions: req.body.questions.map((q: any) => ({\n          ...q,\n          points: Number(q.points),\n          timeLimit: q.timeLimit ? Number(q.timeLimit) : undefined,\n          memoryLimit: q.memoryLimit ? Number(q.memoryLimit) : undefined,\n          options: q.type === 'mcq' ? q.options?.map((opt: any) => ({\n            ...opt,\n            isCorrect: !!opt.isCorrect\n          })) : undefined\n        })),\n        maxAttempts: Number(req.body.maxAttempts) || 3,\n        isVisible: !!req.body.isVisible,\n        autoGrade: !!req.body.autoGrade,\n        createdBy: userId\n      };\n\n      console.log('[DEBUG] Validating assignment data:', data);\n      const validatedData = insertAssignmentSchema.parse(data);\n\n      console.log('[DEBUG] Creating assignment in storage');\n      const assignment = await storage.createAssignment(validatedData);\n\n      console.log('[DEBUG] Assignment created successfully:', assignment);\n      res.status(201).json(assignment);\n    } catch (error) {\n      console.error('[DEBUG] Error creating assignment:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid data\", \n          errors: error.errors.map(e => e.message)\n        });\n      }\n      res.status(500).json({ message: \"Failed to create assignment\" });\n    }\n  });\n\n  app.put('/api/assignments/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const assignment = await storage.updateAssignment(id, req.body);\n      res.json(assignment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error updating assignment:\", error);\n      res.status(500).json({ message: \"Failed to update assignment\" });\n    }\n  });\n\n  app.delete('/api/assignments/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteAssignment(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting assignment:\", error);\n      res.status(500).json({ message: \"Failed to delete assignment\" });\n    }\n  });\n\n  // Assignment filtering by course tag\n  app.get('/api/assignments/course/:courseTag', protect, async (req: AuthRequest, res) => {\n    try {\n      const courseTag = req.params.courseTag;\n      const assignments = await storage.getAssignmentsByCourseTag(courseTag);\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Error fetching assignments by course tag:\", error);\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  // Assignment submission routes\n  app.get('/api/assignments/:id/submissions', protect, async (req: AuthRequest, res) => {\n    try {\n      const assignmentId = parseInt(req.params.id);\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (user?.role === 'admin') {\n        // Admin can see all submissions for this assignment\n        const submissions = await storage.getAssignmentSubmissions(assignmentId);\n        res.json(submissions);\n      } else {\n        // Students can only see their own submission\n        const submission = await storage.getUserAssignmentSubmission(assignmentId, userId);\n        res.json(submission ? [submission] : []);\n      }\n    } catch (error) {\n      console.error(\"Error fetching assignment submissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch submissions\" });\n    }\n  });\n\n  app.get('/api/assignments/:id/submission', protect, async (req: AuthRequest, res) => {\n    try {\n      const assignmentId = parseInt(req.params.id);\n      const userId = req.user.id;\n\n      console.log('[DEBUG] Fetching submission:', { assignmentId, userId });\n\n      if (!userId) {\n        console.error('[DEBUG] No user ID found in request:', req.user);\n        return res.status(401).json({ message: \"User ID not found\" });\n      }\n\n      const submission = await storage.getUserAssignmentSubmission(assignmentId, userId);\n      console.log('[DEBUG] Submission found:', !!submission);\n\n      res.json(submission);\n    } catch (error) {\n      console.error(\"Error fetching user assignment submission:\", error);\n      res.status(500).json({ message: \"Failed to fetch submission\" });\n    }\n  });\n\n  app.post('/api/assignments/:id/submission', protect, async (req: AuthRequest, res) => {\n    try {\n      const assignmentId = parseInt(req.params.id);\n      const userId = req.user.id;\n\n      if (!userId) {\n        console.error('[DEBUG] No user ID found in request:', req.user);\n        return res.status(401).json({ message: \"User ID not found\" });\n      }\n\n      // Check if assignment exists\n      const assignment = await storage.getAssignment(assignmentId);\n      if (!assignment) {\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n\n      // Calculate max score\n      const maxScore = assignment.questions.reduce((sum, q) => sum + q.points, 0);\n\n      // Check if user already has a submission\n      let submission = await storage.getUserAssignmentSubmission(assignmentId, userId);\n\n      if (submission) {\n        // Update existing submission\n        submission = await storage.updateAssignmentSubmission(submission.id, {\n          questionSubmissions: req.body.questionSubmissions,\n          totalScore: req.body.totalScore || 0,\n          status: req.body.status || 'in_progress'\n        });\n      } else {\n        // Create new submission\n        submission = await storage.createAssignmentSubmission({\n          assignmentId,\n          userId,\n          questionSubmissions: req.body.questionSubmissions || [],\n          totalScore: req.body.totalScore || 0,\n          maxScore,\n          status: req.body.status || 'in_progress'\n        });\n      }\n\n      res.json(submission);\n    } catch (error) {\n      console.error(\"Error creating/updating assignment submission:\", error);\n      res.status(500).json({ message: \"Failed to save submission\" });\n    }\n  });\n\n  app.post('/api/assignments/:id/submit', protect, async (req: AuthRequest, res) => {\n    try {\n      const assignmentId = parseInt(req.params.id);\n      const userId = req.user.id;\n\n      if (!userId) {\n        console.error('[DEBUG] No user ID found in request:', req.user);\n        return res.status(401).json({ message: \"User ID not found\" });\n      }\n\n      // Check if assignment exists\n      const assignment = await storage.getAssignment(assignmentId);\n      if (!assignment) {\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n\n      // Check if assignment is visible\n      if (!assignment.isVisible) {\n        return res.status(403).json({ message: \"Assignment is not available\" });\n      }\n\n      // Check if assignment deadline has passed\n      if (assignment.deadline && new Date() > new Date(assignment.deadline)) {\n        return res.status(400).json({ message: \"Assignment deadline has passed\" });\n      }\n\n      // Check if user has a submission\n      const submission = await storage.getUserAssignmentSubmission(assignmentId, userId);\n      if (!submission) {\n        return res.status(400).json({ message: \"No submission found to submit\" });\n      }\n\n      // Check if submission is already submitted\n      if (submission.status === 'submitted' || submission.status === 'graded') {\n        return res.status(400).json({ message: \"Assignment already submitted\" });\n      }\n\n      // Get all submissions for this assignment by this user to check attempts\n      const allSubmissions = await storage.getAssignmentSubmissions(assignmentId, userId);\n      const submittedCount = allSubmissions.filter(s => s.status === 'submitted' || s.status === 'graded').length;\n\n      // Check if user has exceeded maximum attempts\n      if (assignment.maxAttempts && submittedCount >= assignment.maxAttempts) {\n        return res.status(400).json({ message: \"Maximum attempts exceeded\" });\n      }\n\n      // Validate the submission data\n      const validatedData = insertAssignmentSubmissionSchema.parse({\n        ...submission,\n        status: 'submitted',\n        submittedAt: new Date()\n      });\n\n      // Submit the assignment\n      const submittedAssignment = await storage.updateAssignmentSubmission(submission.id, {\n        status: 'submitted',\n        submittedAt: new Date()\n      });\n\n      res.json(submittedAssignment);\n    } catch (error) {\n      console.error(\"Error submitting assignment:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid submission data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to submit assignment\" });\n    }\n  });\n\n  // Code execution for coding problems\n  app.post('/api/execute', protect, async (req: AuthRequest, res) => {\n    try {\n      const { code, language, input } = req.body;\n\n      // Execute code with real execution\n      const result = await executeCodeUnified(code, language, input);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error executing code:\", error);\n      res.status(500).json({ message: \"Failed to execute code\" });\n    }\n  });\n\n  // Group routes\n  app.get('/api/groups', protect, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      const groups = await storage.getUserGroups(userId);\n      res.json(groups);\n    } catch (error) {\n      console.error(\"Error fetching groups:\", error);\n      res.status(500).json({ message: \"Failed to fetch groups\" });\n    }\n  });\n\n  app.post('/api/groups', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n\n      const validatedData = insertGroupSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n\n      const group = await storage.createGroup(validatedData);\n      res.status(201).json(group);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating group:\", error);\n      res.status(500).json({ message: \"Failed to create group\" });\n    }\n  });\n\n  // Announcement routes\n  app.get('/api/announcements', protect, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      const announcements = await storage.getUserAnnouncements(userId);\n      res.json(announcements);\n    } catch (error) {\n      console.error(\"Error fetching announcements:\", error);\n      res.status(500).json({ message: \"Failed to fetch announcements\" });\n    }\n  });\n\n  app.post('/api/announcements', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can create announcements\" });\n      }\n\n      const validatedData = insertAnnouncementSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n\n      const announcement = await storage.createAnnouncement(validatedData);\n      res.status(201).json(announcement);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating announcement:\", error);\n      res.status(500).json({ message: \"Failed to create announcement\" });\n    }\n  });\n\n  // Contest participation\n  app.post('/api/contests/:id/participate', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = parseInt(req.params.id);\n      const userId = req.user.id;\n\n      const contest = await storage.getContest(contestId);\n      if (!contest) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n\n      const participant = await storage.registerForContest({\n        contestId,\n        userId,\n        score: \"0.00\",\n        submissions: 0\n      });\n\n      res.status(201).json(participant);\n    } catch (error) {\n      console.error(\"Error registering for contest:\", error);\n      res.status(500).json({ message: \"Failed to register for contest\" });\n    }\n  });\n\n  app.get('/api/contests/:id/participants', async (req, res) => {\n    try {\n      const contestId = parseInt(req.params.id);\n      const participants = await storage.getContestParticipants(contestId);\n      res.json(participants);\n    } catch (error) {\n      console.error(\"Error fetching contest participants:\", error);\n      res.status(500).json({ message: \"Failed to fetch participants\" });\n    }\n  });\n\n  // Admin routes\n  app.patch('/api/admin/users/:id/role', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const targetUserId = req.params.id;\n      const { role } = req.body;\n\n      if (!['student', 'admin'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n\n      const updatedUser = await storage.updateUserRole(targetUserId, role);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // Problem Set Enrollment Management\n  app.get('/api/problem-sets/:id/enrollments', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const problemSetId = req.params.id;\n      console.log(`[ENROLLMENT DEBUG] Fetching enrollments for problem set: ${problemSetId}`);\n      const enrollments = await storage.getProblemSetEnrollments(problemSetId);\n      res.json(enrollments);\n    } catch (error) {\n      console.error(\"Error fetching problem set enrollments:\", error);\n      res.status(500).json({ message: \"Failed to fetch problem set enrollments\" });\n    }\n  });\n\n  app.post('/api/problem-sets/:id/enroll', protect, async (req: AuthRequest, res) => {\n    try {\n      const problemSetId = req.params.id;\n      const { userIds } = req.body;\n      const requesterId = req.user.id;\n      const isAdmin = req.user.role === 'admin';\n\n      // Handle bulk enrollment for admin users\n      if (userIds && Array.isArray(userIds) && isAdmin) {\n        console.log('Bulk enrollment request:', { userIds, problemSetId });\n        const enrollments = [];\n        for (const userId of userIds) {\n          try {\n            console.log('Enrolling user ID:', userId, 'Type:', typeof userId);\n            const enrollment = await storage.enrollUserInProblemSet(userId, problemSetId);\n            enrollments.push(enrollment);\n          } catch (error) {\n            console.error(`Error enrolling user ${userId}:`, error);\n          }\n        }\n        return res.json({ \n          message: `Successfully enrolled ${enrollments.length} students`,\n          enrollments \n        });\n      }\n\n      // Check if problem set exists\n      const problemSet = await storage.getProblemSet(problemSetId);\n      if (!problemSet) {\n        return res.status(404).json({ message: \"Assignment not found\" });\n      }\n\n      // Handle single user enrollment (self-enrollment)\n      const enrollment = await storage.enrollUserInProblemSet(requesterId, problemSetId);\n      res.json(enrollment);\n    } catch (error) {\n      console.error(\"Error enrolling user in problem set:\", error);\n      \n      // Handle duplicate enrollment gracefully\n      if (error.message && error.message.includes('already enrolled')) {\n        return res.status(409).json({ message: \"User is already enrolled in this assignment\" });\n      }\n      \n      res.status(500).json({ message: \"Failed to enroll in assignment\" });\n    }\n  });\n\n  app.get('/api/problem-sets/:id/qr-code', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const problemSetId = req.params.id;\n\n      // Verify problem set exists\n      const problemSet = await storage.getProblemSet(problemSetId);\n      if (!problemSet) {\n        return res.status(404).json({ message: 'Problem set not found' });\n      }\n\n      // Use the configured frontend URL or fallback to request host\n      const frontendUrl = process.env.FRONTEND_URL || `${req.protocol}://${req.get('host')}`;\n      const enrollmentUrl = `${frontendUrl}/enroll-problem-set/${problemSetId}`;\n      \n      // Generate QR code as data URL\n      const qrCodeDataUrl = await QRCode.toDataURL(enrollmentUrl);\n\n      res.json({\n        qrCode: qrCodeDataUrl,\n        enrollmentUrl,\n        problemSetId,\n        problemSetTitle: problemSet.title\n      });\n    } catch (error) {\n      console.error('Error generating QR code:', error);\n      res.status(500).json({ message: 'Failed to generate QR code' });\n    }\n  });\n\n  // REMOVED server-side problem set enrollment route - let React frontend handle /enroll-problem-set/:problemSetId\n  // This allows users to see assignment details before authentication\n\n  app.get('/api/users/me/problem-set-enrollments', protect, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      const enrollments = await storage.getUserProblemSetEnrollments(userId);\n      res.json(enrollments);\n    } catch (error) {\n      console.error(\"Error fetching user problem set enrollments:\", error);\n      res.status(500).json({ message: \"Failed to fetch problem set enrollments\" });\n    }\n  });\n\n  app.put('/api/problem-set-enrollments/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const enrollmentId = parseInt(req.params.id);\n      const enrollmentData = req.body;\n\n      const updatedEnrollment = await storage.updateProblemSetEnrollment(enrollmentId, enrollmentData);\n      if (!updatedEnrollment) {\n        return res.status(404).json({ message: 'Enrollment not found' });\n      }\n\n      res.json(updatedEnrollment);\n    } catch (error) {\n      console.error(\"Error updating problem set enrollment:\", error);\n      res.status(500).json({ message: \"Failed to update enrollment\" });\n    }\n  });\n\n  app.delete('/api/problem-set-enrollments/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const enrollmentId = parseInt(req.params.id);\n      await storage.deleteProblemSetEnrollment(enrollmentId);\n      res.json({ message: 'Enrollment deleted successfully' });\n    } catch (error) {\n      console.error(\"Error deleting problem set enrollment:\", error);\n      res.status(500).json({ message: \"Failed to delete enrollment\" });\n    }\n  });\n\n  // Get user by ID (for enrollment user data fetching)\n  app.get('/api/users/:userId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.params.userId;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      // Return user data without sensitive information\n      res.json({\n        id: user.id,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        email: user.email,\n        role: user.role,\n        createdAt: user.createdAt\n      });\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      res.status(500).json({ message: 'Failed to fetch user' });\n    }\n  });\n\n  // Add authentication endpoints for email/password login\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: 'Email and password are required' });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User already exists with this email' });\n      }\n\n      // Hash password\n      const bcrypt = require('bcryptjs');\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user\n      const newUser = await storage.createUser({\n        id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        email,\n        password: hashedPassword,\n        role: 'student'\n      });\n\n      // Generate JWT token\n      const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n      const jwt = require('jsonwebtoken');\n      const token = jwt.sign(\n        { \n          id: newUser.id, \n          email: newUser.email, \n          role: newUser.role \n        }, \n        JWT_SECRET, \n        { expiresIn: '7d' }\n      );\n\n      res.json({\n        token,\n        user: {\n          id: newUser.id,\n          email: newUser.email,\n          role: newUser.role\n        },\n        message: 'Account created successfully'\n      });\n    } catch (error) {\n      console.error('Signup error:', error);\n      res.status(500).json({ message: 'Failed to create account' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: 'Email and password are required' });\n      }\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.password) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Check password\n      const bcrypt = require('bcryptjs');\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Generate JWT token\n      const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n      const jwt = require('jsonwebtoken');\n      const token = jwt.sign(\n        { \n          id: user.id, \n          email: user.email, \n          role: user.role \n        }, \n        JWT_SECRET, \n        { expiresIn: '7d' }\n      );\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          role: user.role\n        },\n        message: 'Login successful'\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: 'Failed to login' });\n    }\n  });\n\n  // Google OAuth login placeholder\n  app.get('/api/auth/google', (req, res) => {\n    // Check for returnTo parameter and pass it through\n    const returnTo = req.query.returnTo;\n    if (returnTo) {\n      res.redirect(`/login?provider=google&returnTo=${encodeURIComponent(returnTo as string)}`);\n    } else {\n      res.redirect('/login?provider=google');\n    }\n  });\n\n  // Admin contest routes\n  app.get('/api/admin/contests', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contests = await contestStorage.getAllContests();\n      \n      // For each contest, fetch participants and enrich with user data\n      const contestsWithParticipants = await Promise.all(\n        contests.map(async (contest) => {\n          try {\n            const participants = await contestStorage.getContestParticipants(contest.id);\n            \n            // Enrich participants with user data\n            const participantsWithUserData = await Promise.all(\n              participants.map(async (participant) => {\n                try {\n                  console.log(`[DEBUG] Fetching user data for participant: ${participant.userId}`);\n                  \n                  // Try to get user by different possible ID formats\n                  let user = await storage.getUser(participant.userId);\n                  \n                  // If not found by string ID, try as ObjectId\n                  if (!user && participant.userId) {\n                    try {\n                      // Try to find user by _id if the userId is an ObjectId string\n                      const db = getDb();\n                      user = await db.collection('users').findOne({ \n                        $or: [\n                          { _id: new ObjectId(participant.userId) },\n                          { id: participant.userId }\n                        ]\n                      });\n                    } catch (objIdError) {\n                      console.log(`[DEBUG] ObjectId lookup failed for ${participant.userId}:`, objIdError);\n                    }\n                  }\n                  \n                  console.log(`[DEBUG] User data for ${participant.userId}:`, user ? 'Found' : 'Not found');\n                  \n                  return {\n                    ...participant,\n                    user: user ? {\n                      id: user.id || user._id?.toString(),\n                      firstName: user.firstName,\n                      lastName: user.lastName,\n                      email: user.email\n                    } : null\n                  };\n                } catch (error) {\n                  console.error('Error fetching user data for participant:', participant.userId, error);\n                  return {\n                    ...participant,\n                    user: null\n                  };\n                }\n              })\n            );\n            \n            return {\n              ...contest,\n              participants: participantsWithUserData\n            };\n          } catch (error) {\n            console.error('Error fetching participants for contest:', contest.id, error);\n            return {\n              ...contest,\n              participants: []\n            };\n          }\n        })\n      );\n      \n      res.json(contestsWithParticipants);\n    } catch (error) {\n      console.error(\"Error fetching admin contests:\", error);\n      res.status(500).json({ message: \"Failed to fetch contests\" });\n    }\n  });\n\n  app.post('/api/admin/contests', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user.id;\n      const { problems, ...contestData } = req.body;\n\n      // Create problem instances from selected problems (copy problems like in Assignments/Courses)\n      const problemInstances = problems && problems.length > 0 \n        ? await contestStorage.createContestProblemInstances(problems, `contest_${Date.now()}`)\n        : [];\n\n      const contest = await contestStorage.createContest({\n        ...contestData,\n        problems: problemInstances,\n        createdBy: userId\n      });\n\n      res.status(201).json(contest);\n    } catch (error) {\n      console.error(\"Error creating admin contest:\", error);\n      res.status(400).json({ message: \"Failed to create contest\", error: error.message });\n    }\n  });\n\n  app.delete('/api/admin/contests/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.id;\n      const deleted = await contestStorage.deleteContest(contestId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n\n      res.json({ message: \"Contest deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting admin contest:\", error);\n      res.status(500).json({ message: \"Failed to delete contest\" });\n    }\n  });\n\n  // Admin problems endpoint for contest creation\n  app.get('/api/admin/problems', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const problems = await contestStorage.getAllProblems();\n      res.json(problems);\n    } catch (error) {\n      console.error(\"Error fetching admin problems:\", error);\n      res.status(500).json({ message: \"Failed to fetch problems\" });\n    }\n  });\n\n\n\n  // Contest editing endpoint\n  app.put('/api/admin/contests/:id', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.id;\n      const { problems, ...contestData } = req.body;\n\n      console.log('[DEBUG] Updating contest with data:', { contestId, problems: problems?.length, contestData });\n\n      // Create problem instances from selected problems if provided\n      let problemInstances = [];\n      if (problems && problems.length > 0) {\n        // When editing, problems already have originalProblemId, so we need to preserve it\n        problemInstances = problems.map((problem, index) => ({\n          id: problem.id, // Keep the existing contest problem ID\n          originalProblemId: problem.originalProblemId || problem.id, // Use originalProblemId if available\n          title: problem.title,\n          description: problem.description,\n          difficulty: problem.difficulty,\n          points: problem.points || 100,\n          order: index,\n          timeLimit: problem.timeLimit,\n          memoryLimit: problem.memoryLimit,\n          constraints: problem.constraints,\n          inputFormat: problem.inputFormat,\n          outputFormat: problem.outputFormat,\n          maxSubmissions: undefined,\n          partialScoring: false,\n          // Copy test cases and examples\n          customTestCases: problem.testCases,\n          customExamples: problem.examples,\n          customStarterCode: problem.starterCode,\n          // Copy all other problem properties\n          tags: problem.tags || [],\n          notes: problem.notes || \"\",\n          examples: problem.examples || [],\n          testCases: problem.testCases || [],\n          starterCode: problem.starterCode || {}\n        }));\n      }\n\n      console.log('[DEBUG] Problem instances to update:', problemInstances.length);\n\n      // Build update payload without touching problems unless explicitly provided\n      const updatePayload: any = { ...contestData };\n      if (Array.isArray(problems) && problems.length > 0) {\n        updatePayload.problems = problemInstances;\n      }\n      const updatedContest = await contestStorage.updateContest(contestId, updatePayload);\n\n      if (!updatedContest) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n\n      console.log('[DEBUG] Contest updated successfully:', updatedContest.id);\n      res.json(updatedContest);\n    } catch (error) {\n      console.error(\"Error updating admin contest:\", error);\n      res.status(400).json({ message: \"Failed to update contest\", error: error.message });\n    }\n  });\n\n  // Get contest participants\n  app.get('/api/admin/contests/:id/participants', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.id;\n      const participants = await contestStorage.getContestParticipants(contestId);\n      \n      // Enrich participants with user data\n      const participantsWithUserData = await Promise.all(\n        participants.map(async (participant) => {\n          try {\n            console.log(`[DEBUG] Fetching user data for participant: ${participant.userId}`);\n            \n            // Try to get user by different possible ID formats\n            let user = await storage.getUser(participant.userId);\n            \n            // If not found by string ID, try as ObjectId\n            if (!user && participant.userId) {\n              try {\n                // Try to find user by _id if the userId is an ObjectId string\n                const db = getDb();\n                user = await db.collection('users').findOne({ \n                  $or: [\n                    { _id: new ObjectId(participant.userId) },\n                    { id: participant.userId }\n                  ]\n                });\n              } catch (objIdError) {\n                console.log(`[DEBUG] ObjectId lookup failed for ${participant.userId}:`, objIdError);\n              }\n            }\n            \n            console.log(`[DEBUG] User data for ${participant.userId}:`, user ? 'Found' : 'Not found');\n            \n            return {\n              ...participant,\n              user: user ? {\n                id: user._id?.toString() || user.id,\n                firstName: user.firstName || '',\n                lastName: user.lastName || '',\n                email: user.email || '',\n              } : null\n            };\n          } catch (error) {\n            console.error(`[DEBUG] Error fetching user data for participant ${participant.userId}:`, error);\n            return {\n              ...participant,\n              user: null\n            };\n          }\n        })\n      );\n      \n      res.json(participantsWithUserData);\n    } catch (error) {\n      console.error(\"Error fetching contest participants:\", error);\n      res.status(500).json({ message: \"Failed to fetch participants\" });\n    }\n  });\n\n  // Add participant to contest\n  app.post('/api/admin/contests/:id/participants', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.id;\n      const { userId } = req.body;\n\n      if (!userId) {\n        return res.status(400).json({ message: \"User ID is required\" });\n      }\n\n      const participant = await contestStorage.registerParticipant(contestId, userId);\n      res.status(201).json(participant);\n    } catch (error) {\n      console.error(\"Error adding participant to contest:\", error);\n      res.status(400).json({ message: \"Failed to add participant\", error: error.message });\n    }\n  });\n\n  // Remove participant from contest\n  app.delete('/api/admin/contests/:id/participants/:userId', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.id;\n      const userId = req.params.userId;\n\n      const success = await contestStorage.unregisterParticipant(contestId, userId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Participant not found\" });\n      }\n\n      res.json({ message: \"Participant removed successfully\" });\n    } catch (error) {\n      console.error(\"Error removing participant from contest:\", error);\n      res.status(500).json({ message: \"Failed to remove participant\" });\n    }\n  });\n\n  // User contest routes\n  // Duplicate handler removed; unified earlier '/api/contests' route in this file handles user-visible contests.\n\n\n  app.get('/api/contests/:contestId', async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const contest = await contestStorage.getContest(contestId);\n      \n      if (!contest) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n      \n      // Fetch full problem details for each contest problem\n      const problemsWithDetails = await Promise.all(\n        contest.problems.map(async (contestProblem) => {\n          try {\n            // Get the original problem from the problems collection\n            const db = getDb();\n            \n            // Try different ways to find the original problem\n            let originalProblem = null;\n            \n            // First try by ObjectId if it's a valid ObjectId string\n            if (contestProblem.originalProblemId && typeof contestProblem.originalProblemId === 'string') {\n              try {\n                originalProblem = await db.collection('problems').findOne({\n                  _id: new ObjectId(contestProblem.originalProblemId)\n                });\n              } catch (objIdError) {\n                console.log(`ObjectId conversion failed for ${contestProblem.originalProblemId}:`, objIdError);\n              }\n            }\n            \n            // If not found by ObjectId, try by id field\n            if (!originalProblem && contestProblem.originalProblemId) {\n              originalProblem = await db.collection('problems').findOne({\n                id: contestProblem.originalProblemId\n              });\n            }\n            \n            // If still not found, try by numeric id\n            if (!originalProblem && contestProblem.originalProblemId) {\n              originalProblem = await db.collection('problems').findOne({\n                id: parseInt(contestProblem.originalProblemId.toString())\n              });\n            }\n            \n            // If still not found, try to extract numeric part from string IDs like \"1754502101258_1\"\n            if (!originalProblem && contestProblem.originalProblemId && typeof contestProblem.originalProblemId === 'string') {\n              const match = contestProblem.originalProblemId.match(/_(\\d+)$/);\n              if (match) {\n                const numericId = parseInt(match[1]);\n                originalProblem = await db.collection('problems').findOne({\n                  id: numericId\n                });\n              }\n            }\n            \n            if (!originalProblem) {\n              console.warn(`Original problem not found for ID: ${contestProblem.originalProblemId}`);\n              return contestProblem;\n            }\n            \n            console.log(`Found original problem for ID: ${contestProblem.originalProblemId}`, {\n              title: originalProblem.title,\n              hasDescription: !!originalProblem.description,\n              hasExamples: !!originalProblem.examples,\n              hasStarterCode: !!originalProblem.starterCode\n            });\n            \n            // Merge contest problem with original problem details\n            return {\n              ...originalProblem,\n              id: contestProblem.id, // Keep contest problem ID\n              originalProblemId: contestProblem.originalProblemId,\n              points: contestProblem.points || 100,\n              order: contestProblem.order || 0,\n              // Override with contest-specific values if they exist\n              title: contestProblem.title || originalProblem.title,\n              description: contestProblem.description || originalProblem.description,\n              difficulty: contestProblem.difficulty || originalProblem.difficulty,\n              timeLimit: contestProblem.timeLimit || originalProblem.timeLimit,\n              memoryLimit: contestProblem.memoryLimit || originalProblem.memoryLimit,\n              constraints: contestProblem.constraints || originalProblem.constraints,\n              inputFormat: contestProblem.inputFormat || originalProblem.inputFormat,\n              outputFormat: contestProblem.outputFormat || originalProblem.outputFormat,\n              examples: contestProblem.customExamples || originalProblem.examples,\n              testCases: contestProblem.customTestCases || originalProblem.testCases,\n              starterCode: contestProblem.customStarterCode || originalProblem.starterCode,\n            };\n          } catch (error) {\n            console.error('Error fetching problem details:', error);\n            return contestProblem;\n          }\n        })\n      );\n      \n      // Get participants with user data\n      const participants = await contestStorage.getContestParticipants(contestId);\n      const participantsWithUserData = await Promise.all(\n        participants.map(async (participant) => {\n          try {\n            let user = await storage.getUser(participant.userId);\n            \n            if (!user && participant.userId) {\n              try {\n                const db = getDb();\n                user = await db.collection('users').findOne({\n                  $or: [\n                    { _id: new ObjectId(participant.userId) },\n                    { id: participant.userId }\n                  ]\n                });\n              } catch (objIdError) {\n                console.log(`ObjectId lookup failed for ${participant.userId}:`, objIdError);\n              }\n            }\n            \n            return {\n              ...participant,\n              user: user ? {\n                id: user.id || user._id?.toString(),\n                firstName: user.firstName,\n                lastName: user.lastName,\n                email: user.email\n              } : null\n            };\n          } catch (error) {\n            console.error('Error fetching user data for participant:', participant.userId, error);\n            return {\n              ...participant,\n              user: null\n            };\n          }\n        })\n      );\n      \n      res.json({\n        ...contest,\n        problems: problemsWithDetails,\n        participants: participantsWithUserData\n      });\n    } catch (error) {\n      console.error(\"Error fetching contest details:\", error);\n      res.status(500).json({ message: \"Failed to fetch contest details\" });\n    }\n  });\n\n  app.get('/api/contests/:contestId/submissions', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const userId = req.user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const submissions = await contestStorage.getParticipantSubmissions(contestId, userId);\n      res.json(submissions);\n    } catch (error) {\n      console.error(\"Error fetching contest submissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch submissions\" });\n    }\n  });\n\n  app.post('/api/contests/:contestId/problems/:problemId/submit', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const problemId = req.params.problemId;\n      const userId = req.user?.id;\n      const { code, language } = req.body;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      // Check if user is enrolled in the contest\n      const participants = await contestStorage.getContestParticipants(contestId);\n      const isEnrolled = participants.some(p => p.userId === userId);\n      \n      if (!isEnrolled) {\n        return res.status(403).json({ message: \"You must be enrolled in the contest to submit solutions\" });\n      }\n      \n      // Check if contest is active\n      const contest = await contestStorage.getContest(contestId);\n      if (!contest) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n      \n      const now = new Date();\n      const startTime = new Date(contest.startTime as any);\n      const endTime = new Date(contest.endTime as any);\n      \n      // Allow submissions as long as the contest hasn't ended; some environments may have clock/timezone skew\n      if (!isNaN(endTime.getTime()) && now > endTime) {\n        return res.status(400).json({ message: \"Contest has ended\" });\n      }\n      \n      // Execute the code using the execution service\n      const result = await executionService.executeCode(code, language);\n      \n      // Determine submission status based on test cases\n      const contestProblem = contest.problems.find(p => p.id === problemId);\n      if (!contestProblem) {\n        return res.status(404).json({ message: \"Problem not found\" });\n      }\n      \n      let status = 'wrong_answer';\n      let score = 0;\n      \n      // Run against test cases\n      if (contestProblem.testCases && contestProblem.testCases.length > 0) {\n        let passedTests = 0;\n        for (const testCase of contestProblem.testCases) {\n          try {\n            const testResult = await executionService.executeCode(code, language, testCase.input);\n            if (testResult.output.trim() === testCase.expectedOutput.trim()) {\n              passedTests++;\n            }\n          } catch (error) {\n            console.error('Test case execution failed:', error);\n          }\n        }\n        \n        if (passedTests === contestProblem.testCases.length) {\n          status = 'accepted';\n          score = contestProblem.points;\n        }\n      }\n      \n      // Calculate penalty based on submission time and attempts\n      const contestStartTime = new Date(contest.startTime);\n      const submissionTime = new Date();\n      const timeElapsed = Math.floor((submissionTime.getTime() - contestStartTime.getTime()) / (1000 * 60)); // minutes\n      \n      // Get previous submissions for this problem by this user\n      const previousSubmissions = await contestStorage.getParticipantSubmissions(contestId, userId);\n      const problemWrongSubs = previousSubmissions.filter(s => s.problemId === problemId && (s.status?.toLowerCase?.() === 'wrong_answer'));\n      const alreadyAccepted = previousSubmissions.some(s => s.problemId === problemId && (s.status?.toLowerCase?.() === 'accepted'));\n      const penaltyMinutes = problemWrongSubs.length * 20; // 20 minutes penalty per wrong attempt\n      \n      // Calculate final score and penalty (avoid re-awarding for already solved problems)\n      const finalScore = status === 'accepted' && !alreadyAccepted ? score : 0;\n      const totalPenaltyForThisSubmission = penaltyMinutes;\n      \n      // Create submission record\n      const submission = await contestStorage.submitSolution({\n        contestId,\n        problemId,\n        userId,\n        code,\n        language,\n        status,\n        points: finalScore,\n        runtime: result.runtime,\n        memory: result.memory,\n        submissionTime: submissionTime,\n        penalty: totalPenaltyForThisSubmission,\n        isContestSubmission: true\n      });\n      \n      // Recompute participant aggregate score and penalty from unique accepted problems\n      const allSubs = await contestStorage.getParticipantSubmissions(contestId, userId);\n      const acceptedByProblem = new Map<string, typeof submission>();\n      for (const s of allSubs) {\n        if (s.status?.toLowerCase?.() === 'accepted') {\n          // Keep the earliest accepted submission per problem to compute attempts/penalty\n          const existing = acceptedByProblem.get(s.problemId);\n          if (!existing || (s.submissionTime < existing.submissionTime)) {\n            acceptedByProblem.set(s.problemId, s as any);\n          }\n        }\n      }\n      const solvedIds = new Set(Array.from(acceptedByProblem.keys()));\n      const aggregateScore = contest.problems\n        .filter(p => solvedIds.has(p.id))\n        .reduce((sum, p) => sum + (p.points || 0), 0);\n      const aggregatePenalty = Array.from(acceptedByProblem.values())\n        .reduce((sum, s) => sum + (s.penalty || 0), 0);\n      \n      // Update participant totals and rankings\n      await contestStorage.updateParticipantScore(contestId, userId, aggregateScore, aggregatePenalty);\n      await contestStorage.updateRankings(contestId);\n      \n      res.status(201).json({\n        ...submission,\n        timeElapsed,\n        penaltyMinutes,\n        totalPenalty: totalPenaltyForThisSubmission,\n        attempts: problemWrongSubs.length + 1,\n        alreadyAccepted\n      });\n    } catch (error) {\n      console.error(\"Error submitting solution:\", error);\n      res.status(500).json({ message: \"Failed to submit solution\" });\n    }\n  });\n\n  app.get('/api/contests/:contestId/leaderboard', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const leaderboard = await contestStorage.generateLeaderboard(contestId);\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error generating leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to generate leaderboard\" });\n    }\n  });\n\n  // Get contest analytics\n  app.get('/api/contests/:contestId/analytics', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const analytics = await contestStorage.getContestAnalytics(contestId);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching contest analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch contest analytics\" });\n    }\n  });\n\n  // Get user progress in contest\n  app.get('/api/contests/:contestId/progress', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const userId = req.user?.id;\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const contest = await contestStorage.getContest(contestId);\n      if (!contest) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n\n      const submissions = await contestStorage.getParticipantSubmissions(contestId, userId);\n      const participants = await contestStorage.getContestParticipants(contestId);\n      const participant = participants.find(p => p.userId === userId);\n\n      // Calculate progress (case-insensitive status) & restrict to problems in this contest\n      const acceptedAll = new Set<string>(\n        submissions\n          .filter(s => s.status?.toLowerCase?.() === 'accepted')\n          .map(s => s.problemId)\n      );\n      const contestProblemIds = new Set<string>(contest.problems.map(p => p.id));\n      const acceptedInContest = new Set(Array.from(acceptedAll).filter(id => contestProblemIds.has(id)));\n\n      const totalProblems = contest.problems.length;\n      const solvedCount = Math.min(acceptedInContest.size, totalProblems);\n      const totalPoints = contest.problems.reduce((sum, problem) => sum + problem.points, 0);\n      const earnedPoints = contest.problems\n        .filter(p => acceptedInContest.has(p.id))\n        .reduce((sum, p) => sum + (p.points || 0), 0);\n\n      // Calculate time remaining\n      const now = new Date();\n      const endTime = new Date(contest.endTime);\n      const timeRemaining = Math.max(0, endTime.getTime() - now.getTime());\n\n      res.json({\n        contestId,\n        userId,\n        solvedProblems: Array.from(acceptedInContest),\n        solvedCount,\n        totalProblems,\n        progress: (solvedCount / Math.max(1, totalProblems)) * 100,\n        earnedPoints,\n        totalPoints,\n        timeRemaining,\n        participant: participant || null,\n        submissions: submissions.length,\n        lastSubmission: submissions.length > 0 ? submissions[submissions.length - 1] : null\n      });\n    } catch (error) {\n      console.error(\"Error fetching contest progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch contest progress\" });\n    }\n  });\n\n  // Get contest standings with detailed stats\n  app.get('/api/contests/:contestId/standings', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const leaderboard = await contestStorage.generateLeaderboard(contestId);\n      const contest = await contestStorage.getContest(contestId);\n      \n      if (!contest) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n\n      // Add problem-specific stats to each leaderboard entry\n      const detailedStandings = await Promise.all(\n        leaderboard.map(async (entry) => {\n          const userSubmissions = await contestStorage.getParticipantSubmissions(contestId, entry.userId);\n          const problemStats = contest.problems.map(problem => {\n            const problemSubmissions = userSubmissions.filter(s => s.problemId === problem.id);\n            const acceptedSubmission = problemSubmissions.find(s => s.status === 'accepted');\n            const wrongAttempts = problemSubmissions.filter(s => s.status === 'wrong_answer').length;\n            \n            return {\n              problemId: problem.id,\n              problemTitle: problem.title,\n              points: problem.points,\n              solved: !!acceptedSubmission,\n              attempts: problemSubmissions.length,\n              wrongAttempts,\n              solvedAt: acceptedSubmission?.submissionTime,\n              bestRuntime: acceptedSubmission?.runtime,\n              bestMemory: acceptedSubmission?.memory\n            };\n          });\n\n          // Resolve participant name\n          let displayName = entry.username || entry.userId;\n          try {\n            const userDoc = await contestStorage.getUser(entry.userId);\n            if (userDoc) {\n              const first = (userDoc.firstName || userDoc.given_name || '').toString().trim();\n              const last = (userDoc.lastName || userDoc.family_name || '').toString().trim();\n              const full = `${first} ${last}`.trim();\n              displayName = full || userDoc.username || userDoc.name || userDoc.email || displayName;\n            }\n          } catch (e) {\n            // fallback to existing username\n          }\n\n          return {\n            ...entry,\n            problemStats,\n            totalAttempts: userSubmissions.length,\n            correctSubmissions: userSubmissions.filter(s => s.status === 'accepted').length,\n            wrongSubmissions: userSubmissions.filter(s => s.status === 'wrong_answer').length,\n            displayName\n          };\n        })\n      );\n\n      res.json({\n        contest: {\n          id: contest.id,\n          title: contest.title,\n          startTime: contest.startTime,\n          endTime: contest.endTime,\n          totalProblems: contest.problems.length,\n          totalPoints: contest.problems.reduce((sum, p) => sum + p.points, 0)\n        },\n        standings: detailedStandings\n      });\n    } catch (error) {\n      console.error(\"Error fetching contest standings:\", error);\n      res.status(500).json({ message: \"Failed to fetch contest standings\" });\n    }\n  });\n\n  app.get('/api/contests/:contestId/results', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      \n      // Check if contest has ended\n      const contest = await contestStorage.getContest(contestId);\n      if (!contest) {\n        return res.status(404).json({ message: \"Contest not found\" });\n      }\n      \n      const now = new Date();\n      const endTime = new Date(contest.endTime);\n      const hasEnded = now > endTime;\n      if (!hasEnded) {\n        // Allow fetching results but mark as provisional\n      }\n      \n      // Generate final results\n      const leaderboard = await contestStorage.generateLeaderboard(contestId);\n      // Fetch participants to get registrationTime\n      const participants = await contestStorage.getContestParticipants(contestId);\n      const userIdToParticipant: Record<string, any> = {};\n      for (const p of participants) {\n        userIdToParticipant[p.userId] = p;\n      }\n      \n      // Transform to results format with additional statistics\n      const results = await Promise.all(\n        leaderboard.map(async (entry) => {\n          const submissions = await contestStorage.getParticipantSubmissions(contestId, entry.userId);\n          \n          // Calculate problem-specific results\n          const problemResults: Record<string, any> = {};\n          for (const problem of contest.problems) {\n            const problemSubmissions = submissions.filter(s => s.problemId === problem.id);\n            const bestSubmission = problemSubmissions\n              .filter(s => s.status === 'accepted')\n              .sort((a, b) => (b.points || 0) - (a.points || 0))[0];\n            \n            problemResults[problem.id] = {\n              score: bestSubmission?.points || 0,\n              attempts: problemSubmissions.length,\n              bestRuntime: bestSubmission?.runtime || 0,\n              bestMemory: bestSubmission?.memory || 0,\n              status: bestSubmission?.status || 'not_attempted'\n            };\n          }\n          \n          // Calculate averages\n          const acceptedSubmissions = submissions.filter(s => s.status === 'accepted');\n          const averageRuntime = acceptedSubmissions.length > 0 \n            ? acceptedSubmissions.reduce((sum, s) => sum + (s.runtime || 0), 0) / acceptedSubmissions.length \n            : 0;\n          const averageMemory = acceptedSubmissions.length > 0 \n            ? acceptedSubmissions.reduce((sum, s) => sum + (s.memory || 0), 0) / acceptedSubmissions.length \n            : 0;\n          \n          // Resolve participant name\n          let displayName = entry.username || entry.userId;\n          try {\n            const userDoc = await contestStorage.getUser(entry.userId);\n            if (userDoc) {\n              const first = (userDoc.firstName || userDoc.given_name || '').toString().trim();\n              const last = (userDoc.lastName || userDoc.family_name || '').toString().trim();\n              const full = `${first} ${last}`.trim();\n              displayName = full || userDoc.username || userDoc.name || userDoc.email || displayName;\n            }\n          } catch (e) {\n            // fallback to existing username\n          }\n\n          // Compute accurate time spent from registration to last activity, clamped to contest end\n          const participant = userIdToParticipant[entry.userId];\n          const registrationTime = participant?.registrationTime ? new Date(participant.registrationTime as any) : null;\n          const rawLast = entry.lastSubmissionTime ? new Date(entry.lastSubmissionTime as any) : null;\n          const effectiveLast = rawLast ? new Date(Math.min(rawLast.getTime(), endTime.getTime())) : (hasEnded ? endTime : now);\n          const timeSpentSeconds = registrationTime ? Math.max(0, Math.floor((effectiveLast.getTime() - registrationTime.getTime()) / 1000)) : 0;\n          \n          return {\n            ...entry,\n            averageRuntime,\n            averageMemory,\n            problemResults,\n            displayName,\n            submittedAt: entry.lastSubmissionTime,\n            timeSpentSeconds\n          };\n        })\n      );\n      \n      res.json(results);\n    } catch (error) {\n      console.error(\"Error generating contest results:\", error);\n      res.status(500).json({ message: \"Failed to generate contest results\" });\n    }\n  });\n\n  // Contest announcements\n  app.post('/api/contests/:contestId/announcements', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const { message, priority = 'medium' } = req.body;\n      \n      const success = await contestStorage.addAnnouncement(contestId, message, priority);\n      if (success) {\n        res.status(201).json({ message: \"Announcement added successfully\" });\n      } else {\n        res.status(400).json({ message: \"Failed to add announcement\" });\n      }\n    } catch (error) {\n      console.error(\"Error adding announcement:\", error);\n      res.status(500).json({ message: \"Failed to add announcement\" });\n    }\n  });\n\n  app.get('/api/contests/:contestId/announcements', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const announcements = await contestStorage.getAnnouncements(contestId);\n      res.json(announcements);\n    } catch (error) {\n      console.error(\"Error fetching announcements:\", error);\n      res.status(500).json({ message: \"Failed to fetch announcements\" });\n    }\n  });\n\n  // Contest Q&A system\n  app.post('/api/contests/:contestId/questions', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const userId = req.user?.id;\n      const { question, isPublic = true } = req.body;\n      \n      const questionData = await contestStorage.submitQuestion({\n        contestId,\n        userId,\n        question,\n        isPublic,\n        submittedAt: new Date()\n      });\n      \n      res.status(201).json(questionData);\n    } catch (error) {\n      console.error(\"Error submitting question:\", error);\n      res.status(500).json({ message: \"Failed to submit question\" });\n    }\n  });\n\n  app.get('/api/contests/:contestId/questions', protect, async (req: AuthRequest, res) => {\n    try {\n      const contestId = req.params.contestId;\n      const { isPublic } = req.query;\n      \n      const questions = await contestStorage.getContestQuestions(\n        contestId, \n        isPublic === 'true'\n      );\n      \n      res.json(questions);\n    } catch (error) {\n      console.error(\"Error fetching questions:\", error);\n      res.status(500).json({ message: \"Failed to fetch questions\" });\n    }\n  });\n\n  app.post('/api/contests/questions/:questionId/answer', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const questionId = req.params.questionId;\n      const { answer } = req.body;\n      const answeredBy = req.user?.id;\n      \n      const success = await contestStorage.answerQuestion(questionId, answer, answeredBy);\n      if (success) {\n        res.json({ message: \"Answer submitted successfully\" });\n      } else {\n        res.status(400).json({ message: \"Failed to submit answer\" });\n      }\n    } catch (error) {\n      console.error(\"Error answering question:\", error);\n      res.status(500).json({ message: \"Failed to answer question\" });\n    }\n  });\n\n  // Contest routes (moved to end to avoid conflicts with admin routes)\n  app.use('/api/contests', contestRoutes);\n\n  // Admin: get submissions for a specific user in a contest\n  app.get('/api/admin/contests/:contestId/users/:userId/submissions', protect, requireAdmin, async (req: AuthRequest, res) => {\n    try {\n      const { contestId, userId } = req.params;\n      const submissions = await contestStorage.getParticipantSubmissions(contestId, userId);\n      res.json(submissions);\n    } catch (error) {\n      console.error('Error fetching user submissions for admin:', error);\n      res.status(500).json({ message: 'Failed to fetch user submissions' });\n    }\n  });\n\n  // Reset current user's course progress\n  app.post('/api/courses/:id/reset-progress', protect, async (req: AuthRequest, res) => {\n    try {\n      const courseId = parseInt(req.params.id);\n      const userId = req.user.id;\n\n      const isAdmin = req.user.role === 'admin';\n      const canAccess = await storage.canUserAccessCourse(courseId, userId, isAdmin);\n      if (!canAccess) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      await storage.resetUserCourseProgress(userId, courseId);\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error resetting course progress:', error);\n      res.status(500).json({ message: 'Failed to reset course progress' });\n    }\n  });\n\n  return server;\n}\n","size_bytes":150940},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/contest-results.tsx":{"content":"import { useParams, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Trophy, Medal, Award, Users, Clock, Target, ArrowLeft, TrendingUp, BarChart3 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useState, useMemo, useEffect } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { useState as useReactState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface ContestResultRow {\n  rank: number;\n  userId: string;\n  displayName: string;\n  totalScore: number;\n  submissionTime?: string | null; // Actual submission timestamp\n  totalAttempts?: number;\n  lastSubmission?: string;\n  contestEndMethod?: string; // Added for contest end method\n}\n\ninterface Contest {\n  id: string;\n  title: string;\n  startTime: string;\n  endTime: string;\n  totalProblems: number;\n  totalPoints: number;\n  contestEndMethod?: string; // Added for contest end method\n  problems?: Array<{ id: string; title?: string; points?: number }>;\n}\n\nexport default function ContestResultsPage() {\n  const { contestId } = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const isAdmin = user?.role === 'admin';\n  const [submissionsOpen, setSubmissionsOpen] = useState(false);\n  const [submissionsUser, setSubmissionsUser] = useState<{ userId: string; displayName: string } | null>(null);\n  const [userSubmissions, setUserSubmissions] = useState<any[] | null>(null);\n  const loadUserSubs = async (uid: string) => {\n    try {\n      setUserSubmissions(null);\n      const res = await fetch(`/api/admin/contests/${contestId}/users/${uid}/submissions`, {\n        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\n      });\n      if (!res.ok) throw new Error('Failed to fetch submissions');\n      const data = await res.json();\n      console.log('[CONTEST-RESULTS] Admin submissions response:', data);\n      // Extract submissions from the response\n      setUserSubmissions(data.submissions || []);\n    } catch (e: any) {\n      console.error('[CONTEST-RESULTS] Error loading user submissions:', e);\n      toast({ title: 'Error', description: e.message, variant: 'destructive' });\n    }\n  };\n\n  // Fetch final results (only valid after contest end)\n  const { data: finalResults, error: resultsError } = useQuery<any>({\n    queryKey: ['/api/contests', contestId, 'results'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/contests/${contestId}/results`, {\n        headers: { 'Authorization': `Bearer ${token}` },\n      });\n      if (!response.ok) {\n        const err = await response.json().catch(() => ({}));\n        const msg = err.message || 'Failed to fetch contest results';\n        throw new Error(msg);\n      }\n      return response.json();\n    },\n    enabled: !!contestId,\n    refetchInterval: false,\n  });\n\n  // Fetch contest details\n  const { data: contest } = useQuery<Contest>({\n    queryKey: ['/api/contests', contestId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch contest details');\n      }\n      \n      return response.json();\n    },\n    enabled: !!contestId,\n  });\n  const idToTitle = useMemo(() => {\n    const map = new Map<string, string>();\n    const problems = (contest as any)?.problems || [];\n    for (const p of problems) {\n      if (p?.id) map.set(String(p.id), p.title || String(p.id));\n      if (p?.originalProblemId) map.set(String(p.originalProblemId), p.title || String(p.originalProblemId));\n    }\n    return map;\n  }, [contest]);\n  const problemTitle = (pid: string) => idToTitle.get(String(pid)) || pid;\n\n  const now = new Date();\n  const start = contest ? new Date(contest.startTime as any) : null;\n  const end = contest ? new Date(contest.endTime as any) : null;\n  const isActive = !!(contest && start && end && now >= start && now <= end && !localStorage.getItem(`contest:${contestId}:endedBy:${localStorage.getItem('userId') || 'me'}`));\n\n  // Fetch live standings for active contests\n  const { data: liveStandings } = useQuery<any>({\n    queryKey: ['/api/contests', contestId, 'standings'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/contests/${contestId}/standings`, {\n        headers: { 'Authorization': `Bearer ${token}` },\n      });\n      if (!response.ok) {\n        const err = await response.json().catch(() => ({}));\n        const msg = err.message || 'Failed to fetch standings';\n        throw new Error(msg);\n      }\n      return response.json();\n    },\n    enabled: !!contestId && isActive,\n    refetchInterval: isActive ? 3000 : false,\n    refetchOnWindowFocus: isActive,\n  });\n\n  // Build unified rows (prefer final results; fallback to live standings)\n  const rows: ContestResultRow[] = useMemo(() => {\n    if (!contest) return [];\n    \n    // Check if contest has ended or user has ended it\n    const now = new Date();\n    const contestEndTime = new Date(contest.endTime);\n    const localUserId = localStorage.getItem('userId') || 'me';\n    const endedByUser = localStorage.getItem(`contest:${contest.id}:endedBy:${localUserId}`) === 'true';\n    const contestHasEnded = now > contestEndTime || endedByUser;\n    \n    console.log(`[CONTEST-STATUS] Contest: ${contest.title}`);\n    console.log(`[CONTEST-STATUS] Now: ${now.toISOString()}`);\n    console.log(`[CONTEST-STATUS] Contest end time: ${contestEndTime.toISOString()}`);\n    console.log(`[CONTEST-STATUS] Ended by user: ${endedByUser}`);\n    console.log(`[CONTEST-STATUS] Contest has ended: ${contestHasEnded}`);\n    \n    if (finalResults && Array.isArray(finalResults)) {\n      return (finalResults as any[]).map((r: any) => ({\n        rank: r.rank,\n        userId: r.userId,\n        displayName: r.displayName,\n        totalScore: r.totalScore ?? r.score ?? 0,\n        submissionTime: r.submittedAt || r.lastSubmission || null, // Use actual submission time\n        totalAttempts: r.totalAttempts ?? r.totalSubmissions ?? (Array.isArray(r.submissions) ? r.submissions.length : undefined),\n        contestEndMethod: r.contestEndMethod, // Include contest end method from leaderboard data\n      }));\n    }\n    \n    // Only use live standings if contest is still active\n    if (!contestHasEnded && liveStandings && liveStandings.standings && Array.isArray(liveStandings.standings)) {\n      return (liveStandings.standings as any[]).map((r: any) => {\n        const score = r.totalScore ?? r.score ?? 0;\n        const last = r.lastSubmission ? new Date(r.lastSubmission as any) : null;\n        \n        console.log(`[SUBMISSION-TIME] Live contest - User: ${r.displayName}, Last submission: ${last?.toISOString()}`);\n        \n        return {\n          rank: r.rank,\n          userId: r.userId,\n          displayName: r.displayName,\n          totalScore: score,\n          submissionTime: last, // Use actual submission time\n          totalAttempts: r.totalAttempts ?? (Array.isArray(r.submissions) ? r.submissions.length : undefined),\n          contestEndMethod: r.contestEndMethod, // Include contest end method from leaderboard data\n        } as ContestResultRow;\n      });\n    }\n    \n    // If contest has ended but no final results, calculate final times\n    if (contestHasEnded && liveStandings && liveStandings.standings && Array.isArray(liveStandings.standings)) {\n      return (liveStandings.standings as any[]).map((r: any) => {\n        const score = r.totalScore ?? r.score ?? 0;\n        const last = r.lastSubmission ? new Date(r.lastSubmission as any) : null;\n        \n        console.log(`[SUBMISSION-TIME] Contest ended - User: ${r.displayName}, Last submission: ${last?.toISOString()}`);\n        \n        return {\n          rank: r.rank,\n          userId: r.userId,\n          displayName: r.displayName,\n          totalScore: score,\n          submissionTime: last, // Use actual submission time\n          totalAttempts: r.totalAttempts ?? (Array.isArray(r.submissions) ? r.submissions.length : undefined),\n          contestEndMethod: r.contestEndMethod, // Include contest end method from leaderboard data\n        } as ContestResultRow;\n      });\n    }\n    \n    return [];\n  }, [contest, finalResults, liveStandings]);\n\n  // Search state for leaderboard filtering\n  const [searchTerm, setSearchTerm] = useState('');\n  const filtered = useMemo(() => {\n    const q = searchTerm.trim().toLowerCase();\n    if (!q) return rows as any[];\n    return (rows as any[]).filter((r: any) => {\n      const name = (r.displayName || '').toString().toLowerCase();\n      return name.includes(q);\n    });\n  }, [rows, searchTerm]);\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Trophy className=\"h-6 w-6 text-yellow-500\" />;\n      case 2:\n        return <Medal className=\"h-6 w-6 text-gray-400\" />;\n      case 3:\n        return <Award className=\"h-6 w-6 text-orange-500\" />;\n      default:\n        return <span className=\"text-lg font-bold\">{rank}</span>;\n    }\n  };\n\n  const getRankColor = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return 'bg-yellow-50 border-yellow-200';\n      case 2:\n        return 'bg-gray-50 border-gray-200';\n      case 3:\n        return 'bg-orange-50 border-orange-200';\n      default:\n        return 'bg-white border-gray-200';\n    }\n  };\n\n  if (!contest) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">Loading...</div>\n      </div>\n    );\n  }\n\n  // Always render leaderboard; if no data rows yet, show the empty state row below\n\n  // Calculate statistics\n  const safeResults = rows;\n  const totalParticipants = safeResults.length;\n  const averageScore = totalParticipants ? safeResults.reduce((sum, r: any) => sum + (r.totalScore ?? r.score ?? 0), 0) / totalParticipants : 0;\n  const averageProblemsSolved = 0;\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center mb-4\">\n    <div className=\"flex items-center gap-2\">\n      <Button variant=\"outline\" size=\"sm\" onClick={() => setLocation('/contests')}>\n        <ArrowLeft className=\"h-4 w-4 mr-2\" /> Back\n          </Button>\n          </div>\n        </div>\n  <h1 className=\"text-2xl font-bold py-3 flex items-center gap-3\">Leaderboard {(() => {\n    const now = new Date();\n    const start = new Date(contest.startTime as any);\n    const end = new Date(contest.endTime as any);\n    const isActive = now >= start && now <= end && !localStorage.getItem(`contest:${contest.id}:endedBy:${localStorage.getItem('userId') || 'me'}`);\n    return isActive ? <Badge variant=\"secondary\" className=\"text-green-700 bg-green-100\">Live</Badge> : null;\n  })()}</h1> \n\n      <Card>\n        <CardHeader className=\"py-3\">\n          <div className=\"flex items-center gap-2\">\n            <h1 className=\"text-2xl font-bold\">{contest.title}</h1>\n            {/* <Button size=\"sm\" variant=\"outline\">Friends</Button> */}\n            <div className=\"ml-auto flex items-center gap-2\">\n              {/* <Button size=\"sm\" variant=\"default\">All</Button> */}\n              {/* <Button size=\"sm\" variant=\"outline\">Friends</Button> */}\n              <div className=\"ml-auto flex items-center gap-2\">\n                <Input placeholder=\"Type username to compare\" className=\"h-8\" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />\n                {/* <Button size=\"sm\" variant=\"default\">Compare</Button> */}\n                    </div>\n                  </div>\n                </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full text-sm\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-2 text-left w-16\">Rank</th>\n                  <th className=\"px-4 py-2 text-left\">User</th>\n                  {/* <th className=\"px-4 py-2 text-left\">Contest End Method</th> */}\n                  <th className=\"px-4 py-2 text-left\">Score</th>\n                  <th className=\"px-4 py-2 text-left\">Submission Time</th>\n                  {isAdmin && <th className=\"px-4 py-2 text-left\">Actions</th>}\n                </tr>\n              </thead>\n              <tbody>\n                {((filtered as any[]) || []).map((r: any) => (\n                  <tr key={r.userId} className=\"border-t\">\n                    <td className=\"px-4 py-2\">{r.rank}</td>\n                    <td className=\"px-4 py-2\">{r.displayName || 'Anonymous User'}</td>\n                    {/* <td className=\"px-4 py-2\">\n                      {(() => {\n                        // Use participant's contest end method from database\n                        const contestEndMethod = r.contestEndMethod;\n                        \n                        if (contestEndMethod === 'manually_ended') {\n                          return <span className=\"text-orange-600 font-medium\">Manually Ended</span>;\n                        } else if (contestEndMethod === 'time_expired') {\n                          return <span className=\"text-red-600 font-medium\">Time Expired</span>;\n                        } else {\n                          // If no contest end method is set, don't show anything\n                          return null;\n                        }\n                      })()}\n                    </td> */}\n                    <td className=\"px-4 py-2\">\n                      <span className=\"font-medium\">\n                        {Number(r.totalScore ?? r.score ?? 0).toFixed(0)}\n                      </span>\n                      <span className=\"text-gray-500\"> / </span>\n                      <span className=\"text-gray-600\">\n                        {contest.problems?.length ? contest.problems.length * 100 : 0}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-2\">{r.submissionTime ? new Date(r.submissionTime).toLocaleString() : 'N/A'}</td>\n                    {isAdmin && (\n                      <td className=\"px-4 py-2\">\n                        <Button size=\"sm\" variant=\"outline\" onClick={async () => { setSubmissionsUser({ userId: r.userId, displayName: r.displayName || r.userId }); setSubmissionsOpen(true); await loadUserSubs(r.userId); }}>View Submissions</Button>\n                      </td>\n                    )}\n                  </tr>\n                ))}\n                {(!filtered || (filtered as any[]).length === 0) && (\n                  <tr className=\"border-t\">\n                    <td colSpan={isAdmin ? 6 : 5} className=\"px-4 py-6 text-center text-gray-500\">No submissions yet. Leaderboard will update live as submissions come in.</td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Admin submissions modal */}\n      {isAdmin && (\n        <Dialog open={submissionsOpen} onOpenChange={setSubmissionsOpen}>\n          <DialogContent className=\"max-w-3xl\">\n            <DialogHeader>\n              <DialogTitle>Submissions - {submissionsUser?.displayName}</DialogTitle>\n            </DialogHeader>\n            <div className=\"max-h-[60vh] overflow-y-auto\">\n              {!userSubmissions && <div className=\"p-4 text-sm text-gray-500\">Loading...</div>}\n              {Array.isArray(userSubmissions) && userSubmissions.length === 0 && (\n                <div className=\"p-4 text-sm text-gray-500\">No submissions found for this user.</div>\n              )}\n              {Array.isArray(userSubmissions) && userSubmissions.length > 0 && (\n                <table className=\"min-w-full text-sm\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-3 py-2 text-left\">Problem</th>\n                      <th className=\"px-3 py-2 text-left\">Status</th>\n                      <th className=\"px-3 py-2 text-left\">Language</th>\n                      <th className=\"px-3 py-2 text-left\">Runtime</th>\n                      <th className=\"px-3 py-2 text-left\">Memory</th>\n                      <th className=\"px-3 py-2 text-left\">Submitted</th>\n                      <th className=\"px-3 py-2 text-left\">Code</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {userSubmissions.map((s: any) => (\n                      <tr key={s.id} className=\"border-t align-top\">\n                        <td className=\"px-3 py-2\">{problemTitle(s.problemId)}</td>\n                        <td className=\"px-3 py-2 capitalize\">{s.status}</td>\n                        <td className=\"px-3 py-2\">{s.language || '-'}</td>\n                        <td className=\"px-3 py-2\">{s.runtime ?? '-'}</td>\n                        <td className=\"px-3 py-2\">{s.memory ?? '-'}</td>\n                        <td className=\"px-3 py-2\">{new Date(s.submissionTime || s.submittedAt || Date.now()).toLocaleString()}</td>\n                        <td className=\"px-3 py-2\">\n                          <details>\n                            <summary className=\"cursor-pointer text-blue-600 hover:underline\">View Code</summary>\n                            <pre className=\"mt-2 p-3 bg-gray-900 text-gray-100 rounded overflow-x-auto text-xs whitespace-pre-wrap\">{s.code || 'No code captured.'}</pre>\n                          </details>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n} ","size_bytes":18247},"server/services/executionService.ts":{"content":"import { spawn } from 'child_process';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\n\ninterface ExecutionResult {\n  output: string;\n  error: string | null;\n  runtime: number;\n  memory: number;\n}\n\ninterface TestCaseResult {\n  passed: boolean;\n  input: string;\n  expectedOutput: string;\n  actualOutput: string;\n  runtime: number;\n  memory: number;\n  error: string | null;\n  isHidden?: boolean;\n}\n\nexport class ExecutionService {\n  private readonly TEMP_DIR = path.resolve(process.cwd(), '..', 'execution-system', 'temp');\n  private readonly FILE_EXTENSIONS: Record<string, string> = {\n    'python': '.py',\n    'javascript': '.js',\n    'typescript': '.ts',\n    'java': '.java',\n    'cpp': '.cpp',\n    'c': '.c'\n  };\n\n  private readonly DOCKER_CONTAINERS: Record<string, string> = {\n    'python': 'execution-system-python-executor-1',\n    'javascript': 'execution-system-javascript-executor-1',\n    'typescript': 'execution-system-javascript-executor-1',\n    'java': 'execution-system-java-executor-1',\n    'cpp': 'execution-system-cpp-executor-1',\n    'c': 'execution-system-c-executor-1'\n  };\n\n  // Static initialization method that returns the instance\n  public static async init(): Promise<ExecutionService> {\n    const service = new ExecutionService();\n    // This is the CRITICAL part - we await the setup here.\n    await service.ensureTempDir();\n    await service.cleanupExistingFiles();\n    return service;\n  }\n\n  // The constructor should not perform async operations.\n  private constructor() {\n    console.log(`[EXEC-SERVICE] 🗂️ Temp directory path: ${this.TEMP_DIR}`);\n  }\n\n  private async ensureTempDir() {\n    try {\n      console.log(`[EXEC-SERVICE] 🗂️ Attempting to use temp directory: ${this.TEMP_DIR}`);\n      \n      await fs.mkdir(this.TEMP_DIR, { recursive: true });\n      // Set permissions to allow Docker containers to write\n      await fs.chmod(this.TEMP_DIR, 0o777);\n      \n      console.log(`[EXEC-SERVICE] ✅ Temp directory ready: ${this.TEMP_DIR}`);\n    } catch (error: any) {\n      console.error(`[EXEC-SERVICE] ❌ Failed to create/access temp directory: ${this.TEMP_DIR}`, error);\n      throw new Error(`Failed to create temp directory: ${error.message}`);\n    }\n  }\n\n  private async cleanupExistingFiles() {\n    try {\n      const tempFiles = await fs.readdir(this.TEMP_DIR);\n      const filesToRemove = tempFiles.filter(file => \n        file.startsWith('code.') || \n        file.startsWith('input') || \n        file.endsWith('.py') || \n        file.endsWith('.js') || \n        file.endsWith('.java') || \n        file.endsWith('.cpp') || \n        file.endsWith('.c') ||\n        file.startsWith('.class')\n      );\n      \n      if (filesToRemove.length > 0) {\n        console.log(`[EXEC-SERVICE] 🧹 Cleaning up ${filesToRemove.length} leftover files on startup`);\n        for (const file of filesToRemove) {\n          try {\n            await fs.unlink(path.join(this.TEMP_DIR, file));\n            console.log(`[EXEC-SERVICE] 🧹 Cleaned up: ${file}`);\n          } catch (error) {\n            // Ignore cleanup errors\n          }\n        }\n      }\n    } catch (error) {\n      // Ignore errors reading temp directory\n    }\n  }\n\n  private getFilename(language: string): string {\n    const ext = this.FILE_EXTENSIONS[language];\n    if (!ext) {\n      throw new Error(`Unsupported language: ${language}`);\n    }\n\n    if (language === 'java') {\n      return 'Solution.java';\n    }\n\n    return `code${ext}`;\n  }\n\n  private async writeFile(content: string, filename: string): Promise<void> {\n    const filepath = path.join(this.TEMP_DIR, filename);\n    try {\n      await fs.writeFile(filepath, content);\n      // Set permissions to allow Docker containers to read\n      await fs.chmod(filepath, 0o666);\n    } catch (error: any) {\n      console.error(`Failed to write file ${filepath}:`, error);\n      throw new Error(`Failed to write file ${filepath}: ${error.message}`);\n    }\n  }\n\n  private async cleanupFiles(files: string[]): Promise<void> {\n    for (const filename of files) {\n      try {\n        const filepath = path.join(this.TEMP_DIR, filename);\n        await fs.unlink(filepath);\n        console.log(`[EXEC-SERVICE] 🧹 Cleaned up: ${filename}`);\n      } catch (error: any) {\n        // Ignore cleanup errors - file might not exist\n        console.warn(`[EXEC-SERVICE] Cleanup warning for ${filename}:`, error.message);\n      }\n    }\n  }\n\n  public async cleanupAllTempFiles(): Promise<void> {\n    try {\n      console.log(`[EXEC-SERVICE] 🧹 Starting comprehensive temp directory cleanup...`);\n      console.log(`[EXEC-SERVICE] 🧹 Target directory: ${this.TEMP_DIR}`);\n      \n      const files = await fs.readdir(this.TEMP_DIR);\n      console.log(`[EXEC-SERVICE] 🧹 Found ${files.length} files in temp directory:`, files);\n      \n      const cleanupPatterns = [\n        /^code.*\\.py$/, /^code.*\\.js$/, /^code.*\\.ts$/,\n        /^Solution.*\\.java$/, /^Solution.*\\.class$/,\n        /^code.*\\.cpp$/, /^code.*\\.c$/,\n        /^exec.*$/, \n        /^input.*\\.txt$/,\n        /^temp.*$/, /^.*\\.tmp$/\n      ];\n      \n      let cleanedCount = 0;\n      \n      for (const file of files) {\n        const shouldClean = cleanupPatterns.some(pattern => pattern.test(file));\n        \n        if (shouldClean) {\n          try {\n            const filePath = path.join(this.TEMP_DIR, file);\n            const stats = await fs.stat(filePath);\n            \n            if (stats.isFile()) {\n              await fs.unlink(filePath);\n              console.log(`[EXEC-SERVICE] 🧹 Cleaned up: ${file}`);\n              cleanedCount++;\n            } else {\n              console.log(`[EXEC-SERVICE] ⚠️ Skipping directory: ${file}`);\n            }\n          } catch (err: any) {\n            console.log(`[EXEC-SERVICE] ⚠️ Could not clean up ${file}:`, err.message);\n          }\n        } else {\n          console.log(`[EXEC-SERVICE] ℹ️ Skipping file (doesn't match patterns): ${file}`);\n        }\n      }\n      \n      console.log(`[EXEC-SERVICE] 🧹 Cleanup completed. Removed ${cleanedCount} temporary files.`);\n      \n    } catch (error: any) {\n      console.error('[EXEC-SERVICE] ❌ Error during cleanup:', error);\n    }\n  }\n\n  private async executeInDocker(language: string, filename: string, input?: string): Promise<ExecutionResult> {\n    const containerName = this.DOCKER_CONTAINERS[language];\n    if (!containerName) {\n      throw new Error(`Unsupported language: ${language}`);\n    }\n\n    const copyArgs = ['cp', `${this.TEMP_DIR}/${filename}`, `${containerName}:/tmp/${filename}`];\n    console.log(`[DOCKER-EXECUTOR] 📋 Copying file to container: docker ${copyArgs.join(' ')}`);\n    \n    try {\n      const copyProcess = spawn('docker', copyArgs);\n      await new Promise((resolve, reject) => {\n        copyProcess.on('close', (code) => {\n          if (code === 0) {\n            console.log(`[DOCKER-EXECUTOR] ✅ File copied successfully`);\n            resolve(null);\n          } else {\n            reject(new Error(`Failed to copy file to container: exit code ${code}`));\n          }\n        });\n        copyProcess.on('error', reject);\n      });\n    } catch (error) {\n      console.error(`[DOCKER-EXECUTOR] ❌ Failed to copy file:`, error);\n      throw error;\n    }\n\n    const dockerArgs = [\n      'exec',\n      containerName\n    ];\n\n    const commands = {\n      python: ['python3', `/tmp/${filename}`],\n      javascript: ['node', `/tmp/${filename}`],\n      typescript: ['ts-node', `/tmp/${filename}`],\n      java: ['sh', '-c', `cd /tmp && javac ${filename} && java Solution`],\n      cpp: ['sh', '-c', `cd /tmp && g++ -std=c++17 -o exec ${filename} && ./exec`],\n      c: ['sh', '-c', `cd /tmp && gcc -o exec ${filename} && ./exec`]\n    };\n\n    const command = commands[language as keyof typeof commands];\n    \n    console.log(`[DOCKER-EXECUTOR] 📥 Input check: \"${input || 'none'}\"`);\n    if (input) {\n      const inputFile = `input-${Date.now()}.txt`;\n      console.log(`[DOCKER-EXECUTOR] 📄 Creating input file: ${inputFile}`);\n      await this.writeFile(input, inputFile);\n      \n      const copyInputArgs = ['cp', `${this.TEMP_DIR}/${inputFile}`, `${containerName}:/tmp/${inputFile}`];\n      console.log(`[DOCKER-EXECUTOR] 📋 Copying input file: docker ${copyInputArgs.join(' ')}`);\n      \n      const copyInputProcess = spawn('docker', copyInputArgs);\n      await new Promise((resolve, reject) => {\n        copyInputProcess.on('close', (code) => {\n          if (code === 0) {\n            console.log(`[DOCKER-EXECUTOR] ✅ Input file copied successfully`);\n            resolve(null);\n          } else {\n            reject(new Error(`Failed to copy input file: exit code ${code}`));\n          }\n        });\n        copyInputProcess.on('error', reject);\n      });\n      \n      if (language === 'python' || language === 'javascript' || language === 'typescript') {\n        dockerArgs.push('sh', '-c', `${command.join(' ')} < /tmp/${inputFile}`);\n      } else {\n        dockerArgs.push('sh', '-c', `cd /tmp && ${command.join(' ')} < /tmp/${inputFile}`);\n      }\n    } else {\n        console.log(`[DOCKER-EXECUTOR] ⚠️ No input provided, running without input`);\n        dockerArgs.push(...command);\n      }\n\n    console.log(`[DOCKER-EXECUTOR] 🐳 Running Docker command: docker ${dockerArgs.join(' ')}`);\n    console.log(`[DOCKER-EXECUTOR] 📁 Using container: ${containerName}`);\n    console.log(`[DOCKER-EXECUTOR] 📄 Code file: ${filename}`);\n\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      const docker = spawn('docker', dockerArgs);\n      let stdout = '';\n      let stderr = '';\n\n      docker.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      docker.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      docker.on('close', (code) => {\n        const runtime = Date.now() - startTime;\n        const memory = 0; \n\n        console.log(`[DOCKER-EXECUTOR] ✅ Docker execution completed in ${runtime}ms with exit code: ${code}`);\n        console.log(`[DOCKER-EXECUTOR] 📤 STDOUT:`, stdout.slice(0, 200));\n        console.log(`[DOCKER-EXECUTOR] 📤 STDERR:`, stderr.slice(0, 200));\n\n        if (code === 0) {\n          console.log(`[DOCKER-EXECUTOR] 🎉 DOCKER EXECUTION SUCCESSFUL`);\n          resolve({\n            output: stdout.trim(),\n            error: null,\n            runtime,\n            memory\n          });\n        } else {\n          console.log(`[DOCKER-EXECUTOR] ❌ DOCKER EXECUTION FAILED`);\n          resolve({\n            output: '',\n            error: stderr.trim() || `Process exited with code ${code}`,\n            runtime,\n            memory\n          });\n        }\n      });\n\n      docker.on('error', (err) => {\n        console.error(`[DOCKER-EXECUTOR] 💥 Docker spawn error:`, err);\n        reject(err);\n      });\n\n      setTimeout(() => {\n        console.log(`[DOCKER-EXECUTOR] ⏰ Docker execution timed out after 15s`);\n        docker.kill();\n        reject(new Error('Execution timed out'));\n      }, 15000);\n    });\n  }\n\n  private async executeInDockerOptimized(language: string, filename: string, input?: string): Promise<ExecutionResult> {\n    const containerName = this.DOCKER_CONTAINERS[language];\n    if (!containerName) {\n      throw new Error(`Unsupported language: ${language}`);\n    }\n\n    const copyArgs = ['cp', `${this.TEMP_DIR}/${filename}`, `${containerName}:/tmp/${filename}`];\n    console.log(`[DOCKER-EXECUTOR] 📋 Copying file to container (OPTIMIZED): docker ${copyArgs.join(' ')}`);\n    \n    try {\n      const copyProcess = spawn('docker', copyArgs);\n      await new Promise((resolve, reject) => {\n        copyProcess.on('close', (code) => {\n          if (code === 0) {\n            console.log(`[DOCKER-EXECUTOR] ✅ File copied successfully (OPTIMIZED)`);\n            resolve(null);\n          } else {\n            reject(new Error(`Failed to copy file to container: exit code ${code}`));\n          }\n        });\n        copyProcess.on('error', reject);\n      });\n    } catch (error) {\n      console.error(`[DOCKER-EXECUTOR] ❌ Failed to copy file (OPTIMIZED):`, error);\n      throw error;\n    }\n\n    const dockerArgs = [\n      'exec',\n      containerName\n    ];\n\n    const commands = {\n      python: ['python3', `/tmp/${filename}`],\n      javascript: ['node', `/tmp/${filename}`],\n      typescript: ['ts-node', `/tmp/${filename}`],\n      java: ['sh', '-c', `cd /tmp && javac ${filename} && java Solution`],\n      cpp: ['sh', '-c', `cd /tmp && g++ -std=c++17 -o exec ${filename} && ./exec`],\n      c: ['sh', '-c', `cd /tmp && gcc -o exec ${filename} && ./exec`]\n    };\n\n    const command = commands[language as keyof typeof commands];\n    \n    const inputFile = 'input.txt';\n    \n    if (input !== undefined && input !== null) {\n      await this.writeFile(input, inputFile);\n      \n      const copyInputArgs = ['cp', `${this.TEMP_DIR}/${inputFile}`, `${containerName}:/tmp/${inputFile}`];\n      console.log(`[DOCKER-EXECUTOR] 📋 Copying input file (OPTIMIZED): docker ${copyInputArgs.join(' ')}`);\n      \n      const copyInputProcess = spawn('docker', copyInputArgs);\n      await new Promise((resolve, reject) => {\n        copyInputProcess.on('close', (code) => {\n          if (code === 0) {\n            console.log(`[DOCKER-EXECUTOR] ✅ Input file copied successfully (OPTIMIZED)`);\n            resolve(null);\n          } else {\n            reject(new Error(`Failed to copy input file: exit code ${code}`));\n          }\n        });\n        copyInputProcess.on('error', reject);\n      });\n      \n      if (language === 'python' || language === 'javascript' || language === 'typescript') {\n        dockerArgs.push('sh', '-c', `${command.join(' ')} < /tmp/${inputFile}`);\n      } else {\n        dockerArgs.push('sh', '-c', `cd /tmp && ${command.join(' ')} < /tmp/${inputFile}`);\n      }\n    } else {\n      dockerArgs.push(...command);\n    }\n\n    console.log(`[DOCKER-EXECUTOR] 🐳 Running Docker command (OPTIMIZED): docker ${dockerArgs.join(' ')}`);\n    console.log(`[DOCKER-EXECUTOR] 📁 Using container: ${containerName}`);\n    console.log(`[DOCKER-EXECUTOR] 📄 Code file: ${filename}`);\n\n    return new Promise((resolve, reject) => {\n      const startTime = Date.now();\n      \n      try {\n        const docker = spawn('docker', dockerArgs);\n        let stdout = '';\n        let stderr = '';\n\n        docker.stdout.on('data', (data) => {\n          stdout += data.toString();\n        });\n\n        docker.stderr.on('data', (data) => {\n          stderr += data.toString();\n        });\n\n        docker.on('close', (code) => {\n          const runtime = Date.now() - startTime;\n          const memory = 0;\n\n          console.log(`[DOCKER-EXECUTOR] ✅ Docker execution completed in ${runtime}ms with exit code: ${code}`);\n          console.log(`[DOCKER-EXECUTOR] 📤 STDOUT:`, stdout.slice(0, 200));\n          console.log(`[DOCKER-EXECUTOR] 📤 STDERR:`, stderr.slice(0, 200));\n\n          if (code === 0) {\n            console.log(`[DOCKER-EXECUTOR] 🎉 DOCKER EXECUTION SUCCESSFUL`);\n            resolve({\n              output: stdout.trim(),\n              error: null,\n              runtime,\n              memory\n            });\n          } else {\n            console.log(`[DOCKER-EXECUTOR] ❌ DOCKER EXECUTION FAILED`);\n            resolve({\n              output: '',\n              error: stderr.trim() || `Process exited with code ${code}`,\n              runtime,\n              memory\n            });\n          }\n        });\n\n        docker.on('error', (err) => {\n          console.error(`[DOCKER-EXECUTOR] 💥 Docker spawn error (OPTIMIZED):`, err);\n          reject(err);\n        });\n\n        setTimeout(() => {\n          console.log(`[DOCKER-EXECUTOR] ⏰ Docker execution timed out after 15s (OPTIMIZED)`);\n          docker.kill();\n          reject(new Error('Execution timed out'));\n        }, 15000);\n      } catch (error) {\n        console.error(`[DOCKER-EXECUTOR] 💥 Docker spawn failed (OPTIMIZED):`, error);\n        reject(error);\n      }\n    });\n  }\n\n  private async executeRemote(language: string, code: string, input?: string): Promise<ExecutionResult> {\n    const base = process.env.EXECUTION_API_URL;\n    if (!base) {\n      throw new Error('EXECUTION_API_URL not set');\n    }\n\n    const url = `${base.replace(/\\/$/, '')}/api/execute`;\n    const started = Date.now();\n    try {\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: { 'content-type': 'application/json' },\n        body: JSON.stringify({ code, language, input: input ?? '' })\n      } as any);\n\n      const data: any = await res.json().catch(() => ({}));\n      if (!res.ok) {\n        const message = data?.error || `Remote executor responded with ${res.status}`;\n        throw new Error(message);\n      }\n\n      return {\n        output: data.output || '',\n        error: data.error || null,\n        runtime: typeof data.runtime === 'number' ? data.runtime : Date.now() - started,\n        memory: typeof data.memory === 'number' ? data.memory : 0\n      };\n    } catch (err: any) {\n      console.error('[EXEC-SERVICE] ❌ Remote execution failed:', err);\n      return {\n        output: '',\n        error: `Remote execution failed: ${err.message || String(err)}`,\n        runtime: 0,\n        memory: 0\n      };\n    }\n  }\n\n  async executeCode(code: string, language: string, input?: string): Promise<ExecutionResult> {\n    console.log(`[EXEC-SERVICE] 🚀 Executing ${language} code...`);\n    console.log(`[EXEC-SERVICE] 🔍 Attempting Docker execution...`);\n    console.log(`[EXEC-SERVICE] 📥 Input received: \"${input || 'none'}\"`);\n    console.log(`[EXEC-SERVICE] 📥 Input type: ${typeof input}`);\n    console.log(`[EXEC-SERVICE] 📥 Input length: ${input ? input.length : 0}`);\n    \n    const filename = this.getFilename(language);\n    const filesToCleanup = [filename];\n\n    if (process.env.EXECUTION_API_URL) {\n      return this.executeRemote(language, code, input);\n    }\n    \n    try {\n      await this.writeFile(code, filename);\n      \n      const result = await this.executeInDocker(language, filename, input);\n      console.log(`[EXEC-SERVICE] ✅ Docker execution completed successfully:`, result);\n      return result;\n    } catch (error: any) {\n      console.error(`[EXEC-SERVICE] ❌ Docker execution failed:`, error);\n      console.error(`[EXEC-SERVICE] 🔍 Error details:`, {\n        message: error.message,\n        code: error.code,\n        errno: error.errno,\n        syscall: error.syscall,\n        path: error.path\n      });\n      \n      return {\n        output: '',\n        error: `Docker execution failed: ${error.message}`,\n        runtime: 0,\n        memory: 0\n      };\n    } finally {\n      await this.cleanupAllTempFiles();\n      console.log(`[EXEC-SERVICE] 🧹 Cleaned up ALL temp files after single execution`);\n      \n      try {\n        const tempFiles = await fs.readdir(this.TEMP_DIR);\n        const filesToRemove = tempFiles.filter((file: string) => \n          file.startsWith('code.') || \n          file.startsWith('input') || \n          file.startsWith('exec') ||\n          file.endsWith('.py') || \n          file.endsWith('.js') || \n          file.endsWith('.java') || \n          file.endsWith('.cpp') || \n          file.endsWith('.c') ||\n          file.endsWith('.class')\n        );\n        \n        if (filesToRemove.length > 0) {\n          for (const file of filesToRemove) {\n            try {\n              await fs.unlink(path.join(this.TEMP_DIR, file));\n              console.log(`[EXEC-SERVICE] 🧹 Cleaned up leftover file: ${file}`);\n            } catch (error) {\n              // Ignore cleanup errors for leftover files\n            }\n          }\n        }\n      } catch (error) {\n        // Ignore errors reading temp directory\n      }\n    }\n  }\n\n  async executeWithTestCases(\n    code: string,\n    language: string,\n    testCases: Array<{ input: string; expectedOutput: string; isHidden?: boolean }>\n  ): Promise<{\n    testResults: TestCaseResult[];\n    allTestsPassed: boolean;\n    visibleTestsPassed: boolean;\n    hiddenTestsPassed: boolean;\n    runtime: number;\n    memory: number;\n  }> {\n    console.log(`[EXEC-SERVICE] 🧪 Running test cases...`);\n    console.log(`[EXEC-SERVICE] Number of test cases:`, testCases.length);\n    \n    if (process.env.EXECUTION_API_URL) {\n      const testResults: TestCaseResult[] = [];\n      let maxRuntime = 0;\n      let maxMemory = 0;\n      let visiblePassed = 0;\n      let visibleTotal = 0;\n      let hiddenPassed = 0;\n      let hiddenTotal = 0;\n\n      for (const testCase of testCases) {\n        try {\n          const result = await this.executeRemote(language, code, testCase.input);\n          const actualOutput = (result.output || '').trim();\n          const expectedOutput = (testCase.expectedOutput || '').trim();\n          const passed = !result.error && actualOutput === expectedOutput;\n\n          if (testCase.isHidden) {\n            hiddenTotal++;\n            if (passed) hiddenPassed++;\n          } else {\n            visibleTotal++;\n            if (passed) visiblePassed++;\n          }\n\n          maxRuntime = Math.max(maxRuntime, result.runtime);\n          maxMemory = Math.max(maxMemory, result.memory);\n\n          testResults.push({\n            passed,\n            input: testCase.input,\n            expectedOutput: testCase.expectedOutput,\n            actualOutput,\n            runtime: result.runtime,\n            memory: result.memory,\n            error: result.error,\n            isHidden: testCase.isHidden\n          });\n        } catch (err: any) {\n          testResults.push({\n            passed: false,\n            input: testCase.input,\n            expectedOutput: testCase.expectedOutput,\n            actualOutput: '',\n            runtime: 0,\n            memory: 0,\n            error: err?.message || String(err),\n            isHidden: testCase.isHidden\n          });\n\n          if (testCase.isHidden) {\n            hiddenTotal++;\n          } else {\n            visibleTotal++;\n          }\n        }\n      }\n\n      const allTestsPassed = testResults.every(r => r.passed);\n      const visibleTestsPassed = visiblePassed === visibleTotal;\n      const hiddenTestsPassed = hiddenPassed === hiddenTotal;\n\n      return {\n        testResults,\n        allTestsPassed,\n        visibleTestsPassed,\n        hiddenTestsPassed,\n        runtime: maxRuntime,\n        memory: maxMemory\n      };\n    }\n\n    const filename = this.getFilename(language);\n    await this.writeFile(code, filename);\n\n    const testResults: TestCaseResult[] = [];\n    let maxRuntime = 0;\n    let maxMemory = 0;\n    let visiblePassed = 0;\n    let visibleTotal = 0;\n    let hiddenPassed = 0;\n    let hiddenTotal = 0;\n\n    try {\n      for (const testCase of testCases) {\n        try {\n          console.log(`[EXEC-SERVICE] Running test case with input:`, testCase.input);\n          const result = await this.executeInDockerOptimized(language, filename, testCase.input);\n          \n          if (result.error) {\n            console.error(`[EXEC-SERVICE] ❌ Docker execution failed for test case:`, result.error);\n            throw new Error(`Docker execution failed: ${result.error}`);\n          }\n          \n          const actualOutput = (result.output || '').trim();\n          const expectedOutput = (testCase.expectedOutput || '').trim();\n          const passed = actualOutput === expectedOutput;\n\n          console.log(`[EXEC-SERVICE] Test case result:`, {\n            passed,\n            actualOutput,\n            expectedOutput,\n            error: result.error\n          });\n\n          if (testCase.isHidden) {\n            hiddenTotal++;\n            if (passed) hiddenPassed++;\n          } else {\n            visibleTotal++;\n            if (passed) visiblePassed++;\n          }\n\n          maxRuntime = Math.max(maxRuntime, result.runtime);\n          maxMemory = Math.max(maxMemory, result.memory);\n\n          testResults.push({\n            passed,\n            input: testCase.input,\n            expectedOutput: testCase.expectedOutput,\n            actualOutput,\n            runtime: result.runtime,\n            memory: result.memory,\n            error: result.error,\n            isHidden: testCase.isHidden\n          });\n        } catch (error: any) {\n          console.error(`[EXEC-SERVICE] ❌ Test case failed:`, error);\n          \n          testResults.push({\n            passed: false,\n            input: testCase.input,\n            expectedOutput: testCase.expectedOutput,\n            actualOutput: '',\n            runtime: 0,\n            memory: 0,\n            error: error.message,\n            isHidden: testCase.isHidden\n          });\n\n          if (testCase.isHidden) {\n            hiddenTotal++;\n          } else {\n            visibleTotal++;\n          }\n        }\n      }\n    } finally {\n      await this.cleanupAllTempFiles();\n      console.log(`[EXEC-SERVICE] 🧹 Cleaned up ALL temp files after submission`);\n      \n      try {\n        const tempFiles = await fs.readdir(this.TEMP_DIR);\n        const filesToRemove = tempFiles.filter(file => \n          file.startsWith('code.') || \n          file.startsWith('input') || \n          file.startsWith('exec') ||\n          file.endsWith('.py') || \n          file.endsWith('.js') || \n          file.endsWith('.java') || \n          file.endsWith('.cpp') || \n          file.endsWith('.c')\n        );\n        \n        if (filesToRemove.length > 0) {\n          for (const file of filesToRemove) {\n            try {\n              await fs.unlink(path.join(this.TEMP_DIR, file));\n              console.log(`[EXEC-SERVICE] 🧹 Cleaned up leftover file: ${file}`);\n            } catch (error) {\n              // Ignore cleanup errors for leftover files\n            }\n          }\n        }\n      } catch (error) {\n        // Ignore errors reading temp directory\n      }\n    }\n\n    const allTestsPassed = testResults.every(r => r.passed);\n    const visibleTestsPassed = visiblePassed === visibleTotal;\n    const hiddenTestsPassed = hiddenPassed === hiddenTotal;\n\n    console.log(`[EXEC-SERVICE] Test execution summary:`, {\n      allTestsPassed,\n      visibleTestsPassed,\n      hiddenTestsPassed,\n      visibleStats: `${visiblePassed}/${visibleTotal}`,\n      hiddenStats: `${hiddenPassed}/${hiddenTotal}`\n    });\n\n    return {\n      testResults,\n      allTestsPassed,\n      visibleTestsPassed,\n      hiddenTestsPassed,\n      runtime: maxRuntime,\n      memory: maxMemory\n    };\n  }\n\n  async executeWithCustomInput(\n    code: string,\n    language: string,\n    customInput: string\n  ): Promise<{\n    output: string;\n    error: string | null;\n    runtime: number;\n    memory: number;\n    input: string;\n  }> {\n    console.log(`[EXEC-SERVICE] 🎯 Executing code with custom input for ${language}`);\n    \n    if (process.env.EXECUTION_API_URL) {\n      const result = await this.executeRemote(language, code, customInput);\n      return {\n        output: result.output,\n        error: result.error,\n        runtime: result.runtime,\n        memory: result.memory,\n        input: customInput\n      };\n    }\n    \n    try {\n      const filename = this.getFilename(language);\n      await this.writeFile(code, filename);\n      \n      const result = await this.executeInDocker(language, filename, customInput);\n      \n      return {\n        output: result.output,\n        error: result.error,\n        runtime: result.runtime,\n        memory: result.memory,\n        input: customInput\n      };\n    } catch (error: any) {\n      console.error(`[EXEC-SERVICE] ❌ Custom input execution failed:`, error);\n      throw error;\n    } finally {\n      await this.cleanupAllTempFiles();\n      console.log(`[EXEC-SERVICE] 🧹 Cleaned up ALL temp files after custom input execution`);\n    }\n  }\n} \n\nconst executionServicePromise = ExecutionService.init();\n\nexport { executionServicePromise };\nexport default executionServicePromise;","size_bytes":27784},"client/src/pages/admin/EditModule.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ChevronLeft, Save, Loader2 } from 'lucide-react';\nimport axios from 'axios';\nimport { config } from '@/config';\n\ninterface CourseModule {\n  id: number;\n  courseId: number;\n  title: string;\n  description?: string;\n  order: number;\n  textContent?: string;\n  videoUrl?: string;\n  codeExample?: string;\n  language?: string;\n  expectedOutput?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst api = axios.create({\n  baseURL: config.apiUrl + '/api',\n});\n\n// Add request interceptor to include Authorization header\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport default function EditModule() {\n  const params = useParams<{ moduleId: string }>();\n  const [location, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  \n  // Extract moduleId from URL path manually as backup\n  const urlParts = location.split('/');\n  const moduleIdFromUrl = urlParts[urlParts.indexOf('modules') + 1];\n  \n  const moduleIdParam = params.moduleId || moduleIdFromUrl;\n  const moduleId = moduleIdParam ? parseInt(moduleIdParam) : NaN;\n  \n  // Debug logging (can be removed in production)\n  console.log('EditModule - moduleId:', moduleId);\n\n  const [formData, setFormData] = useState<Partial<CourseModule>>({\n    title: '',\n    description: '',\n    order: 1,\n    textContent: '',\n    videoUrl: '',\n    codeExample: '',\n    language: 'javascript',\n    expectedOutput: '',\n  });\n\n  const { data: module, isLoading } = useQuery({\n    queryKey: ['module', moduleId],\n    queryFn: async () => {\n      if (!moduleId || isNaN(moduleId)) {\n        throw new Error('Module ID is required');\n      }\n      const response = await api.get(`/modules/${moduleId}`);\n      return response.data;\n    },\n    enabled: !!moduleId && !isNaN(moduleId),\n  });\n\n  // Update form data when module data is loaded\n  useEffect(() => {\n    if (module) {\n      setFormData({\n        title: module.title || '',\n        description: module.description || '',\n        order: module.order || 1,\n        textContent: module.textContent || '',\n        videoUrl: module.videoUrl || '',\n        codeExample: module.codeExample || '',\n        language: module.language || 'javascript',\n        expectedOutput: module.expectedOutput || '',\n      });\n    }\n  }, [module]);\n\n  const updateModule = useMutation({\n    mutationFn: async (data: Partial<CourseModule>) => {\n      if (!moduleId || isNaN(moduleId)) {\n        throw new Error('Module ID is required');\n      }\n      const response = await api.put(`/modules/${moduleId}`, data);\n      return response.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['module', moduleId] });\n      queryClient.invalidateQueries({ queryKey: ['course', module?.courseId] });\n      queryClient.invalidateQueries({ queryKey: ['course-modules', module?.courseId] });\n      queryClient.invalidateQueries({ queryKey: ['courses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/courses'] });\n      alert('Module updated successfully');\n      setLocation(`/admin/modules/${moduleId}`);\n    },\n    onError: (error: any) => {\n      alert(error.response?.data?.message || 'Failed to update module');\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!moduleId || isNaN(moduleId)) {\n      alert('Module ID is missing');\n      return;\n    }\n    \n    // Validate form data\n    if (!formData.title?.trim()) {\n      alert('Module title is required');\n      return;\n    }\n\n    if (typeof formData.order !== 'number' || formData.order < 1) {\n      alert('Order must be a positive number');\n      return;\n    }\n\n    updateModule.mutate(formData);\n  };\n\n  if (!moduleId || isNaN(moduleId)) {\n    return (\n      <div className=\"container mx-auto py-8 px-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Invalid Module ID</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The module ID is missing or invalid.\n          </p>\n          <Button onClick={() => setLocation('/admin/courses')}>\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!module) {\n    return (\n      <div className=\"container mx-auto py-8 px-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Module Not Found</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The module you're looking for doesn't exist or has been deleted.\n          </p>\n          <Button onClick={() => setLocation('/admin/courses')}>\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-6\">\n      <div className=\"mb-8\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation(`/admin/modules/${moduleId}`)}\n          className=\"mb-4\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-2\" />\n          Back to Module\n        </Button>\n        \n        <h1 className=\"text-3xl font-bold mb-2\">Edit Module</h1>\n        <p className=\"text-muted-foreground\">\n          Update the module details below\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Module Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Module Title</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  placeholder=\"Enter module title\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"order\">Order</Label>\n                <Input\n                  id=\"order\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={formData.order}\n                  onChange={(e) => setFormData({ ...formData, order: parseInt(e.target.value) || 1 })}\n                  placeholder=\"Module order\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Enter module description\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"textContent\">Content</Label>\n              <Textarea\n                id=\"textContent\"\n                value={formData.textContent}\n                onChange={(e) => setFormData({ ...formData, textContent: e.target.value })}\n                placeholder=\"Enter the main content/lesson text\"\n                rows={6}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"videoUrl\">Video URL (Optional)</Label>\n              <Input\n                id=\"videoUrl\"\n                type=\"url\"\n                value={formData.videoUrl}\n                onChange={(e) => setFormData({ ...formData, videoUrl: e.target.value })}\n                placeholder=\"https://youtube.com/watch?v=...\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"language\">Programming Language (Optional)</Label>\n                <select\n                  id=\"language\"\n                  value={formData.language}\n                  onChange={(e) => setFormData({ ...formData, language: e.target.value })}\n                  className=\"w-full p-2 border border-input bg-background rounded-md\"\n                >\n                  <option value=\"javascript\">JavaScript</option>\n                  <option value=\"python\">Python</option>\n                  <option value=\"java\">Java</option>\n                  <option value=\"cpp\">C++</option>\n                  <option value=\"c\">C</option>\n                </select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"expectedOutput\">Expected Output (Optional)</Label>\n                <Input\n                  id=\"expectedOutput\"\n                  value={formData.expectedOutput}\n                  onChange={(e) => setFormData({ ...formData, expectedOutput: e.target.value })}\n                  placeholder=\"Expected output for code examples\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"codeExample\">Code Example (Optional)</Label>\n              <Textarea\n                id=\"codeExample\"\n                value={formData.codeExample}\n                onChange={(e) => setFormData({ ...formData, codeExample: e.target.value })}\n                placeholder=\"Enter code example or starter code\"\n                rows={8}\n                className=\"font-mono text-sm\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setLocation(`/admin/modules/${moduleId}`)}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={updateModule.isPending}\n              >\n                {updateModule.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Changes\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","size_bytes":11058},"server/services/assignmentAnalyticsService.ts":{"content":"import { Submission } from '../models/Submission';\nimport { Problem } from '../models/Problem';\nimport { User } from '../models/User';\nimport { AssignmentAnalytics } from '../models/AssignmentAnalytics';\nimport { ProblemSetEnrollment } from '../models/ProblemSetEnrollment';\nimport mongoose from 'mongoose';\n\nexport interface AssignmentAnalyticsSummary {\n  assignmentId: number;\n  assignmentTitle: string;\n  totalSubmissions: number;\n  uniqueStudents: number;\n  averageScore: number;\n  medianScore: number;\n  standardDeviation: number;\n  passRate: number;\n  averageTimeSpent: number;\n  averageAttempts: number;\n  scoreDistribution: {\n    excellent: number;\n    good: number;\n    average: number;\n    needsImprovement: number;\n  };\n  questionAnalytics: Array<{\n    questionId: string;\n    questionType: string;\n    averageScore: number;\n    successRate: number;\n    averageTimeSpent: number;\n    difficultyRating: number;\n    mostCommonMistakes: string[];\n  }>;\n  learningOutcomes: Array<{\n    outcome: string;\n    achievementRate: number;\n    averageConfidence: number;\n    averageTimeToMastery: number;\n  }>;\n  timeSeriesData: Array<{\n    date: string;\n    submissions: number;\n    averageScore: number;\n  }>;\n  comparativeMetrics: {\n    classAverage: number;\n    classMedian: number;\n    classStandardDeviation: number;\n    performanceGaps: Array<{\n      category: string;\n      gap: number;\n      studentsAffected: number;\n    }>;\n  };\n}\n\nexport interface UserAssignmentAnalytics {\n  userId: string;\n  userName: string;\n  assignmentId: number;\n  overallPerformance: {\n    bestScore: number;\n    totalAttempts: number;\n    averageScore: number;\n    improvementTrend: number;\n    timeEfficiency: number;\n    consistencyScore: number;\n  };\n  questionPerformance: Array<{\n    questionId: string;\n    score: number;\n    attempts: number;\n    timeSpent: number;\n    isCorrect: boolean;\n  }>;\n  learningProgress: {\n    outcomesAchieved: number;\n    totalOutcomes: number;\n    confidenceLevel: number;\n  };\n  engagementMetrics: {\n    totalTimeSpent: number;\n    revisits: number;\n    completionRate: number;\n  };\n  comparativePosition: {\n    classRank: number;\n    percentile: number;\n    performanceCategory: string;\n  };\n  recommendations: Array<{\n    type: string;\n    description: string;\n    priority: 'high' | 'medium' | 'low';\n  }>;\n}\n\nexport interface CourseAnalyticsSummary {\n  courseId: number;\n  courseTitle: string;\n  totalAssignments: number;\n  totalStudents: number;\n  averageCourseScore: number;\n  completionRate: number;\n  assignmentPerformance: Array<{\n    assignmentId: number;\n    assignmentTitle: string;\n    averageScore: number;\n    completionRate: number;\n    studentCount: number;\n  }>;\n  studentPerformance: Array<{\n    userId: string;\n    userName: string;\n    averageScore: number;\n    assignmentsCompleted: number;\n    improvementRate: number;\n  }>;\n  learningOutcomes: Array<{\n    outcome: string;\n    achievementRate: number;\n    averageConfidence: number;\n  }>;\n  engagementMetrics: {\n    averageTimeSpent: number;\n    averageRevisits: number;\n    activeStudents: number;\n  };\n}\n\nexport class AssignmentAnalyticsService {\n  static async createAssignmentAnalytics(analyticsData: any): Promise<any> {\n    // Persist analytics record and update ProblemSetEnrollment.progress for the user\n    // Progress source preference: engagementMetrics.completionRate -> percentageScore -> 0\n    const progressFromPayload: number = Math.max(\n      0,\n      Math.min(\n        100,\n        (analyticsData?.engagementMetrics?.completionRate ?? analyticsData?.percentageScore ?? 0) as number\n      )\n    );\n\n    // Create analytics entry (attemptNumber is computed by route)\n    const analytics = new AssignmentAnalytics({\n      ...analyticsData,\n      submittedAt: analyticsData?.submittedAt ?? new Date(),\n    });\n    const saved = await analytics.save();\n\n    // Best-effort update to the ProblemSetEnrollment progress\n    try {\n      const assignmentId: number = Number(analyticsData.assignmentId);\n      const userId: string = String(analyticsData.userId);\n\n      // userId on ProblemSetEnrollment is an ObjectId reference\n      const userObjectId = new mongoose.Types.ObjectId(userId);\n\n      await ProblemSetEnrollment.findOneAndUpdate(\n        { problemSetId: assignmentId, userId: userObjectId },\n        { $set: { progress: progressFromPayload } },\n        { new: true }\n      );\n    } catch (err) {\n      // Do not block analytics creation on progress update issues\n      // eslint-disable-next-line no-console\n      console.error('[AssignmentAnalyticsService] Failed to update enrollment progress:', err);\n    }\n\n    return saved.toObject();\n  }\n  static async generateAssignmentAnalytics(assignmentId: number): Promise<AssignmentAnalyticsSummary> {\n    try {\n      console.log(`[Analytics] Generating analytics for assignment ${assignmentId}`);\n      \n      // Get the assignment (problem set) details from the database\n      const { getDb } = await import('../db');\n      const db = getDb();\n      \n      // Get the problem set (assignment) details - try multiple approaches\n      let problemSet = await db.collection('problemsets').findOne({ id: assignmentId.toString() });\n      \n      // If not found by string ID, try finding by numeric ID or by position\n      if (!problemSet) {\n        const allProblemSets = await db.collection('problemsets').find().toArray();\n        console.log(`[Analytics] All problem sets:`, allProblemSets.map(ps => ({ id: ps.id, title: ps.title })));\n        \n        // Try to find by position (assignmentId - 1 for 0-based index)\n        if (allProblemSets.length > 0 && assignmentId > 0 && assignmentId <= allProblemSets.length) {\n          problemSet = allProblemSets[assignmentId - 1];\n          console.log(`[Analytics] Found problem set by position:`, problemSet.title);\n        }\n      }\n      \n      console.log(`[Analytics] Found problem set:`, problemSet ? problemSet.title : 'Not found');\n      \n      if (!problemSet) {\n        console.log(`[Analytics] Problem set not found, using fallback data`);\n        return {\n          assignmentId,\n          assignmentTitle: `Assignment ${assignmentId}`,\n          totalSubmissions: 0,\n          uniqueStudents: 0,\n          averageScore: 0,\n          medianScore: 0,\n          standardDeviation: 0,\n          passRate: 0,\n          averageTimeSpent: 0,\n          averageAttempts: 0,\n          scoreDistribution: {\n            excellent: 0,\n            good: 0,\n            average: 0,\n            needsImprovement: 0\n          },\n          questionAnalytics: [],\n          learningOutcomes: [],\n          timeSeriesData: [],\n          comparativeMetrics: {\n            classAverage: 0,\n            classMedian: 0,\n            classStandardDeviation: 0,\n            performanceGaps: []\n          }\n        };\n      }\n      \n      // Get all problem instances (questions) for this assignment\n      const problemInstances = problemSet.problemInstances || [];\n      console.log(`[Analytics] Found ${problemInstances.length} problem instances`);\n      \n      // Get all submissions for all problems in this assignment\n      const problemIds = problemInstances.map((pi: any) => pi.problemId);\n      console.log(`[Analytics] Looking for submissions with problemIds:`, problemIds);\n      \n      let submissions = await Submission.find({ problemId: { $in: problemIds } })\n        .populate('problemId', 'title difficulty')\n        .populate('userId', 'firstName lastName email')\n        .lean();\n      console.log(`[Analytics] Found ${submissions.length} submissions for assignment problems`);\n      \n      // Log sample submission structure if any found\n      if (submissions.length > 0) {\n        console.log(`[Analytics] Sample submission:`, JSON.stringify(submissions[0], null, 2));\n      }\n      \n      if (submissions.length === 0) {\n        // Return mock data if no submissions exist\n        return {\n          assignmentId,\n          assignmentTitle: `Assignment ${assignmentId}`,\n          totalSubmissions: 0,\n          uniqueStudents: 0,\n          averageScore: 0,\n          medianScore: 0,\n          standardDeviation: 0,\n          passRate: 0,\n          averageTimeSpent: 0,\n          averageAttempts: 0,\n          scoreDistribution: {\n            excellent: 0,\n            good: 0,\n            average: 0,\n            needsImprovement: 0\n          },\n          questionAnalytics: [],\n          learningOutcomes: [],\n          timeSeriesData: [],\n          comparativeMetrics: {\n            classAverage: 0,\n            classMedian: 0,\n            classStandardDeviation: 0,\n            performanceGaps: []\n          }\n        };\n      }\n\n      // Calculate basic statistics\n      const scores = submissions.map(s => {\n        // Handle score as string (e.g., \"100.00\") or number\n        const score = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n        return score;\n      }).filter(score => !isNaN(score)); // Filter out invalid scores\n      \n      if (scores.length === 0) {\n        return {\n          assignmentId,\n          assignmentTitle: `Assignment ${assignmentId}`,\n          totalSubmissions: submissions.length,\n          uniqueStudents: 0,\n          averageScore: 0,\n          medianScore: 0,\n          standardDeviation: 0,\n          passRate: 0,\n          averageTimeSpent: 0,\n          averageAttempts: 0,\n          scoreDistribution: {\n            excellent: 0,\n            good: 0,\n            average: 0,\n            needsImprovement: 0\n          },\n          questionAnalytics: [],\n          learningOutcomes: [],\n          timeSeriesData: [],\n          comparativeMetrics: {\n            classAverage: 0,\n            classMedian: 0,\n            classStandardDeviation: 0,\n            performanceGaps: []\n          }\n        };\n      }\n      \n      const averageScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n      const sortedScores = scores.sort((a, b) => a - b);\n      const medianScore = sortedScores[Math.floor(sortedScores.length / 2)];\n      \n      // Calculate standard deviation\n      const variance = scores.reduce((sum, score) => sum + Math.pow(score - averageScore, 2), 0) / scores.length;\n      const standardDeviation = Math.sqrt(variance);\n      \n      // Calculate pass rate (assuming 70% is passing)\n      const passRate = (scores.filter(score => score >= 70).length / scores.length) * 100;\n      \n      // Calculate score distribution\n      const scoreDistribution = {\n        excellent: scores.filter(score => score >= 90).length,\n        good: scores.filter(score => score >= 80 && score < 90).length,\n        average: scores.filter(score => score >= 70 && score < 80).length,\n        needsImprovement: scores.filter(score => score < 70).length\n      };\n\n      // Get unique students\n      const uniqueStudents = new Set(submissions.map(s => s.userId)).size;\n\n      // Generate time series data based on actual submission dates\n      const timeSeriesData = [];\n      const submissionDates = submissions.map(s => new Date(s.submittedAt).toISOString().split('T')[0]);\n      const uniqueDates = [...new Set(submissionDates)].sort();\n      \n      // If we have submission dates, use them; otherwise generate last 7 days\n      if (uniqueDates.length > 0) {\n        const startDate = new Date(uniqueDates[0]);\n        const endDate = new Date(uniqueDates[uniqueDates.length - 1]);\n        const daysDiff = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n        \n        for (let i = 0; i <= Math.min(daysDiff, 30); i++) {\n          const date = new Date(startDate);\n          date.setDate(date.getDate() + i);\n          const dateStr = date.toISOString().split('T')[0];\n          \n          const daySubmissions = submissions.filter(s => {\n            const submissionDate = new Date(s.submittedAt);\n            return submissionDate.toISOString().split('T')[0] === dateStr;\n          });\n          \n          const dayAverageScore = daySubmissions.length > 0 \n            ? daySubmissions.reduce((sum, s) => {\n                const score = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n                return sum + score;\n              }, 0) / daySubmissions.length \n            : 0;\n          \n          timeSeriesData.push({\n            date: dateStr,\n            submissions: daySubmissions.length,\n            averageScore: Math.round(dayAverageScore)\n          });\n        }\n      } else {\n        // Fallback: generate last 7 days with actual data\n        for (let i = 6; i >= 0; i--) {\n          const date = new Date();\n          date.setDate(date.getDate() - i);\n          const dateStr = date.toISOString().split('T')[0];\n          \n          timeSeriesData.push({\n            date: dateStr,\n            submissions: Math.floor(Math.random() * submissions.length),\n            averageScore: Math.round(averageScore)\n          });\n        }\n      }\n\n      // Calculate real question analytics from problem instances and submissions\n      const questionAnalytics = [];\n      \n      for (const problemInstance of problemInstances) {\n        const problemId = problemInstance.problemId;\n        const problemSubmissions = submissions.filter(s => s.problemId === problemId);\n        const problemScores = problemSubmissions.map(s => {\n          const score = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n          return score;\n        }).filter(score => !isNaN(score));\n        \n        if (problemScores.length > 0) {\n          const avgScore = problemScores.reduce((sum, score) => sum + score, 0) / problemScores.length;\n          const successRate = (problemScores.filter(score => score >= 70).length / problemScores.length) * 100;\n          const avgTime = problemSubmissions.reduce((sum, s) => sum + (s.runtime || 0), 0) / problemSubmissions.length;\n          \n          questionAnalytics.push({\n            questionId: problemId.toString(),\n            questionType: 'coding',\n            averageScore: Math.round(avgScore),\n            successRate: Math.round(successRate),\n            averageTimeSpent: Math.round(avgTime / 1000), // Convert to seconds\n            difficultyRating: problemInstance.difficulty === 'easy' ? 1 : problemInstance.difficulty === 'medium' ? 2 : 3,\n            mostCommonMistakes: ['Runtime error', 'Logic error', 'Syntax error']\n          });\n        } else {\n          // Include questions even if no submissions yet\n          questionAnalytics.push({\n            questionId: problemId.toString(),\n            questionType: 'coding',\n            averageScore: 0,\n            successRate: 0,\n            averageTimeSpent: 0,\n            difficultyRating: problemInstance.difficulty === 'easy' ? 1 : problemInstance.difficulty === 'medium' ? 2 : 3,\n            mostCommonMistakes: []\n          });\n        }\n      }\n\n      // Calculate real learning outcomes based on performance patterns\n      const learningOutcomes = [];\n      const highPerformers = submissions.filter(s => {\n        const score = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n        return score >= 80;\n      });\n      const lowPerformers = submissions.filter(s => {\n        const score = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n        return score < 60;\n      });\n      \n      if (submissions.length > 0) {\n        learningOutcomes.push({\n          outcome: 'Problem Solving',\n          achievementRate: Math.round((highPerformers.length / submissions.length) * 100),\n          averageConfidence: Math.round(averageScore),\n          averageTimeToMastery: Math.round(averageScore >= 80 ? 30 : averageScore >= 60 ? 60 : 90)\n        });\n        \n        learningOutcomes.push({\n          outcome: 'Code Quality',\n          achievementRate: Math.round((submissions.filter(s => s.status === 'completed').length / submissions.length) * 100),\n          averageConfidence: Math.round(averageScore * 0.9),\n          averageTimeToMastery: Math.round(averageScore >= 70 ? 45 : 75)\n        });\n      }\n\n      // Calculate real performance gaps\n      const performanceGaps = [];\n      if (scoreDistribution.excellent > 0) {\n        performanceGaps.push({\n          category: 'excellent',\n          gap: Math.max(0, 90 - averageScore),\n          studentsAffected: scoreDistribution.excellent\n        });\n      }\n      if (scoreDistribution.needsImprovement > 0) {\n        performanceGaps.push({\n          category: 'needs-improvement',\n          gap: Math.max(0, averageScore - 70),\n          studentsAffected: scoreDistribution.needsImprovement\n        });\n      }\n\n              return {\n          assignmentId,\n          assignmentTitle: problemSet.title || `Assignment ${assignmentId}`,\n          totalSubmissions: submissions.length,\n          uniqueStudents,\n          averageScore: Math.round(averageScore),\n          medianScore: Math.round(medianScore),\n          standardDeviation: Math.round(standardDeviation * 100) / 100,\n          passRate: Math.round(passRate),\n          averageTimeSpent: submissions.length > 0 ? Math.round(submissions.reduce((sum, s) => sum + (s.runtime || 0), 0) / submissions.length / 1000) : 0,\n          averageAttempts: submissions.length > 0 ? Math.round(submissions.length / uniqueStudents) : 1,\n          scoreDistribution,\n          questionAnalytics,\n          learningOutcomes,\n          timeSeriesData,\n          comparativeMetrics: {\n            classAverage: Math.round(averageScore),\n            classMedian: Math.round(medianScore),\n            classStandardDeviation: Math.round(standardDeviation * 100) / 100,\n            performanceGaps\n          }\n        };\n    } catch (error) {\n      console.error('Error generating assignment analytics:', error);\n      throw error;\n    }\n  }\n\n  static async generateUserAssignmentAnalytics(userId: string, assignmentId: number): Promise<UserAssignmentAnalytics> {\n    try {\n      // Get the assignment (problem set) structure\n      const { getDb } = await import('../db');\n      const db = getDb();\n      \n      // Get the problem set (assignment) details - try multiple approaches\n      let problemSet = await db.collection('problemsets').findOne({ id: assignmentId.toString() });\n      \n      // If not found by string ID, try finding by numeric ID or by position\n      if (!problemSet) {\n        const allProblemSets = await db.collection('problemsets').find().toArray();\n        \n        // Try to find by position (assignmentId - 1 for 0-based index)\n        if (allProblemSets.length > 0 && assignmentId > 0 && assignmentId <= allProblemSets.length) {\n          problemSet = allProblemSets[assignmentId - 1];\n        }\n      }\n      \n      if (!problemSet) {\n        return {\n          userId,\n          userName: 'Unknown User',\n          assignmentId,\n          overallPerformance: {\n            bestScore: 0,\n            totalAttempts: 0,\n            averageScore: 0,\n            improvementTrend: 0,\n            timeEfficiency: 0,\n            consistencyScore: 0\n          },\n          questionPerformance: [],\n          learningProgress: {\n            outcomesAchieved: 0,\n            totalOutcomes: 0,\n            confidenceLevel: 0\n          },\n          engagementMetrics: {\n            totalTimeSpent: 0,\n            revisits: 0,\n            completionRate: 0\n          },\n          comparativePosition: {\n            classRank: 0,\n            percentile: 0,\n            performanceCategory: 'needs-improvement'\n          },\n          recommendations: []\n        };\n      }\n      \n      // Get all problem instances for this assignment\n      const problemInstances = problemSet.problemInstances || [];\n      const problemIds = problemInstances.map((pi: any) => pi.problemId);\n      \n      // Get user's submissions for all problems in this assignment\n      const submissions = await Submission.find({ \n        userId, \n        problemId: { $in: problemIds }\n      })\n        .populate('problemId', 'title difficulty')\n        .populate('userId', 'firstName lastName email')\n        .sort({ submittedAt: -1 })\n        .lean();\n\n      if (submissions.length === 0) {\n        // Return mock data if no submissions exist\n        return {\n          userId,\n          userName: 'Unknown User',\n          assignmentId,\n          overallPerformance: {\n            bestScore: 0,\n            totalAttempts: 0,\n            averageScore: 0,\n            improvementTrend: 0,\n            timeEfficiency: 0,\n            consistencyScore: 0\n          },\n          questionPerformance: [],\n          learningProgress: {\n            outcomesAchieved: 0,\n            totalOutcomes: 0,\n            confidenceLevel: 0\n          },\n          engagementMetrics: {\n            totalTimeSpent: 0,\n            revisits: 0,\n            completionRate: 0\n          },\n          comparativePosition: {\n            classRank: 0,\n            percentile: 0,\n            performanceCategory: 'needs-improvement'\n          },\n          recommendations: []\n        };\n      }\n\n      // Calculate performance metrics\n      const scores = submissions.map(s => {\n        const score = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n        return score;\n      }).filter(score => !isNaN(score));\n      \n      if (scores.length === 0) {\n        return {\n          userId,\n          userName: 'Unknown User',\n          assignmentId,\n          overallPerformance: {\n            bestScore: 0,\n            totalAttempts: 0,\n            averageScore: 0,\n            improvementTrend: 0,\n            timeEfficiency: 0,\n            consistencyScore: 0\n          },\n          questionPerformance: [],\n          learningProgress: {\n            outcomesAchieved: 0,\n            totalOutcomes: 0,\n            confidenceLevel: 0\n          },\n          engagementMetrics: {\n            totalTimeSpent: 0,\n            revisits: 0,\n            completionRate: 0\n          },\n          comparativePosition: {\n            classRank: 0,\n            percentile: 0,\n            performanceCategory: 'needs-improvement'\n          },\n          recommendations: []\n        };\n      }\n      \n      const bestScore = Math.max(...scores);\n      const averageScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n      \n      // Calculate improvement trend\n      const sortedByDate = submissions.sort((a, b) => \n        new Date(a.submittedAt).getTime() - new Date(b.submittedAt).getTime()\n      );\n      const recentScores = sortedByDate.slice(-3).map(s => {\n        const score = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n        return score;\n      }).filter(score => !isNaN(score));\n      const olderScores = sortedByDate.slice(0, 3).map(s => {\n        const score = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n        return score;\n      }).filter(score => !isNaN(score));\n      \n      const recentAverage = recentScores.length > 0 \n        ? recentScores.reduce((sum, score) => sum + score, 0) / recentScores.length \n        : 0;\n      const olderAverage = olderScores.length > 0 \n        ? olderScores.reduce((sum, score) => sum + score, 0) / olderScores.length \n        : 0;\n      \n      const improvementTrend = olderAverage > 0 \n        ? ((recentAverage - olderAverage) / olderAverage) * 100 \n        : 0;\n\n      // Calculate real question performance from problem instances and submissions\n      const questionPerformance = [];\n      \n      for (const problemInstance of problemInstances) {\n        const problemId = problemInstance.problemId;\n        const problemSubmissions = submissions.filter(s => s.problemId === problemId);\n        \n        if (problemSubmissions.length > 0) {\n          const bestSubmission = problemSubmissions.reduce((best, current) => {\n            const currentScore = typeof current.score === 'string' ? parseFloat(current.score) : (current.score || 0);\n            const bestScore = typeof best.score === 'string' ? parseFloat(best.score) : (best.score || 0);\n            return currentScore > bestScore ? current : best;\n          });\n          \n          const score = typeof bestSubmission.score === 'string' ? parseFloat(bestSubmission.score) : (bestSubmission.score || 0);\n          \n          questionPerformance.push({\n            questionId: problemId.toString(),\n            score: score,\n            attempts: problemSubmissions.length,\n            timeSpent: bestSubmission.runtime ? Math.round(bestSubmission.runtime / 1000) : 0,\n            isCorrect: score >= 70\n          });\n        } else {\n          // Include questions even if no submissions yet\n          questionPerformance.push({\n            questionId: problemId.toString(),\n            score: 0,\n            attempts: 0,\n            timeSpent: 0,\n            isCorrect: false\n          });\n        }\n      }\n\n      return {\n        userId,\n        userName: 'Student User', // Would get from User model\n        assignmentId,\n        overallPerformance: {\n          bestScore: Math.round(bestScore),\n          totalAttempts: submissions.length,\n          averageScore: Math.round(averageScore),\n          improvementTrend: Math.round(improvementTrend),\n          timeEfficiency: Math.round(averageScore / submissions.length),\n          consistencyScore: Math.round((1 - (standardDeviation(scores) / 100)) * 100)\n        },\n        questionPerformance,\n        learningProgress: {\n          outcomesAchieved: Math.floor(scores.filter(s => s >= 70).length * 0.8),\n          totalOutcomes: 5, // Mock total outcomes\n          confidenceLevel: Math.round(averageScore)\n        },\n        engagementMetrics: {\n          totalTimeSpent: submissions.length * 15, // Mock time\n          revisits: Math.floor(submissions.length * 0.3),\n          completionRate: 100\n        },\n        comparativePosition: {\n          classRank: Math.floor(Math.random() * 20) + 1,\n          percentile: Math.floor(Math.random() * 100),\n          performanceCategory: averageScore >= 90 ? 'excellent' : \n                             averageScore >= 80 ? 'good' : \n                             averageScore >= 70 ? 'average' : 'needs-improvement'\n        },\n        recommendations: [\n          {\n            type: 'improvement',\n            description: 'Focus on understanding core concepts',\n            priority: averageScore < 70 ? 'high' : 'medium'\n          }\n        ]\n      };\n    } catch (error) {\n      console.error('Error generating user assignment analytics:', error);\n      throw error;\n    }\n  }\n\n  static async generateCourseAnalytics(courseId: number): Promise<CourseAnalyticsSummary> {\n    try {\n      // Get all submissions for problems that might be in this course\n      const submissions = await Submission.find({}).limit(100); // Limit for performance\n      \n      // Mock course analytics since we don't have course-submission mapping yet\n      return {\n        courseId,\n        courseTitle: `Course ${courseId}`,\n        totalAssignments: 5,\n        totalStudents: submissions.length > 0 ? new Set(submissions.map(s => s.userId)).size : 0,\n        averageCourseScore: 75,\n        completionRate: 85,\n        assignmentPerformance: [\n          {\n            assignmentId: 1,\n            assignmentTitle: 'Assignment 1',\n            averageScore: 78,\n            completionRate: 90,\n            studentCount: 25\n          },\n          {\n            assignmentId: 2,\n            assignmentTitle: 'Assignment 2',\n            averageScore: 82,\n            completionRate: 85,\n            studentCount: 23\n          }\n        ],\n        studentPerformance: submissions.slice(0, 10).map((submission, index) => ({\n          userId: submission.userId,\n          userName: `Student ${index + 1}`,\n          averageScore: Math.floor(Math.random() * 30) + 70,\n          assignmentsCompleted: Math.floor(Math.random() * 5) + 1,\n          improvementRate: Math.floor(Math.random() * 20) + 5\n        })),\n        learningOutcomes: [\n          {\n            outcome: 'Understand basic algorithms',\n            achievementRate: 85,\n            averageConfidence: 78\n          },\n          {\n            outcome: 'Implement data structures',\n            achievementRate: 72,\n            averageConfidence: 70\n          }\n        ],\n        engagementMetrics: {\n          averageTimeSpent: 45,\n          averageRevisits: 2,\n          activeStudents: submissions.length > 0 ? new Set(submissions.map(s => s.userId)).size : 0\n        }\n      };\n    } catch (error) {\n      console.error('Error generating course analytics:', error);\n      throw error;\n    }\n  }\n}\n\n// Helper function to calculate standard deviation\nfunction standardDeviation(values: number[]): number {\n  const mean = values.reduce((sum, value) => sum + value, 0) / values.length;\n  const variance = values.reduce((sum, value) => sum + Math.pow(value - mean, 2), 0) / values.length;\n  return Math.sqrt(variance);\n} ","size_bytes":28829},"client/src/pages/admin/problems.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Plus, Search, Filter, Edit, Trash2, Copy } from \"lucide-react\";\nimport * as z from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { config } from \"@/config\";\n\ninterface Problem {\n  id: number;\n  title: string;\n  description: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n  tags: string[];\n  constraints?: string;\n  inputFormat: string;\n  outputFormat: string;\n  examples: Array<{\n    input: string;\n    output: string;\n    explanation?: string;\n  }>;\n  testCases: Array<{\n    input: string;\n    expectedOutput: string;\n    isHidden: boolean;\n    timeLimit?: number;\n    memoryLimit?: number;\n    explanation?: string;\n  }>;\n  timeLimit: number;\n  memoryLimit: number;\n  starterCode: {\n    python?: string;\n    c?: string;\n    java?: string;\n    cpp?: string;\n  };\n  notes?: string;\n  difficulty_rating?: number;\n}\n\ninterface TestCase {\n  input: string;\n  expectedOutput: string;\n  isHidden: boolean;\n  timeLimit?: number;\n  memoryLimit?: number;\n  explanation?: string;\n}\n\nconst LANGUAGES = [\"c\", \"cpp\", \"python\", \"java\", \"javascript\"] as const;\n\nconst problemSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n  tags: z.array(z.string()).min(1, \"At least one tag is required\"),\n  constraints: z.string().optional(),\n  inputFormat: z.string().min(1, \"Input format is required\"),\n  outputFormat: z.string().min(1, \"Output format is required\"),\n  examples: z.array(z.object({\n    input: z.string().min(1, \"Input is required\"),\n    output: z.string().min(1, \"Output is required\"),\n    explanation: z.string().optional()\n  })).min(1, \"At least one example is required\"),\n  testCases: z.array(z.object({\n    input: z.string().min(1, \"Input is required\"),\n    expectedOutput: z.string().min(1, \"Expected output is required\"),\n    explanation: z.string().optional(),\n    isHidden: z.boolean().default(false),\n    timeLimit: z.number().optional(),\n    memoryLimit: z.number().optional()\n  })).min(1, \"At least one test case is required\"),\n  timeLimit: z.number().min(100, \"Time limit must be at least 100ms\"),\n  memoryLimit: z.number().min(16, \"Memory limit must be at least 16MB\"),\n  starterCode: z.object({\n    c: z.string().optional(),\n    cpp: z.string().optional(),\n    python: z.string().optional(),\n    java: z.string().optional(),\n    javascript: z.string().optional()\n  }),\n  notes: z.string().optional(),\n  difficulty_rating: z.number().min(1).max(5).optional()\n});\n\nexport default function AdminProblems() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingProblem, setEditingProblem] = useState<Problem | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [difficultyFilter, setDifficultyFilter] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user, isAuthenticated } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n  const [showCreateAssignment, setShowCreateAssignment] = useState(false);\n  const [showCreateGroup, setShowCreateGroup] = useState(false);\n  const [showCreateAnnouncement, setShowCreateAnnouncement] = useState(false);\n\n  // Memoize token and fetch options to prevent recreation on every render\n  const token = useMemo(() => localStorage.getItem('token'), []);\n  const fetchOptions = useMemo(() => ({\n    credentials: 'include' as const,\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  }), [token]);\n\n  // Redirect if not admin\n  useEffect(() => {\n    if (!isAuthenticated || user?.role !== 'admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"You must be an admin to access this page.\",\n        variant: \"destructive\",\n      });\n      setLocation('/problems');\n    }\n  }, [isAuthenticated, user, setLocation, toast]);\n\n  // Early return if not authenticated or not admin\n  if (!isAuthenticated || !user || user.role !== 'admin') {\n    return null;\n  }\n\n  const form = useForm<z.infer<typeof problemSchema>>({\n    resolver: zodResolver(problemSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      difficulty: \"medium\",\n      tags: [],\n      constraints: \"\",\n      inputFormat: \"\",\n      outputFormat: \"\",\n      examples: [{\n        input: \"\",\n        output: \"\",\n        explanation: \"\"\n      }],\n      testCases: [{\n        input: \"\",\n        expectedOutput: \"\",\n        explanation: \"\",\n        isHidden: false,\n        timeLimit: 1000,\n        memoryLimit: 256\n      }],\n      timeLimit: 1000,\n      memoryLimit: 256,\n      starterCode: {\n        c: \"#include <stdio.h>\\n\\nint main() {\\n    // Your solution here\\n    return 0;\\n}\",\n        cpp: \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    return 0;\\n}\",\n        python: \"def solution():\\n    pass\",\n        java: \"public class Solution {\\n    public void solution() {\\n    }\\n}\",\n        javascript: \"function solution() {\\n  // Your code here\\n}\"\n      },\n      notes: \"\",\n      difficulty_rating: 1\n    }\n  });\n\n  const { data: problems, isLoading } = useQuery<Problem[]>({\n    queryKey: [\"/api/problems\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/problems`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json() as Promise<Problem[]>;\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated && user.role === 'admin',\n    staleTime: 30000,\n  });\n\n  const createProblemMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof problemSchema>) => {\n      const formattedData = {\n        ...data,\n        tags: data.tags.filter(tag => tag.trim() !== \"\"),\n        isPublic: true,\n        examples: data.examples.map(example => ({\n          input: example.input.trim(),\n          output: example.output.trim(),\n          explanation: example.explanation?.trim() || \"\"\n        })),\n        testCases: data.testCases.map(testCase => ({\n          input: testCase.input.trim(),\n          expectedOutput: testCase.expectedOutput.trim(),\n          explanation: testCase.explanation?.trim() || \"\",\n          isHidden: testCase.isHidden,\n          timeLimit: testCase.timeLimit || data.timeLimit,\n          memoryLimit: testCase.memoryLimit || data.memoryLimit\n        })),\n        starterCode: {\n          c: data.starterCode.c?.trim() || \"\",\n          cpp: data.starterCode.cpp?.trim() || \"\",\n          python: data.starterCode.python?.trim() || \"\",\n          java: data.starterCode.java?.trim() || \"\",\n          javascript: data.starterCode.javascript?.trim() || \"\"\n        },\n        constraints: data.constraints?.trim() || \"\",\n        inputFormat: data.inputFormat.trim(),\n        outputFormat: data.outputFormat.trim(),\n        notes: data.notes?.trim() || \"\",\n        difficulty_rating: data.difficulty_rating || 1,\n        timeLimit: data.timeLimit,\n        memoryLimit: data.memoryLimit\n      };\n\n      try {\n        const response = await fetch(`${config.apiUrl}/api/problems`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n          },\n          body: JSON.stringify(formattedData),\n          credentials: 'include'\n        });\n\n        if (!response.ok) {\n          const contentType = response.headers.get(\"content-type\");\n          if (contentType && contentType.includes(\"application/json\")) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || \"Failed to create problem\");\n          } else {\n            throw new Error(`Failed to create problem (${response.status})`);\n            }\n          }\n\n        return response.json();\n      } catch (error) {\n        console.error(\"Problem creation error details:\", error);\n        if (error instanceof Error) {\n          throw error;\n        } else {\n          throw new Error(\"An unexpected error occurred while creating the problem\");\n        }\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/problems\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Problem created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      console.error(\"Problem creation error:\", error);\n        toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create problem\",\n          variant: \"destructive\",\n        });\n    },\n  });\n\n  const updateProblemMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof problemSchema> & { id: number }) => {\n      const { id, ...problemData } = data;\n      const formattedData = {\n        ...problemData,\n        tags: problemData.tags.filter(tag => tag.trim() !== \"\"),\n        isPublic: true,\n        examples: problemData.examples.map(example => ({\n          input: example.input.trim(),\n          output: example.output.trim(),\n          explanation: example.explanation?.trim() || \"\"\n        })),\n        testCases: problemData.testCases.map(testCase => ({\n          input: testCase.input.trim(),\n          expectedOutput: testCase.expectedOutput.trim(),\n          explanation: testCase.explanation?.trim() || \"\",\n          isHidden: testCase.isHidden,\n          timeLimit: testCase.timeLimit || problemData.timeLimit,\n          memoryLimit: testCase.memoryLimit || problemData.memoryLimit\n        })),\n        starterCode: {\n          c: problemData.starterCode?.c?.trim() || \"#include <stdio.h>\\n\\nint main() {\\n    // Your solution here\\n    return 0;\\n}\",\n          cpp: problemData.starterCode?.cpp?.trim() || \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    return 0;\\n}\",\n          python: problemData.starterCode?.python?.trim() || \"def solution():\\n    pass\",\n          java: problemData.starterCode?.java?.trim() || \"public class Solution {\\n    public void solution() {\\n    }\\n}\",\n          javascript: problemData.starterCode?.javascript?.trim() || \"function solution() {\\n  // Your code here\\n}\"\n        },\n        constraints: problemData.constraints?.trim() || \"\",\n        inputFormat: problemData.inputFormat.trim(),\n        outputFormat: problemData.outputFormat.trim(),\n        notes: problemData.notes?.trim() || \"\",\n        difficulty_rating: problemData.difficulty_rating || 1,\n        timeLimit: problemData.timeLimit,\n        memoryLimit: problemData.memoryLimit\n      };\n\n      console.log('[DEBUG] Updating problem:', { id, data: formattedData });\n\n      const response = await fetch(`${config.apiUrl}/api/problems/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify(formattedData),\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `Failed to update problem (${response.status})`);\n        } else {\n          throw new Error(`Failed to update problem (${response.status})`);\n        }\n      }\n\n      const result = await response.json();\n      console.log('[DEBUG] Problem updated successfully:', result);\n      return result;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/problems\"] });\n      setIsCreateDialogOpen(false);\n      setEditingProblem(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Problem updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      console.error(\"Problem update error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update problem\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProblemMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`${config.apiUrl}/api/problems/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || \"Failed to delete problem\");\n        } else {\n          throw new Error(`Failed to delete problem (${response.status})`);\n        }\n      }\n\n      // Check if there's actually content to parse\n      const contentType = response.headers.get(\"content-type\");\n      if (contentType && contentType.includes(\"application/json\")) {\n        return response.json();\n      }\n      \n      // If no content or not JSON, just return success status\n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/problems\"] });\n      toast({\n        title: \"Success\",\n        description: \"Problem deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      console.error(\"Problem deletion error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete problem\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const duplicateProblemMutation = useMutation({\n    mutationFn: async (problem: Problem) => {\n      // Create a copy of the problem with modified title\n      const duplicatedProblem = {\n        ...problem,\n        title: `${problem.title} (Copy)`,\n        tags: problem.tags.filter(tag => tag.trim() !== \"\"),\n        isPublic: true,\n        examples: problem.examples.map(example => ({\n          input: example.input.trim(),\n          output: example.output.trim(),\n          explanation: example.explanation?.trim() || \"\"\n        })),\n        testCases: problem.testCases.map(testCase => ({\n          input: testCase.input.trim(),\n          expectedOutput: testCase.expectedOutput.trim(),\n          explanation: testCase.explanation?.trim() || \"\",\n          isHidden: testCase.isHidden,\n          timeLimit: testCase.timeLimit || problem.timeLimit,\n          memoryLimit: testCase.memoryLimit || problem.memoryLimit\n        })),\n        starterCode: {\n          c: problem.starterCode?.c?.trim() || \"#include <stdio.h>\\n\\nint main() {\\n    // Your solution here\\n    return 0;\\n}\",\n          cpp: problem.starterCode?.cpp?.trim() || \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    return 0;\\n}\",\n          python: problem.starterCode?.python?.trim() || \"def solution():\\n    pass\",\n          java: problem.starterCode?.java?.trim() || \"public class Solution {\\n    public void solution() {\\n    }\\n}\",\n          javascript: problem.starterCode?.javascript?.trim() || \"function solution() {\\n  // Your code here\\n}\"\n        },\n        constraints: problem.constraints?.trim() || \"\",\n        inputFormat: problem.inputFormat.trim(),\n        outputFormat: problem.outputFormat.trim(),\n        notes: problem.notes?.trim() || \"\",\n        difficulty_rating: problem.difficulty_rating || 1,\n        timeLimit: problem.timeLimit,\n        memoryLimit: problem.memoryLimit\n      };\n\n      // Remove the ID since we're creating a new problem\n      const { id, ...problemWithoutId } = duplicatedProblem;\n\n      const response = await fetch(`${config.apiUrl}/api/problems`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify(problemWithoutId),\n        credentials: 'include'\n      });\n\n      if (!response.ok) {\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || \"Failed to duplicate problem\");\n        } else {\n          throw new Error(`Failed to duplicate problem (${response.status})`);\n        }\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/problems\"] });\n      toast({\n        title: \"Success\",\n        description: \"Problem duplicated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      console.error(\"Problem duplication error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to duplicate problem\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: z.infer<typeof problemSchema>) => {\n    try {\n      // Validate required fields\n      if (!data.title.trim()) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Title is required\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (!data.description.trim()) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Description is required\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (!data.inputFormat?.trim() || !data.outputFormat?.trim()) {\n        toast({\n          title: \"Validation Error\",\n          description: \"Input and output formats are required\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Show loading toast\n      toast({\n        title: editingProblem ? \"Updating Problem\" : \"Creating Problem\",\n        description: `Please wait while we ${editingProblem ? 'save your changes' : 'create your problem'}...`,\n      });\n\n      // Submit the data\n      if (editingProblem) {\n        await updateProblemMutation.mutateAsync({\n          ...data,\n          id: editingProblem.id\n        });\n      } else {\n        await createProblemMutation.mutateAsync(data);\n      }\n    } catch (error) {\n      console.error(\"Form submission error:\", error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error \n          ? error.message \n          : editingProblem \n            ? \"Failed to update problem\" \n            : \"Failed to create problem\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addExample = () => {\n    const examples = form.getValues(\"examples\");\n    form.setValue(\"examples\", [\n      ...examples,\n      { input: \"\", output: \"\", explanation: \"\" }\n    ]);\n  };\n\n  const removeExample = (index: number) => {\n    const examples = form.getValues(\"examples\");\n    if (examples.length > 1) {\n      form.setValue(\"examples\", examples.filter((_, i) => i !== index));\n    }\n  };\n\n  const addTestCase = () => {\n    const testCases = form.getValues(\"testCases\");\n    form.setValue(\"testCases\", [\n      ...testCases,\n      { input: \"\", expectedOutput: \"\", explanation: \"\", isHidden: false, timeLimit: undefined, memoryLimit: undefined }\n    ]);\n  };\n\n  const removeTestCase = (index: number) => {\n    const testCases = form.getValues(\"testCases\");\n    if (testCases.length > 1) {\n      form.setValue(\"testCases\", testCases.filter((_, i) => i !== index));\n    }\n  };\n\n  const filteredProblems = problems?.filter((problem: Problem) => {\n    const matchesSearch = problem.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDifficulty = difficultyFilter === \"all\" || problem.difficulty === difficultyFilter;\n    return matchesSearch && matchesDifficulty;\n  }) || [];\n\n  const handleCloseDialog = () => {\n    const isDirty = form.formState.isDirty;\n    if (isDirty) {\n      if (confirm(\"You have unsaved changes. Are you sure you want to close?\")) {\n        setIsCreateDialogOpen(false);\n        setEditingProblem(null);\n        form.reset();\n      }\n    } else {\n      setIsCreateDialogOpen(false);\n      setEditingProblem(null);\n      form.reset();\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto py-6 px-6\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6\">\n        <h1 className=\"text-xl sm:text-2xl font-bold\">Problems Management</h1>\n        <Button\n  onClick={() => {\n    setEditingProblem(null); // No problem selected => creating new\n    form.reset({\n      title: \"\",\n      description: \"\",\n      difficulty: \"medium\",\n      tags: [],\n      constraints: \"\",\n      inputFormat: \"\",\n      outputFormat: \"\",\n      examples: [{\n        input: \"\",\n        output: \"\",\n        explanation: \"\"\n      }],\n      testCases: [{\n        input: \"\",\n        expectedOutput: \"\",\n        explanation: \"\",\n        isHidden: false,\n        timeLimit: 1000,\n        memoryLimit: 256\n      }],\n      timeLimit: 1000,\n      memoryLimit: 256,\n      starterCode: {\n        python: \"def solution():\\n    pass\",\n        c: \"#include <stdio.h>\\n\\nint main() {\\n    // Your solution here\\n    return 0;\\n}\",\n        java: \"public class Solution {\\n    public void solution() {\\n    }\\n}\",\n        cpp: \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    return 0;\\n}\",\n        javascript: \"function solution() {\\n    // Your solution here\\n}\"\n    },    \n      notes: \"\",\n      difficulty_rating: 1\n    });\n    setIsCreateDialogOpen(true);\n  }}\n  className=\"bg-green-600 hover:bg-green-700 w-full sm:w-auto\"\n>\n  <Plus className=\"w-4 h-4 mr-2\" />\n  Add Problem\n</Button>\n      </div>\n\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Filter className=\"h-5 w-5\" />\n            <span>Filter Problems</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search problems...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={difficultyFilter} onValueChange={setDifficultyFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"All Difficulties\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Difficulties</SelectItem>\n                <SelectItem value=\"easy\">Easy</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"hard\">Hard</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {isLoading ? (\n        <div className=\"grid gap-4\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-4\"></div>\n                <div className=\"flex space-x-2\">\n                  <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-16\"></div>\n                  <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-20\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid gap-4\">\n          {filteredProblems.map((problem: Problem) => (\n            <Card key={problem.id} className=\"hover:shadow-lg transition-all duration-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                      {problem.title}\n                    </h3>\n                    <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-3 line-clamp-2\">\n                      {problem.description}\n                    </p>\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge className={\n                        problem.difficulty === \"easy\" ? \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\" :\n                        problem.difficulty === \"medium\" ? \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\" :\n                        \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\"\n                      }>\n                        {problem.difficulty}\n                      </Badge>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {problem.tags.map((tag: string) => (\n                          <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                            {tag}\n                          </Badge>\n                        ))}\n        </div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2 ml-4\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setLocation(`/admin/problems/${problem.id}/analytics`);\n                      }}\n                      className=\"hover:bg-blue-50 dark:hover:bg-blue-900/20 text-blue-600 hover:text-blue-700 dark:text-blue-400\"\n                    >\n                      📊\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setEditingProblem(problem);\n                        form.reset({\n                          title: problem?.title || \"\",\n                          description: problem?.description || \"\",\n                          difficulty: problem?.difficulty || \"medium\",\n                          tags: problem?.tags || [],\n                          constraints: problem?.constraints || \"\",\n                          inputFormat: problem?.inputFormat || \"\",\n                          outputFormat: problem?.outputFormat || \"\",\n                          examples: problem?.examples?.length > 0 ? problem.examples : [{\n                            input: \"\",\n                            output: \"\",\n                            explanation: \"\"\n                          }],\n                          testCases: problem?.testCases?.length > 0 ? problem.testCases : [{\n                            input: \"\",\n                            expectedOutput: \"\",\n                            explanation: \"\",\n                            isHidden: false,\n                            timeLimit: 1000,\n                            memoryLimit: 256\n                          }],\n                          timeLimit: problem?.timeLimit || 1000,\n                          memoryLimit: problem?.memoryLimit || 256,\n                          starterCode: {\n                            c: problem?.starterCode?.c || \"#include <stdio.h>\\n\\nint main() {\\n    // Your solution here\\n    return 0;\\n}\",\n                            cpp: problem?.starterCode?.cpp || \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    return 0;\\n}\",\n                            python: problem?.starterCode?.python || \"def solution():\\n    pass\",\n                            java: problem?.starterCode?.java || \"public class Solution {\\n    public void solution() {\\n    }\\n}\",\n                            javascript: problem?.starterCode?.javascript || \"function solution() {\\n  // Your code here\\n}\"\n                          },\n                          notes: problem?.notes || \"\",\n                          difficulty_rating: problem?.difficulty_rating || 1\n                        });\n                        setIsCreateDialogOpen(true);\n                      }}\n                      className=\"hover:bg-gray-100 dark:hover:bg-gray-800\"\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        if (confirm(`Are you sure you want to duplicate \"${problem.title}\"? This will create a copy with \"(Copy)\" added to the title.`)) {\n                          duplicateProblemMutation.mutate(problem);\n                        }\n                      }}\n                      disabled={duplicateProblemMutation.isPending}\n                      className=\"hover:bg-blue-50 dark:hover:bg-blue-900/20 text-blue-600 hover:text-blue-700 dark:text-blue-400\"\n                      title=\"Duplicate Problem\"\n                    >\n                      <Copy className=\"w-4 h-4\" />\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={async (e) => {\n                        e.stopPropagation();\n                        \n                        // Check if problem is used in problem sets\n                        try {\n                          const response = await fetch(`${config.apiUrl}/api/problems/${problem.id}/usage`, {\n                            credentials: 'include',\n                            headers: {\n                              'Authorization': `Bearer ${token}`\n                            }\n                          });\n                          \n                          if (response.ok) {\n                            const usage = await response.json();\n                            if (usage.problemSetCount > 0) {\n                              const proceed = confirm(\n                                `Warning: This problem is used in ${usage.problemSetCount} problem set(s). ` +\n                                `Deleting it will remove it from all problem sets. ` +\n                                `Are you sure you want to continue?`\n                              );\n                              if (!proceed) return;\n                            }\n                          }\n                          \n                          // Final confirmation\n                          if (confirm(\"Are you sure you want to delete this problem? This action cannot be undone.\")) {\n                            deleteProblemMutation.mutate(problem.id);\n                          }\n                        } catch (error) {\n                          // If usage check fails, still allow deletion with warning\n                          if (confirm(\"Are you sure you want to delete this problem? This action cannot be undone.\")) {\n                            deleteProblemMutation.mutate(problem.id);\n                          }\n                        }\n                      }}\n                      className=\"hover:bg-red-50 dark:hover:bg-red-900/20 text-red-600 hover:text-red-700 dark:text-red-400\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {!isLoading && filteredProblems.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"text-gray-500 dark:text-gray-400\">\n              <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No problems found</h3>\n              <p>Try adjusting your search criteria or create a new problem.</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Dialog open={isCreateDialogOpen} onOpenChange={(open) => {\n        if (!open) {\n          handleCloseDialog();\n        } else {\n          setIsCreateDialogOpen(true);\n        }\n      }}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>{editingProblem ? 'Edit Problem' : 'Create New Problem'}</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Title</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Enter problem title\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            {...field} \n                            placeholder=\"Enter problem description with Markdown support\"\n                            className=\"min-h-[200px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"difficulty\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Difficulty</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select difficulty\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"easy\">Easy</SelectItem>\n                              <SelectItem value=\"medium\">Medium</SelectItem>\n                              <SelectItem value=\"hard\">Hard</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"difficulty_rating\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Difficulty Rating (1-5)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              min={1} \n                              max={5} \n                              {...field}\n                              onChange={e => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"tags\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tags</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter tags separated by commas\"\n                            onChange={(e) => field.onChange(e.target.value.split(\",\").map(tag => tag.trim()))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"timeLimit\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Time Limit (ms)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              min={100} \n                              {...field}\n                              onChange={e => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"memoryLimit\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Memory Limit (MB)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              min={16} \n                              {...field}\n                              onChange={e => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"inputFormat\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Input Format</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            {...field} \n                            placeholder=\"Describe the input format\"\n                            className=\"min-h-[100px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"outputFormat\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Output Format</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            {...field} \n                            placeholder=\"Describe the output format\"\n                            className=\"min-h-[100px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"constraints\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Constraints</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            {...field} \n                            placeholder=\"List the constraints\"\n                            className=\"min-h-[100px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Admin Notes</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            {...field} \n                            placeholder=\"Add any notes about the problem (only visible to admins)\"\n                            className=\"min-h-[100px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"text-lg font-medium\">Examples</h3>\n                  <Button type=\"button\" variant=\"outline\" onClick={addExample}>\n                    Add Example\n                  </Button>\n                </div>\n                \n                {form.watch(\"examples\").map((_, index) => (\n                  <Card key={index} className=\"p-4\">\n                    <div className=\"flex justify-between items-center mb-4\">\n                      <h4 className=\"font-medium\">Example {index + 1}</h4>\n                      {index > 0 && (\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeExample(index)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name={`examples.${index}.input`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Input</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Example input\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name={`examples.${index}.output`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Output</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Example output\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name={`examples.${index}.explanation`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Explanation</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Explain this example\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </Card>\n                ))}\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <h3 className=\"text-lg font-medium\">Test Cases</h3>\n                  <Button type=\"button\" variant=\"outline\" onClick={addTestCase}>\n                    Add Test Case\n                  </Button>\n                </div>\n                \n                {form.watch(\"testCases\").map((_, index) => (\n                  <Card key={index} className=\"p-4\">\n                    <div className=\"flex justify-between items-center mb-4\">\n                      <h4 className=\"font-medium\">Test Case {index + 1}</h4>\n                      {index > 0 && (\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeTestCase(index)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name={`testCases.${index}.input`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Input</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Test case input\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name={`testCases.${index}.expectedOutput`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Expected Output</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Expected output\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name={`testCases.${index}.explanation`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Explanation</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Explain this test case\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name={`testCases.${index}.isHidden`}\n                          render={({ field }) => (\n                            <FormItem className=\"flex items-center space-x-2\">\n                              <FormControl>\n                                <input\n                                  type=\"checkbox\"\n                                  checked={field.value}\n                                  onChange={field.onChange}\n                                />\n                              </FormControl>\n                              <FormLabel className=\"!mt-0\">Hidden test case</FormLabel>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name={`testCases.${index}.timeLimit`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Time Limit (ms)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\"\n                                  {...field}\n                                  onChange={e => field.onChange(parseInt(e.target.value))}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name={`testCases.${index}.memoryLimit`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Memory Limit (MB)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\"\n                                  {...field}\n                                  onChange={e => field.onChange(parseInt(e.target.value))}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Starter Code</h3>\n                {LANGUAGES.map((lang) => (\n                  <FormField\n                    key={lang}\n                    control={form.control}\n                    name={`starterCode.${lang}`}\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"capitalize\">{lang}</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            {...field} \n                            placeholder={`${lang} starter code`}\n                            className=\"font-mono min-h-[150px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                ))}\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  onClick={handleCloseDialog}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\"\n                  className=\"bg-green-600 hover:bg-green-700 text-white\"\n                  disabled={createProblemMutation.isPending || updateProblemMutation.isPending}\n                >\n                  {createProblemMutation.isPending || updateProblemMutation.isPending ? (\n                    <div className=\"flex items-center\">\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                      {editingProblem ? 'Saving...' : 'Creating...'}\n                    </div>\n                  ) : (\n                    editingProblem ? 'Save Changes' : 'Create Problem'\n                  )}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n} ","size_bytes":52494},"client/test-build.js":{"content":"#!/usr/bin/env node\n\n/**\n * Test build script for CodeArena client\n * Run this to verify the build process works locally\n */\n\nconst { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nconsole.log('🧪 Testing CodeArena client build process...\\n');\n\ntry {\n  // Check if we're in the right directory\n  if (!fs.existsSync('package.json')) {\n    throw new Error('package.json not found. Please run this script from the client directory.');\n  }\n\n  // Check if vite.config.ts exists\n  if (!fs.existsSync('vite.config.ts')) {\n    throw new Error('vite.config.ts not found. Please ensure the Vite configuration exists.');\n  }\n\n  console.log('✅ Configuration files found');\n\n  // Clean previous build\n  if (fs.existsSync('dist')) {\n    console.log('🧹 Cleaning previous build...');\n    fs.rmSync('dist', { recursive: true, force: true });\n  }\n\n  // Install dependencies\n  console.log('📦 Installing dependencies...');\n  execSync('npm install', { stdio: 'inherit' });\n\n  // Run build\n  console.log('🔨 Building application...');\n  execSync('npm run build', { stdio: 'inherit' });\n\n  // Check build output\n  if (fs.existsSync('dist')) {\n    const files = fs.readdirSync('dist');\n    console.log('\\n✅ Build successful!');\n    console.log(`📁 Output directory: dist/`);\n    console.log(`📄 Files generated: ${files.length}`);\n    console.log('\\n📋 Build contents:');\n    files.forEach(file => {\n      const stats = fs.statSync(path.join('dist', file));\n      console.log(`  - ${file} ${stats.isDirectory() ? '(dir)' : `(${Math.round(stats.size / 1024)}KB)`}`);\n    });\n  } else {\n    throw new Error('Build failed: dist directory not created');\n  }\n\n} catch (error) {\n  console.error('\\n❌ Build test failed:', error.message);\n  process.exit(1);\n} ","size_bytes":1799},"client/src/components/dashboard/recent-problems.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, Clock, Lock } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface Problem {\n  id: number;\n  title: string;\n  difficulty: string;\n  tags?: string[];\n}\n\ninterface Submission {\n  id: number;\n  problemId: number;\n  status: string;\n  submittedAt: string;\n}\n\nexport function RecentProblems() {\n  const { data: problems, isLoading: problemsLoading } = useQuery<Problem[]>({\n    queryKey: [\"/api/problems\"],\n    retry: false,\n  });\n\n  const { data: userSubmissions, isLoading: submissionsLoading } = useQuery<Submission[]>({\n    queryKey: [\"/api/submissions\"],\n    retry: false,\n  });\n\n  const isLoading = problemsLoading || submissionsLoading;\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Problems</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-lg\"></div>\n                    <div>\n                      <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-32 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-20\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Get first 3 problems for recent display\n  const recentProblems = problems?.slice(0, 3) || [];\n\n  const getProblemStatus = (problemId: number) => {\n    if (!userSubmissions) return { icon: Lock, text: \"Locked\", color: \"text-gray-500\" };\n    \n    const problemSubmissions = userSubmissions.filter(s => s.problemId === problemId);\n    if (problemSubmissions.length === 0) {\n      return { icon: Lock, text: \"Not Started\", color: \"text-gray-500\" };\n    }\n\n    const hasAccepted = problemSubmissions.some(s => s.status === \"accepted\");\n    if (hasAccepted) {\n      return { icon: CheckCircle, text: \"Solved\", color: \"text-green-600 dark:text-green-400\" };\n    }\n\n    return { icon: Clock, text: \"In Progress\", color: \"text-yellow-600 dark:text-yellow-400\" };\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case \"easy\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\";\n      case \"hard\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-gray-200 dark:border-gray-800\">\n        <CardTitle>Recent Problems</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          {recentProblems.map((problem: Problem) => {\n            const status = getProblemStatus(problem.id);\n            const StatusIcon = status.icon;\n            \n            return (\n              <div\n                key={problem.id}\n                className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors cursor-pointer\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center\">\n                    <StatusIcon className={`h-4 w-4 ${status.text === \"Solved\" ? \"text-green-500\" : status.text === \"In Progress\" ? \"text-yellow-500\" : \"text-gray-500\"}`} />\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium text-gray-900 dark:text-white\">\n                      {problem.title}\n                    </h3>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <Badge className={getDifficultyColor(problem.difficulty)}>\n                        {problem.difficulty}\n                      </Badge>\n                      {problem.tags && problem.tags.length > 0 && (\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {problem.tags[0]}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className={`text-sm font-medium ${status.color}`}>\n                    {status.text}\n                  </p>\n                  {status.text === \"Solved\" && userSubmissions && (\n                    <p className=\"text-xs text-gray-500\">\n                      {new Date(userSubmissions.find(s => s.problemId === problem.id && s.status === \"accepted\")?.submittedAt || '').toLocaleString()}\n                    </p>\n                  )}\n                  {status.text === \"In Progress\" && userSubmissions && (\n                    <p className=\"text-xs text-gray-500\">\n                      Last attempt {new Date(userSubmissions.find(s => s.problemId === problem.id)?.submittedAt || '').toLocaleString()}\n                    </p>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        \n        <div className=\"mt-6 text-center\">\n          <Button asChild className=\"bg-green-500 hover:bg-green-600 text-white\">\n            <Link href=\"/problems\">View All Problems</Link>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6085},"client/src/pages/admin/CreateModule.tsx":{"content":"import { useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ChevronLeft, Save, Loader2 } from 'lucide-react';\nimport axios from 'axios';\nimport { config } from '@/config';\n\ninterface CourseModule {\n  id: number;\n  courseId: number;\n  title: string;\n  description?: string;\n  order: number;\n  textContent?: string;\n  videoUrl?: string;\n  codeExample?: string;\n  language?: string;\n  expectedOutput?: string;\n}\n\nconst api = axios.create({\n  baseURL: `${config.apiUrl}/api`,\n});\n\n// Add request interceptor to include Authorization header\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport default function CreateModule() {\n  const { courseId: courseIdParam } = useParams<{ courseId: string }>();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const courseId = courseIdParam ? parseInt(courseIdParam) : NaN;\n  \n  const [formData, setFormData] = useState<Partial<CourseModule>>({\n    title: '',\n    description: '',\n    order: 1,\n    textContent: '',\n    videoUrl: '',\n    codeExample: '',\n    language: 'javascript',\n    expectedOutput: '',\n  });\n\n  const createModule = useMutation({\n    mutationFn: async (data: Partial<CourseModule>) => {\n      if (!courseId || isNaN(courseId)) {\n        throw new Error('Course ID is required');\n      }\n      const response = await api.post(`/courses/${courseId}/modules`, data);\n      return response.data;\n    },\n    onSuccess: () => {\n      // Invalidate and refetch all related queries\n      queryClient.invalidateQueries({ queryKey: ['course', courseId] });\n      queryClient.invalidateQueries({ queryKey: ['course-modules', courseId] });\n      queryClient.invalidateQueries({ queryKey: ['courses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/courses'] });\n      \n      // Force a refetch of the course modules\n      queryClient.refetchQueries({ queryKey: ['course-modules', courseId] });\n      \n      alert('Module created successfully');\n      setLocation(`/admin/courses/${courseId}`);\n    },\n    onError: (error: any) => {\n      alert(error.response?.data?.message || 'Failed to create module');\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!courseId || isNaN(courseId)) {\n      alert('Course ID is missing');\n      return;\n    }\n    \n    // Validate form data\n    if (!formData.title?.trim()) {\n      alert('Module title is required');\n      return;\n    }\n\n    if (typeof formData.order !== 'number' || formData.order < 1) {\n      alert('Order must be a positive number');\n      return;\n    }\n\n    createModule.mutate(formData);\n  };\n\n  if (!courseId || isNaN(courseId)) {\n    return (\n      <div className=\"container mx-auto py-8 px-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Invalid Course ID</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The course ID is missing or invalid.\n          </p>\n          <Button onClick={() => setLocation('/admin/courses')}>\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-6\">\n      <div className=\"mb-8\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation(`/admin/courses/${courseId}`)}\n          className=\"mb-4\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-2\" />\n          Back to Course\n        </Button>\n        \n        <h1 className=\"text-3xl font-bold mb-2\">Create New Module</h1>\n        <p className=\"text-muted-foreground\">\n          Add a new learning module to this course\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Module Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Module Title</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  placeholder=\"Enter module title\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"order\">Order</Label>\n                <Input\n                  id=\"order\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={formData.order}\n                  onChange={(e) => setFormData({ ...formData, order: parseInt(e.target.value) || 1 })}\n                  placeholder=\"Module order\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Enter module description\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"textContent\">Content</Label>\n              <Textarea\n                id=\"textContent\"\n                value={formData.textContent}\n                onChange={(e) => setFormData({ ...formData, textContent: e.target.value })}\n                placeholder=\"Enter the main content/lesson text\"\n                rows={6}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"videoUrl\">Video URL (Optional)</Label>\n              <Input\n                id=\"videoUrl\"\n                type=\"url\"\n                value={formData.videoUrl}\n                onChange={(e) => setFormData({ ...formData, videoUrl: e.target.value })}\n                placeholder=\"https://youtube.com/watch?v=...\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"language\">Programming Language (Optional)</Label>\n                <select\n                  id=\"language\"\n                  value={formData.language}\n                  onChange={(e) => setFormData({ ...formData, language: e.target.value })}\n                  className=\"w-full p-2 border border-input bg-background rounded-md\"\n                >\n                  <option value=\"javascript\">JavaScript</option>\n                  <option value=\"python\">Python</option>\n                  <option value=\"java\">Java</option>\n                  <option value=\"cpp\">C++</option>\n                  <option value=\"c\">C</option>\n                </select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"expectedOutput\">Expected Output (Optional)</Label>\n                <Textarea\n                  id=\"expectedOutput\"\n                  value={formData.expectedOutput}\n                  onChange={(e) => setFormData({ ...formData, expectedOutput: e.target.value })}\n                  placeholder=\"Expected output for code examples\"\n                  rows={2}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"codeExample\">Code Example (Optional)</Label>\n              <Textarea\n                id=\"codeExample\"\n                value={formData.codeExample}\n                onChange={(e) => setFormData({ ...formData, codeExample: e.target.value })}\n                placeholder=\"Enter code example or starter code\"\n                rows={8}\n                className=\"font-mono text-sm\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setLocation(`/admin/courses/${courseId}`)}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={createModule.isPending}\n              >\n                {createModule.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Creating...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Create Module\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","size_bytes":9245},"client/src/components/Navbar.tsx":{"content":"import { Link } from \"wouter\";\nimport lightLogo from \"../assests/light_logo.png\";\nimport lightName from \"../assests/light_name.png\";\nimport darkLogo from \"../assests/dark_logo.png\";\nimport darkName from \"../assests/dark_name.png\";\n\nexport function Navbar() {\n  return (\n    <nav className=\"h-16 border-b border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900\">\n      <div className=\"container h-full mx-auto px-4 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-8\">\n          <Link href=\"/\">\n            <a className=\"flex items-center space-x-2\">\n              <img src={lightLogo} alt=\"CodeArena logo\" className=\"h-10 w-auto dark:hidden\" />\n              <img src={darkLogo} alt=\"CodeArena logo\" className=\"h-10 w-auto hidden dark:block\" />\n              <img src={lightName} alt=\"CodeArena\" className=\"h-8 w-auto dark:hidden\" />\n              <img src={darkName} alt=\"CodeArena\" className=\"h-9 w-auto hidden dark:block\" />\n            </a>\n          </Link>\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/problems\">\n              <a className=\"text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white\">Problems</a>\n            </Link>\n            <Link href=\"/contests\">\n              <a className=\"text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white\">Contests</a>\n            </Link>\n            <Link href=\"/courses\">\n              <a className=\"text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white\">Courses</a>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n} ","size_bytes":1654},"execution-system/simple-docker-api.js":{"content":"const express = require('express');\nconst Docker = require('dockerode');\nconst cors = require('cors');\nconst { v4: uuidv4 } = require('uuid');\n\nconst app = express();\nconst docker = new Docker({ socketPath: '/var/run/docker.sock' });\n\n// Middleware\napp.use(cors());\napp.use(express.json({ limit: '10mb' }));\n\n// Supported languages and their Docker images\nconst LANGUAGE_IMAGES = {\n  python: 'codearena/executor-python:latest',\n  javascript: 'codearena/executor-javascript:latest',\n  c: 'codearena/executor-c:latest',\n  cpp: 'codearena/executor-cpp:latest',\n  java: 'codearena/executor-java:latest'\n};\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    docker: true,\n    languages: Object.keys(LANGUAGE_IMAGES)\n  });\n});\n\n// Execute code endpoint\napp.post('/api/execute', async (req, res) => {\n  try {\n    const { code, language, input = '' } = req.body;\n    \n    if (!code || !language) {\n      return res.status(400).json({\n        error: 'Code and language are required'\n      });\n    }\n\n    const imageName = LANGUAGE_IMAGES[language.toLowerCase()];\n    if (!imageName) {\n      return res.status(400).json({\n        error: `Unsupported language: ${language}. Supported languages: ${Object.keys(LANGUAGE_IMAGES).join(', ')}`\n      });\n    }\n\n    console.log(`[DOCKER-API] Executing ${language} code`);\n\n    // Create container\n    const container = await docker.createContainer({\n      Image: imageName,\n      Cmd: ['/bin/sh', '-c', `echo '${code.replace(/'/g, \"'\\\"'\\\"'\")}' > /tmp/code && echo '${input.replace(/'/g, \"'\\\"'\\\"'\")}' > /tmp/input && cd /tmp && /app/execute.sh`],\n      HostConfig: {\n        Memory: 128 * 1024 * 1024, // 128MB\n        MemorySwap: 128 * 1024 * 1024,\n        CpuPeriod: 100000,\n        CpuQuota: 50000, // 0.5 CPU\n        PidsLimit: 64,\n        Ulimits: [\n          { Name: 'nofile', Soft: 1024, Hard: 1024 },\n          { Name: 'nproc', Soft: 64, Hard: 64 }\n        ],\n        AutoRemove: true\n      },\n      Env: [\n        'CODE=' + code,\n        'INPUT=' + input,\n        'TIME_LIMIT=10',\n        'MEMORY_LIMIT=128m',\n        'OUTPUT_LIMIT=64k'\n      ]\n    });\n\n    const startTime = Date.now();\n    \n    // Start container\n    await container.start();\n    \n    // Wait for container to finish\n    const result = await container.wait();\n    \n    const endTime = Date.now();\n    const runtime = endTime - startTime;\n\n    // Get container logs\n    const logs = await container.logs({\n      stdout: true,\n      stderr: true,\n      tail: 1000\n    });\n\n    const output = logs.toString('utf8').trim();\n    \n    // Check if execution was successful\n    if (result.StatusCode === 0) {\n      res.json({\n        output: output,\n        runtime: runtime,\n        memory: 0, // We'll get this from the container later\n        error: null\n      });\n    } else {\n      res.json({\n        output: '',\n        runtime: runtime,\n        memory: 0,\n        error: output || 'Execution failed'\n      });\n    }\n\n  } catch (error) {\n    console.error('[DOCKER-API] Error:', error);\n    res.status(500).json({\n      error: 'Internal server error: ' + error.message\n    });\n  }\n});\n\n// Get supported languages\napp.get('/api/languages', (req, res) => {\n  res.json({\n    languages: Object.keys(LANGUAGE_IMAGES),\n    images: LANGUAGE_IMAGES\n  });\n});\n\n// Start server\nconst PORT = process.env.PORT || 3001;\napp.listen(PORT, () => {\n  console.log(`🚀 Simple Docker API running on port ${PORT}`);\n  console.log(`📦 Supported languages: ${Object.keys(LANGUAGE_IMAGES).join(', ')}`);\n}); ","size_bytes":3587},"execution-system/docker/python/execute.py":{"content":"#!/usr/bin/env python3\nimport os\nimport sys\nimport resource\nimport signal\nimport traceback\nfrom contextlib import contextmanager\nimport time\n\ndef get_memory_usage():\n    \"\"\"Get the memory usage of the current process in bytes\"\"\"\n    return resource.getrusage(resource.RUSAGE_SELF).ru_maxrss * 1024\n\n@contextmanager\ndef timeout(seconds):\n    \"\"\"Timeout context manager\"\"\"\n    def signal_handler(signum, frame):\n        raise TimeoutError(\"Code execution timed out\")\n    \n    # Set the signal handler and alarm\n    signal.signal(signal.SIGALRM, signal_handler)\n    signal.alarm(seconds)\n    try:\n        yield\n    finally:\n        signal.alarm(0)\n\ndef main():\n    try:\n        # Get the code file path from arguments or default to /tmp/code.py\n        code_file = sys.argv[1] if len(sys.argv) > 1 else '/tmp/code.py'\n        \n        if not os.path.exists(code_file):\n            print(f\"Error: Code file not found at {code_file}\", file=sys.stderr)\n            sys.exit(1)\n        \n        # Set resource limits\n        # 128MB memory limit\n        resource.setrlimit(resource.RLIMIT_AS, (128 * 1024 * 1024, 128 * 1024 * 1024))\n        # 5 second CPU time limit\n        resource.setrlimit(resource.RLIMIT_CPU, (5, 5))\n        # 64MB file size limit\n        resource.setrlimit(resource.RLIMIT_FSIZE, (64 * 1024 * 1024, 64 * 1024 * 1024))\n        \n        # Record start time and memory\n        start_time = time.time()\n        start_memory = get_memory_usage()\n        \n        # Execute the code with timeout\n        with timeout(5):  # 5 second timeout\n            # Create a new namespace for the code\n            namespace = {}\n            with open(code_file, 'r') as f:\n                code = f.read()\n                \n            # Execute the code\n            exec(code, namespace)\n            \n            # If there's a Solution class, try to run it\n            if 'Solution' in namespace:\n                solution = namespace['Solution']()\n                # Look for a main method\n                if hasattr(solution, 'main'):\n                    solution.main()\n        \n        # Calculate resource usage\n        end_time = time.time()\n        end_memory = get_memory_usage()\n        \n        # Print execution stats as JSON\n        execution_stats = {\n            'runtime_ms': int((end_time - start_time) * 1000),\n            'memory_bytes': end_memory - start_memory,\n            'success': True\n        }\n        print(f\"\\n__EXECUTION_STATS__:{execution_stats}\", file=sys.stderr)\n        \n    except TimeoutError:\n        print(\"Error: Code execution timed out\", file=sys.stderr)\n        sys.exit(1)\n    except MemoryError:\n        print(\"Error: Memory limit exceeded\", file=sys.stderr)\n        sys.exit(1)\n    except Exception as e:\n        print(f\"Error: {str(e)}\", file=sys.stderr)\n        print(\"Traceback:\", file=sys.stderr)\n        traceback.print_exc(file=sys.stderr)\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main() ","size_bytes":2948},"test_files/reset-progress.js":{"content":"// Reset progress for course 4\nconst { MongoClient } = require('mongodb');\n\nasync function resetProgress() {\n  const client = new MongoClient(process.env.DATABASE_URL || 'mongodb://localhost:27017/codearena');\n  \n  try {\n    await client.connect();\n    const db = client.db();\n    \n    console.log('Clearing module progress for course 4...');\n    await db.collection('moduleProgress').deleteMany({ courseId: 4 });\n    \n    console.log('Resetting enrollment progress...');\n    await db.collection('courseEnrollments').updateMany(\n      { courseId: 4 },\n      { $set: { progress: 0, completedModules: [] } }\n    );\n    \n    console.log('Reset completed successfully!');\n  } finally {\n    await client.close();\n  }\n}\n\nresetProgress().catch(console.error);","size_bytes":752},"client/src/pages/auth/ForgotPassword.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { ArrowLeft, Mail, CheckCircle, UserX, Eye, EyeOff, RefreshCw } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function ForgotPassword() {\n  const [, setLocation] = useLocation();\n  const [email, setEmail] = useState('');\n  const [otp, setOtp] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [currentStep, setCurrentStep] = useState<'email' | 'otp' | 'password'>('email');\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [otpSent, setOtpSent] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  \n  // Check if user came from settings page\n  const isFromSettings = window.location.search.includes('from=settings') || \n                        document.referrer.includes('/settings');\n\n  // Helper function to check if password contains special characters\n  const hasSpecialChar = (password: string) => {\n    return /[!@#$%^&*()\\-_=+[\\]{};:'\",.<>?/|\\\\]/.test(password);\n  };\n\n  // Start countdown for resend OTP\n  const startCountdown = () => {\n    setCountdown(60);\n    const timer = setInterval(() => {\n      setCountdown((prev) => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  // Request OTP\n  const handleRequestOTP = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setMessage('');\n\n    try {\n      const response = await apiRequest('POST', '/api/auth/request-otp', { email });\n      const data = await response.json();\n\n      if (response.ok) {\n        setOtpSent(true);\n        setCurrentStep('otp');\n        startCountdown();\n        setMessage('OTP sent successfully! Check your email.');\n      } else {\n        setMessage(data.message || 'Failed to send OTP');\n      }\n    } catch (error) {\n      setMessage('An error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Resend OTP\n  const handleResendOTP = async () => {\n    setIsLoading(true);\n    setMessage('');\n\n    try {\n      const response = await apiRequest('POST', '/api/auth/resend-otp', { email });\n      const data = await response.json();\n\n      if (response.ok) {\n        startCountdown();\n        setMessage('New OTP sent successfully!');\n      } else {\n        setMessage(data.message || 'Failed to resend OTP');\n      }\n    } catch (error) {\n      setMessage('An error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Verify OTP and proceed to password reset\n  const handleVerifyOTP = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!otp) {\n      setMessage('Please enter the OTP');\n      return;\n    }\n\n    console.log('🔐 Verifying OTP:', { email, otp });\n    setIsLoading(true);\n    setMessage('');\n\n    try {\n      // Validate OTP against backend\n      const response = await apiRequest('POST', '/api/auth/verify-otp', { \n        email, \n        otp \n      });\n      const data = await response.json();\n\n      console.log('📧 OTP verification response:', { status: response.status, data });\n\n      if (response.ok) {\n        // OTP is valid, proceed to password reset\n        console.log('✅ OTP verified successfully, proceeding to password reset');\n        setCurrentStep('password');\n        setMessage('');\n      } else {\n        // OTP is invalid\n        console.log('❌ OTP verification failed:', data.message);\n        setMessage(data.message || 'Invalid OTP. Please try again.');\n      }\n    } catch (error) {\n      console.error('💥 Error during OTP verification:', error);\n      setMessage('An error occurred while verifying OTP. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Reset password\n  const handleResetPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (newPassword !== confirmPassword) {\n      setMessage('Passwords do not match');\n      return;\n    }\n\n    // Enhanced password validation\n    if (newPassword.length < 8) {\n      setMessage('Password must be at least 8 characters long');\n      return;\n    }\n    if (!/[A-Z]/.test(newPassword)) {\n      setMessage('Password must contain at least one uppercase letter (A-Z)');\n      return;\n    }\n    if (!/[a-z]/.test(newPassword)) {\n      setMessage('Password must contain at least one lowercase letter (a-z)');\n      return;\n    }\n    if (!/\\d/.test(newPassword)) {\n      setMessage('Password must contain at least one digit (0-9)');\n      return;\n    }\n    if (!hasSpecialChar(newPassword)) {\n      setMessage('Password must contain at least one special character (!@#$%^&*()-_=+[]{};:\\'\",.<>?/|)');\n      return;\n    }\n\n    setIsLoading(true);\n    setMessage('');\n\n    try {\n      const response = await apiRequest('POST', '/api/auth/verify-otp-reset-password', { \n        email, \n        otp, \n        newPassword \n      });\n      const data = await response.json();\n\n      if (response.ok) {\n        setIsSuccess(true);\n        setMessage(data.message);\n      } else {\n        setMessage(data.message || 'Failed to reset password');\n      }\n    } catch (error) {\n      setMessage('An error occurred. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Go back to previous step\n  const goBack = () => {\n    if (currentStep === 'otp') {\n      setCurrentStep('email');\n      setOtp('');\n      setOtpSent(false);\n      setCountdown(0);\n    } else if (currentStep === 'password') {\n      setCurrentStep('otp');\n      setNewPassword('');\n      setConfirmPassword('');\n    }\n    setMessage('');\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-slate-50 dark:bg-slate-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(isFromSettings ? '/settings' : '/login')}\n            className=\"absolute left-4 top-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          \n          <div className=\"mx-auto w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mb-4\">\n            <Mail className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n          </div>\n          \n          <CardTitle className=\"text-2xl\">Reset Password</CardTitle>\n          <CardDescription>\n            {currentStep === 'email' && \"Enter your email to receive a verification code\"}\n            {currentStep === 'otp' && \"Enter the 6-digit code sent to your email\"}\n            {currentStep === 'password' && \"Enter your new password\"}\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          {!isSuccess ? (\n            <>\n              {/* Step 1: Email Input */}\n              {currentStep === 'email' && (\n                <form onSubmit={handleRequestOTP} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      required\n                      placeholder=\"Enter your email address\"\n                      className=\"bg-white dark:bg-gray-800\"\n                    />\n                  </div>\n\n                  {message && (\n                    <Alert variant=\"destructive\">\n                      <div className=\"flex items-center gap-2\">\n                        <UserX className=\"h-4 w-4\" />\n                        <AlertDescription>{message}</AlertDescription>\n                      </div>\n                    </Alert>\n                  )}\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading ? 'Sending...' : 'Send Verification Code'}\n                  </Button>\n                </form>\n              )}\n\n              {/* Step 2: OTP Verification */}\n              {currentStep === 'otp' && (\n                <form onSubmit={handleVerifyOTP} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"otp\">Verification Code</Label>\n                    <Input\n                      id=\"otp\"\n                      type=\"text\"\n                      value={otp}\n                      onChange={(e) => setOtp(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                      required\n                      placeholder=\"Enter 6-digit code\"\n                      className=\"bg-white dark:bg-gray-800 text-center text-2xl font-mono tracking-widest\"\n                      maxLength={6}\n                    />\n                    <p className=\"text-xs text-muted-foreground text-center\">\n                      We've sent a 6-digit code to {email}\n                    </p>\n                    \n                  </div>\n\n                  {message && (\n                    <Alert variant={message.includes('successfully') ? 'default' : 'destructive'}>\n                      <AlertDescription>{message}</AlertDescription>\n                    </Alert>\n                  )}\n\n                  <div className=\"space-y-3\">\n                    <Button type=\"submit\" className=\"w-full\" disabled={!otp || otp.length !== 6 || isLoading}>\n                      {isLoading ? 'Verifying...' : 'Verify Code'}\n                    </Button>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        onClick={goBack}\n                      >\n                        Back\n                      </Button>\n                      \n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        onClick={handleResendOTP}\n                        disabled={isLoading || countdown > 0}\n                      >\n                        {isLoading ? (\n                          <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                        ) : countdown > 0 ? (\n                          `Resend (${countdown}s)`\n                        ) : (\n                          'Resend Code'\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </form>\n              )}\n\n              {/* Step 3: Password Reset */}\n              {currentStep === 'password' && (\n                <form onSubmit={handleResetPassword} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"newPassword\">New Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"newPassword\"\n                        type={showNewPassword ? \"text\" : \"password\"}\n                        value={newPassword}\n                        onChange={(e) => setNewPassword(e.target.value)}\n                        required\n                        placeholder=\"Enter your new password\"\n                        className=\"bg-white dark:bg-gray-800 pr-10\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowNewPassword(!showNewPassword)}\n                      >\n                        {showNewPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-gray-500\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-gray-500\" />\n                        )}\n                      </Button>\n                    </div>\n                    \n                    <div className=\"text-xs text-muted-foreground space-y-1\">\n                      <p>Password must contain:</p>\n                      <ul className=\"list-disc list-inside space-y-1\">\n                        <li className={newPassword.length >= 8 ? 'text-green-600' : 'text-red-500'}>\n                          At least 8 characters\n                        </li>\n                        <li className={/[A-Z]/.test(newPassword) ? 'text-green-600' : 'text-red-500'}>\n                          One uppercase letter (A-Z)\n                        </li>\n                        <li className={/[a-z]/.test(newPassword) ? 'text-green-600' : 'text-red-500'}>\n                          One lowercase letter (a-z)\n                        </li>\n                        <li className={/\\d/.test(newPassword) ? 'text-green-600' : 'text-red-500'}>\n                          One digit (0-9)\n                        </li>\n                        <li className={hasSpecialChar(newPassword) ? 'text-green-600' : 'text-red-500'}>\n                          One special character (!@#$%^&*()-_=+[]{};:&apos;&quot;,&lt;&gt;?/|)\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"confirmPassword\"\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                        required\n                        placeholder=\"Confirm your new password\"\n                        className=\"bg-white dark:bg-gray-800 pr-10\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      >\n                        {showConfirmPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-gray-500\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-gray-500\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n\n                  {message && (\n                    <Alert variant=\"destructive\">\n                      <AlertDescription>{message}</AlertDescription>\n                    </Alert>\n                  )}\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      onClick={goBack}\n                    >\n                      Back\n                    </Button>\n                    <Button type=\"submit\" className=\"flex-1\" disabled={isLoading}>\n                      {isLoading ? 'Resetting...' : 'Reset Password'}\n                    </Button>\n                  </div>\n                </form>\n              )}\n            </>\n          ) : (\n            // Success message\n            <div className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <h3 className=\"text-lg font-semibold text-green-600 dark:text-green-400\">\n                  Password Reset Successful\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {message}\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Button\n                  className=\"w-full\"\n                  onClick={() => setLocation(isFromSettings ? '/settings' : '/login')}\n                >\n                  {isFromSettings ? 'Back to Settings' : 'Sign In'}\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","size_bytes":17107},"client/src/components/editor/code-editor.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport type { Problem } from \"@/types/problem\";\nimport Editor, { OnMount, OnChange } from \"@monaco-editor/react\";\n\ninterface CodeEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  language: string;\n  problem?: Problem;\n}\n\nexport function CodeEditor({ value, onChange, language, problem }: CodeEditorProps) {\n  const editorRef = useRef<Parameters<OnMount>[0] | null>(null);\n  const previousLanguageRef = useRef(language);\n\n  // Effect to handle language changes\n  useEffect(() => {\n    // Only update code if language has changed\n    if (previousLanguageRef.current !== language) {\n      const starterCode = problem?.starterCode?.[language] || getDefaultStarterCode(language);\n      onChange(starterCode);\n      previousLanguageRef.current = language;\n    }\n  }, [language, problem, onChange]);\n\n  const handleEditorDidMount: OnMount = (editor) => {\n    editorRef.current = editor;\n    // Set initial value to starter code if no value is provided\n    if (!value) {\n      const starterCode = problem?.starterCode?.[language] || getDefaultStarterCode(language);\n      onChange(starterCode);\n    }\n  };\n\n  const getDefaultStarterCode = (lang: string) => {\n    switch (lang) {\n      case \"python\":\n        return `def solution():\\n    pass`;\n      case \"java\":\n        return `public class Solution {\\n    public void solution() {\\n    }\\n}`;\n      case \"cpp\":\n        return `#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    return 0;\\n}`;\n      case \"c\":\n        return `#include <stdio.h>\\n\\nint main() {\\n    // Your solution here\\n    return 0;\\n}`;\n      default:\n        return \"// Write your solution here\";\n    }\n  };\n\n  const getMonacoLanguage = (lang: string) => {\n    switch (lang) {\n      case \"python\":\n        return \"python\";\n      case \"java\":\n        return \"java\";\n      case \"cpp\":\n      case \"c\":\n        return \"cpp\";\n      default:\n        return \"plaintext\";\n    }\n  };\n\n  return (\n    <div className=\"h-full bg-gray-900 text-gray-100\">\n      <Editor\n        height=\"100%\"\n        defaultLanguage={getMonacoLanguage(language)}\n        language={getMonacoLanguage(language)}\n        value={value || (problem?.starterCode?.[language] || getDefaultStarterCode(language))}\n        onChange={(value) => onChange(value || \"\")}\n        onMount={handleEditorDidMount}\n        theme=\"vs-dark\"\n        options={{\n          minimap: { enabled: false },\n          fontSize: 14,\n          lineNumbers: \"on\",\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n          tabSize: 4,\n          wordWrap: \"on\",\n          fontFamily: \"JetBrains Mono, monospace\",\n          renderWhitespace: \"selection\",\n          rulers: [80],\n          bracketPairColorization: {\n            enabled: true\n          }\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":2839},"client/src/components/MaintenanceModal.tsx":{"content":"import React from 'react';\nimport { Dialog, DialogPortal, DialogOverlay } from '@/components/ui/dialog';\nimport { AlertTriangle, Clock, Wrench } from 'lucide-react';\nimport { useMaintenanceMode } from '@/contexts/MaintenanceModeContext';\n\ninterface MaintenanceModalProps {\n  isOpen: boolean;\n}\n\nexport function MaintenanceModal({ isOpen }: MaintenanceModalProps) {\n  const { maintenanceFrom, maintenanceTo } = useMaintenanceMode();\n\n  const formatTime = (timeString: string) => {\n    if (!timeString) return '';\n    const [hours, minutes] = timeString.split(':');\n    const hour = parseInt(hours);\n    const ampm = hour >= 12 ? 'PM' : 'AM';\n    const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n    return `${displayHour}:${minutes} ${ampm}`;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={() => {}}>\n      <DialogPortal>\n        <DialogOverlay />\n        <div\n          className=\"fixed left-[50%] top-[50%] z-50 grid w-full max-w-2xl translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg mx-4\"\n        >\n        <div className=\"text-center space-y-6 py-6\">\n          {/* Icon and Title */}\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-center\">\n              {/* <div className=\"p-4 bg-red-100 dark:bg-red-900/20 rounded-full\">\n                <Wrench className=\"h-16 w-16 text-red-600 dark:text-red-400\" />\n              </div> */}\n            </div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              System Under Maintenance\n            </h1>\n            <p className=\"text-lg text-gray-600 dark:text-gray-400\">\n              We're upgrading a few things and will be back soon\n            </p>\n          </div>\n\n          {/* Maintenance Message */}\n          <div className=\"bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800 rounded-lg p-6\">\n            <div className=\"flex items-center justify-center gap-3 mb-4\">\n              <AlertTriangle className=\"h-6 w-6 text-amber-600 dark:text-amber-400\" />\n              <h2 className=\"text-lg font-semibold text-amber-800 dark:text-amber-200\">\n                Scheduled Maintenance\n              </h2>\n            </div>\n            \n            {maintenanceFrom && maintenanceTo ? (\n              <div className=\"space-y-2\">\n                <p className=\"text-amber-700 dark:text-amber-300\">\n                  We are upgrading a few things and will be back between{' '}\n                  <span className=\"font-semibold\">{formatTime(maintenanceFrom)}</span> and{' '}\n                  <span className=\"font-semibold\">{formatTime(maintenanceTo)}</span>.\n                </p>\n                <p className=\"text-sm text-amber-600 dark:text-amber-400\">\n                  All user operations are temporarily disabled during this time.\n                </p>\n              </div>\n            ) : (\n              <p className=\"text-amber-700 dark:text-amber-300\">\n                We are currently performing scheduled maintenance to improve your experience. \n                All user operations are temporarily disabled.\n              </p>\n            )}\n          </div>\n\n          {/* Status Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Clock className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                <h3 className=\"font-semibold text-blue-800 dark:text-blue-200\">What's happening?</h3>\n              </div>\n              <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                We're performing system upgrades and optimizations to enhance performance and security.\n              </p>\n            </div>\n\n            <div className=\"bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Wrench className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                <h3 className=\"font-semibold text-green-800 dark:text-green-200\">What to expect?</h3>\n              </div>\n              <p className=\"text-sm text-green-700 dark:text-green-300\">\n                Once maintenance is complete, you'll have access to improved features and better performance.\n              </p>\n            </div>\n          </div>\n\n          {/* Footer */}\n          <div className=\"text-center text-sm text-gray-500 dark:text-gray-400\">\n            <p>Thank you for your patience during this maintenance window.</p>\n            <p className=\"mt-1\">Please check back later or contact support for urgent matters.</p>\n          </div>\n        </div>\n        </div>\n      </DialogPortal>\n    </Dialog>\n  );\n}\n","size_bytes":5245},"test_files/test-docker-fix.js":{"content":"// Test to verify Docker path fix\nconst axios = require('axios');\n\nasync function testDockerFix() {\n  console.log('🧪 Testing Docker Path Fix');\n  console.log('==========================\\n');\n\n  try {\n    console.log('Testing /api/execute endpoint...');\n    \n    const response = await axios.post('http://localhost:3000/api/execute', {\n      code: \"print('Docker fix test!')\",\n      language: 'python'\n    }, {\n      timeout: 30000\n    });\n\n    console.log('✅ SUCCESS! Docker execution working!');\n    console.log('Response:', response.data);\n    \n  } catch (error) {\n    console.log('❌ Still failing:', error.response?.data || error.message);\n  }\n}\n\ntestDockerFix(); ","size_bytes":674},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/auth/AuthSplitLayout.tsx":{"content":"import { ReactNode, useEffect, useRef, useState } from \"react\";\nimport { Carousel, CarouselContent, CarouselItem, type CarouselApi } from \"@/components/ui/carousel\";\nimport { ThemeToggle } from \"@/components/ui/theme-toggle\";\n\nimport overviewImg from \"@/assests/login/Overview.jpg\";\nimport assignmentsImg from \"@/assests/login/Assignments.jpg\";\nimport courseImg from \"@/assests/login/Course.jpg\";\nimport contestImg from \"@/assests/login/Contest.jpg\";\nimport lightLogo from \"@/assests/light_logo.png\";\nimport darkLogo from \"@/assests/dark_logo.png\";\nimport lightName from \"@/assests/light_name.png\";\nimport darkName from \"@/assests/dark_name.png\";\n\ninterface AuthSplitLayoutProps {\n  children: ReactNode;\n  title: string;\n}\n\nexport default function AuthSplitLayout({ children, title }: AuthSplitLayoutProps) {\n  const slides = [\n    { src: overviewImg, title: \"Comprehensive competitive programming platform\", subtitle: \"Master Coding Through Competition\" },\n    { src: assignmentsImg, title: \"Practice problems with instant feedback and online judge\", subtitle: \"Track progress with instant feedback\" },\n    { src: courseImg, title: \"Learn with guided courses\", subtitle: \"Watch - Read - Code - Repeat\" },\n    { src: contestImg, title: \"Live coding competitions with real-time execution\", subtitle: \"Compete with friends and improve\" },\n  ];\n  const [api, setApi] = useState<CarouselApi | null>(null);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([]);\n  const intervalRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    if (!api) return;\n    setScrollSnaps(api.scrollSnapList());\n    setSelectedIndex(api.selectedScrollSnap());\n    const onSelect = () => setSelectedIndex(api.selectedScrollSnap());\n    api.on(\"select\", onSelect);\n    api.on(\"reInit\", onSelect);\n\n    const start = () => {\n      stop();\n      intervalRef.current = window.setInterval(() => {\n        api.scrollNext();\n      }, 4500);\n    };\n    const stop = () => {\n      if (intervalRef.current) {\n        window.clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    };\n\n    start();\n\n    return () => {\n      api.off(\"select\", onSelect);\n      api.off(\"reInit\", onSelect);\n      stop();\n    };\n  }, [api]);\n\n  return (\n    <div className=\"relative w-full h-screen min-h-screen grid grid-cols-1 md:grid-cols-2 overflow-hidden\">\n      {/* Left: Image carousel */}\n      <div className=\"relative hidden md:block bg-white \">\n        <Carousel className=\"h-full w-full\" setApi={setApi} opts={{ loop: true }}>\n          <CarouselContent className=\"h-full\">\n            {slides.map((slide, idx) => (\n              <CarouselItem key={idx} className=\"basis-full h-full\">\n                <div className=\"relative h-full w-full\">\n                  <img src={slide.src} alt=\"Showcase\" className=\"h-full w-full object-cover\" />\n                  <div className=\"absolute top-10 left-10 right-10 text-black\">\n                    <h2 className=\"text-2xl font-semibold tracking-tight\">{slide.title}</h2>\n                    <p className=\"mt-2 text-sm\">{slide.subtitle}</p>\n                  </div>\n                </div>\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n        </Carousel>\n        {/* Dots */}\n        <div className=\"absolute bottom-6 left-0 right-0 flex items-center justify-center gap-2\">\n          {scrollSnaps.map((_, idx) => (\n            <button\n              key={idx}\n              aria-label={`Go to slide ${idx + 1}`}\n              onClick={() => api?.scrollTo(idx)}\n              className={`h-2.5 w-2.5 rounded-full transition-colors ${\n                idx === selectedIndex ? \"bg-white\" : \"bg-white/50\"\n              } shadow ring-1 ring-black/30`}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Right: Form */}\n      <div className=\"relative flex items-center justify-center p-6 md:p-10 bg-white bg-blend-soft-light from-green-200 via-green-300 to-sky-300 dark:bg-gray-900 dark:bg-none rounded-lg shadow-2xl shadow-black\">\n\n        {/* <div className=\"absolute top-4 right-4\">\n          <ThemeToggle />\n        </div> */}\n        <div className=\"w-full max-w-md\">\n          <div className=\"mb-10 text-center\">\n            <h1 className=\"text-3xl font-semibold text-gray-900 dark:text-gray-100\">{title}</h1>\n            <div className=\"mt-4 flex items-center justify-center\">\n              <img src={lightLogo} alt=\"CodeArena\" className=\"h-16 w-auto dark:hidden\" />\n              <img src={lightName} alt=\"CodeArena\" className=\"h-14 w-auto dark:hidden\" />\n              <img src={darkLogo} alt=\"CodeArena\" className=\"h-16 w-auto hidden dark:block\" />\n              <img src={darkName} alt=\"CodeArena\" className=\"h-14 w-auto hidden dark:block\" />\n            </div>\n          </div>\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n} ","size_bytes":4889},"test_files/test-docker-execution-simple.js":{"content":"// Simple test to verify Docker execution with CodeArena\nconst { spawn } = require('child_process');\n\nconsole.log('🧪 Testing Docker Integration with CodeArena');\nconsole.log('===========================================\\n');\n\n// Test 1: Check if Docker is available\nconsole.log('1. Testing Docker availability...');\nconst docker = spawn('docker', ['--version']);\n\ndocker.stdout.on('data', (data) => {\n  console.log('✅ Docker is available:', data.toString().trim());\n  testDirectDockerExecution();\n});\n\ndocker.stderr.on('data', (data) => {\n  console.log('❌ Docker error:', data.toString().trim());\n});\n\ndocker.on('error', (error) => {\n  console.log('❌ Docker not found. Please ensure Docker Desktop is installed and running.');\n  console.log('   Error:', error.message);\n});\n\n// Test 2: Test direct Docker execution\nfunction testDirectDockerExecution() {\n  console.log('\\n2. Testing direct Docker execution...');\n  \n  const testCommand = [\n    'run', '--rm', '--memory=128m', '--cpus=0.5', '--network=none',\n    'python:3.11-alpine', 'python3', '-c', \"print('Hello from Docker!')\"\n  ];\n  \n  const dockerRun = spawn('docker', testCommand);\n  let output = '';\n  let errorOutput = '';\n  \n  dockerRun.stdout.on('data', (data) => {\n    output += data.toString();\n  });\n  \n  dockerRun.stderr.on('data', (data) => {\n    errorOutput += data.toString();\n  });\n  \n  dockerRun.on('close', (code) => {\n    if (code === 0 && output.includes('Hello from Docker!')) {\n      console.log('✅ Direct Docker execution successful!');\n      console.log('   Output:', output.trim());\n      console.log('\\n🎯 RESULT: Docker is working and ready for CodeArena!');\n      console.log('\\n📋 Next steps:');\n      console.log('   1. Start CodeArena: npm run dev');\n      console.log('   2. Go to any assignment/course problem');\n      console.log('   3. Click \"Run Code\" - it will use Docker containers!');\n      console.log('   4. Check server logs for Docker execution messages');\n    } else {\n      console.log('❌ Direct Docker execution failed');\n      console.log('   Exit code:', code);\n      console.log('   Output:', output);\n      console.log('   Error:', errorOutput);\n    }\n  });\n  \n  dockerRun.on('error', (error) => {\n    console.log('❌ Docker execution error:', error.message);\n  });\n} ","size_bytes":2287},"server/routes/auth.ts":{"content":"// Sucessfully Resolved Google OAuth2.0 Authentication\nimport { Router, Request, Response } from 'express';\nimport passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport { User, IUser } from '../models/User';\nimport { generateToken, protect, AuthRequest } from '../middleware/auth';\nimport { body, validationResult } from 'express-validator';\nimport { Document, Types } from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport { otpService } from '../services/otpService';\nimport { gmailService } from '../services/gmailService';\nimport { configDotenv } from 'dotenv';\n\nconfigDotenv();\n\n// Passport serialization\npassport.serializeUser((user: any, done) => {\n  console.log('[DEBUG] Serializing user:', user.id);\n  done(null, user.id);\n});\n\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    console.log('[DEBUG] Deserializing user:', id);\n    const user = await User.findById(id);\n    done(null, user);\n  } catch (error) {\n    console.error('[DEBUG] Deserialize error:', error);\n    done(error);\n  }\n});\n\nconst router = Router();\n\n// Debug middleware for auth routes\nrouter.use((req, res, next) => {\n  console.log('[DEBUG] Auth middleware:', req.method, req.originalUrl);\n  console.log('[DEBUG] Session:', req.session);\n  console.log('[DEBUG] User:', req.user);\n  next();\n});\n\n// Validation middleware\nconst validateRegistration = [\n  body('email').isEmail(),\n  body('password').isLength({ min: 8 }).custom((value) => {\n    // Check for at least one uppercase letter\n    if (!/[A-Z]/.test(value)) {\n      throw new Error('Password must contain at least one uppercase letter (A-Z)');\n    }\n    // Check for at least one lowercase letter\n    if (!/[a-z]/.test(value)) {\n      throw new Error('Password must contain at least one lowercase letter (a-z)');\n    }\n    // Check for at least one digit\n    if (!/\\d/.test(value)) {\n      throw new Error('Password must contain at least one digit (0-9)');\n    }\n    // Check for at least one special character\n    if (!/[!@#$%^&*()\\-_=+[\\]{};:'\",.<>?/|\\\\]/.test(value)) {\n      throw new Error('Password must contain at least one special character (!@#$%^&*()-_=+[]{};:\\'\",.<>?/|)');\n    }\n    return true;\n  }),\n  body('firstName').trim().notEmpty(),\n  body('lastName').trim().notEmpty(),\n];\n\ninterface UserDocument extends IUser, Document {\n  _id: Types.ObjectId;\n}\n\n// Register with email/password\nrouter.post('/register', validateRegistration, async (req: Request, res: Response) => {\n  try {\n    console.log('[DEBUG] Registration attempt:', { \n      email: req.body.email,\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      hasPassword: !!req.body.password\n    });\n    \n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      console.log('[DEBUG] Validation errors:', errors.array());\n      return res.status(400).json({ \n        message: 'Validation failed', \n        errors: errors.array() \n      });\n    }\n\n    const { email, password, firstName, lastName } = req.body;\n\n    // Validate required fields\n    if (!email || !password || !firstName || !lastName) {\n      const missingFields = [];\n      if (!email) missingFields.push('email');\n      if (!password) missingFields.push('password');\n      if (!firstName) missingFields.push('firstName');\n      if (!lastName) missingFields.push('lastName');\n      \n      console.log('[DEBUG] Missing required fields:', missingFields);\n      return res.status(400).json({ \n        message: 'Missing required fields', \n        missingFields \n      });\n    }\n\n    // Check if user exists\n    console.log('[DEBUG] Checking for existing user with email:', email);\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      console.log('[DEBUG] User already exists:', email);\n      return res.status(400).json({ message: 'User already exists' });\n    }\n\n    // Check if there's already a pending verification for this email\n    if (otpService.hasValidEmailVerificationOTP(email)) {\n      console.log('[DEBUG] Email verification already pending for:', email);\n      return res.status(400).json({ \n        message: 'Email verification already pending. Please check your email or wait a few minutes before requesting a new code.' \n      });\n    }\n\n    // Generate OTP for email verification\n    const otp = otpService.generateOTP();\n    \n    // Store OTP with user data for later verification\n    otpService.storeEmailVerificationOTP(email, otp, {\n      firstName,\n      lastName,\n      password,\n      role: 'student'\n    });\n\n    console.log(`[DEBUG] Email verification OTP generated for ${email}: ${otp}`);\n\n    // Send email verification email\n            const emailSent = await gmailService.sendOTPEmail(email, otp, firstName);\n\n    if (!emailSent) {\n      return res.status(500).json({ \n        message: 'Failed to send verification email. Please try again.' \n      });\n    }\n\n    console.log(`[DEBUG] Email verification email sent successfully to ${email}`);\n\n    // Send response indicating verification email was sent\n    res.status(200).json({\n      message: 'Verification email sent successfully. Please check your email and enter the verification code to complete registration.',\n      email: email,\n      requiresVerification: true\n    });\n  } catch (error) {\n    console.error('[DEBUG] Registration error:', error);\n    \n    // Check for mongoose validation errors\n    if (error instanceof Error && error.name === 'ValidationError') {\n      console.error('[DEBUG] Mongoose validation error');\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: Object.values((error as any).errors).map((err: any) => ({\n          field: err.path,\n          message: err.message\n        }))\n      });\n    }\n    \n    // Check for MongoDB duplicate key error\n    if (error instanceof Error && \n        (error as any).code === 11000 && \n        (error as any).keyPattern?.email) {\n      console.error('[DEBUG] Duplicate email error');\n      return res.status(400).json({ \n        message: 'Email already exists',\n        field: 'email'\n      });\n    }\n\n    console.error('[DEBUG] Unexpected error:', error);\n    console.error('[DEBUG] Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n    \n    res.status(500).json({ \n      message: 'Server error during registration',\n      details: process.env.NODE_ENV === 'development' ? String(error) : undefined\n    });\n  }\n});\n\n// Verify email and complete registration\nrouter.post('/verify-email', async (req: Request, res: Response) => {\n  try {\n    const { email, otp } = req.body;\n    \n    if (!email || !otp) {\n      return res.status(400).json({ message: 'Email and verification code are required' });\n    }\n\n    console.log(`[DEBUG] Email verification attempt for: ${email}`);\n\n    // Validate email verification OTP\n    const otpValidation = otpService.validateEmailVerificationOTP(email, otp);\n    if (!otpValidation.valid) {\n      console.log(`[DEBUG] Email verification failed for ${email}: ${otpValidation.message}`);\n      return res.status(400).json({ message: otpValidation.message });\n    }\n\n    // OTP is valid, create the user\n    const { userData } = otpValidation;\n    console.log(`[DEBUG] Creating user after email verification for ${email}`);\n\n    const user = await User.create({\n      email,\n      password: userData.password,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      role: userData.role,\n      isEmailVerified: true\n    }) as UserDocument;\n\n    console.log(`[DEBUG] User created successfully after email verification:`, { \n      id: user._id, \n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName\n    });\n\n    // Generate token\n    const token = generateToken(user._id.toString());\n    console.log('[DEBUG] Generated authentication token for verified user');\n\n    // Send response\n    res.status(201).json({\n      message: 'Email verified successfully! Welcome to CodeArena!',\n      token,\n      user: {\n        id: user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        isEmailVerified: user.isEmailVerified\n      },\n    });\n  } catch (error) {\n    console.error('[DEBUG] Email verification error:', error);\n    \n    // Check for mongoose validation errors\n    if (error instanceof Error && error.name === 'ValidationError') {\n      console.error('[DEBUG] Mongoose validation error');\n      return res.status(400).json({ \n        message: 'Validation error', \n        errors: Object.values((error as any).errors).map((err: any) => ({\n          field: err.path,\n          message: err.message\n        }))\n      });\n    }\n    \n    // Check for MongoDB duplicate key error\n    if (error instanceof Error && \n        (error as any).code === 11000 && \n        (error as any).keyPattern?.email) {\n      console.error('[DEBUG] Duplicate email error');\n      return res.status(400).json({ \n        message: 'Email already exists',\n        field: 'email'\n      });\n    }\n\n    console.error('[DEBUG] Unexpected error:', error);\n    console.error('[DEBUG] Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n    \n    res.status(500).json({ \n      message: 'Server error during email verification',\n      details: process.env.NODE_ENV === 'development' ? String(error) : undefined\n    });\n  }\n});\n\n// Resend email verification OTP\nrouter.post('/resend-verification', async (req: Request, res: Response) => {\n  try {\n    const { email } = req.body;\n    \n    if (!email) {\n      return res.status(400).json({ message: 'Email is required' });\n    }\n\n    console.log(`[DEBUG] Resend verification requested for email: ${email}`);\n\n    // Check if user already exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      if (existingUser.isEmailVerified) {\n        return res.status(400).json({ message: 'Email is already verified. You can log in directly.' });\n      }\n      // If user exists but not verified, we can resend verification\n    }\n\n    // Check if there's already a valid verification OTP\n    if (otpService.hasValidEmailVerificationOTP(email)) {\n      return res.status(400).json({ \n        message: 'Please wait a few minutes before requesting a new verification code' \n      });\n    }\n\n    // For resend, we need to get the user data from the original registration\n    // Since we don't store it permanently, we'll need the user to provide it again\n    // For now, we'll return an error asking them to register again\n    return res.status(400).json({ \n      message: 'Please complete the registration process again to receive a new verification code.' \n    });\n  } catch (error: any) {\n    console.error('Error resending verification:', error);\n    res.status(500).json({ message: 'Failed to resend verification. Please try again.' });\n  }\n});\n\n// Login with email/password\nrouter.post('/login', async (req: Request, res: Response) => {\n  try {\n    console.log('[DEBUG] Login attempt:', { email: req.body.email });\n    const { email, password } = req.body;\n\n    const user = await User.findOne({ email }).select('+password') as UserDocument;\n    if (!user || !(await user.comparePassword(password))) {\n      console.log('[DEBUG] Invalid credentials for:', email);\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Check if email is verified (only for non-Google OAuth users)\n    if (!user.googleId && !user.isEmailVerified) {\n      console.log('[DEBUG] Email not verified for:', email);\n      return res.status(401).json({ \n        message: 'Please verify your email address before logging in. Check your email for a verification code.',\n        requiresEmailVerification: true,\n        email: email\n      });\n    }\n\n    console.log('[DEBUG] User authenticated:', { id: user._id, email: user.email });\n    const token = generateToken(user._id.toString());\n\n    console.log('[DEBUG] Token generated');\n\n    // Send response\n    res.json({\n      token,\n      user: {\n        id: user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        profileImageUrl: user.profileImageUrl,\n        isEmailVerified: user.isEmailVerified\n      },\n    });\n  } catch (error) {\n    console.error('[DEBUG] Login error:', error);\n    res.status(500).json({ message: 'Server error during login' });\n  }\n});\n\n// Get current user endpoint\nrouter.get('/user', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    console.log('[DEBUG] /user endpoint hit with authenticated user');\n    console.log('[DEBUG] User from middleware:', req.user);\n    \n    if (!req.user) {\n      console.log('[DEBUG] No user found in request after auth middleware');\n      return res.status(401).json({ message: 'User not found' });\n    }\n    \n    res.json({\n      id: req.user.id,\n      email: req.user.email,\n      firstName: req.user.firstName,\n      lastName: req.user.lastName,\n      role: req.user.role,\n      profileImageUrl: req.user.profileImageUrl\n    });\n  } catch (error) {\n    console.error('[DEBUG] Error in /user endpoint:', error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\n// Logout endpoint\nrouter.post('/logout', async (req: Request, res: Response) => {\n  try {\n    // Clear any server-side session/token if needed\n    res.clearCookie('token');\n    res.status(200).json({ message: 'Logged out successfully' });\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({ message: 'Server error during logout' });\n  }\n});\n\n\n\n// Request OTP for password reset\nrouter.post('/request-otp', async (req: Request, res: Response) => {\n  try {\n    const { email } = req.body;\n    \n    if (!email) {\n      return res.status(400).json({ message: 'Email is required' });\n    }\n\n    console.log(`[DEBUG] OTP requested for email: ${email}`);\n\n    // Check if user exists\n    const user = await User.findOne({ email }).select('firstName lastName');\n    if (!user) {\n      return res.status(404).json({ message: 'No account found with this email' });\n    }\n\n    // Generate and store OTP\n    const otp = otpService.generateOTP();\n    otpService.storeOTP(email, otp);\n\n    console.log(`[DEBUG] OTP generated and stored for ${email}: ${otp}`);\n\n    // Send OTP email\n    const userName = user.firstName || user.email.split('@')[0];\n    const emailSent = await gmailService.sendOTPEmail(email, otp, userName);\n\n    if (!emailSent) {\n      return res.status(500).json({ message: 'Failed to send OTP email. Please try again.' });\n    }\n\n    res.json({ \n      message: 'OTP sent successfully to your email',\n      email: email // Return email for frontend reference\n    });\n  } catch (error: any) {\n    console.error('Error requesting OTP:', error);\n    res.status(500).json({ message: 'Failed to send OTP. Please try again.' });\n  }\n});\n\n// Verify OTP (without resetting password yet)\nrouter.post('/verify-otp', async (req: Request, res: Response) => {\n  try {\n    const { email, otp } = req.body;\n    \n    if (!email || !otp) {\n      return res.status(400).json({ message: 'Email and OTP are required' });\n    }\n\n    // Validate OTP\n    const otpValidation = otpService.validateOTP(email, otp);\n    if (!otpValidation.valid) {\n      return res.status(400).json({ message: otpValidation.message });\n    }\n\n    // OTP is valid\n    res.json({ \n      message: 'OTP verified successfully',\n      email: email\n    });\n  } catch (error: any) {\n    console.error('Error verifying OTP:', error);\n    res.status(500).json({ message: 'Failed to verify OTP. Please try again.' });\n  }\n});\n\n// Verify OTP and reset password\nrouter.post('/verify-otp-reset-password', async (req: Request, res: Response) => {\n  try {\n    const { email, otp, newPassword } = req.body;\n    \n    if (!email || !otp || !newPassword) {\n      return res.status(400).json({ message: 'Email, OTP, and new password are required' });\n    }\n\n    // Enhanced password validation\n    if (newPassword.length < 8) {\n      return res.status(400).json({ message: 'Password must be at least 8 characters long' });\n    }\n    if (!/[A-Z]/.test(newPassword)) {\n      return res.status(400).json({ message: 'Password must contain at least one uppercase letter (A-Z)' });\n    }\n    if (!/[a-z]/.test(newPassword)) {\n      return res.status(400).json({ message: 'Password must contain at least one lowercase letter (a-z)' });\n    }\n    if (!/\\d/.test(newPassword)) {\n      return res.status(400).json({ message: 'Password must contain at least one digit (0-9)' });\n    }\n    if (!/[!@#$%^&*()\\-_=+[\\]{};:'\",.<>?/|\\\\]/.test(newPassword)) {\n      return res.status(400).json({ message: 'Password must contain at least one special character (!@#$%^&*()-_=+[]{};:\\'\",.<>?/|)' });\n    }\n\n    // Validate OTP\n    // const otpValidation = otpService.validateOTP(email, otp);\n    // if (!otpValidation.valid) {\n    //   return res.status(400).json({ message: otpValidation.message });\n    // }\n\n    // Update user password\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    user.password = newPassword;\n    await user.save();\n\n    res.json({ message: 'Password has been reset successfully' });\n  } catch (error: any) {\n    console.error('Error verifying OTP and resetting password:', error);\n    res.status(500).json({ message: 'Failed to reset password. Please try again.' });\n  }\n});\n\n// Resend OTP (if user didn't receive it)\nrouter.post('/resend-otp', async (req: Request, res: Response) => {\n  try {\n    const { email } = req.body;\n    \n    if (!email) {\n      return res.status(400).json({ message: 'Email is required' });\n    }\n\n    // Check if user exists\n    const user = await User.findOne({ email }).select('firstName lastName');\n    if (!user) {\n      return res.status(404).json({ message: 'No account found with this email' });\n    }\n\n    // Check if there's already a valid OTP\n    if (otpService.hasValidOTP(email)) {\n      return res.status(400).json({ message: 'Please wait a few minutes before requesting a new OTP' });\n    }\n\n    // Generate and store new OTP\n    const otp = otpService.generateOTP();\n    otpService.storeOTP(email, otp);\n\n    // Send new OTP email\n    const userName = user.firstName || user.email.split('@')[0];\n    const emailSent = await gmailService.sendOTPEmail(email, otp, userName);\n\n    if (!emailSent) {\n      return res.status(500).json({ message: 'Failed to send OTP email. Please try again.' });\n    }\n\n    res.json({ \n      message: 'New OTP sent successfully to your email',\n      email: email\n    });\n  } catch (error: any) {\n    console.error('Error resending OTP:', error);\n    res.status(500).json({ message: 'Failed to send OTP. Please try again.' });\n  }\n});\n\n// Google OAuth Configuration\nconst GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID || '524898025855-g1n4oa8h1nu3mnc96c7aeotroilgi1bv.apps.googleusercontent.com';\nconst GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET || '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';\nconst GOOGLE_CALLBACK_URL = process.env.GOOGLE_CALLBACK_URL || 'http://localhost:5000/api/auth/google/callback';\nconst FRONTEND_URL = process.env.FRONTEND_URL || 'http://localhost:5000';\nconst APP_NAME = 'Code Arena';\n\nconsole.log('[DEBUG] Setting up Google OAuth with:');\nconsole.log('- Client ID:', GOOGLE_CLIENT_ID ? 'Set' : 'Not set');\nconsole.log('- Client Secret:', GOOGLE_CLIENT_SECRET ? 'Set' : 'Not set');\nconsole.log('- Callback URL:', GOOGLE_CALLBACK_URL);\nconsole.log('- Frontend URL:', FRONTEND_URL);\nconsole.log('- Application Name:', APP_NAME);\n\n// Configure Google Strategy\npassport.use(new GoogleStrategy({\n  clientID: GOOGLE_CLIENT_ID,\n  clientSecret: GOOGLE_CLIENT_SECRET,\n  callbackURL: GOOGLE_CALLBACK_URL,\n  userProfileURL: 'https://www.googleapis.com/oauth2/v3/userinfo',\n  scope: ['profile', 'email']\n}, async (accessToken: string, refreshToken: string, profile: passport.Profile, done: (error: any, user?: any) => void) => {\n  try {\n    console.log('[DEBUG] Google callback received');\n    console.log('[DEBUG] Profile:', {\n      id: profile.id,\n      displayName: profile.displayName,\n      emails: profile.emails,\n      photos: profile.photos\n    });\n    \n    if (profile.photos && profile.photos.length > 0) {\n      console.log('[DEBUG] Profile image URL from Google:', profile.photos[0].value);\n    } else {\n      console.log('[DEBUG] No profile photos in Google profile');\n    }\n    \n    let user = await User.findOne({ googleId: profile.id });\n\n    if (!user) {\n      console.log('[DEBUG] Creating new user from Google profile');\n      // Check if this email is registered as an admin\n      const email = profile.emails?.[0]?.value;\n      const existingUser = await User.findOne({ email });\n      const role = existingUser?.role || 'student'; // Use existing user's role or default to student\n\n      user = await User.create({\n        googleId: profile.id,\n        email: email,\n        firstName: profile.name?.givenName || profile.displayName.split(' ')[0],\n        lastName: profile.name?.familyName || profile.displayName.split(' ').slice(1).join(' '),\n        profileImageUrl: profile.photos?.[0]?.value,\n        role: role, // Assign role based on existing user or default\n      });\n      console.log('[DEBUG] New user created:', { ...user.toObject(), role });\n    } else {\n      console.log('[DEBUG] Existing user found, updating profile image');\n      // Update existing user's profile image URL if available\n      if (profile.photos?.[0]?.value && user.profileImageUrl !== profile.photos[0].value) {\n        user.profileImageUrl = profile.photos[0].value;\n        await user.save();\n        console.log('[DEBUG] Profile image updated for existing user:', profile.photos[0].value);\n      }\n      console.log('[DEBUG] Existing user:', { ...user.toObject(), role: user.role });\n    }\n\n    return done(null, user);\n  } catch (error) {\n    console.error('[DEBUG] Google strategy error:', error);\n    return done(error as Error, undefined);\n  }\n}));\n\n// Google OAuth routes\nrouter.get('/google', (req, res, next) => {\n  console.log('[DEBUG] Starting Google OAuth flow');\n  \n  // Store returnTo parameter in session for callback\n  const returnTo = req.query.returnTo;\n  if (returnTo) {\n    console.log('[DEBUG] Storing returnTo in session:', returnTo);\n    (req.session as any).returnTo = returnTo as string;\n  }\n  \n  passport.authenticate('google', { \n    scope: ['profile', 'email'],\n    prompt: 'select_account'\n  })(req, res, next);\n});\n\nrouter.get('/google/callback',\n  passport.authenticate('google', { \n    session: false,\n    failureRedirect: `${FRONTEND_URL}/login?error=google_auth_failed`\n  }),\n  (req: Request, res: Response) => {\n    try {\n      console.log('[DEBUG] Google authentication successful');\n      const user = req.user as UserDocument;\n      const token = generateToken(user._id.toString());\n      \n      const userData = {\n        id: user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        profileImageUrl: user.profileImageUrl\n      };\n\n      console.log('[DEBUG] User data:', userData);\n      console.log('[DEBUG] User role:', user.role);\n      \n      // Check for returnTo parameter first, then fall back to role-based redirect\n      const returnTo = (req.query.returnTo as string) || (req.session as any)?.returnTo as string | undefined;\n      let redirectPath: string;\n      \n      if (returnTo) {\n        redirectPath = returnTo;\n        console.log('[DEBUG] Found returnTo parameter, redirecting to:', redirectPath);\n        if ((req.session as any)?.returnTo) {\n          delete (req.session as any).returnTo;\n        }\n      } else {\n        redirectPath = user.role === 'admin' ? '/admin' : '/dashboard';\n        console.log('[DEBUG] No returnTo found, redirecting based on role to:', redirectPath);\n      }\n      \n      // Use the configured frontend URL\n      const redirectUrl = `${FRONTEND_URL}/auth-callback?token=${encodeURIComponent(token)}&user=${encodeURIComponent(JSON.stringify(userData))}&returnTo=${encodeURIComponent(redirectPath)}`;\n      console.log('[DEBUG] Redirecting to client callback URL:', redirectUrl);\n      res.set('Cache-Control', 'no-store');\n      return res.redirect(302, redirectUrl);\n    } catch (error) {\n      console.error('[DEBUG] Error in callback handler:', error);\n      res.redirect(`${FRONTEND_URL}/login?error=server_error`);\n    }\n  }\n);\n\nconsole.warn('[DEBUG] End of auth routes configuration');\n// Debug endpoint to check user profile images (remove in production)\nrouter.get('/debug/users-profile-images', async (req: Request, res: Response) => {\n  try {\n    const users = await User.find({}, 'email firstName lastName profileImageUrl googleId').limit(10);\n    const userInfo = users.map(user => ({\n      email: user.email,\n      name: `${user.firstName} ${user.lastName}`,\n      hasProfileImage: !!user.profileImageUrl,\n      profileImageUrl: user.profileImageUrl,\n      isGoogleUser: !!user.googleId\n    }));\n    res.json(userInfo);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch user data' });\n  }\n});\n\nexport default router; \n","size_bytes":25242},"server/controllers/submissionsController.ts":{"content":"import { Response } from 'express';\nimport type { AuthRequest } from '../middleware/auth';\nimport executionService from '../services/executionService';\nimport { Submission } from '../models/Submission';\nimport { Problem as ProblemModel } from '../models/Problem';\nimport { ProblemSet } from '../models/ProblemSet';\nimport mongoose from 'mongoose';\n\nexport async function listSubmissions(req: AuthRequest, res: Response) {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ message: 'User ID not found' });\n    }\n\n    const problemId = req.query.problemId ? parseInt(req.query.problemId as string) : undefined;\n    const query: any = { userId };\n    if (problemId !== undefined) query.problemId = problemId;\n\n    const submissions = await Submission.find(query).sort({ submittedAt: -1 }).lean();\n    res.json(submissions);\n  } catch (error) {\n    console.error('Error fetching submissions:', error);\n    res.status(500).json({ message: 'Failed to fetch submissions' });\n  }\n}\n\nexport async function createSubmission(req: AuthRequest, res: Response) {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ message: 'Authentication required. Please log in to submit solutions.' });\n    }\n\n    const { problemId, code, language, problemInstanceId, problemSetId } = req.body as any;\n\n    // Resolve problem data and test cases. Support assignment instances with no original problem (id=0)\n    let problem: any = await ProblemModel.findOne({ id: problemId }).lean();\n    let testCases: any[] = [];\n    let resolvedProblemSetId = problemSetId; // Track the resolved problem set ID\n\n    if (problem && Array.isArray((problem as any).testCases)) {\n      testCases = (problem as any).testCases;\n    } else if (problemInstanceId) {\n      // Fallback to problem instance inside a problem set\n      let ps: any = null;\n      if (problemSetId) {\n        ps = await ProblemSet.findOne({ id: problemSetId }).lean();\n        if (!ps) {\n          try { ps = await ProblemSet.findById(problemSetId).lean(); } catch {}\n        }\n      }\n      // If still not found, try to locate by scanning for the problem instance\n      if (!ps) {\n        ps = await ProblemSet.findOne({ 'problemInstances._id': problemInstanceId }).lean();\n        if (ps) {\n          // Found the problem set, use its ID\n          resolvedProblemSetId = ps.id || ps._id;\n          console.log(`[SUBMISSION] Resolved problemSetId: ${resolvedProblemSetId} from problemInstanceId: ${problemInstanceId}`);\n        }\n      }\n\n      if (!ps) {\n        return res.status(404).json({ message: 'Problem set or problem instance not found' });\n      }\n\n      const instance = (ps.problemInstances || ps.problems || []).find((p: any) => String(p.id || p._id) === String(problemInstanceId));\n      if (!instance) {\n        return res.status(404).json({ message: 'Problem instance not found' });\n      }\n\n      // Compose a pseudo problem object from instance for metadata\n      problem = {\n        id: Number.isFinite(problemId) ? problemId : (instance.originalProblemId || instance.selectedProblemId || 0),\n        title: instance.title || 'Untitled Problem',\n        description: instance.description || '',\n        difficulty: instance.difficulty || 'medium',\n      };\n      testCases = instance.customTestCases || instance.testCases || [];\n      if (!Array.isArray(testCases) || testCases.length === 0) {\n        return res.status(400).json({ message: 'No test cases available for this problem instance' });\n      }\n    } else {\n      return res.status(404).json({ message: 'Problem not found' });\n    }\n\n    const execService = await executionService;\n    const result = await execService.executeWithTestCases(code, language, testCases);\n\n    const formattedResults = result.testResults.map((testResult: any, index: number) => ({\n      status: testResult.error ? 'error' : testResult.passed ? 'success' : 'failed',\n      output: testResult.actualOutput,\n      error: testResult.error,\n      runtime: testResult.runtime,\n      memory: testResult.memory,\n      input: testResult.input,\n      expectedOutput: testResult.expectedOutput,\n      isHidden: testResult.isHidden || false,\n      testCaseNumber: index + 1,\n      passed: testResult.passed,\n    }));\n\n    const passedCount = result.testResults.filter((r: any) => r.passed).length;\n    const totalTestCases = result.testResults.length;\n    const allPassed = result.allTestsPassed;\n    const score = ((passedCount / totalTestCases) * 100).toFixed(2);\n    const status = allPassed ? 'accepted' : passedCount > 0 ? 'partial' : 'wrong_answer';\n    const feedback = allPassed ? 'All test cases passed!' : `${passedCount}/${totalTestCases} test cases passed`;\n\n    // Check for existing submission to overwrite (for assignments)\n    let existingSubmission = null;\n    let isNewSubmission = true;\n    \n    if (resolvedProblemSetId || problemInstanceId) {\n      // For assignments, try to find existing submission\n      const query: any = { userId, problemId };\n      if (resolvedProblemSetId) query.problemSetId = resolvedProblemSetId;\n      if (problemInstanceId) query.problemInstanceId = problemInstanceId;\n      \n      existingSubmission = await Submission.findOne(query);\n      \n      if (existingSubmission) {\n        console.log(`[SUBMISSION] Found existing submission ${existingSubmission.id} for user ${userId}, problem ${problemId}, will overwrite`);\n        isNewSubmission = false;\n      }\n    }\n\n    let submission;\n    let submissionId;\n\n    if (existingSubmission && !isNewSubmission) {\n      // Update existing submission\n      const previousStatus = existingSubmission.status;\n      const wasAccepted = previousStatus === 'accepted';\n      \n      // Update the existing submission\n      existingSubmission.code = code;\n      existingSubmission.language = language;\n      existingSubmission.status = status;\n      existingSubmission.runtime = result.runtime;\n      existingSubmission.memory = result.memory;\n      existingSubmission.score = score;\n      existingSubmission.feedback = feedback;\n      existingSubmission.testResults = formattedResults;\n      existingSubmission.submittedAt = new Date();\n      \n      // Ensure problemSetId is set if it was missing\n      if (resolvedProblemSetId && !existingSubmission.problemSetId) {\n        existingSubmission.problemSetId = resolvedProblemSetId;\n      }\n      \n      await existingSubmission.save();\n      submission = existingSubmission;\n      submissionId = existingSubmission.id;\n      \n      console.log(`[SUBMISSION] Updated existing submission ${submissionId} for user ${userId}, problem ${problemId}`);\n    } else {\n      // Create new submission\n      const last = await Submission.findOne({}, {}, { sort: { id: -1 } }).lean();\n      const nextId = (last?.id || 0) + 1;\n\n      const submissionData: any = {\n        id: nextId,\n        problemId,\n        problemInstanceId,\n        problemSetId: resolvedProblemSetId, // Use the resolved problem set ID\n        userId,\n        code,\n        language,\n        status,\n        runtime: result.runtime,\n        memory: result.memory,\n        score,\n        feedback,\n        testResults: formattedResults,\n        submittedAt: new Date(),\n      };\n\n      submission = await Submission.create(submissionData);\n      submissionId = submission.id;\n      console.log(`[SUBMISSION] Created new submission ${submissionId} for user ${userId}, problem ${problemId}, problemSetId: ${resolvedProblemSetId}`);\n    }\n\n    // Update ProblemSetEnrollment for assignments\n    if (resolvedProblemSetId || problemInstanceId) {\n      try {\n        const { ProblemSetEnrollment } = await import('../models/ProblemSetEnrollment');\n        const { ProblemSet } = await import('../models/ProblemSet');\n        \n        // Determine the actual problemSetId if we only have problemInstanceId\n        let actualProblemSetId = resolvedProblemSetId;\n        if (!actualProblemSetId && problemInstanceId) {\n          const ps = await ProblemSet.findOne({ 'problemInstances._id': problemInstanceId }).lean();\n          if (ps) {\n            actualProblemSetId = ps.id || ps._id;\n          }\n        }\n        \n        if (actualProblemSetId) {\n          // Find the problem set to get total problems count\n          const ps = await ProblemSet.findOne({ id: actualProblemSetId }).lean();\n          if (ps) {\n            const totalProblems = ps.problemInstances?.length || (ps as any).problems?.length || 0;\n            \n            // Find and update the enrollment\n            const enrollment = await ProblemSetEnrollment.findOne({ \n              problemSetId: actualProblemSetId, \n              userId: new mongoose.Types.ObjectId(userId) \n            });\n            \n            if (enrollment) {\n              // Handle submission count updates\n              if (isNewSubmission) {\n                // New submission - increment total submissions\n                enrollment.totalSubmissions += 1;\n              } else {\n                // Existing submission - check if status changed\n                const previousStatus = existingSubmission?.status;\n                const wasAccepted = previousStatus === 'accepted';\n                const isNowAccepted = status === 'accepted';\n                \n                // Update correct submissions count based on status change\n                if (wasAccepted && !isNowAccepted) {\n                  // Was accepted, now not - decrement correct submissions\n                  enrollment.correctSubmissions = Math.max(0, enrollment.correctSubmissions - 1);\n                  \n                  // Remove from completed problems if no longer accepted\n                  const actualProblemId = problem.id || problemId;\n                  enrollment.completedProblems = enrollment.completedProblems.filter(id => id !== actualProblemId);\n                } else if (!wasAccepted && isNowAccepted) {\n                  // Was not accepted, now is - increment correct submissions\n                  enrollment.correctSubmissions += 1;\n                  \n                  // Add to completed problems\n                  const actualProblemId = problem.id || problemId;\n                  if (!enrollment.completedProblems.includes(actualProblemId)) {\n                    enrollment.completedProblems.push(actualProblemId);\n                  }\n                }\n                // If status didn't change (e.g., both were accepted), no need to update counts\n              }\n              \n              // Calculate new progress based on completed problems\n              const progress = totalProblems > 0 ? Math.min(100, Math.round((enrollment.completedProblems.length / totalProblems) * 100)) : 0;\n              enrollment.progress = progress;\n              \n              // Update last activity\n              (enrollment as any).updatedAt = new Date();\n              \n              await enrollment.save();\n              \n              console.log(`[ENROLLMENT] Updated enrollment for user ${userId} in problem set ${actualProblemSetId}: status=${status}, progress=${progress}%, completed=${enrollment.completedProblems.length}/${totalProblems}, totalSubmissions=${enrollment.totalSubmissions}, correctSubmissions=${enrollment.correctSubmissions}`);\n            }\n          }\n        }\n      } catch (enrollmentError) {\n        console.error('Failed to update enrollment after submission:', enrollmentError);\n        // Don't fail the submission if enrollment update fails\n      }\n    }\n\n    res.status(201).json({\n      ...submission.toObject(),\n      results: formattedResults,\n      summary: {\n        totalTests: totalTestCases,\n        passedTests: passedCount,\n        failedTests: totalTestCases - passedCount,\n        allPassed,\n        problemTitle: (problem as any).title || `Problem ${problemId}`,\n        difficulty: (problem as any).difficulty || 'N/A',\n        mode: 'submit',\n      },\n      testResults: formattedResults,\n      passedCount,\n      totalTestCases,\n    });\n  } catch (error) {\n    console.error('Error creating submission:', error);\n    res.status(500).json({ message: 'Failed to create submission' });\n  }\n}\n\n// Helper function to cleanup enrollment after submission deletion\nasync function cleanupEnrollmentAfterSubmissionDeletion(submission: any) {\n  try {\n    const { ProblemSetEnrollment } = await import('../models/ProblemSetEnrollment');\n    const { ProblemSet } = await import('../models/ProblemSet');\n    \n    // Determine the problemSetId from the submission\n    let problemSetId = submission.problemSetId;\n    if (!problemSetId && submission.problemInstanceId) {\n      const ps = await ProblemSet.findOne({ 'problemInstances._id': submission.problemInstanceId }).lean();\n      if (ps) {\n        problemSetId = ps.id || ps._id;\n      }\n    }\n    \n    if (problemSetId) {\n      const enrollment = await ProblemSetEnrollment.findOne({ \n        problemSetId, \n        userId: submission.userId \n      });\n      \n      if (enrollment) {\n        // Decrement total submissions\n        enrollment.totalSubmissions = Math.max(0, enrollment.totalSubmissions - 1);\n        \n        // If the deleted submission was accepted, decrement correct submissions and remove from completed problems\n        if (submission.status === 'accepted') {\n          enrollment.correctSubmissions = Math.max(0, enrollment.correctSubmissions - 1);\n          \n          const problemId = submission.problemId;\n          enrollment.completedProblems = enrollment.completedProblems.filter(id => id !== problemId);\n        }\n        \n        // Recalculate progress\n        const ps = await ProblemSet.findOne({ id: problemSetId }).lean();\n        if (ps) {\n          const totalProblems = ps.problemInstances?.length || (ps as any).problems?.length || 0;\n          const progress = totalProblems > 0 ? Math.min(100, Math.round((enrollment.completedProblems.length / totalProblems) * 100)) : 0;\n          enrollment.progress = progress;\n        }\n        \n        // Update timestamp\n        (enrollment as any).updatedAt = new Date();\n        \n        await enrollment.save();\n        \n        console.log(`[ENROLLMENT] Cleaned up enrollment after submission deletion: user ${submission.userId}, problem set ${problemSetId}, progress=${enrollment.progress}%, completed=${enrollment.completedProblems.length}, totalSubmissions=${enrollment.totalSubmissions}, correctSubmissions=${enrollment.correctSubmissions}`);\n      }\n    }\n  } catch (error) {\n    console.error('Error cleaning up enrollment after submission deletion:', error);\n  }\n}\n\nexport async function deleteSubmission(req: AuthRequest, res: Response) {\n  try {\n    const userId = req.user?.id;\n    const userRole = req.user?.role;\n    const submissionId = req.params.id;\n    \n    if (!userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n    \n    // Find the submission\n    const submission = await Submission.findById(submissionId);\n    if (!submission) {\n      return res.status(404).json({ message: 'Submission not found' });\n    }\n    \n    // Check if user can delete this submission (owner or admin)\n    if (submission.userId !== userId && userRole !== 'admin') {\n      return res.status(403).json({ message: 'You can only delete your own submissions' });\n    }\n    \n    // Clean up enrollment before deleting\n    await cleanupEnrollmentAfterSubmissionDeletion(submission);\n    \n    // Delete the submission\n    await Submission.findByIdAndDelete(submissionId);\n    \n    console.log(`[SUBMISSION] Deleted submission ${submissionId} for user ${userId}`);\n    \n    res.json({ message: 'Submission deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting submission:', error);\n    res.status(500).json({ message: 'Failed to delete submission' });\n  }\n} ","size_bytes":15789},"server/models/CourseEnrollment.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface ICourseEnrollment {\n  id: number;\n  courseId: number;\n  userId: mongoose.Types.ObjectId;\n  completedModules: number[];\n  progress: number;\n  enrolledAt: Date;\n  lastAccessedAt: Date;\n  enrolledBy?: string;\n  enrollmentType: 'admin' | 'qr'; // New field to track enrollment method\n}\n\ninterface ICourseEnrollmentDocument extends Omit<ICourseEnrollment, 'id'>, Document {\n  _id: mongoose.Types.ObjectId;\n  id: number;\n}\n\nconst courseEnrollmentSchema = new mongoose.Schema<ICourseEnrollmentDocument>({\n  id: {\n    type: Number,\n    required: true,\n    unique: true,\n  },\n  courseId: {\n    type: Number,\n    required: [true, 'Course ID is required'],\n    index: true,\n  },\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: [true, 'User ID is required'],\n    index: true,\n  },\n  completedModules: [{\n    type: Number,\n  }],\n  progress: {\n    type: Number,\n    default: 0,\n    min: [0, 'Progress cannot be negative'],\n    max: [100, 'Progress cannot exceed 100'],\n  },\n  enrolledAt: {\n    type: Date,\n    default: Date.now,\n  },\n  lastAccessedAt: {\n    type: Date,\n    default: Date.now,\n  },\n  enrolledBy: {\n    type: String,\n  },\n  enrollmentType: {\n    type: String,\n    enum: ['admin', 'qr'],\n    required: [true, 'Enrollment type is required'],\n    default: 'qr', // Default to QR for backward compatibility\n  },\n}, {\n  timestamps: true,\n  // Align with raw Mongo collection used elsewhere (storage.ts)\n  collection: 'courseEnrollments',\n});\n\n// Compound index for unique enrollment\ncourseEnrollmentSchema.index({ courseId: 1, userId: 1 }, { unique: true });\ncourseEnrollmentSchema.index({ id: 1 });\n\n// Virtual for completion status\ncourseEnrollmentSchema.virtual('isCompleted').get(function() {\n  return this.progress >= 100;\n});\n\n// Method to mark module as completed\ncourseEnrollmentSchema.methods.completeModule = async function(moduleId: number) {\n  if (!this.completedModules.includes(moduleId)) {\n    this.completedModules.push(moduleId);\n    this.lastAccessedAt = new Date();\n    await this.save();\n  }\n  return this;\n};\n\n// Method to update progress\ncourseEnrollmentSchema.methods.updateProgress = async function(progress: number) {\n  this.progress = Math.max(0, Math.min(100, progress));\n  this.lastAccessedAt = new Date();\n  return await this.save();\n};\n\n// Method to update last accessed\ncourseEnrollmentSchema.methods.updateLastAccessed = async function() {\n  this.lastAccessedAt = new Date();\n  return await this.save();\n};\n\n// Static method to find enrollments by course\ncourseEnrollmentSchema.statics.findByCourse = function(courseId: number) {\n  return this.find({ courseId }).populate('user', 'firstName lastName email');\n};\n\n// Static method to find enrollments by user\ncourseEnrollmentSchema.statics.findByUser = function(userId: string | mongoose.Types.ObjectId) {\n  return this.find({ userId });\n};\n\n// Static method to check if user is enrolled\ncourseEnrollmentSchema.statics.isEnrolled = async function(courseId: number, userId: string | mongoose.Types.ObjectId) {\n  const enrollment = await this.findOne({ courseId, userId });\n  return !!enrollment;\n};\n\n// Static method to get enrollment count for a course\ncourseEnrollmentSchema.statics.getEnrollmentCount = async function(courseId: number) {\n  return await this.countDocuments({ courseId });\n};\n\nexport const CourseEnrollment = mongoose.model<ICourseEnrollmentDocument>('CourseEnrollment', courseEnrollmentSchema); ","size_bytes":3492},"server/seed-problem-sets.js":{"content":"import { MongoClient, ObjectId } from 'mongodb';\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/codearena';\n\nasync function seedProblemSets() {\n  const client = new MongoClient(MONGODB_URI);\n  \n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n    \n    const db = client.db();\n    const problemSetsCollection = db.collection('problemSets');\n    \n    // Clear existing problem sets\n    await problemSetsCollection.deleteMany({});\n    console.log('Cleared existing problem sets');\n    \n    // Sample problem sets that match the UI images\n    const problemSets = [\n      {\n        id: new ObjectId().toString(),\n        title: 'Array Two Pointers',\n        description: 'Learn the two-pointer technique for efficient array processing',\n        difficulty: 'medium',\n        category: 'Data Structures & Algorithms',\n        estimatedTime: 120,\n        tags: ['arrays', 'two-pointers', 'optimization'],\n        problems: [\n          {\n            id: new ObjectId().toString(),\n            title: 'Reverse String',\n            description: 'Write a function that reverses a string. The input string is given as an array of characters.',\n            difficulty: 'easy',\n            status: 'customized',\n            basedOn: 'Reverse String',\n            lastModified: '2025-06-30',\n            points: 100,\n            timeLimit: 1000,\n            memoryLimit: 256,\n            examples: [\n              {\n                input: '[\"h\",\"e\",\"l\",\"l\",\"o\"]',\n                output: '[\"o\",\"l\",\"l\",\"e\",\"h\"]',\n                explanation: 'Reverse the array in-place'\n              }\n            ],\n            testCases: [\n              {\n                input: '[\"h\",\"e\",\"l\",\"l\",\"o\"]',\n                expectedOutput: '[\"o\",\"l\",\"l\",\"e\",\"h\"]',\n                isHidden: false\n              }\n            ],\n            starterCode: {\n              javascript: 'function reverseString(s) {\\n  // Your code here\\n}',\n              python: 'def reverseString(s):\\n    # Your code here\\n    pass',\n              java: 'class Solution {\\n    public void reverseString(char[] s) {\\n        // Your code here\\n    }\\n}',\n              cpp: 'class Solution {\\npublic:\\n    void reverseString(vector<char>& s) {\\n        // Your code here\\n    }\\n};'\n            }\n          },\n          {\n            id: new ObjectId().toString(),\n            title: 'Praneethh_HOD',\n            description: 'Given a string s containing just the characters \\'(\\', \\')\\', \\'{\\', \\'}\\', \\'[\\' and \\']\\', determine if the input string is valid.',\n            difficulty: 'medium',\n            status: 'customized',\n            basedOn: 'Valid Parentheses',\n            lastModified: '2025-07-23',\n            points: 150,\n            timeLimit: 1000,\n            memoryLimit: 256,\n            examples: [\n              {\n                input: '()',\n                output: 'true',\n                explanation: 'Simple valid parentheses'\n              }\n            ],\n            testCases: [\n              {\n                input: '()',\n                expectedOutput: 'true',\n                isHidden: false\n              }\n            ],\n            starterCode: {\n              javascript: 'function isValid(s) {\\n  // Your code here\\n}',\n              python: 'def isValid(s):\\n    # Your code here\\n    pass',\n              java: 'class Solution {\\n    public boolean isValid(String s) {\\n        // Your code here\\n    }\\n}',\n              cpp: 'class Solution {\\npublic:\\n    bool isValid(string s) {\\n        // Your code here\\n    }\\n};'\n            }\n          },\n          {\n            id: new ObjectId().toString(),\n            title: 'Problemm',\n            description: 'Write a function that reverses a string. The input string is given as an array of characters.',\n            difficulty: 'easy',\n            status: 'customized',\n            basedOn: 'Reverse String',\n            lastModified: '2025-07-31',\n            points: 100,\n            timeLimit: 1000,\n            memoryLimit: 256,\n            examples: [\n              {\n                input: '[\"h\",\"e\",\"l\",\"l\",\"o\"]',\n                output: '[\"o\",\"l\",\"l\",\"e\",\"h\"]',\n                explanation: 'Reverse the array in-place'\n              }\n            ],\n            testCases: [\n              {\n                input: '[\"h\",\"e\",\"l\",\"l\",\"o\"]',\n                expectedOutput: '[\"o\",\"l\",\"l\",\"e\",\"h\"]',\n                isHidden: false\n              }\n            ],\n            starterCode: {\n              javascript: 'function reverseString(s) {\\n  // Your code here\\n}',\n              python: 'def reverseString(s):\\n    # Your code here\\n    pass',\n              java: 'class Solution {\\n    public void reverseString(char[] s) {\\n        // Your code here\\n    }\\n}',\n              cpp: 'class Solution {\\npublic:\\n    void reverseString(vector<char>& s) {\\n        // Your code here\\n    }\\n};'\n            }\n          },\n          {\n            id: new ObjectId().toString(),\n            title: 'Probbbbbb',\n            description: 'Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.',\n            difficulty: 'easy',\n            status: 'customized',\n            basedOn: 'Two Sum123',\n            lastModified: '2025-07-31',\n            points: 100,\n            timeLimit: 1000,\n            memoryLimit: 256,\n            examples: [\n              {\n                input: 'nums = [2,7,11,15], target = 9',\n                output: '[0,1]',\n                explanation: 'Because nums[0] + nums[1] == 9, we return [0, 1].'\n              }\n            ],\n            testCases: [\n              {\n                input: '[2,7,11,15]\\n9',\n                expectedOutput: '[0,1]',\n                isHidden: false\n              }\n            ],\n            starterCode: {\n              javascript: 'function twoSum(nums, target) {\\n  // Your code here\\n}',\n              python: 'def twoSum(nums, target):\\n    # Your code here\\n    pass',\n              java: 'class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        // Your code here\\n    }\\n}',\n              cpp: 'class Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        // Your code here\\n    }\\n};'\n            }\n          },\n          {\n            id: new ObjectId().toString(),\n            title: 'sdfs',\n            description: 'edrfghb',\n            difficulty: 'easy',\n            status: 'customized',\n            basedOn: 'Reverse String',\n            lastModified: '2025-08-03',\n            setNotes: 'gh',\n            points: 100,\n            timeLimit: 1000,\n            memoryLimit: 256,\n            examples: [\n              {\n                input: '[\"h\",\"e\",\"l\",\"l\",\"o\"]',\n                output: '[\"o\",\"l\",\"l\",\"e\",\"h\"]',\n                explanation: 'Reverse the array in-place'\n              }\n            ],\n            testCases: [\n              {\n                input: '[\"h\",\"e\",\"l\",\"l\",\"o\"]',\n                expectedOutput: '[\"o\",\"l\",\"l\",\"e\",\"h\"]',\n                isHidden: false\n              }\n            ],\n            starterCode: {\n              javascript: 'function reverseString(s) {\\n  // Your code here\\n}',\n              python: 'def reverseString(s):\\n    # Your code here\\n    pass',\n              java: 'class Solution {\\n    public void reverseString(char[] s) {\\n        // Your code here\\n    }\\n}',\n              cpp: 'class Solution {\\npublic:\\n    void reverseString(vector<char>& s) {\\n        // Your code here\\n    }\\n};'\n            }\n          }\n        ],\n        participants: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: new ObjectId().toString(),\n        title: 'String Processing',\n        description: 'Master string manipulation and validation techniques',\n        difficulty: 'easy',\n        category: 'Data Structures & Algorithms',\n        estimatedTime: 60,\n        tags: ['strings', 'validation', 'processing'],\n        problems: [\n          {\n            id: new ObjectId().toString(),\n            title: 'Valid Palindrome',\n            description: 'Given a string s, return true if it is a palindrome, or false otherwise.',\n            difficulty: 'easy',\n            status: 'customized',\n            basedOn: 'Valid Palindrome',\n            lastModified: '2025-07-15',\n            points: 100,\n            timeLimit: 1000,\n            memoryLimit: 256,\n            examples: [\n              {\n                input: '\"A man, a plan, a canal: Panama\"',\n                output: 'true',\n                explanation: '\"amanaplanacanalpanama\" is a palindrome.'\n              }\n            ],\n            testCases: [\n              {\n                input: '\"A man, a plan, a canal: Panama\"',\n                expectedOutput: 'true',\n                isHidden: false\n              }\n            ],\n            starterCode: {\n              javascript: 'function isPalindrome(s) {\\n  // Your code here\\n}',\n              python: 'def isPalindrome(s):\\n    # Your code here\\n    pass',\n              java: 'class Solution {\\n    public boolean isPalindrome(String s) {\\n        // Your code here\\n    }\\n}',\n              cpp: 'class Solution {\\npublic:\\n    bool isPalindrome(string s) {\\n        // Your code here\\n    }\\n};'\n            }\n          }\n        ],\n        participants: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: new ObjectId().toString(),\n        title: 'Mixed Fundamentals',\n        description: 'A collection of fundamental programming problems',\n        difficulty: 'easy',\n        category: 'Data Structures & Algorithms',\n        estimatedTime: 90,\n        tags: ['arrays', 'fundamentals', 'beginner'],\n        problems: [],\n        participants: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: new ObjectId().toString(),\n        title: 'Advanced Problems',\n        description: 'Challenge yourself with these medium-level problems',\n        difficulty: 'medium',\n        category: 'Data Structures & Algorithms',\n        estimatedTime: 120,\n        tags: ['arrays', 'optimization', 'algorithms'],\n        problems: [\n          {\n            id: new ObjectId().toString(),\n            title: 'Container With Most Water',\n            description: 'Given n non-negative integers height where each represents a point at coordinate (i, height[i]), find two lines that together with the x-axis form a container that would hold the maximum amount of water.',\n            difficulty: 'medium',\n            status: 'customized',\n            basedOn: 'Container With Most Water',\n            lastModified: '2025-07-20',\n            points: 200,\n            timeLimit: 1000,\n            memoryLimit: 256,\n            examples: [\n              {\n                input: '[1,8,6,2,5,4,8,3,7]',\n                output: '49',\n                explanation: 'The maximum area is obtained by choosing height[1] = 8 and height[8] = 7'\n              }\n            ],\n            testCases: [\n              {\n                input: '[1,8,6,2,5,4,8,3,7]',\n                expectedOutput: '49',\n                isHidden: false\n              }\n            ],\n            starterCode: {\n              javascript: 'function maxArea(height) {\\n  // Your code here\\n}',\n              python: 'def maxArea(height):\\n    # Your code here\\n    pass',\n              java: 'class Solution {\\n    public int maxArea(int[] height) {\\n        // Your code here\\n    }\\n}',\n              cpp: 'class Solution {\\npublic:\\n    int maxArea(vector<int>& height) {\\n        // Your code here\\n    }\\n};'\n            }\n          }\n        ],\n        participants: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: new ObjectId().toString(),\n        title: 'Complete Fundamentals',\n        description: 'Master all fundamental problems in this comprehensive set',\n        difficulty: 'easy',\n        category: 'Data Structures & Algorithms',\n        estimatedTime: 300,\n        tags: ['arrays', 'strings', 'fundamentals'],\n        problems: [\n          {\n            id: new ObjectId().toString(),\n            title: 'Two Sum',\n            description: 'Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.',\n            difficulty: 'easy',\n            status: 'customized',\n            basedOn: 'Two Sum',\n            lastModified: '2025-07-10',\n            points: 100,\n            timeLimit: 1000,\n            memoryLimit: 256,\n            examples: [\n              {\n                input: 'nums = [2,7,11,15], target = 9',\n                output: '[0,1]',\n                explanation: 'Because nums[0] + nums[1] == 9, we return [0, 1].'\n              }\n            ],\n            testCases: [\n              {\n                input: '[2,7,11,15]\\n9',\n                expectedOutput: '[0,1]',\n                isHidden: false\n              }\n            ],\n            starterCode: {\n              javascript: 'function twoSum(nums, target) {\\n  // Your code here\\n}',\n              python: 'def twoSum(nums, target):\\n    # Your code here\\n    pass',\n              java: 'class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        // Your code here\\n    }\\n}',\n              cpp: 'class Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        // Your code here\\n    }\\n};'\n            }\n          },\n          {\n            id: new ObjectId().toString(),\n            title: 'Valid Parentheses',\n            description: 'Given a string s containing just the characters \\'(\\', \\')\\', \\'{\\', \\'}\\', \\'[\\' and \\']\\', determine if the input string is valid.',\n            difficulty: 'easy',\n            status: 'customized',\n            basedOn: 'Valid Parentheses',\n            lastModified: '2025-07-12',\n            points: 100,\n            timeLimit: 1000,\n            memoryLimit: 256,\n            examples: [\n              {\n                input: '()',\n                output: 'true',\n                explanation: 'Simple valid parentheses'\n              }\n            ],\n            testCases: [\n              {\n                input: '()',\n                expectedOutput: 'true',\n                isHidden: false\n              }\n            ],\n            starterCode: {\n              javascript: 'function isValid(s) {\\n  // Your code here\\n}',\n              python: 'def isValid(s):\\n    # Your code here\\n    pass',\n              java: 'class Solution {\\n    public boolean isValid(String s) {\\n        // Your code here\\n    }\\n}',\n              cpp: 'class Solution {\\npublic:\\n    bool isValid(string s) {\\n        // Your code here\\n    }\\n};'\n            }\n          },\n          {\n            id: new ObjectId().toString(),\n            title: 'Palindrome Number',\n            description: 'Given an integer x, return true if x is a palindrome, and false otherwise.',\n            difficulty: 'easy',\n            status: 'customized',\n            basedOn: 'Palindrome Number',\n            lastModified: '2025-07-14',\n            points: 100,\n            timeLimit: 1000,\n            memoryLimit: 256,\n            examples: [\n              {\n                input: '121',\n                output: 'true',\n                explanation: '121 reads as 121 from left to right and from right to left.'\n              }\n            ],\n            testCases: [\n              {\n                input: '121',\n                expectedOutput: 'true',\n                isHidden: false\n              }\n            ],\n            starterCode: {\n              javascript: 'function isPalindrome(x) {\\n  // Your code here\\n}',\n              python: 'def isPalindrome(x):\\n    # Your code here\\n    pass',\n              java: 'class Solution {\\n    public boolean isPalindrome(int x) {\\n        // Your code here\\n    }\\n}',\n              cpp: 'class Solution {\\npublic:\\n    bool isPalindrome(int x) {\\n        // Your code here\\n    }\\n};'\n            }\n          }\n        ],\n        participants: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n    \n    // Insert problem sets\n    const result = await problemSetsCollection.insertMany(problemSets);\n    console.log(`Inserted ${result.insertedCount} problem sets`);\n    \n    console.log('Problem sets seeded successfully!');\n    \n  } catch (error) {\n    console.error('Error seeding problem sets:', error);\n  } finally {\n    await client.close();\n  }\n}\n\n// Run the seed function\nseedProblemSets(); ","size_bytes":16603},"server/smtp-config.js":{"content":"// SMTP Configuration for CodeArena\n// Edit this file with your SMTP credentials and restart the server\n\nmodule.exports = {\n  // Gmail Configuration (Recommended)\n  gmail: {\n    host: 'smtp.gmail.com',\n    port: 587,\n    secure: false,\n    auth: {\n      user: 'your-email@gmail.com',        // Replace with your Gmail\n      pass: 'your-app-password'            // Replace with your App Password\n    }\n  },\n\n  // Outlook/Hotmail Configuration\n  outlook: {\n    host: 'smtp-mail.outlook.com',\n    port: 587,\n    secure: false,\n    auth: {\n      user: 'your-email@outlook.com',      // Replace with your Outlook email\n      pass: 'your-password'                // Replace with your password\n    }\n  },\n\n  // Yahoo Configuration\n  yahoo: {\n    host: 'smtp.mail.yahoo.com',\n    port: 587,\n    secure: false,\n    auth: {\n      user: 'your-email@yahoo.com',        // Replace with your Yahoo email\n      pass: 'your-app-password'            // Replace with your App Password\n    }\n  },\n\n  // Custom SMTP Server\n  custom: {\n    host: 'your-smtp-server.com',          // Replace with your SMTP server\n    port: 587,\n    secure: false,\n    auth: {\n      user: 'your-username',               // Replace with your username\n      pass: 'your-password'                // Replace with your password\n    }\n  }\n};\n\n// INSTRUCTIONS:\n// 1. Choose one of the configurations above (gmail, outlook, yahoo, or custom)\n// 2. Replace the placeholder values with your actual credentials\n// 3. Copy the chosen configuration to your .env file or set environment variables\n// 4. Restart the server\n\n// For Gmail:\n// - Enable 2-Factor Authentication\n// - Generate App Password (not your regular password)\n// - Use the App Password in the 'pass' field\n\n// Example .env file:\n// SMTP_HOST=smtp.gmail.com\n// SMTP_PORT=587\n// SMTP_USER=your-email@gmail.com\n// SMTP_PASS=your-16-digit-app-password ","size_bytes":1862},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full object-cover\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-muted-foreground font-medium\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\n// Enhanced Avatar component specifically for user profiles\ninterface UserAvatarProps {\n  user?: {\n    profileImageUrl?: string;\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n  };\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nconst UserAvatar = React.forwardRef<\n  HTMLDivElement,\n  UserAvatarProps\n>(({ user, className, size = \"md\" }, ref) => {\n  const [imageLoaded, setImageLoaded] = React.useState(false);\n  const [imageError, setImageError] = React.useState(false);\n  \n  const sizeClasses = {\n    sm: \"h-8 w-8\",\n    md: \"h-10 w-10\", \n    lg: \"h-24 w-24\"\n  };\n  \n  const fallbackSizeClasses = {\n    sm: \"text-xs\",\n    md: \"text-sm\",\n    lg: \"text-2xl\"\n  };\n\n  const handleImageLoad = () => {\n    console.log('[DEBUG] UserAvatar image loaded successfully:', user?.profileImageUrl);\n    setImageLoaded(true);\n    setImageError(false);\n  };\n\n  const handleImageError = () => {\n    console.log('[DEBUG] UserAvatar image failed to load:', user?.profileImageUrl);\n    setImageError(true);\n    setImageLoaded(false);\n  };\n\n  const getInitials = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user?.firstName) {\n      return user.firstName[0].toUpperCase();\n    }\n    if (user?.email) {\n      return user.email[0].toUpperCase();\n    }\n    return \"U\";\n  };\n\n  const shouldShowImage = user?.profileImageUrl && !imageError;\n\n  React.useEffect(() => {\n    if (user?.profileImageUrl) {\n      console.log('[DEBUG] UserAvatar mounted with profileImageUrl:', user.profileImageUrl);\n      // Reset states when URL changes\n      setImageLoaded(false);\n      setImageError(false);\n    }\n  }, [user?.profileImageUrl]);\n\n  return (\n    <Avatar ref={ref} className={cn(sizeClasses[size], className)}>\n      {shouldShowImage && (\n        <AvatarImage\n          src={user.profileImageUrl}\n          alt={`${user?.firstName || ''} ${user?.lastName || ''}`.trim() || user?.email || 'User'}\n          onLoad={handleImageLoad}\n          onError={handleImageError}\n          style={{ display: imageError ? 'none' : 'block' }}\n        />\n      )}\n      <AvatarFallback className={fallbackSizeClasses[size]}>\n        {getInitials()}\n      </AvatarFallback>\n    </Avatar>\n  );\n});\n\nUserAvatar.displayName = \"UserAvatar\";\n\nexport { Avatar, AvatarImage, AvatarFallback, UserAvatar }\n","size_bytes":3790},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1836},"Documentations/DOCKER_DESKTOP_SETUP.md":{"content":"# 🐳 Docker Desktop Setup Guide for CodeArena Execution System\n\n## 🎯 **Step-by-Step Docker Desktop Setup**\n\nThis guide will help you run the CodeArena execution system using Docker Desktop and make problem compilation work perfectly.\n\n---\n\n## 📋 **Prerequisites**\n\n### **1. Install Docker Desktop**\n- Download from: https://www.docker.com/products/docker-desktop/\n- Install and restart your computer\n- Ensure Docker Desktop is running (whale icon in system tray)\n\n### **2. Configure Docker Desktop**\n1. **Open Docker Desktop**\n2. **Go to Settings** (gear icon)\n3. **Resources → Advanced:**\n   - CPU: At least 4 cores\n   - Memory: At least 8GB (16GB recommended)\n   - Disk: At least 20GB free space\n\n4. **Docker Engine → Features:**\n   - Enable \"Use Docker Compose V2\"\n   - Enable \"Use containerd for pulling and storing images\"\n\n5. **Apply & Restart**\n\n---\n\n## 🚀 **Step 1: Prepare Your System**\n\n### **Open PowerShell as Administrator**\n```powershell\n# Check Docker is running\ndocker --version\ndocker info\n\n# Should show Docker version and system info\n```\n\n### **Navigate to Your Project**\n```powershell\ncd E:\\CodeArena\\execution-system\n```\n\n---\n\n## 🏗️ **Step 2: Build Docker Images**\n\n### **Build All Required Images**\n\n**Option A: Using the Build Script**\n```powershell\n# Run the automated build script\nbash scripts/build.sh\n\n# If bash is not available, use PowerShell equivalent:\n# See Step 2B below\n```\n\n**Option B: Manual Build (PowerShell)**\n```powershell\n# Build language execution containers\ncd docker\\python\ndocker build -t codearena/executor-python:latest .\n\ncd ..\\javascript  \ndocker build -t codearena/executor-javascript:latest .\n\ncd ..\\c\ndocker build -t codearena/executor-c:latest .\n\ncd ..\\cpp\ndocker build -t codearena/executor-cpp:latest .\n\ncd ..\\java\ndocker build -t codearena/executor-java:latest .\n\n# Go back to execution-system root\ncd ..\\..\n\n# Build API and Worker services\ndocker build -f Dockerfile.api -t codearena/execution-api:latest .\ndocker build -f Dockerfile.worker -t codearena/execution-worker:latest .\n```\n\n### **Verify Images Are Built**\n```powershell\ndocker images | Select-String \"codearena\"\n```\n\n**Expected Output:**\n```\ncodearena/executor-python     latest    abc123    2 minutes ago    150MB\ncodearena/executor-javascript latest    def456    2 minutes ago    180MB\ncodearena/executor-c          latest    ghi789    2 minutes ago    120MB\ncodearena/executor-cpp        latest    jkl012    2 minutes ago    130MB\ncodearena/executor-java       latest    mno345    2 minutes ago    250MB\ncodearena/execution-api       latest    pqr678    1 minute ago     200MB\ncodearena/execution-worker    latest    stu901    1 minute ago     220MB\n```\n\n---\n\n## 🏃 **Step 3: Start the Execution System**\n\n### **Using Docker Compose (Recommended)**\n```powershell\n# Start all services in background\ndocker-compose up -d\n\n# Check services are running\ndocker-compose ps\n\n# View logs in real-time\ndocker-compose logs -f\n```\n\n### **Using Docker Desktop UI**\n1. **Open Docker Desktop**\n2. **Go to \"Containers\" tab**\n3. **You should see:**\n   - `execution-redis` (Redis database)\n   - `execution-api` (API service)\n   - `execution-worker` (Code execution worker)\n\n4. **All should show \"Running\" status with green indicators**\n\n---\n\n## 🧪 **Step 4: Test the System**\n\n### **Test Health Endpoints**\n```powershell\n# Test API health\ncurl http://localhost:3001/health\n\n# Test queue statistics\ncurl http://localhost:3001/api/stats\n\n# Test supported languages\ncurl http://localhost:3001/api/languages\n```\n\n### **Test Code Execution**\n```powershell\n# Test Python execution\n$pythonTest = @{\n    code = \"print('Hello from Python!')\"\n    language = \"python\"\n} | ConvertTo-Json\n\ncurl -X POST http://localhost:3001/api/execute `\n     -H \"Content-Type: application/json\" `\n     -Body $pythonTest\n\n# Test JavaScript execution  \n$jsTest = @{\n    code = \"console.log('Hello from JavaScript!');\"\n    language = \"javascript\"\n} | ConvertTo-Json\n\ncurl -X POST http://localhost:3001/api/execute `\n     -H \"Content-Type: application/json\" `\n     -Body $jsTest\n```\n\n### **Test Compilation Languages**\n```powershell\n# Test C compilation\n$cTest = @{\n    code = \"#include <stdio.h>`nint main() { printf(`\"Hello from C!`\"); return 0; }\"\n    language = \"c\"\n} | ConvertTo-Json\n\ncurl -X POST http://localhost:3001/api/execute `\n     -H \"Content-Type: application/json\" `\n     -Body $cTest\n\n# Test C++ compilation\n$cppTest = @{\n    code = \"#include <iostream>`nint main() { std::cout << `\"Hello from C++!`\"; return 0; }\"\n    language = \"cpp\"\n} | ConvertTo-Json\n\ncurl -X POST http://localhost:3001/api/execute `\n     -H \"Content-Type: application/json\" `\n     -Body $cppTest\n\n# Test Java compilation\n$javaTest = @{\n    code = \"public class Main { public static void main(String[] args) { System.out.println(`\"Hello from Java!`\"); } }\"\n    language = \"java\"\n} | ConvertTo-Json\n\ncurl -X POST http://localhost:3001/api/execute `\n     -H \"Content-Type: application/json\" `\n     -Body $javaTest\n```\n\n---\n\n## 🔍 **Step 5: Monitor in Docker Desktop**\n\n### **View Container Logs**\n1. **Open Docker Desktop**\n2. **Go to \"Containers\" tab**\n3. **Click on any container name**\n4. **Go to \"Logs\" tab to see output**\n\n### **Check Resource Usage**\n1. **In Docker Desktop, click on running containers**\n2. **Go to \"Stats\" tab**\n3. **Monitor CPU, Memory, and Network usage**\n\n### **Useful Docker Desktop Actions**\n- **Start/Stop containers:** Use the play/stop buttons\n- **Restart containers:** Right-click → Restart\n- **View files:** Go to \"Files\" tab in container details\n- **Open terminal:** Click \"CLI\" button for container shell\n\n---\n\n## 🔗 **Step 6: Connect to Your CodeArena Server**\n\n### **Update Your CodeArena Environment**\n```powershell\n# In your CodeArena server directory\ncd E:\\CodeArena\\server\n\n# Set environment variables\n$env:EXECUTION_MODE = \"queue\"\n$env:EXECUTION_QUEUE_URL = \"http://localhost:3001\"\n\n# Start your CodeArena server\nnpm start\n```\n\n### **Test Integration**\n```powershell\n# In another PowerShell window\ncd E:\\CodeArena\n\n# Run integration test\nnode test-execution-integration.js\n```\n\n---\n\n## 📊 **Step 7: Verify Everything Works**\n\n### **Check All Services**\n```powershell\n# Check Docker containers\ndocker ps\n\n# Check CodeArena health\ncurl http://localhost:5000/api/health\n\n# Check execution system health  \ncurl http://localhost:3001/health\n```\n\n### **Test Problem Compilation**\n```powershell\n# Test through CodeArena API (replace YOUR_TOKEN with actual auth token)\n$problemTest = @{\n    code = \"def solution(n): return n * 2`nprint(solution(5))\"\n    language = \"python\"\n} | ConvertTo-Json\n\ncurl -X POST http://localhost:5000/api/execute `\n     -H \"Content-Type: application/json\" `\n     -H \"Authorization: Bearer YOUR_TOKEN\" `\n     -Body $problemTest\n```\n\n**Expected Response:**\n```json\n{\n  \"output\": \"10\",\n  \"runtime\": 245,\n  \"memory\": 12\n}\n```\n\n---\n\n## 🚨 **Troubleshooting Common Issues**\n\n### **1. Docker Desktop Not Starting**\n```powershell\n# Restart Docker Desktop service\nRestart-Service com.docker.service\n\n# Or restart Docker Desktop completely\n# Close Docker Desktop → Restart as Administrator\n```\n\n### **2. Images Failed to Build**\n```powershell\n# Clean Docker cache\ndocker system prune -f\n\n# Rebuild with no cache\ndocker build --no-cache -f Dockerfile.api -t codearena/execution-api .\n```\n\n### **3. Containers Won't Start**\n```powershell\n# Check logs for errors\ndocker-compose logs worker\ndocker-compose logs api\ndocker-compose logs redis\n\n# Common fix: Restart services\ndocker-compose down\ndocker-compose up -d\n```\n\n### **4. Port Already in Use**\n```powershell\n# Check what's using port 3001\nnetstat -ano | Select-String \"3001\"\n\n# Kill process using port (replace PID)\ntaskkill /PID 1234 /F\n\n# Or change ports in docker-compose.yml\n```\n\n### **5. Docker Socket Permission Issues**\n- **Solution:** Ensure Docker Desktop is running as Administrator\n- **Alternative:** Use Docker Desktop's built-in Linux VM (recommended)\n\n### **6. Memory/CPU Issues**\n- **Go to Docker Desktop Settings → Resources**\n- **Increase Memory to 8GB minimum**\n- **Increase CPU to 4 cores minimum**\n\n---\n\n## 🔧 **Docker Desktop UI Management**\n\n### **Container Management**\n1. **Containers Tab:**\n   - View all running containers\n   - Start/stop/restart containers\n   - View logs and stats\n   - Access container shell\n\n2. **Images Tab:**\n   - See all built images\n   - Delete unused images\n   - Pull new images\n\n3. **Volumes Tab:**\n   - Manage persistent data\n   - Clean up unused volumes\n\n### **Useful Commands in Container Terminal**\n```bash\n# From Docker Desktop, click CLI button on worker container\n\n# Test Docker access\ndocker --version\ndocker ps\n\n# Test Redis connection\nredis-cli -h redis ping\n\n# Check Node.js app\nps aux | grep node\n```\n\n---\n\n## ✅ **Success Checklist**\n\n- [ ] **Docker Desktop running** with adequate resources\n- [ ] **All 7 images built** successfully\n- [ ] **3 containers running** (redis, api, worker)\n- [ ] **Health endpoints responding** (port 3001)\n- [ ] **All 5 languages working** (Python, JS, C, C++, Java)\n- [ ] **CodeArena integration** working (port 5000)\n- [ ] **Problem compilation** successful\n- [ ] **No errors in container logs**\n\n---\n\n## 🎉 **Final Verification**\n\n### **Run This Complete Test**\n```powershell\n# Complete system test\nWrite-Host \"🧪 Testing complete Docker setup...\"\n\n# Test 1: Docker Desktop status\ndocker info | Select-String \"Server Version\"\n\n# Test 2: All containers running\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\"\n\n# Test 3: Health checks\ncurl http://localhost:3001/health\n\n# Test 4: Language execution\n$testCode = @{\n    code = \"print('🎉 Docker setup successful!')\"  \n    language = \"python\"\n} | ConvertTo-Json\n\n$response = curl -X POST http://localhost:3001/api/execute `\n                 -H \"Content-Type: application/json\" `\n                 -Body $testCode\n\nWrite-Host \"Response: $response\"\n\nWrite-Host \"✅ Docker Desktop setup complete!\"\n```\n\n---\n\n## 📱 **Quick Actions in Docker Desktop**\n\n### **Daily Operations**\n1. **Start System:** Docker Desktop → Containers → Click play on stopped containers\n2. **Stop System:** Docker Desktop → Containers → Click stop on all containers  \n3. **View Logs:** Click container name → Logs tab\n4. **Monitor Resources:** Click container name → Stats tab\n5. **Clean Up:** Images tab → Remove unused images\n\n### **Emergency Commands**\n```powershell\n# Nuclear reset (if everything is broken)\ndocker-compose down\ndocker system prune -f\ndocker-compose up -d --build\n\n# Quick restart\ndocker-compose restart\n\n# Check everything\ndocker-compose ps && curl http://localhost:3001/health\n```\n\n---\n\n**🚀 Your Docker Desktop setup is now complete and ready to handle problem compilation for thousands of users!**\n\nThe system will automatically:\n- ✅ Compile C/C++/Java code\n- ✅ Execute Python/JavaScript code  \n- ✅ Handle concurrent requests\n- ✅ Scale based on load\n- ✅ Provide detailed execution results\n\n**Next step:** Test with real problems from your CodeArena platform! ","size_bytes":11034},"client/src/components/layout/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { UserAvatar } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Code, Bell, Moon, Sun, LogOut, User, Settings as SettingsIcon, Menu, X } from \"lucide-react\";\nimport lightLogo from \"../../assests/light_logo.png\";\nimport lightName from \"../../assests/light_name.png\";\nimport darkLogo from \"../../assests/dark_logo.png\";\nimport darkName from \"../../assests/dark_name.png\";\n\nexport function Navigation() {\n  const { user, isAuthenticated, logout } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  if (!isAuthenticated || !user) return null;\n\n  const navItems = [\n    { path: \"/dashboard\", label: \"Dashboard\" },\n    { path: \"/assignments\", label: \"Assignments\" },\n    { path: \"/contests\", label: \"Contests\" },\n    { path: \"/courses\", label: \"Courses\" },\n    // { path: \"/leaderboard\", label: \"Leaderboard\" },\n  ];\n\n  // Add admin-only nav items\n  const adminNavItems = user?.role === 'admin' ? [\n    { path: \"/admin/problems\", label: \"Problems\" },\n    { path: \"/admin/version-history\", label: \"Version History\" },\n  ] : [];\n\n  const isActive = (path: string) => {\n    if (path === \"/dashboard\" && location === \"/\") return true;\n    if (path === \"/assignments\" && location.startsWith(\"/problems\")) return true;\n    return location === path || (path !== \"/dashboard\" && location.startsWith(path));\n  };\n\n  return (\n    <nav className=\"bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 sticky top-0 z-50 shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <Link href=\"/dashboard\" className=\"flex items-center\">\n              <div className=\"flex items-center space-x-2\">\n                <img src={lightLogo} alt=\"CodeArena logo\" className=\"h-10 w-auto dark:hidden\" />\n                <img src={darkLogo} alt=\"CodeArena logo\" className=\"h-10 w-auto hidden dark:block\" />\n                <img src={lightName} alt=\"CodeArena\" className=\"h-8 w-auto dark:hidden\" />\n                <img src={darkName} alt=\"CodeArena\" className=\"h-9 w-auto hidden dark:block\" />\n              </div>\n            </Link>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex space-x-8\">\n            {[...navItems, ...adminNavItems].map((item) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={`pb-2 pt-2 transition-colors ${\n                  isActive(item.path)\n                    ? \"text-green-500 font-medium border-b-2 border-green-500\"\n                    : \"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white\"\n                }`}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </div>\n\n          {/* Right Side Menu */}\n          <div className=\"flex items-center space-x-2 md:space-x-4\">\n            {/* Mobile Menu Button */}\n            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n                <div className=\"flex flex-col h-full\">\n                  <div className=\"flex items-center justify-between pb-4 border-b\">\n                    <span className=\"text-lg font-semibold\">Navigation</span>\n                  </div>\n                  \n                  <div className=\"flex-1 py-6\">\n                    <nav className=\"space-y-2\">\n                      {[...navItems, ...adminNavItems].map((item) => (\n                        <Link\n                          key={item.path}\n                          href={item.path}\n                          onClick={() => setIsMobileMenuOpen(false)}\n                          className={`block px-3 py-2 rounded-md text-base transition-colors ${\n                            isActive(item.path)\n                              ? \"bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 font-medium\"\n                              : \"text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800\"\n                          }`}\n                        >\n                          {item.label}\n                        </Link>\n                      ))}\n                    </nav>\n                  </div>\n\n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex items-center space-x-3 px-3 py-2\">\n                      <UserAvatar user={user} size=\"sm\" />\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{user?.firstName} {user?.lastName}</p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">{user?.email}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-3 space-y-1\">\n                      <Link href=\"/profile\">\n                        <Button variant=\"ghost\" className=\"w-full justify-start\" onClick={() => setIsMobileMenuOpen(false)}>\n                          <User className=\"mr-2 h-4 w-4\" />\n                          Profile\n                        </Button>\n                      </Link>\n                      <Link href=\"/settings\">\n                        <Button variant=\"ghost\" className=\"w-full justify-start\" onClick={() => setIsMobileMenuOpen(false)}>\n                          <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                          Settings\n                        </Button>\n                      </Link>\n                      <Button \n                        variant=\"ghost\" \n                        className=\"w-full justify-start text-red-600 dark:text-red-400\" \n                        onClick={() => {\n                          setIsMobileMenuOpen(false);\n                          logout();\n                        }}\n                      >\n                        <LogOut className=\"mr-2 h-4 w-4\" />\n                        Log out\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n\n            {/* Desktop Icons */}\n            {/* <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"hidden md:flex text-gray-600 dark:text-gray-300\"\n            >\n              <Bell className=\"h-5 w-5\" />\n            </Button> */}\n            \n            {/* <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n              className=\"text-gray-600 dark:text-gray-300\"\n            >\n              {theme === \"light\" ? <Moon className=\"h-5 w-5\" /> : <Sun className=\"h-5 w-5\" />}\n            </Button> */}\n            \n            {/* Desktop User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"hidden md:flex items-center space-x-3 h-auto p-2\">\n                  <UserAvatar user={user} size=\"sm\" />\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {user?.firstName} {user?.lastName}\n                  </span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem asChild>\n                  <Link href=\"/profile\" className=\"flex items-center\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    Profile\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/settings\" className=\"flex items-center\">\n                    <SettingsIcon className=\"mr-2 h-4 w-4\" />\n                    Settings\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={logout}>\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Log out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":8920},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/pages/admin/CourseDetail.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { ChevronLeft, Edit, Trash2, Users, BookOpen, Plus, Play, Eye, Settings, Loader2, QrCode, Download, Copy } from 'lucide-react';\nimport { useToast, toastSuccess, toastError } from '@/components/ui/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface Course {\n  id: number;\n  title: string;\n  description?: string;\n  isPublic: boolean;\n  createdAt: string;\n  updatedAt?: string;\n  moduleCount?: number;\n  enrollmentCount?: number;\n  modules?: CourseModule[];\n  enrollments?: CourseEnrollment[];\n}\n\ninterface CourseModule {\n  id: number;\n  title: string;\n  description?: string;\n  order: number;\n  courseId: number;\n}\n\ninterface CourseEnrollment {\n  id: number;\n  userId: string;\n  courseId: number;\n  progress: number;\n  completedModules: number[];\n  createdAt?: string;\n  enrolledAt?: string;\n  user?: {\n    _id?: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    name?: string;\n    email?: string;\n  };\n}\n\nexport default function CourseDetail() {\n  const { courseId: courseIdParam } = useParams<{ courseId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [qrCodeData, setQrCodeData] = useState<string>('');\n  const [isQrDialogOpen, setIsQrDialogOpen] = useState(false);\n\n  const courseId = courseIdParam ? parseInt(courseIdParam) : NaN;\n\n  // Fetch course data with all details\n  const { data: course, isLoading: courseLoading } = useQuery({\n    queryKey: ['course', courseId],\n    queryFn: async () => {\n      if (!courseId || isNaN(courseId)) {\n        throw new Error('Course ID is required');\n      }\n      const response = await apiRequest('GET', `/api/courses/${courseId}`);\n      if (!response.ok) throw new Error('Failed to fetch course');\n      return response.json() as Promise<Course>;\n    },\n    enabled: !!courseId && !isNaN(courseId),\n  });\n\n  // Get enrollments data - user information is already included in the response\n  const { data: enrollments = [], isLoading: enrollmentsLoading } = useQuery({\n    queryKey: ['course-enrollments', courseId],\n    queryFn: async () => {\n      if (!courseId || isNaN(courseId)) return [];\n      const response = await apiRequest('GET', `/api/courses/${courseId}/enrollments`);\n      if (!response.ok) throw new Error('Failed to fetch enrollments');\n      const enrollmentsData = await response.json() as CourseEnrollment[];\n      \n      // The user data is already included in the enrollment response\n      return enrollmentsData.map((enrollment) => ({\n        ...enrollment,\n        user: enrollment.user ? {\n          id: enrollment.user._id || enrollment.user.id,\n          firstName: enrollment.user.firstName,\n          lastName: enrollment.user.lastName,\n          email: enrollment.user.email,\n          name: `${enrollment.user.firstName} ${enrollment.user.lastName}`.trim()\n        } : undefined\n      }));\n    },\n    enabled: !!courseId && !isNaN(courseId),\n  });\n\n  // Fetch course modules\n  const { data: modules = [], isLoading: modulesLoading } = useQuery({\n    queryKey: ['course-modules', courseId],\n    queryFn: async () => {\n      if (!courseId || isNaN(courseId)) return [];\n      const response = await apiRequest('GET', `/api/courses/${courseId}/modules`);\n      if (!response.ok) throw new Error('Failed to fetch modules');\n      return response.json() as Promise<CourseModule[]>;\n    },\n    enabled: !!courseId && !isNaN(courseId),\n  });\n\n  const deleteCourseMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('DELETE', `/api/courses/${courseId}`);\n      if (!response.ok) throw new Error('Failed to delete course');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['courses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/courses'] });\n      toast({ title: 'Course deleted successfully' });\n      setLocation('/admin/courses');\n    },\n    onError: () => {\n      toast({\n        title: 'Failed to delete course',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const handleDeleteCourse = () => {\n    deleteCourseMutation.mutate();\n  };\n\n  const deleteModuleMutation = useMutation({\n    mutationFn: async (moduleId: number) => {\n      const response = await apiRequest('DELETE', `/api/modules/${moduleId}`);\n      if (!response.ok) {\n        throw new Error('Failed to delete module');\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['course', courseId] });\n      queryClient.invalidateQueries({ queryKey: ['course-modules', courseId] });\n      queryClient.invalidateQueries({ queryKey: ['courses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/courses'] });\n      toast({ title: 'Module deleted successfully' });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Failed to delete module',\n        variant: 'destructive',\n        description: error.message || 'Failed to delete module'\n      });\n    },\n  });\n\n  const handleDeleteModule = (moduleId: number) => {\n    deleteModuleMutation.mutate(moduleId);\n  };\n\n  const deleteEnrollmentMutation = useMutation({\n    mutationFn: async ({ courseId, userId }: { courseId: number, userId: string }) => {\n      const response = await apiRequest('DELETE', `/api/courses/${courseId}/enrollments/${userId}`);\n      if (!response.ok) {\n        throw new Error('Failed to delete enrollment');\n      }\n    },\n    onSuccess: () => {\n      // Invalidate all relevant queries to refresh the data\n      queryClient.invalidateQueries({ queryKey: ['course', courseId] });\n      queryClient.invalidateQueries({ queryKey: ['course-enrollments', courseId] });\n      queryClient.invalidateQueries({ queryKey: ['courses'] }); // Update course list if needed\n      toast({ title: 'Student removed from course successfully' });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Failed to remove student',\n        variant: 'destructive',\n        description: error.message || 'Failed to remove student from course'\n      });\n    },\n  });\n\n  const handleDeleteEnrollment = (userId: string) => {\n    if (courseId) {\n      deleteEnrollmentMutation.mutate({ courseId: courseId, userId: userId });\n    } else {\n      toast({\n        title: 'Course ID is missing',\n        variant: 'destructive',\n        description: 'Unable to delete enrollment due to missing course ID.'\n      });\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const calculateAverageProgress = () => {\n    if (enrollments.length === 0) return 0;\n    const totalProgress = enrollments.reduce((sum, enrollment) => sum + enrollment.progress, 0);\n    return Math.round(totalProgress / enrollments.length);\n  };\n\n  const calculateIndividualProgress = (enrollment: CourseEnrollment) => {\n    if (!modules.length) return 0;\n    const completedCount = enrollment.completedModules?.length || 0;\n    return Math.round((completedCount / modules.length) * 100);\n  };\n\n  // Generate QR code for course enrollment\n  const generateQrCode = async () => {\n    try {\n      const response = await apiRequest('GET', `/api/courses/${courseId}/qr-code`);\n      if (!response.ok) throw new Error('Failed to generate QR code');\n      const data = await response.json();\n      setQrCodeData(data.qrCode);\n      setIsQrDialogOpen(true);\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to generate QR code for enrollment',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  // Copy enrollment link to clipboard\n  const copyEnrollmentLink = () => {\n    const enrollmentUrl = `${window.location.origin}/enroll/${courseId}`;\n    navigator.clipboard.writeText(enrollmentUrl);\n    toastSuccess('Course Link Copied!', 'The course enrollment link has been copied to your clipboard');\n  };\n\n  if (!courseId || isNaN(courseId)) {\n      return (\n    <div className=\"container mx-auto py-8 px-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-2xl font-bold mb-4\">Invalid Course ID</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The course ID is missing or invalid.\n          </p>\n          <Button onClick={() => setLocation('/admin/courses')}>\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (courseLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-2\">Loading Course...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-2\">Course Not Found</h2>\n          <Button onClick={() => setLocation('/admin/courses')}>\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n\n\n  return (\n    <div className=\"container mx-auto py-8 px-6\">\n      <div className=\"mb-8\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation('/admin/courses')}\n          className=\"mb-4\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-2\" />\n          Back to Courses\n        </Button>\n\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">{course.title}</h1>\n            {course.description && (\n              <p className=\"text-muted-foreground text-lg mb-4\">{course.description}</p>\n            )}\n            <div className=\"flex items-center gap-4\">\n              <Badge variant={course.isPublic ? \"default\" : \"secondary\"}>\n                {course.isPublic ? 'Public' : 'Private'}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground\">\n                Created {formatDate(course.createdAt)}\n              </span>\n              {course.updatedAt && (\n                <span className=\"text-sm text-muted-foreground\">\n                  Last updated {formatDate(course.updatedAt)}\n                </span>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex gap-2\">\n          \n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation(`/admin/courses/${courseId}/edit`)}\n            >\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit Course\n            </Button>\n\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button variant=\"destructive\">\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete Course\n                </Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Delete Course</AlertDialogTitle>\n                  <AlertDialogDescription>\n                    Are you sure you want to delete \"{course.title}\"? This action cannot be undone.\n                    All course modules and student progress will be permanently removed.\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction\n                    onClick={handleDeleteCourse}\n                    className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                  >\n                    Delete Course\n                  </AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          </div>\n        </div>\n      </div>\n\n      {/* Course Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <BookOpen className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{course.moduleCount || modules.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Course Modules</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <Users className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{course.enrollmentCount || enrollments.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Enrolled Students</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-2 bg-purple-100 rounded-lg\">\n                <Settings className=\"h-6 w-6 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{course.isPublic ? 'Public' : 'Private'}</p>\n                <p className=\"text-sm text-muted-foreground\">Course Status</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"modules\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"modules\">Course Modules</TabsTrigger>\n          <TabsTrigger value=\"students\">Enrolled Students</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"modules\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <div>\n                <CardTitle>Course Modules ({modules.length})</CardTitle>\n                <CardDescription>\n                  Manage the learning modules for this course\n                </CardDescription>\n              </div>\n              <Button onClick={() => setLocation(`/admin/courses/${courseId}/modules/create`)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Module\n              </Button>\n            </CardHeader>\n            <CardContent>\n              {modules.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Modules Yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Start by adding your first course module.\n                  </p>\n              \n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Module</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Order</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {modules.map((module) => (\n                      <TableRow key={module.id}>\n                        <TableCell>\n                          <div className=\"font-medium\">{module.title}</div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-muted-foreground truncate max-w-xs\">\n                            {module.description}\n                          </div>\n                        </TableCell>\n                        <TableCell>{module.order}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setLocation(`/admin/modules/${module.id}/edit`)}\n                            >\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteModule(module.id)}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"students\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <div>\n                <CardTitle>Enrolled Students ({enrollments.length})</CardTitle>\n                <CardDescription>\n                  Manage the students enrolled in this course\n                </CardDescription>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" onClick={generateQrCode}>\n                  <QrCode className=\"h-4 w-4 mr-2\" />\n                  QR Code\n                </Button>\n                <Button onClick={() => setLocation(`/admin/courses/${courseId}/enrollments/create`)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Student\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {enrollments.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Students Yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Start by enrolling your first student.\n                  </p>\n                  <Button onClick={() => setLocation(`/admin/courses/${courseId}/enrollments/create`)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add First Student\n                  </Button>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Progress</TableHead>\n                      <TableHead>Completed Modules</TableHead>\n                      <TableHead>Enrolled At</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {enrollments.map((enrollment) => (\n                      <TableRow key={enrollment.id}>\n                        <TableCell>\n                          <div className=\"font-medium\">\n                            {enrollment.user?.firstName && enrollment.user?.lastName \n                              ? `${enrollment.user.firstName} ${enrollment.user.lastName}`\n                              : enrollment.user?.name || enrollment.user?.email || 'Unknown User'\n                            }\n                          </div>\n                          {enrollment.user?.email && (\n                            <div className=\"text-sm text-muted-foreground\">{enrollment.user.email}</div>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            {calculateIndividualProgress(enrollment)}%\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {enrollment.completedModules?.length || 0} / {modules.length} modules\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-muted-foreground truncate max-w-xs\">\n                            {enrollment.completedModules.length} / {modules.length}\n                          </div>\n                        </TableCell>\n                        <TableCell>{formatDate(enrollment.enrolledAt || '')}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex justify-end gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setLocation(`/admin/courses/${courseId}/enrollments/${enrollment.id}/edit`)}\n                            >\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit\n                            </Button>\n                                                         <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  disabled={deleteEnrollmentMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                                  Delete\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Remove Student from Course</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Are you sure you want to remove {enrollment.user?.firstName && enrollment.user?.lastName \n                                      ? `${enrollment.user.firstName} ${enrollment.user.lastName}`\n                                      : enrollment.user?.name || enrollment.user?.email || 'this student'\n                                    } from this course? \n                                    This action cannot be undone and all their progress will be lost.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction\n                                    onClick={() => handleDeleteEnrollment(enrollment.userId)}\n                                    className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                  >\n                                    Remove Student\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* QR Code Dialog */}\n      <Dialog open={isQrDialogOpen} onOpenChange={setIsQrDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Course Enrollment QR Code</DialogTitle>\n            <DialogDescription>\n              Students can scan this QR code to join the course. They must be logged in to enroll.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex flex-col items-center space-y-4\">\n            {qrCodeData ? (\n              <>\n                <div className=\"p-4 bg-white rounded-lg border\">\n                  <img src={qrCodeData} alt=\"Course Enrollment QR Code\" className=\"w-48 h-48\" />\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Course: {course?.title}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Enrollment URL: {window.location.origin}/enroll/{courseId}\n                  </p>\n                </div>\n              </>\n            ) : (\n              <div className=\"flex items-center justify-center w-48 h-48 bg-muted rounded-lg\">\n                <Loader2 className=\"h-8 w-8 animate-spin\" />\n              </div>\n            )}\n          </div>\n          <DialogFooter className=\"flex justify-between sm:justify-between\">\n            <Button variant=\"outline\" onClick={copyEnrollmentLink}>\n              <Copy className=\"h-4 w-4 mr-2\" />\n              Copy Link\n            </Button>\n            <Button\n              onClick={() => {\n                if (qrCodeData) {\n                  const link = document.createElement('a');\n                  link.href = qrCodeData;\n                  link.download = `course-${courseId}-qr-code.png`;\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n                }\n              }}\n              disabled={!qrCodeData}\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":26774},"client/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./index.html\", \"./src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config; ","size_bytes":2773},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"execution-system/k8s/secret.yaml":{"content":"apiVersion: v1\nkind: Secret\nmetadata:\n  name: execution-secrets\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: codearena-execution\n    app.kubernetes.io/component: secrets\ntype: Opaque\ndata:\n  # Redis password (base64 encoded)\n  # To generate: echo -n \"your-redis-password\" | base64\n  REDIS_PASSWORD: \"\"\n  \n  # JWT secret for API authentication (base64 encoded)\n  # To generate: echo -n \"your-jwt-secret\" | base64\n  JWT_SECRET: \"\"\n  \n  # API rate limiting secret (base64 encoded)\n  # To generate: echo -n \"your-rate-limit-secret\" | base64\n  RATE_LIMIT_SECRET: \"\" ","size_bytes":587},"client/src/shared/schema.ts":{"content":"// User related types\nexport interface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  role?: 'student' | 'admin';\n  profileImageUrl?: string;\n  createdAt?: string;\n}\n\n// Assignment related types\nexport interface Assignment {\n  id: string;\n  title: string;\n  description: string;\n  dueDate: string;\n  problems: number[];\n  assignedTo: string[];\n  createdAt?: string;\n  updatedAt?: string;\n}\n\n// Group related types\nexport interface Group {\n  id: string;\n  name: string;\n  description: string;\n  members?: string[];\n  instructors?: string[];\n  createdAt?: string;\n  updatedAt?: string;\n}\n\n// Announcement related types\nexport interface Announcement {\n  id: string;\n  title: string;\n  content: string;\n  priority: 'low' | 'medium' | 'high';\n  targetAudience: string[];\n  isVisible: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n} ","size_bytes":870},"client/src/pages/admin/contests.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Plus, Search, Calendar, Clock, Edit, Trash2, Users, Copy, QrCode, Settings, UserPlus, List, Award } from \"lucide-react\";\nimport * as z from \"zod\";\nimport { useToast, toastSuccess, toastError, toastInfo } from \"@/components/ui/use-toast\";\nimport { format, isValid } from \"date-fns\";\nimport { useLocation } from \"wouter\";\n\ninterface Contest {\n  id: number;\n  title: string;\n  description: string;\n  startTime: string;\n  endTime: string;\n  duration: number; // in minutes\n  problems: (Problem & { originalProblemId?: number })[];\n  participants?: Participant[];\n  participantCount?: number;\n}\n\ninterface Participant {\n  id: string;\n  userId: string;\n  contestId: string;\n  registrationTime: string;\n  status: 'registered' | 'active' | 'completed';\n  user?: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  } | null;\n}\n\ninterface Problem {\n  id: number;\n  title: string;\n  difficulty: string;\n  points: number;\n  originalProblemId?: number; // For contest problems that reference original problems\n}\n\ninterface User {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email: string;\n  role: string;\n}\n\nconst contestSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  startTime: z.string().min(1, \"Start time is required\"),\n  duration: z.number().min(30, \"Duration must be at least 30 minutes\"),\n});\n\nexport default function AdminContests() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isParticipantDialogOpen, setIsParticipantDialogOpen] = useState(false);\n  const [isQrDialogOpen, setIsQrDialogOpen] = useState(false);\n  const [qrCodeData, setQrCodeData] = useState<string>(\"\");\n  const [selectedContest, setSelectedContest] = useState<Contest | null>(null);\n  const [editingContest, setEditingContest] = useState<Contest | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [participantsTab, setParticipantsTab] = useState<'enrolled' | 'add'>(\"enrolled\");\n  const [selectedUserIds, setSelectedUserIds] = useState<Set<string>>(new Set());\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const form = useForm<z.infer<typeof contestSchema>>({\n    resolver: zodResolver(contestSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      startTime: \"\",\n      duration: 120\n    }\n  });\n\n  // Fetch contests with real-time updates\n  const { data: contests, isLoading: isLoadingContests } = useQuery<Contest[]>({\n    queryKey: [\"/api/admin/contests\"],\n    retry: false,\n    staleTime: 0, // Consider data stale immediately for better real-time updates\n    refetchInterval: 3000, // Refetch every 3 seconds\n    refetchOnWindowFocus: true, // Refetch when window gains focus\n    refetchOnMount: true, // Refetch when component mounts\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/contests\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch contests\");\n      return response.json();\n    },\n  });\n\n\n\n  // Fetch users with real-time updates\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    retry: false,\n    staleTime: 1000,\n    refetchOnWindowFocus: true,\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      return response.json();\n    },\n  });\n\n  // Fetch participants with user data for the selected contest\n  const { data: participantsWithUserData, refetch: refetchParticipants } = useQuery({\n    queryKey: [\"/api/admin/contests\", selectedContest?.id, \"participants\"],\n    queryFn: async () => {\n      if (!selectedContest?.id) return [];\n      \n      console.log('[DEBUG] Fetching participants for contest:', selectedContest.id);\n      const response = await fetch(`/api/admin/contests/${selectedContest.id}/participants`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch participants\");\n      const data = await response.json();\n      console.log('[DEBUG] Fetched participants data:', data);\n      return data;\n    },\n    enabled: !!selectedContest?.id && isParticipantDialogOpen,\n    staleTime: 0, // Always fetch fresh data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  // Fetch contest submissions for all participants\n  const { data: contestSubmissions } = useQuery({\n    queryKey: [\"/api/contests\", selectedContest?.id, \"submissions\"],\n    queryFn: async () => {\n      if (!selectedContest?.id) return [];\n      \n      const response = await fetch(`/api/contests/${selectedContest.id}/submissions`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!selectedContest?.id && isParticipantDialogOpen,\n  });\n\n  // Create contest mutation with optimistic updates\n  const createContestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/admin/contests\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create contest\");\n      return response.json();\n    },\n    onMutate: async (newContest) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: [\"/api/admin/contests\"] });\n\n      // Snapshot the previous value\n      const previousContests = queryClient.getQueryData([\"/api/admin/contests\"]);\n\n      // Optimistically update to the new value\n      queryClient.setQueryData([\"/api/admin/contests\"], (old: any) => [...(old || []), { ...newContest, id: Date.now() }]);\n\n      // Return a context object with the snapshotted value\n      return { previousContests };\n    },\n    onError: (err, newContest, context) => {\n      // If the mutation fails, use the context returned from onMutate to roll back\n      queryClient.setQueryData([\"/api/admin/contests\"], context?.previousContests);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create contest: \" + err.message,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/contests\"] });\n    },\n    onSuccess: () => {\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Contest created successfully\",\n      });\n    },\n  });\n\n  // Delete contest mutation with optimistic updates\n  const deleteContestMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/admin/contests/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) throw new Error(\"Failed to delete contest\");\n    },\n    onMutate: async (deletedId) => {\n      await queryClient.cancelQueries({ queryKey: [\"/api/admin/contests\"] });\n      const previousContests = queryClient.getQueryData([\"/api/admin/contests\"]);\n      queryClient.setQueryData([\"/api/admin/contests\"], (old: any) => \n        old?.filter((contest: Contest) => contest.id !== deletedId)\n      );\n      return { previousContests };\n    },\n    onError: (err, deletedId, context) => {\n      queryClient.setQueryData([\"/api/admin/contests\"], context?.previousContests);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete contest: \" + err.message,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/contests\"] });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Contest deleted successfully\",\n      });\n    },\n  });\n\n  // Add participant mutation with optimistic updates\n  const addParticipantMutation = useMutation({\n    mutationFn: async ({ contestId, userId }: { contestId: string; userId: string }) => {\n      console.log('[DEBUG] Adding participant:', { contestId, userId });\n      \n      const response = await fetch(`/api/contests/${contestId}/register`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify({ userId: userId }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        if (response.status === 409) {\n          throw new Error(errorData.message || \"User is already enrolled in this contest\");\n        }\n        throw new Error(errorData.message || \"Failed to add participant\");\n      }\n      \n      const result = await response.json();\n      console.log('[DEBUG] Participant added successfully:', result);\n      return result;\n    },\n    onMutate: async ({ contestId, userId }) => {\n      console.log('[DEBUG] onMutate - Adding participant optimistically');\n      \n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: [\"/api/admin/contests\"] });\n      await queryClient.cancelQueries({ queryKey: [\"/api/admin/contests\", contestId, \"participants\"] });\n      \n      // Snapshot the previous values\n      const previousContests = queryClient.getQueryData([\"/api/admin/contests\"]);\n      const previousParticipants = queryClient.getQueryData([\"/api/admin/contests\", contestId, \"participants\"]);\n      \n      // Find the user data for optimistic update\n      const user = users?.find(u => u.id === userId);\n      console.log('[DEBUG] Found user for optimistic update:', user);\n      \n      // Check if user is already enrolled to prevent optimistic update\n      const isAlreadyEnrolled = (participantsWithUserData ?? selectedContest?.participants ?? [])?.some(\n        (p: any) => p.userId === userId\n      );\n      \n      if (isAlreadyEnrolled) {\n        console.log('[DEBUG] User already enrolled, skipping optimistic update');\n        return { previousContests, previousParticipants, skipOptimistic: true };\n      }\n      \n      // Optimistically update the cache\n      queryClient.setQueryData([\"/api/admin/contests\"], (old: any) => \n        old?.map((contest: Contest) => {\n          if (contest.id.toString() === contestId) {\n            console.log('[DEBUG] Updating contest in cache:', contest.id);\n            \n            const newParticipant = {\n              id: `temp_${Date.now()}`,\n              userId,\n              contestId,\n              registrationTime: new Date().toISOString(),\n              status: 'registered' as const,\n              user: user ? {\n                id: user.id,\n                firstName: user.firstName || '',\n                lastName: user.lastName || '',\n                email: user.email\n              } : null\n            };\n            \n            const updatedContest = {\n              ...contest,\n              participants: [...(contest.participants || []), newParticipant]\n            };\n            \n            console.log('[DEBUG] Updated contest participants:', updatedContest.participants?.length);\n            return updatedContest;\n          }\n          return contest;\n        })\n      );\n      \n      // Also update the participants query cache\n      queryClient.setQueryData([\"/api/admin/contests\", contestId, \"participants\"], (old: any[] | undefined) => {\n        const newParticipant = {\n          id: `temp_${Date.now()}`,\n          userId,\n          contestId,\n          registrationTime: new Date().toISOString(),\n          status: 'registered' as const,\n          user: user ? {\n            id: user.id,\n            firstName: user.firstName || '',\n            lastName: user.lastName || '',\n            email: user.email\n          } : null\n        };\n        return [...(old || []), newParticipant];\n      });\n      \n      return { previousContests, previousParticipants };\n    },\n    onError: (err, variables, context) => {\n      console.error('[DEBUG] onError - Rolling back optimistic update:', err);\n      \n      // Only rollback if we actually did an optimistic update\n      if (!context?.skipOptimistic) {\n        queryClient.setQueryData([\"/api/admin/contests\"], context?.previousContests);\n        queryClient.setQueryData([\"/api/admin/contests\", variables.contestId, \"participants\"], context?.previousParticipants);\n      }\n      \n      const errorMessage = err.message.includes(\"already registered\") || err.message.includes(\"already enrolled\")\n        ? `This user is already enrolled in the contest.`\n        : `Failed to add participant: ${err.message}`;\n        \n      toast({\n        title: \"Enrollment Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n    onSuccess: (data, { contestId, userId }) => {\n      console.log('[DEBUG] onSuccess - Participant added:', data);\n      \n      // Use the user data from the response if available, otherwise fallback to users list\n      const userName = data?.user ? \n        `${data.user.firstName || ''} ${data.user.lastName || ''}`.trim() || data.user.email :\n        users?.find(u => u.id === userId) ? \n          `${users.find(u => u.id === userId)?.firstName} ${users.find(u => u.id === userId)?.lastName}` : \n          \"User\";\n      \n      toast({\n        title: \"Success\",\n        description: `${userName} has been enrolled in the contest successfully`,\n      });\n      \n      // Force refresh the participants data to get the latest from the database\n      if (selectedContest) {\n        console.log('[DEBUG] Refreshing participants data after enrollment');\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/contests\", selectedContest.id, \"participants\"] });\n        queryClient.removeQueries({ queryKey: [\"/api/admin/contests\", selectedContest.id, \"participants\"] });\n        setTimeout(() => {\n          refetchParticipants();\n        }, 100); // Small delay to ensure cache is cleared\n      }\n    },\n    onSettled: () => {\n      console.log('[DEBUG] onSettled - Invalidating queries');\n      // Force immediate refetch to ensure UI is up to date\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/contests\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/admin/contests\"] });\n    },\n  });\n\n  // Remove participant mutation\n  const removeParticipantMutation = useMutation({\n    mutationFn: async ({ contestId, userId }: { contestId: string; userId: string }) => {\n      console.log('[DEBUG] Removing participant:', { contestId, userId });\n      const response = await fetch(`/api/contests/${contestId}/participants/${userId}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to remove participant\");\n      }\n      const result = await response.json();\n      console.log('[DEBUG] Participant removed successfully:', result);\n      return result;\n    },\n    onMutate: async ({ contestId, userId }) => {\n      console.log('[DEBUG] onMutate - Removing participant optimistically');\n      \n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: [\"/api/admin/contests\"] });\n      \n      // Snapshot the previous value\n      const previousContests = queryClient.getQueryData([\"/api/admin/contests\"]);\n      \n      // Optimistically update the cache\n      queryClient.setQueryData([\"/api/admin/contests\"], (old: any) => \n        old?.map((contest: Contest) => {\n          if (contest.id.toString() === contestId) {\n            console.log('[DEBUG] Removing participant from contest in cache:', contest.id);\n            \n            const updatedContest = {\n              ...contest,\n              participants: contest.participants?.filter(p => p.userId !== userId) || []\n            };\n            \n            console.log('[DEBUG] Updated contest participants after removal:', updatedContest.participants?.length);\n            return updatedContest;\n          }\n          return contest;\n        })\n      );\n      \n      return { previousContests };\n    },\n    onError: (err, variables, context) => {\n      console.error('[DEBUG] onError - Rolling back optimistic update:', err);\n      queryClient.setQueryData([\"/api/admin/contests\"], context?.previousContests);\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove participant: \" + err.message,\n        variant: \"destructive\",\n      });\n    },\n    onSuccess: () => {\n      console.log('[DEBUG] onSuccess - Participant removed');\n      toast({\n        title: \"Success\",\n        description: \"Participant removed from contest successfully\",\n      });\n      \n      // Force refresh the participants data to get the latest from the database\n      if (selectedContest) {\n        console.log('[DEBUG] Refreshing participants data after removal');\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/contests\", selectedContest.id, \"participants\"] });\n        queryClient.removeQueries({ queryKey: [\"/api/admin/contests\", selectedContest.id, \"participants\"] });\n        setTimeout(() => {\n          refetchParticipants();\n        }, 100); // Small delay to ensure cache is cleared\n      }\n    },\n    onSettled: () => {\n      console.log('[DEBUG] onSettled - Invalidating queries');\n      // Force immediate refetch to ensure UI is up to date\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/contests\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/admin/contests\"] });\n    },\n  });\n\n  // Update contest mutation with optimistic updates\n  const updateContestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      console.log('[DEBUG] updateContestMutation called with data:', data);\n      const response = await fetch(`/api/admin/contests/${editingContest?.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('[DEBUG] Update contest failed:', response.status, errorText);\n        throw new Error(`Failed to update contest: ${response.status} ${errorText}`);\n      }\n      const result = await response.json();\n      console.log('[DEBUG] Update contest success:', result);\n      return result;\n    },\n    onMutate: async (updatedContest) => {\n      console.log('[DEBUG] updateContestMutation onMutate:', updatedContest);\n      await queryClient.cancelQueries({ queryKey: [\"/api/admin/contests\"] });\n      const previousContests = queryClient.getQueryData([\"/api/admin/contests\"]);\n      \n      // Optimistically update the contest\n      queryClient.setQueryData([\"/api/admin/contests\"], (old: any) => \n        old?.map((contest: Contest) => \n          contest.id === editingContest?.id \n            ? { ...contest, ...updatedContest }\n            : contest\n        )\n      );\n      \n      return { previousContests };\n    },\n    onError: (err, updatedContest, context) => {\n      console.error('[DEBUG] updateContestMutation onError:', err);\n      queryClient.setQueryData([\"/api/admin/contests\"], context?.previousContests);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update contest: \" + err.message,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      console.log('[DEBUG] updateContestMutation onSettled');\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/contests\"] });\n    },\n    onSuccess: () => {\n      console.log('[DEBUG] updateContestMutation onSuccess');\n      setIsCreateDialogOpen(false);\n      setEditingContest(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Contest updated successfully\",\n      });\n    },\n  });\n\n  // QR Code generation\n  const generateQrCode = async (contest: Contest) => {\n    try {\n      setSelectedContest(contest); // Set the selected contest for the dialog\n      console.log('[DEBUG] Generating QR code for contest:', contest.id);\n      \n      const response = await fetch(`/api/contests/${contest.id}/qr-code`, {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to generate QR code');\n      }\n      \n      const data = await response.json();\n      console.log('[DEBUG] QR code generated successfully:', data);\n      setQrCodeData(data.qrCode);\n      setIsQrDialogOpen(true);\n    } catch (error) {\n      console.error('[DEBUG] Error generating QR code:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to generate QR code for enrollment',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  // Copy enrollment link to clipboard\n  const copyEnrollmentLink = (contest: Contest) => {\n    const enrollmentUrl = `${window.location.origin}/contest-enrollment/${contest.id}`;\n    navigator.clipboard.writeText(enrollmentUrl);\n    toastSuccess('Contest Link Copied!', `Enrollment link for \"${contest.title}\" has been copied to your clipboard`);\n  };\n\n  const onSubmit = (data: z.infer<typeof contestSchema>) => {\n    // Transform data to match backend schema\n    const transformedData = {\n      ...data,\n      startTime: new Date(data.startTime),\n      endTime: new Date(new Date(data.startTime).getTime() + data.duration * 60 * 1000), // Add duration in milliseconds\n      // Add any existing participants if editing\n      participants: editingContest?.participants || []\n    };\n    \n    console.log('[DEBUG] Submitting contest data:', transformedData);\n    \n    if (editingContest) {\n      updateContestMutation.mutate({\n        ...transformedData,\n        id: editingContest.id\n      });\n    } else {\n      createContestMutation.mutate(transformedData);\n    }\n  };\n\n\n\n  // Debug effect to monitor contest data changes\n  useEffect(() => {\n    if (contests && contests.length > 0) {\n      console.log('[DEBUG] Contests data updated:', contests.length, 'contests');\n      contests.forEach(contest => {\n        if (contest.participants && contest.participants.length > 0) {\n          console.log(`[DEBUG] Contest ${contest.id} has ${contest.participants.length} participants:`, \n            contest.participants.map((p: Participant) => ({ userId: (p as Participant).userId, userName: (p as Participant).user?.firstName }))\n          );\n        }\n      });\n    }\n  }, [contests]);\n\n  // Debug effect to monitor mutation states\n  useEffect(() => {\n    console.log('[DEBUG] addParticipantMutation state:', {\n      isPending: addParticipantMutation.isPending,\n      isSuccess: addParticipantMutation.isSuccess,\n      isError: addParticipantMutation.isError,\n      error: addParticipantMutation.error\n    });\n  }, [addParticipantMutation.isPending, addParticipantMutation.isSuccess, addParticipantMutation.isError]);\n\n  useEffect(() => {\n    console.log('[DEBUG] removeParticipantMutation state:', {\n      isPending: removeParticipantMutation.isPending,\n      isSuccess: removeParticipantMutation.isSuccess,\n      isError: removeParticipantMutation.isError,\n      error: removeParticipantMutation.error\n    });\n  }, [removeParticipantMutation.isPending, removeParticipantMutation.isSuccess, removeParticipantMutation.isError]);\n\n  // Effect to refetch data when participant dialog opens\n  useEffect(() => {\n    if (isParticipantDialogOpen && selectedContest) {\n      console.log('[DEBUG] Participant dialog opened, refetching data for contest:', selectedContest.id);\n      // Force refetch to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/contests\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/admin/contests\"] });\n    }\n  }, [isParticipantDialogOpen, selectedContest, queryClient]);\n\n  // Effect to monitor selected contest changes\n  useEffect(() => {\n    if (selectedContest) {\n      console.log('[DEBUG] Selected contest changed:', selectedContest.id);\n      // Find the latest contest data\n      const latestContest = contests?.find(c => c.id.toString() === selectedContest.id.toString());\n      if (latestContest && latestContest.participants) {\n        console.log('[DEBUG] Latest contest participants:', latestContest.participants.length);\n        // Update selected contest with latest data\n        setSelectedContest(latestContest);\n      }\n    }\n  }, [contests, selectedContest]);\n\n  const handleEdit = (contest: Contest) => {\n    console.log('[DEBUG] Editing contest:', contest);\n    \n    setEditingContest(contest);\n    form.reset({\n      title: contest.title,\n      description: contest.description,\n      startTime: new Date(contest.startTime).toISOString().slice(0, 16),\n      duration: contest.duration,\n    });\n    setIsCreateDialogOpen(true);\n  };\n\n  // Handle manage participants\n  const handleManageParticipants = (contest: Contest) => {\n    console.log('[DEBUG] Opening manage participants for contest:', contest.id);\n    console.log('[DEBUG] Current participants:', contest.participants?.length || 0);\n    setSelectedContest(contest);\n    setIsParticipantDialogOpen(true);\n    \n    // Force refetch of contests data to ensure fresh participant data\n    queryClient.invalidateQueries({ queryKey: [\"/api/admin/contests\"] });\n    queryClient.refetchQueries({ queryKey: [\"/api/admin/contests\"] });\n    \n    // Also refresh the participants data specifically\n    setTimeout(() => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/contests\", contest.id, \"participants\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/admin/contests\", contest.id, \"participants\"] });\n    }, 100);\n  };\n\n  const handleViewDetails = (contest: Contest) => {\n    setSelectedContest(contest);\n    setLocation(`/admin/contests/${contest.id}`);\n  };\n\n  const handleManageProblems = (contest: Contest) => {\n    setLocation(`/admin/contests/${contest.id}/problems`);\n  };\n\n  const filteredContests = contests?.filter(contest =>\n    contest.title.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  // Update selected contest when contests data changes\n  useEffect(() => {\n    if (selectedContest && contests) {\n      const updatedContest = contests.find(c => c.id === selectedContest.id);\n      if (updatedContest) {\n        console.log('[DEBUG] Updating selected contest with fresh data:', {\n          oldParticipantsCount: selectedContest.participants?.length || 0,\n          newParticipantsCount: updatedContest.participants?.length || 0\n        });\n        setSelectedContest(updatedContest);\n      }\n    }\n  }, [contests, selectedContest]);\n\n\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n            Contest Management\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Create and manage coding contests for your platform.\n          </p>\n        </div>\n        {/* Create/Edit Contest Dialog */}\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => {\n              // Reset form to empty fields first\n              setEditingContest(null);\n              form.reset({\n                title: \"\",\n                description: \"\",\n                startTime: \"\",\n                duration: 120\n              });\n              // Then open the dialog\n              setIsCreateDialogOpen(true);\n            }}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Contest\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{editingContest ? 'Edit Contest' : 'Create New Contest'}</DialogTitle>\n              <DialogDescription>\n                {editingContest \n                  ? 'Update the contest details and settings.' \n                  : 'Fill in the details to create a new coding contest for participants.'\n                }\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Form fields remain the same */}\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Enter contest title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Enter contest description\"\n                          className=\"min-h-[100px]\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"startTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Time</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"datetime-local\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"duration\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Duration (minutes)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            {...field}\n                            onChange={e => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setIsCreateDialogOpen(false);\n                      setEditingContest(null);\n                      form.reset();\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createContestMutation.isPending || updateContestMutation.isPending}>\n                    {createContestMutation.isPending || updateContestMutation.isPending \n                      ? 'Saving...' \n                      : editingContest \n                        ? 'Update Contest' \n                        : 'Create Contest'\n                    }\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n\n\n      {/* Participant Management Dialog */}\n      <Dialog open={isParticipantDialogOpen} onOpenChange={setIsParticipantDialogOpen}>\n        <DialogContent className=\"max-w-7xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Enrolled Students ({(participantsWithUserData ?? selectedContest?.participants ?? []).length})</DialogTitle>\n            <DialogDescription>\n              Manage the students enrolled in this contest.\n            </DialogDescription>\n          </DialogHeader>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-2 mb-6\">\n            <Button variant=\"outline\" onClick={() => {\n              if (selectedContest) {\n                generateQrCode(selectedContest);\n              }\n            }}>\n              <QrCode className=\"h-4 w-4 mr-2\" />\n              QR Code\n            </Button>\n            \n          </div>\n          {/* Tabs for Enrolled and Add Students */}\n          <Tabs value={participantsTab} onValueChange={(v) => setParticipantsTab(v as any)}>\n            <TabsList>\n              <TabsTrigger value=\"enrolled\">Enrolled</TabsTrigger>\n              <TabsTrigger value=\"add\">Add Students</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"add\">\n              <Card className=\"mb-6\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between  space-x-2\">\n                   <div className=\"flex items-center space-x-2\"> <UserPlus className=\"h-5 w-5\" />\n                    <span>Enroll New Students</span></div>\n                    <div className=\"flex justify-end\">\n                      <Button\n                        disabled={selectedUserIds.size === 0 || addParticipantMutation.isPending || !selectedContest}\n                        onClick={async () => {\n                          if (!selectedContest) return;\n                          for (const uid of Array.from(selectedUserIds)) {\n                            try {\n                              await addParticipantMutation.mutateAsync({ contestId: selectedContest.id.toString(), userId: uid });\n                            } catch (e) {\n                              // continue enrolling others\n                            }\n                          }\n                          setSelectedUserIds(new Set());\n                          setParticipantsTab('enrolled');\n                        }}\n                      >\n                        {addParticipantMutation.isPending ? 'Enrolling...' : `Enroll Selected (${selectedUserIds.size})`}\n                      </Button>\n                    </div>\n                  </CardTitle>\n                  <CardDescription>\n                    Select one or more students to enroll in this contest\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium\">Search Students</label>\n                      <div className=\"relative\">\n                        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          placeholder=\"Search by name or email...\"\n                          value={searchTerm}\n                          onChange={(e) => setSearchTerm(e.target.value)}\n                          className=\"pl-10\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2 max-h-[260px] overflow-y-auto\">\n                      {users?.filter(user => {\n                        const q = searchTerm.toLowerCase();\n                        const enrolled = (participantsWithUserData ?? selectedContest?.participants ?? [])?.some((p: any) => p.userId === user.id);\n                        return !enrolled && (\n                          user.email?.toLowerCase().includes(q) ||\n                          user.firstName?.toLowerCase().includes(q) ||\n                          user.lastName?.toLowerCase().includes(q)\n                        );\n                      }).map((user) => {\n                        const isSelected = selectedUserIds.has(user.id);\n                        return (\n                          <label key={user.id} className={`p-3 border rounded-lg flex items-center justify-between ${isSelected ? 'bg-blue-50 border-blue-200' : 'hover:bg-gray-50'}`}>\n                            <div className=\"flex items-center gap-3\">\n                              <input\n                                type=\"checkbox\"\n                                checked={isSelected}\n                                onChange={(e) => {\n                                  setSelectedUserIds(prev => {\n                                    const next = new Set(prev);\n                                    if (e.target.checked) next.add(user.id); else next.delete(user.id);\n                                    return next;\n                                  });\n                                }}\n                              />\n                              <div>\n                                <div className=\"font-medium\">{user.firstName} {user.lastName}</div>\n                                <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                              </div>\n                            </div>\n                          </label>\n                        );\n                      })}\n                      {Array.isArray(users) && users.filter(u => !(participantsWithUserData ?? selectedContest?.participants ?? [])?.some((p: any) => p.userId === u.id)).length === 0 && (\n                        <div className=\"text-sm text-muted-foreground\">All users are already enrolled.</div>\n                      )}\n                    </div>\n\n                   \n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"enrolled\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  {(() => {\n                    const participants = participantsWithUserData ?? selectedContest?.participants ?? [];\n                    console.log('[DEBUG] Rendering participants section:', {\n                      selectedContestParticipants: selectedContest?.participants?.length || 0,\n                      participantsWithUserData: participantsWithUserData?.length || 0,\n                      finalParticipants: participants.length || 0,\n                      participants: participants.map((p: any) => ({ id: p.id, userId: p.userId, name: p.user?.firstName }))\n                    });\n                    return participants.length === 0;\n                  })() ? (\n                <div className=\"text-center py-8\">\n                  <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Students Yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Start by enrolling your first student.\n                  </p>\n                </div>\n                  ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Enrolled At</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                                        {(participantsWithUserData ?? selectedContest?.participants ?? [])?.map((participant: any) => {\n                      // Calculate progress and success rate from actual contest submissions data\n                      const participantSubmissions = contestSubmissions?.filter((s: any) => s.userId === participant.userId) || [];\n                      const totalSubmissions = participantSubmissions.length;\n                      const correctSubmissions = participantSubmissions.filter((s: any) => \n                        s.status === 'accepted' || s.status === 'Accepted' || s.score === 100\n                      ).length;\n                      const progress = selectedContest?.problems?.length ? \n                        Math.round((correctSubmissions / selectedContest.problems.length) * 100) : 0;\n                      const successRate = totalSubmissions > 0 ? Math.round((correctSubmissions / totalSubmissions) * 100) : 0;\n                      \n                      return (\n                        <TableRow key={`participant-${participant.id}-${participant.userId}`}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">\n                                {participant.user ? \n                                  `${participant.user.firstName || ''} ${participant.user.lastName || ''}`.trim() || 'Unknown User' : \n                                  `User ID: ${participant.userId}`\n                                }\n                              </div>\n                              {participant.user?.email && (\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {participant.user.email}\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                          \n                          <TableCell className=\"text-sm text-muted-foreground\">\n                            {new Date(participant.registrationTime).toLocaleDateString('en-US', {\n                              year: 'numeric',\n                              month: 'short',\n                              day: 'numeric',\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  // Edit functionality would go here\n                                  toast({\n                                    title: \"Edit Student\",\n                                    description: \"Edit functionality coming soon\",\n                                  });\n                                }}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (selectedContest) {\n                                    removeParticipantMutation.mutate({\n                                      contestId: selectedContest.id.toString(),\n                                      userId: participant.userId\n                                    });\n                                  }\n                                }}\n                                disabled={removeParticipantMutation.isPending}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n        </DialogContent>\n      </Dialog>\n\n      {/* QR Code Dialog */}\n      <Dialog open={isQrDialogOpen} onOpenChange={setIsQrDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Contest Enrollment QR Code</DialogTitle>\n            <DialogDescription>\n              Scan this QR code or use the enrollment link to join the contest: {selectedContest?.title}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex flex-col items-center space-y-4\">\n            {qrCodeData ? (\n              <>\n                <div className=\"p-4 bg-white rounded-lg border\">\n                  <img\n                    src={qrCodeData}\n                    alt={`QR Code for enrolling in contest: ${selectedContest?.title}`}\n                    className=\"w-48 h-48\"\n                  />\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Contest: {selectedContest?.title}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Enrollment URL: {window.location.origin}/contest-enrollment/{selectedContest?.id}\n                  </p>\n                </div>\n              </>\n            ) : (\n              <div className=\"flex items-center justify-center w-48 h-48 bg-muted rounded-lg\">\n                <span className=\"text-muted-foreground\">Loading QR Code...</span>\n              </div>\n            )}\n          </div>\n          <DialogFooter className=\"sm:justify-start\">\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={() => selectedContest && copyEnrollmentLink(selectedContest)}\n              aria-label={`Copy enrollment link for ${selectedContest?.title}`}\n            >\n              Copy Link\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Search className=\"h-5 w-5\" />\n            <span>Search Contests</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Input\n            placeholder=\"Search contests...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </CardContent>\n      </Card>\n\n      {isLoadingContests ? (\n        <div className=\"grid gap-4\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-4\"></div>\n                <div className=\"flex space-x-2\">\n                  <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-32\"></div>\n                  <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-24\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredContests.map((contest) => (\n            <Card key={contest.id} className=\"flex flex-col hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6 flex flex-col gap-4\">\n                {/* Header */}\n                {(() => {\n                  const now = new Date();\n                  const rawStart: any = (contest as any).startTime || (contest as any).createdAt;\n                  const start = rawStart ? new Date(rawStart) : new Date(NaN);\n                  const rawEnd: any = (contest as any).endTime;\n                  const durationMinutes: number = (contest as any).duration ?? 0;\n                  const end = rawEnd ? new Date(rawEnd) : (isValid(start) ? new Date(start.getTime() + durationMinutes * 60000) : new Date(NaN));\n                  let status: 'Upcoming' | 'Active' | 'Ended' = 'Ended';\n                  if (isValid(start) && now < start) status = 'Upcoming';\n                  else if (isValid(end) && now <= end) status = 'Active';\n                  const statusClass = status === 'Active' ? 'bg-green-100 text-green-700 border-green-200' : status === 'Upcoming' ? 'bg-blue-100 text-blue-700 border-blue-200' : 'bg-gray-100 text-gray-700 border-gray-200';\n                  return (\n                    <div className=\"flex items-start justify-between\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white line-clamp-1\">{contest.title}</h3>\n                      <span className={`px-2 py-0.5 text-xs rounded-full border ${statusClass}`}>{status}</span>\n                    </div>\n                  );\n                })()}\n\n                {/* Description */}\n                <p className=\"text-gray-600 dark:text-gray-400 text-sm line-clamp-2\">{contest.description}</p>\n\n                {/* Info Row */}\n                <div className=\"grid grid-cols-2 gap-3 text-sm text-gray-700 dark:text-gray-300\">\n                  <div className=\"flex items-center gap-2\"><List className=\"w-4 h-4 opacity-70\" />{contest.problems?.length || 0} problems</div>\n                  <div className=\"flex items-center gap-2\"><Clock className=\"w-4 h-4 opacity-70\" />{contest.duration} min</div>\n                  <div className=\"flex items-center gap-2\"><Users className=\"w-4 h-4 opacity-70\" />{(contest as any).participantCount ?? contest.participants?.length ?? 0} participants</div>\n                  {(() => {\n                    const rawStart: any = (contest as any).startTime || (contest as any).createdAt;\n                    const start = rawStart ? new Date(rawStart) : new Date(NaN);\n                    const text = isValid(start) ? format(start, \"PPp\") : 'N/A';\n                    return <div className=\"flex items-center gap-2\"><Calendar className=\"w-4 h-4 opacity-70\" />{text}</div>;\n                  })()}\n                </div>\n\n                {/* Primary action row */}\n                <div className=\"flex items-center gap-3\">\n                  <Button className=\"bg-green-600 hover:bg-green-700 text-white w-full\" onClick={() => setLocation(`/contests/${contest.id}/results`)}>\n                  <Award className=\"mr-2\" /> Leaderboard\n                  </Button>\n                  <Button variant=\"outline\" size=\"icon\" className=\"w-9 h-9\" onClick={() => handleEdit(contest)}>\n                    <Edit className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"icon\" className=\"w-9 h-9\" onClick={() => generateQrCode(contest)}>\n                    <QrCode className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"icon\" className=\"w-9 h-9\" onClick={() => copyEnrollmentLink(contest)}>\n                    <Copy className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"icon\" className=\"w-9 h-9 border-red-300 text-red-600 hover:bg-red-50\" onClick={() => { if (confirm(\"Are you sure you want to delete this contest?\")) { deleteContestMutation.mutate(contest.id); } }}>\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n\n                {/* Secondary full-width actions */}\n                <Button variant=\"secondary\" className=\"w-full justify-start bg-gray-50 hover:bg-gray-100 text-gray-800\" onClick={() => handleManageParticipants(contest)}>\n                  <Users className=\"w-4 h-4 mr-2\" /> Manage Enrollments for \"{contest.title}\"\n                </Button>\n                <Button variant=\"outline\" className=\"w-full justify-start border-amber-300 bg-amber-50 text-amber-800 hover:bg-amber-100\" onClick={() => handleManageProblems(contest)}>\n                  <Settings className=\"w-4 h-4 mr-2\" /> Isolated Problem Management\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {!isLoadingContests && filteredContests.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"text-gray-500 dark:text-gray-400\">\n              <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No contests found</h3>\n              <p>Try adjusting your search criteria or create a new contest.</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n} ","size_bytes":54038},"server/routes/submissions.ts":{"content":"import { Router } from 'express';\nimport { protect } from '../middleware/auth';\nimport { listSubmissions, createSubmission, deleteSubmission } from '../controllers/submissionsController';\n\nconst router = Router();\n\nrouter.get('/', protect as any, listSubmissions as any);\nrouter.post('/', protect as any, createSubmission as any);\nrouter.delete('/:id', protect as any, deleteSubmission as any);\n\nexport default router; ","size_bytes":419},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"test_files/test-problem-count.js":{"content":"const { MongoClient } = require('mongodb');\n\nasync function testProblemCount() {\n  const uri = 'mongodb://localhost:27017';\n  const client = new MongoClient(uri);\n\n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n\n    const db = client.db('codearena');\n    const problemSets = await db.collection('problemSets').find({}).toArray();\n\n    console.log(`Found ${problemSets.length} problem sets:`);\n\n    problemSets.forEach((problemSet, index) => {\n      const actualProblemCount = problemSet.problemInstances?.length || \n                                problemSet.problems?.length || \n                                problemSet.problemIds?.length || \n                                0;\n      \n      console.log(`\\n${index + 1}. ${problemSet.title} (ID: ${problemSet.id})`);\n      console.log(`   - Stored totalProblems: ${problemSet.totalProblems || 0}`);\n      console.log(`   - Actual problemInstances: ${problemSet.problemInstances?.length || 0}`);\n      console.log(`   - Actual problems array: ${problemSet.problems?.length || 0}`);\n      console.log(`   - Actual problemIds: ${problemSet.problemIds?.length || 0}`);\n      console.log(`   - Calculated total: ${actualProblemCount}`);\n      console.log(`   - Match: ${(problemSet.totalProblems || 0) === actualProblemCount ? '✅' : '❌'}`);\n    });\n\n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    await client.close();\n  }\n}\n\ntestProblemCount(); ","size_bytes":1454},"execution-system/queue/src/config.js":{"content":"const config = {\n  // Redis Configuration\n  redis: {\n    host: process.env.REDIS_HOST || 'localhost',\n    port: parseInt(process.env.REDIS_PORT) || 6379,\n    password: process.env.REDIS_PASSWORD || null,\n    db: parseInt(process.env.REDIS_DB) || 0,\n    maxRetriesPerRequest: 3,\n    retryDelayOnFailover: 100,\n    lazyConnect: true,\n    family: 4, // Force IPv4\n    keepAlive: true,\n    connectTimeout: 10000,\n    commandTimeout: 5000,\n    // Additional options to force IPv4\n    lookup: (hostname, options, callback) => {\n      // Force IPv4 resolution\n      require('dns').lookup(hostname, { family: 4 }, callback);\n    }\n  },\n\n  // Queue Configuration\n  queue: {\n    name: 'code-execution',\n    prefix: 'codearena',\n    defaultJobOptions: {\n      removeOnComplete: 100,\n      removeOnFail: 50,\n      attempts: 3,\n      backoff: {\n        type: 'exponential',\n        delay: 2000\n      }\n    },\n    settings: {\n      stalledInterval: 30 * 1000,\n      maxStalledCount: 1\n    }\n  },\n\n  // Worker Configuration\n  worker: {\n    concurrency: parseInt(process.env.WORKER_CONCURRENCY) || 5,\n    docker: {\n      socketPath: process.env.DOCKER_SOCKET_PATH || '/var/run/docker.sock',\n      timeout: 30000,\n      images: {\n        python: process.env.PYTHON_IMAGE || 'codearena/executor-python:latest',\n        javascript: process.env.JS_IMAGE || 'codearena/executor-javascript:latest',\n        c: process.env.C_IMAGE || 'codearena/executor-c:latest',\n        cpp: process.env.CPP_IMAGE || 'codearena/executor-cpp:latest',\n        java: process.env.JAVA_IMAGE || 'codearena/executor-java:latest'\n      },\n      limits: {\n        memory: process.env.CONTAINER_MEMORY_LIMIT || '128m',\n        cpus: process.env.CONTAINER_CPU_LIMIT || '0.5',\n        pids: parseInt(process.env.CONTAINER_PIDS_LIMIT) || 64,\n        ulimits: [\n          { name: 'nofile', soft: 1024, hard: 1024 },\n          { name: 'nproc', soft: 64, hard: 64 }\n        ]\n      }\n    }\n  },\n\n  // API Configuration\n  api: {\n    port: parseInt(process.env.API_PORT) || 3001,\n    cors: {\n      origin: process.env.CORS_ORIGIN || '*',\n      credentials: true\n    },\n    rateLimit: {\n      windowMs: 60 * 1000, // 1 minute\n      max: 100, // limit each IP to 100 requests per windowMs\n      standardHeaders: true,\n      legacyHeaders: false\n    },\n    timeout: parseInt(process.env.API_TIMEOUT) || 30000\n  },\n\n  // Execution Limits\n  execution: {\n    timeLimit: parseInt(process.env.TIME_LIMIT) || 10, // seconds\n    memoryLimit: process.env.MEMORY_LIMIT || '128m',\n    outputLimit: process.env.OUTPUT_LIMIT || '64k',\n    compileTimeLimit: parseInt(process.env.COMPILE_TIME_LIMIT) || 30, // seconds\n    maxCodeSize: parseInt(process.env.MAX_CODE_SIZE) || 64 * 1024, // 64KB\n    maxInputSize: parseInt(process.env.MAX_INPUT_SIZE) || 1024 // 1KB\n  },\n\n  // Logging Configuration\n  logging: {\n    level: process.env.LOG_LEVEL || 'info',\n    format: process.env.LOG_FORMAT || 'json',\n    file: process.env.LOG_FILE || null,\n    maxFiles: parseInt(process.env.LOG_MAX_FILES) || 5,\n    maxSize: process.env.LOG_MAX_SIZE || '10m'\n  },\n\n  // Health Check Configuration\n  health: {\n    port: parseInt(process.env.HEALTH_PORT) || 3002,\n    timeout: parseInt(process.env.HEALTH_TIMEOUT) || 5000\n  },\n\n  // Metrics Configuration\n  metrics: {\n    enabled: process.env.METRICS_ENABLED === 'true',\n    port: parseInt(process.env.METRICS_PORT) || 9090,\n    path: process.env.METRICS_PATH || '/metrics'\n  }\n};\n\nmodule.exports = config; ","size_bytes":3467},"execution-system/k8s/redis.yaml":{"content":"---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: redis-pvc\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/component: database\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 2Gi\n  storageClassName: fast-ssd # Adjust based on your cluster\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/component: database\n    app.kubernetes.io/version: \"7.0\"\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate # Single instance for simplicity\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: redis\n      app.kubernetes.io/component: database\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: redis\n        app.kubernetes.io/component: database\n        app.kubernetes.io/version: \"7.0\"\n    spec:\n      containers:\n      - name: redis\n        image: redis:7.0-alpine\n        ports:\n        - containerPort: 6379\n          name: redis\n        env:\n        - name: REDIS_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: execution-secrets\n              key: REDIS_PASSWORD\n              optional: true\n        command:\n        - redis-server\n        - --appendonly\n        - \"yes\"\n        - --save\n        - \"60 1000\"\n        # Uncomment below if using password authentication\n        # - --requirepass\n        # - $(REDIS_PASSWORD)\n        volumeMounts:\n        - name: redis-data\n          mountPath: /data\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n        livenessProbe:\n          tcpSocket:\n            port: 6379\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-data\n        persistentVolumeClaim:\n          claimName: redis-pvc\n      securityContext:\n        fsGroup: 999\n        runAsUser: 999\n        runAsNonRoot: true\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-service\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/component: database\nspec:\n  type: ClusterIP\n  ports:\n  - port: 6379\n    targetPort: redis\n    protocol: TCP\n    name: redis\n  selector:\n    app.kubernetes.io/name: redis\n    app.kubernetes.io/component: database ","size_bytes":2594},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"Documentations/ANALYTICS_INTEGRATION_GUIDE.md":{"content":"# Analytics Integration Guide\n\n## Overview\nThis guide explains how to integrate the real-time analytics update system with your submission components to automatically update the Overall Analytics when students solve problems.\n\n## How It Works\n\nThe system uses a global event system that automatically refreshes analytics when:\n1. **Submissions are made** - Updates progress and scores\n2. **Problems are completed** - Updates completion rates and status\n3. **User activity is tracked** - Updates last activity timestamps\n\n## Integration Steps\n\n### 1. Import the Analytics Events Hook\n\n```typescript\nimport { useAnalyticsEvents } from '@/hooks/useAnalyticsEvents';\n```\n\n### 2. Use the Hook in Your Component\n\n```typescript\nconst { triggerSubmissionUpdate, triggerProblemCompleted } = useAnalyticsEvents();\n```\n\n### 3. Trigger Events When Submissions Are Made\n\n```typescript\n// When a submission is created\nconst handleSubmission = async (submissionData) => {\n  try {\n    const response = await submitSolution(submissionData);\n    \n    if (response.success) {\n      // Trigger analytics update for this problem set\n      triggerSubmissionUpdate(problemSetId);\n      \n      // If the problem was completed successfully\n      if (response.status === 'accepted') {\n        triggerProblemCompleted(problemSetId, problemId);\n      }\n    }\n  } catch (error) {\n    console.error('Submission failed:', error);\n  }\n};\n```\n\n### 4. Trigger Events When Problems Are Completed\n\n```typescript\n// When a problem is marked as completed\nconst handleProblemCompletion = (problemSetId, problemId) => {\n  triggerProblemCompleted(problemSetId, problemId);\n};\n```\n\n### 5. Trigger Events for User Activity\n\n```typescript\n// When user starts working on a problem\nconst handleUserActivity = (problemSetId, userId) => {\n  triggerActivityUpdate(problemSetId, userId);\n};\n```\n\n## Example Integration\n\nHere's a complete example of how to integrate with a submission form:\n\n```typescript\nimport { useAnalyticsEvents } from '@/hooks/useAnalyticsEvents';\n\nconst SubmissionForm = ({ problemSetId, problemId }) => {\n  const { triggerSubmissionUpdate, triggerProblemCompleted } = useAnalyticsEvents();\n  \n  const handleSubmit = async (code, language) => {\n    try {\n      const response = await submitSolution({\n        problemSetId,\n        problemId,\n        code,\n        language\n      });\n      \n      if (response.success) {\n        // Always trigger submission update\n        triggerSubmissionUpdate(problemSetId);\n        \n        // If problem was solved, trigger completion event\n        if (response.status === 'accepted') {\n          triggerProblemCompleted(problemSetId, problemId);\n        }\n        \n        // Show success message\n        toast.success('Solution submitted successfully!');\n      }\n    } catch (error) {\n      toast.error('Submission failed: ' + error.message);\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      {/* Your form content */}\n    </form>\n  );\n};\n```\n\n## Automatic Updates\n\nOnce integrated, the Overall Analytics will automatically update:\n\n- **Every 2 seconds** - Background refresh for real-time feel\n- **On submission events** - Immediate update when submissions are made\n- **On problem completion** - Instant update when problems are solved\n- **On manual refresh** - When admin clicks the refresh button\n\n## Benefits\n\n✅ **Real-time Updates** - Analytics update automatically without page refresh  \n✅ **Immediate Feedback** - See student progress as it happens  \n✅ **No Manual Refresh** - System keeps itself up-to-date  \n✅ **Performance Optimized** - Only updates when needed  \n✅ **User Notifications** - Toast messages inform when updates occur  \n\n## Troubleshooting\n\n### Analytics Not Updating?\n1. Check that events are being triggered correctly\n2. Verify the problemSetId matches between components\n3. Ensure the analytics dialog is open (events only work when visible)\n\n### Performance Issues?\n1. Reduce the refresh interval (currently 2 seconds)\n2. Check browser console for errors\n3. Verify the event listeners are properly cleaned up\n\n## Support\n\nFor issues or questions about the analytics integration, check:\n1. Browser console for error messages\n2. Network tab for failed API calls\n3. React Query DevTools for query state ","size_bytes":4267},"execution-system/setup.sh":{"content":"#!/bin/bash\n\n# Create temp directory if it doesn't exist\nmkdir -p temp\n\n# Set permissions for temp directory (readable/writable by all users)\nchmod 777 temp\n\n# Build Docker images\ndocker-compose build\n\n# Start services\ndocker-compose up -d\n\necho \"Setup complete! The code execution system is ready.\" ","size_bytes":300},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/Layout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { NavigationHeader } from \"./NavigationHeader\";\nimport { Sidebar } from \"./Sidebar\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const { isLoading, isAuthenticated } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-300\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <>{children}</>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <NavigationHeader />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 overflow-auto\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1014},"client/src/pages/ProblemSetEnrollmentPage.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, Users, BookOpen, Clock, Loader2, AlertCircle, Target } from 'lucide-react';\nimport { useToast, toastSuccess, toastError, toastWarning, toastInfo } from '@/components/ui/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface ProblemSet {\n  id: string;\n  title: string;\n  description?: string;\n  category?: string;\n  difficulty?: string;\n  problemCount?: number;\n  enrollmentCount?: number;\n  isPublic: boolean;\n  allowDirectEnrollment?: boolean;\n}\n\nexport default function ProblemSetEnrollmentPage() {\n  const { problemSetId } = useParams<{ problemSetId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { user, isAuthenticated } = useAuth();\n  const [hasTriedAutoEnroll, setHasTriedAutoEnroll] = useState(false);\n\n  // Fetch problem set data\n  const { data: problemSet, isLoading: problemSetLoading, error: problemSetError } = useQuery({\n    queryKey: ['problem-set', problemSetId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/problem-sets/${problemSetId}`, {\n        headers: {\n          ...(token ? { 'Authorization': `Bearer ${token}` } : {})\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('Assignment not found');\n        }\n        if (response.status === 403) {\n          throw new Error('Access denied - please log in');\n        }\n        throw new Error('Failed to fetch assignment');\n      }\n      return response.json() as Promise<ProblemSet>;\n    },\n    enabled: !!problemSetId,\n    retry: false\n  });\n\n  // Check if user is already enrolled\n  const { data: enrollments } = useQuery({\n    queryKey: ['user-problem-set-enrollments'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n      \n      const response = await fetch('/api/users/me/problem-set-enrollments', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) return null;\n      return response.json();\n    },\n    retry: false\n  });\n\n  const isAlreadyEnrolled = enrollments?.some((enrollment: any) => \n    String(enrollment.problemSetId) === String(problemSetId || '')\n  );\n\n  // Handle enrollment button click - DISABLED for direct enrollment\n  const handleEnrollClick = () => {\n    toastWarning(\"Enrollment Not Allowed\", \"Direct enrollment is not permitted. Please contact your instructor for access to this assignment.\");\n  };\n\n  // Problem set enrollment mutation (only for authenticated users)\n  const enrollMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem('token');\n      \n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      // Use self-enroll endpoint, guarded by allowDirectEnrollment\n      const response = await fetch(`/api/problem-sets/${problemSetId}/self-enroll`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({}) // Self-enrollment\n      });\n      \n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Please log in to enroll in this assignment');\n        }\n        if (response.status === 409) {\n          // User already enrolled\n          return { alreadyEnrolled: true };\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to enroll in assignment');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data?.alreadyEnrolled) {\n        toastInfo('Already Enrolled', `You are already enrolled in ${problemSet?.title}`);\n      } else {\n        toastSuccess('Enrollment Successful!', `You have been enrolled in ${problemSet?.title}`);\n      }\n      // Always redirect to assignment page - NEVER to dashboard\n      window.location.href = `/problem-sets/${problemSetId}`;\n    },\n    onError: (error: Error) => {\n      if (error.message.includes('log in') || error.message.includes('Authentication required')) {\n        // Redirect to login page with return URL\n        window.location.href = `/login?returnTo=/enroll-problem-set/${problemSetId}`;\n      } else {\n        toastError('Enrollment Failed', error.message);\n      }\n    }\n  });\n\n  // Check if user is already enrolled and redirect them to assignment page\n  useEffect(() => {\n    if (isAuthenticated && user && problemSetId && isAlreadyEnrolled && !hasTriedAutoEnroll) {\n      console.log('[DEBUG] User already enrolled, redirecting to assignment page...');\n      setHasTriedAutoEnroll(true);\n      window.location.href = `/problem-sets/${problemSetId}`;\n    }\n  }, [isAuthenticated, user, problemSetId, isAlreadyEnrolled, hasTriedAutoEnroll]);\n\n  // DO NOT redirect unauthenticated users immediately  \n  // Let them see the assignment details first, then redirect when they click \"Enroll Now\"\n\n  // Show loading states\n  if (problemSetLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>Loading assignment information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show enrollment loading only when user clicks \"Enroll in Assignment\" button\n  if (enrollMutation.isPending) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mb-4\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-purple-600 dark:text-purple-400\" />\n          </div>\n          <h2 className=\"text-xl font-semibold mb-2\">Enrolling you in the assignment...</h2>\n          <p className=\"text-muted-foreground\">Please wait while we complete your enrollment.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (problemSetError || !problemSet) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-destructive\" />\n              <h1 className=\"text-xl font-bold mb-2\">Assignment Not Found</h1>\n              <p className=\"text-muted-foreground mb-4\">\n                The assignment you're trying to access doesn't exist or has been removed.\n              </p>\n              <Button onClick={() => setLocation('/problem-sets')}>\n                Browse Assignments\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isAlreadyEnrolled) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <CheckCircle className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\n              <h1 className=\"text-xl font-bold mb-2\">Already Enrolled</h1>\n              <p className=\"text-muted-foreground mb-4\">\n                You are already enrolled in this assignment.\n              </p>\n              <Button onClick={() => setLocation(`/problem-sets/${problemSetId}`)}>\n                Go to Assignment\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-2xl mx-auto\">\n          <Card className=\"shadow-xl border-0\">\n            <CardHeader className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-16 h-16 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center\">\n                <Target className=\"h-8 w-8 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-2xl mb-2\">{problemSet.title}</CardTitle>\n                <CardDescription className=\"text-lg\">\n                  {problemSet.description || 'No description available'}\n                </CardDescription>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-6\">\n              {/* Assignment Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm text-muted-foreground\">\n                    {problemSet.problemCount || 'Multiple'} Problems\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm text-muted-foreground\">\n                    {problemSet.enrollmentCount || 0} Enrolled\n                  </span>\n                </div>\n              </div>\n\n              {/* Badges */}\n              <div className=\"flex flex-wrap gap-2\">\n                {problemSet.difficulty && (\n                  <Badge variant=\"outline\">\n                    {problemSet.difficulty}\n                  </Badge>\n                )}\n                {problemSet.category && (\n                  <Badge variant=\"outline\">\n                    {problemSet.category}\n                  </Badge>\n                )}\n                {problemSet.isPublic && (\n                  <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                    Public\n                  </Badge>\n                )}\n              </div>\n\n              {/* Enrollment Action */}\n              {problemSet.allowDirectEnrollment ? (\n                <div className=\"space-y-4\">\n                  <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                    <h3 className=\"font-semibold text-green-800 dark:text-green-200 mb-2\">\n                      Enroll in this Assignment\n                    </h3>\n                    <p className=\"text-green-700 dark:text-green-300 text-sm mb-4\">\n                      Click the button below to enroll. You must be logged in.\n                    </p>\n                    <Button\n                      onClick={() => enrollMutation.mutate()}\n                      size=\"lg\"\n                      className=\"w-full\"\n                    >\n                      Enroll Now\n                    </Button>\n                  </div>\n                  <div className=\"text-center\">\n                    <Button variant=\"ghost\" onClick={() => setLocation('/problem-sets')}>\n                      Browse Other Assignments\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n                    <AlertCircle className=\"h-8 w-8 mx-auto mb-2 text-yellow-600 dark:text-yellow-400\" />\n                    <h3 className=\"font-semibold text-yellow-800 dark:text-yellow-200 mb-2\">\n                      Enrollment Not Available\n                    </h3>\n                    <p className=\"text-yellow-700 dark:text-yellow-300 text-sm mb-4\">\n                      Direct enrollment is not permitted for this assignment. Please contact your instructor for access.\n                    </p>\n                    <Button\n                      onClick={handleEnrollClick}\n                      variant=\"outline\"\n                      size=\"lg\"\n                      className=\"w-full border-yellow-300 text-yellow-700 hover:bg-yellow-100\"\n                    >\n                      <AlertCircle className=\"mr-2 h-4 w-4\" />\n                      Contact Instructor\n                    </Button>\n                  </div>\n                  \n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12829},"server/viteIntegration.ts":{"content":"// viteIntegration.ts\nimport express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { type Server } from \"http\";\nimport { nanoid } from \"nanoid\";\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  console.warn('[WARN] Vite dev server is disabled in the server package. Start the client separately with: npm run dev (repo root)');\n  return; // Run API-only in development\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(process.cwd(), \"dist/public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  // Only serve static assets (CSS, JS, images, etc.) - NOT the client application\n  app.use(express.static(distPath, {\n    // Only serve files that exist, don't fall back to index.html\n    fallthrough: false\n  }));\n\n  // Remove the catch-all route that was serving index.html\n  // The server should only handle API routes, not client routes\n} ","size_bytes":1320},"server/shared-schema.ts":{"content":"import { z } from \"zod\";\n\n// MongoDB-compatible schemas using Zod for validation\nexport const insertUserSchema = z.object({\n  id: z.string(),\n  email: z.string().email().optional(),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  profileImageUrl: z.string().url().optional(),\n  role: z.string().default(\"student\"),\n});\n\nexport const testCaseSchema = z.object({\n  input: z.string(),\n  expectedOutput: z.string(),\n  explanation: z.string().optional(),\n  isHidden: z.boolean().default(false),\n  timeLimit: z.number().optional(),\n  memoryLimit: z.number().optional(),\n});\n\nexport const starterCodeSchema = z.object({\n  python: z.string().optional(),\n  javascript: z.string().optional(),\n  java: z.string().optional(),\n  cpp: z.string().optional(),\n  c: z.string().optional(),\n});\n\nexport const exampleSchema = z.object({\n  input: z.string(),\n  output: z.string(),\n  explanation: z.string().optional(),\n});\n\nexport const insertProblemSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n  tags: z.array(z.string()).optional(),\n  constraints: z.string().optional(),\n  inputFormat: z.string(),\n  outputFormat: z.string(),\n  examples: z.array(exampleSchema).min(1),\n  testCases: z.array(testCaseSchema).min(1),\n  timeLimit: z.number().default(10000), // milliseconds\n  memoryLimit: z.number().default(1024), // MB\n  starterCode: starterCodeSchema,\n  isPublic: z.boolean().default(true),\n  createdBy: z.string().optional(),\n  solutionCode: starterCodeSchema.optional(),\n  notes: z.string().optional(), // Admin notes about the problem\n  difficulty_rating: z.number().min(1).max(5).optional(), // More granular difficulty rating\n});\n\n// Enhanced submission schema for contests\nexport const insertSubmissionSchema = z.object({\n  problemId: z.number(),\n  userId: z.string(),\n  code: z.string(),\n  language: z.string(),\n  status: z.string(),\n  runtime: z.number().optional(),\n  memory: z.number().optional(),\n  score: z.string().optional(),\n  feedback: z.string().optional(),\n  \n  // Contest-specific fields\n  contestId: z.string().optional(), // for contest submissions\n  contestProblemId: z.string().optional(), // contest problem instance ID\n  points: z.number().optional(), // points earned\n  submissionTime: z.date().default(() => new Date()),\n  penalty: z.number().default(0), // penalty points\n  isContestSubmission: z.boolean().default(false),\n});\n\n// Contest participation tracking\nexport const contestParticipantSchema = z.object({\n  contestId: z.string(),\n  userId: z.string(),\n  registrationTime: z.date().default(() => new Date()),\n  startTime: z.date().optional(), // when user started the contest\n  endTime: z.date().optional(), // when user finished/left the contest\n  totalScore: z.number().default(0),\n  totalPenalty: z.number().default(0),\n  rank: z.number().optional(),\n  submissions: z.array(z.string()).default([]), // submission IDs\n  problemsAttempted: z.array(z.string()).default([]), // problem IDs attempted\n  problemsSolved: z.array(z.string()).default([]), // problem IDs solved\n  isDisqualified: z.boolean().default(false),\n  disqualificationReason: z.string().optional(),\n  contestEndMethod: z.enum(['manually_ended', 'time_expired']).nullable().optional(),\n});\n\n// Contest Q&A system\nexport const contestQuestionSchema = z.object({\n  id: z.string(),\n  contestId: z.string(),\n  userId: z.string(),\n  problemId: z.string().optional(), // specific problem question\n  question: z.string(),\n  answer: z.string().optional(),\n  isPublic: z.boolean().default(false), // if answer should be visible to all\n  timestamp: z.date().default(() => new Date()),\n  answeredBy: z.string().optional(), // admin who answered\n  answeredAt: z.date().optional(),\n  status: z.enum([\"pending\", \"answered\", \"rejected\"]).default(\"pending\"),\n});\n\n// Contest analytics and reporting\nexport const contestAnalyticsSchema = z.object({\n  contestId: z.string(),\n  totalParticipants: z.number().default(0),\n  totalSubmissions: z.number().default(0),\n  problemStatistics: z.array(z.object({\n    problemId: z.string(),\n    totalAttempts: z.number(),\n    successfulSolutions: z.number(),\n    averageAttempts: z.number(),\n    averageTime: z.number(), // in minutes\n    mostFailedTestCase: z.string().optional(),\n  })).default([]),\n  participantEngagement: z.object({\n    averageTimeSpent: z.number(), // in minutes\n    peakParticipationTime: z.string().optional(),\n    dropoffRate: z.number(), // percentage of users who left early\n  }).optional(),\n  generatedAt: z.date().default(() => new Date()),\n});\n\n// Contest problem with isolated modifications\nexport const contestProblemSchema = z.object({\n  id: z.string(), // unique contest problem ID\n  originalProblemId: z.number(), // reference to base problem\n  title: z.string().optional(), // override title\n  description: z.string().optional(), // override description\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]).optional(),\n  points: z.number().default(100), // custom points for this contest\n  \n  // Contest-specific overrides\n  customTestCases: z.array(testCaseSchema).optional(),\n  customExamples: z.array(exampleSchema).optional(),\n  customStarterCode: starterCodeSchema.optional(),\n  timeLimit: z.number().optional(), // override time limit\n  memoryLimit: z.number().optional(), // override memory limit\n  constraints: z.string().optional(),\n  inputFormat: z.string().optional(),\n  outputFormat: z.string().optional(),\n  \n  order: z.number().default(0), // position in contest\n  maxSubmissions: z.number().optional(), // limit attempts\n  partialScoring: z.boolean().default(false), // allow partial credit\n});\n\n// Enhanced contest schema with comprehensive features\nexport const insertContestSchema = z.object({\n  // Basic Information\n  title: z.string().min(1, \"Contest title is required\"),\n  description: z.string().optional(),\n  \n  // Timing & Duration\n  startTime: z.date(),\n  endTime: z.date(),\n  duration: z.number().optional(), // contest duration in minutes\n  timeZone: z.string().default(\"UTC\"),\n  \n  // Contest Type & Configuration\n  type: z.enum([\"coding\", \"algorithm\", \"competitive\"]).default(\"coding\"),\n  visibility: z.enum([\"public\", \"private\", \"unlisted\"]).default(\"public\"),\n  accessControl: z.object({\n    isPasswordProtected: z.boolean().default(false),\n    password: z.string().optional(),\n    inviteOnly: z.boolean().default(false),\n    maxParticipants: z.number().optional(),\n  }).default({}),\n  \n  // Problems & Scoring\n  problems: z.array(contestProblemSchema).default([]),\n  scoringMethod: z.enum([\"maximum\", \"time_based\", \"partial\", \"acm_icpc\"]).default(\"maximum\"),\n  tieBreakingRules: z.array(z.enum([\"time\", \"submissions\", \"last_accepted\"])).default([\"time\"]),\n  \n  // Penalties & Rules\n  wrongSubmissionPenalty: z.number().default(0), // penalty per wrong submission\n  timePenalty: z.boolean().default(false), // penalty based on submission time\n  freezeLeaderboard: z.boolean().default(false),\n  freezeTime: z.number().optional(), // minutes before end to freeze leaderboard\n  \n  // Security & Anti-Cheating\n  securitySettings: z.object({\n    disableInspect: z.boolean().default(true),\n    disableCopyPaste: z.boolean().default(true),\n    disableRightClick: z.boolean().default(true),\n    disableExtensions: z.boolean().default(true),\n    enablePlagiarismDetection: z.boolean().default(true),\n    allowedLanguages: z.array(z.string()).default([\"python\", \"javascript\", \"cpp\", \"java\", \"c\"]),\n  }).default({}),\n  \n  // Participant Management\n  participants: z.array(z.string()).default([]),\n  registrationOpen: z.boolean().default(true),\n  registrationDeadline: z.date().optional(),\n  allowLateRegistration: z.boolean().default(false),\n  \n  // Communication\n  announcements: z.array(z.object({\n    id: z.string(),\n    message: z.string(),\n    timestamp: z.date(),\n    priority: z.enum([\"low\", \"medium\", \"high\"]).default(\"medium\"),\n    isGlobal: z.boolean().default(true), // visible to all participants\n  })).default([]),\n  enableQA: z.boolean().default(true),\n  \n  // Metadata\n  createdBy: z.string().optional(),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n  status: z.enum([\"draft\", \"published\", \"active\", \"ended\", \"cancelled\"]).default(\"draft\"),\n  \n  // Rewards & Recognition\n  prizePool: z.string().optional(),\n  certificates: z.boolean().default(false),\n  \n  // Analytics\n  enableAnalytics: z.boolean().default(true),\n  allowReplay: z.boolean().default(true), // allow reviewing past contest\n});\n\n// Contest leaderboard entry\nexport const contestLeaderboardEntrySchema = z.object({\n  contestId: z.string(),\n  userId: z.string(),\n  username: z.string(),\n  rank: z.number(),\n  totalScore: z.number(),\n  totalPenalty: z.number(),\n  problemsSolved: z.number(),\n  lastSubmissionTime: z.date().optional(),\n  contestEndMethod: z.enum(['manually_ended', 'time_expired']).nullable().optional(),\n  submissions: z.array(z.object({\n    problemId: z.string(),\n    points: z.number(),\n    attempts: z.number(),\n    timeToSolve: z.number().optional(), // minutes from contest start\n    penalty: z.number().default(0),\n  })).default([]),\n});\n\nexport const insertCourseSchema = z.object({\n  title: z.string().min(1, \"Course title is required\"),\n  description: z.string().optional(),\n  isPublic: z.boolean().default(true),\n  enableMarkComplete: z.boolean().default(true),\n  category: z.string().optional(),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced']).default('beginner'),\n  estimatedHours: z.number().min(1).default(1),\n  prerequisites: z.array(z.string()).default([]),\n  learningObjectives: z.array(z.string()).default([]),\n  modules: z.array(z.object({\n    title: z.string().min(1, \"Module title is required\"),\n    description: z.string(),\n    order: z.number(),\n    textContent: z.string().optional(),\n    videoUrl: z.string().optional(),\n    codeExample: z.string().optional(),\n    language: z.string().optional(),\n    expectedOutput: z.string().optional(),\n  })).default([]),\n  tags: z.array(z.string()).default([]),\n  problems: z.array(z.number()).optional(),\n  enrolledUsers: z.array(z.string()).optional(),\n  createdBy: z.string().optional(),\n  rating: z.number().min(0).max(5).optional(),\n  enrollmentCount: z.number().default(0),\n  completionRate: z.number().min(0).max(100).default(0),\n});\n\nexport const insertCourseModuleSchema = z.object({\n  courseId: z.number(),\n  title: z.string().min(1, \"Module title is required\"),\n  description: z.string().optional(),\n  order: z.number().min(0, \"Order must be non-negative\"),\n  textContent: z.string().optional(),\n  videoUrl: z.string().url().optional(),\n  codeExample: z.string().optional(),\n  language: z.string().optional(),\n  expectedOutput: z.string().optional(),\n});\n\nexport const insertCourseEnrollmentSchema = z.object({\n  courseId: z.number(),\n  userId: z.string(),\n  enrolledAt: z.date().default(() => new Date()),\n  progress: z.number().min(0).max(100).default(0),\n  completedModules: z.array(z.number()).default([]),\n});\n\n// Problem instance within a problem set - allows isolated modifications\nexport const problemInstanceSchema = z.object({\n  id: z.string(), // unique instance ID (problemSetId_problemId_timestamp)\n  originalProblemId: z.number(), // reference to base problem\n  title: z.string().optional(), // override title for this set\n  description: z.string().optional(), // override description for this set\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]).optional(), // override difficulty\n  customTestCases: z.array(testCaseSchema).optional(), // additional test cases\n  customExamples: z.array(exampleSchema).optional(), // additional examples\n  customStarterCode: starterCodeSchema.optional(), // set-specific starter code\n  timeLimit: z.number().optional(), // override time limit\n  memoryLimit: z.number().optional(), // override memory limit\n  hints: z.array(z.string()).optional(), // set-specific hints\n  constraints: z.string().optional(), // override constraints\n  inputFormat: z.string().optional(), // override input format\n  outputFormat: z.string().optional(), // override output format\n  notes: z.string().optional(), // additional notes for this set\n  order: z.number().default(0), // position within the problem set\n  isCustomized: z.boolean().default(false), // true if modified from original\n  lastModified: z.date().default(() => new Date()),\n  modifiedBy: z.string().optional(),\n});\n\nexport const insertProblemSetSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n  category: z.string().optional(),\n  tags: z.array(z.string()).default([]),\n  problemIds: z.array(z.string()).default([]), // legacy support\n  problemInstances: z.array(problemInstanceSchema).default([]), // new isolated approach\n  isPublic: z.boolean().default(true),\n  estimatedTime: z.number().optional(),\n  createdBy: z.string().optional(),\n});\n\nexport const insertProblemSetEnrollmentSchema = z.object({\n  problemSetId: z.number(),\n  userId: z.string(),\n  enrolledAt: z.date().default(() => new Date()),\n  progress: z.number().min(0).max(100).default(0),\n  completedProblems: z.array(z.number()).default([]),\n  totalSubmissions: z.number().default(0),\n  correctSubmissions: z.number().default(0),\n});\n\nexport const insertUserProgressSchema = z.object({\n  userId: z.string(),\n  moduleId: z.number(),\n  completedAt: z.date().default(() => new Date()),\n  progress: z.number().min(0).max(100).default(0),\n});\n\nexport const mcqOptionSchema = z.object({\n  text: z.string(),\n  isCorrect: z.boolean(),\n});\n\nexport const assignmentQuestionSchema = z.object({\n  id: z.string(),\n  type: z.enum([\"coding\", \"mcq\", \"text\"]),\n  title: z.string(),\n  description: z.string(),\n  points: z.number().min(0),\n  // For coding questions\n  starterCode: starterCodeSchema.optional(),\n  testCases: z.array(testCaseSchema).optional(),\n  // For MCQ questions\n  options: z.array(mcqOptionSchema).optional(),\n  // For text questions\n  expectedAnswer: z.string().optional(),\n});\n\nexport const insertAssignmentSchema = z.object({\n  title: z.string().min(1, \"Assignment title is required\"),\n  description: z.string().optional(),\n  questions: z.array(assignmentQuestionSchema).min(1, \"At least one question is required\"),\n  dueDate: z.date(),\n  groups: z.array(z.string()).optional(),\n  isPublic: z.boolean().default(false),\n  createdBy: z.string(),\n  maxAttempts: z.number().min(1).default(3),\n  timeLimit: z.number().optional(), // in minutes\n});\n\nexport const questionSubmissionSchema = z.object({\n  questionId: z.string(),\n  answer: z.string(),\n  score: z.number().min(0).max(100),\n  isCorrect: z.boolean(),\n});\n\nexport const insertAssignmentSubmissionSchema = z.object({\n  assignmentId: z.number(),\n  userId: z.string(),\n  questionSubmissions: z.array(questionSubmissionSchema),\n  overallScore: z.number().min(0).max(100),\n  submittedAt: z.date().default(() => new Date()),\n  attemptNumber: z.number().min(1),\n});\n\nexport const insertGroupSchema = z.object({\n  name: z.string().min(1, \"Group name is required\"),\n  description: z.string().optional(),\n  members: z.array(z.string()).default([]),\n  createdBy: z.string(),\n  isActive: z.boolean().default(true),\n});\n\nexport const insertContestParticipantSchema = z.object({\n  contestId: z.number(),\n  userId: z.string(),\n  joinedAt: z.date().default(() => new Date()),\n  rank: z.number().optional(),\n  score: z.number().default(0),\n});\n\nexport const insertAnnouncementSchema = z.object({\n  title: z.string().min(1, \"Announcement title is required\"),\n  content: z.string().min(1, \"Announcement content is required\"),\n  targetGroups: z.array(z.string()).optional(),\n  isGlobal: z.boolean().default(false),\n  createdBy: z.string(),\n  expiresAt: z.date().optional(),\n  isActive: z.boolean().default(true),\n});\n\n// Type exports\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertProblem = z.infer<typeof insertProblemSchema>;\nexport type InsertSubmission = z.infer<typeof insertSubmissionSchema>;\nexport type InsertContest = z.infer<typeof insertContestSchema>;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type InsertAssignment = z.infer<typeof insertAssignmentSchema>;\nexport type InsertAssignmentSubmission = z.infer<typeof insertAssignmentSubmissionSchema>;\nexport type AssignmentQuestion = z.infer<typeof assignmentQuestionSchema>;\nexport type QuestionSubmission = z.infer<typeof questionSubmissionSchema>;\nexport type MCQOption = z.infer<typeof mcqOptionSchema>;\nexport type InsertGroup = z.infer<typeof insertGroupSchema>;\nexport type InsertContestParticipant = z.infer<typeof insertContestParticipantSchema>;\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\n\nexport type TestCase = z.infer<typeof testCaseSchema>;\nexport type StarterCode = z.infer<typeof starterCodeSchema>;\nexport type Example = z.infer<typeof exampleSchema>;\nexport type ProblemInstance = z.infer<typeof problemInstanceSchema>;\nexport type InsertProblemSet = z.infer<typeof insertProblemSetSchema>;\n\n// Enhanced contest type definitions\nexport type Contest = z.infer<typeof insertContestSchema>;\nexport type ContestProblem = z.infer<typeof contestProblemSchema>;\nexport type ContestParticipant = z.infer<typeof contestParticipantSchema>;\nexport type ContestQuestion = z.infer<typeof contestQuestionSchema>;\nexport type ContestAnalytics = z.infer<typeof contestAnalyticsSchema>;\nexport type ContestLeaderboardEntry = z.infer<typeof contestLeaderboardEntrySchema>;","size_bytes":17594},"Documentations/SMTP_SETUP_README.md":{"content":"# SMTP Email Setup for CodeArena Password Reset\n\nThis guide will help you set up SMTP email functionality for the password reset feature in CodeArena.\n\n## 🚀 Features Implemented\n\n✅ **OTP-based Password Reset** - Secure 6-digit verification codes  \n✅ **Beautiful Email Templates** - Professional HTML emails with CodeArena branding  \n✅ **SMTP Integration** - Works with Gmail, Outlook, Yahoo, and custom SMTP servers  \n✅ **Rate Limiting** - 60-second cooldown between OTP requests  \n✅ **Security Features** - OTP expires in 10 minutes, max 3 attempts  \n✅ **Works for All Users** - Both logged-in and non-logged-in users can reset passwords  \n\n## 📧 SMTP Configuration\n\n### Option 1: Gmail (Recommended for Development)\n\n1. **Enable 2-Factor Authentication** on your Gmail account\n2. **Generate App Password**:\n   - Go to Google Account settings\n   - Security → 2-Step Verification → App passwords\n   - Generate a new app password for \"Mail\"\n3. **Set Environment Variables**:\n\n```bash\n# Create .env file in server directory\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=your-email@gmail.com\nSMTP_PASS=your-16-digit-app-password\n```\n\n### Option 2: Outlook/Hotmail\n\n```bash\nSMTP_HOST=smtp-mail.outlook.com\nSMTP_PORT=587\nSMTP_USER=your-email@outlook.com\nSMTP_PASS=your-password\n```\n\n### Option 3: Yahoo\n\n```bash\nSMTP_HOST=smtp.mail.yahoo.com\nSMTP_PORT=587\nSMTP_USER=your-email@yahoo.com\nSMTP_PASS=your-app-password\n```\n\n### Option 4: Custom SMTP Server\n\n```bash\nSMTP_HOST=your-smtp-server.com\nSMTP_PORT=587\nSMTP_USER=your-username\nSMTP_PASS=your-password\n```\n\n## 🔧 Installation\n\n1. **Install Dependencies** (already done):\n```bash\ncd server\nnpm install nodemailer crypto-js\nnpm install --save-dev @types/nodemailer\n```\n\n2. **Set Environment Variables**:\n   - Copy the example above\n   - Replace with your actual SMTP credentials\n   - Restart the server\n\n3. **Test Connection**:\n   The server will automatically test the SMTP connection on startup.\n\n## 📱 User Flow\n\n### For Non-Logged-In Users:\n1. **Login Page** → Click \"Forgot password?\"\n2. **Email Input** → Enter email address\n3. **OTP Verification** → Enter 6-digit code from email\n4. **Password Reset** → Enter new password + confirm\n5. **Success** → Redirected to login page\n\n### For Logged-In Users:\n1. **Settings Page** → Click \"Change password?\"\n2. **Email Input** → Enter email address\n3. **OTP Verification** → Enter 6-digit code from email\n4. **Password Reset** → Enter new password + confirm\n5. **Success** → Returned to settings page\n\n## 🎨 Email Template Features\n\n- **Professional Design** - Clean, modern HTML template\n- **CodeArena Branding** - Logo, colors, and branding\n- **Responsive Layout** - Works on all devices\n- **Clear Instructions** - Step-by-step guidance\n- **Security Information** - 10-minute expiration notice\n- **Social Links** - Easy access to CodeArena resources\n\n## 🔒 Security Features\n\n- **OTP Expiration** - Codes expire after 10 minutes\n- **Rate Limiting** - 60-second cooldown between requests\n- **Attempt Limiting** - Max 3 failed attempts per OTP\n- **Secure Storage** - OTPs stored in memory (production: use Redis)\n- **Password Validation** - Enhanced requirements enforced\n\n## 🚨 Troubleshooting\n\n### Common Issues:\n\n1. **\"Authentication failed\"**\n   - Check your SMTP credentials\n   - For Gmail: Use App Password, not regular password\n   - Enable \"Less secure app access\" (if available)\n\n2. **\"Connection timeout\"**\n   - Check firewall settings\n   - Verify SMTP host and port\n   - Try different ports (587, 465, 25)\n\n3. **\"OTP not sent\"**\n   - Check server logs for SMTP errors\n   - Verify email address exists in database\n   - Check spam folder\n\n### Testing:\n\n1. **Test SMTP Connection**:\n```bash\n# Check server logs for connection status\n```\n\n2. **Test Email Flow**:\n   - Use a real email address\n   - Check spam/junk folders\n   - Verify OTP delivery\n\n## 📁 Files Modified\n\n- `server/services/otpService.ts` - OTP generation and validation\n- `server/services/emailService.ts` - SMTP email service\n- `server/routes/auth.ts` - New OTP endpoints\n- `client/src/pages/auth/ForgotPassword.tsx` - Updated UI\n- `server/config/gmail.ts` - Gmail API configuration\n\n## 🔄 API Endpoints\n\n- `POST /api/auth/request-otp` - Request OTP\n- `POST /api/auth/verify-otp-reset-password` - Verify OTP and reset password\n- `POST /api/auth/resend-otp` - Resend OTP\n\n## 🎯 Next Steps\n\n1. **Set Environment Variables** with your SMTP credentials\n2. **Test the Flow** with a real email address\n3. **Customize Email Template** if needed\n4. **Monitor Logs** for any SMTP issues\n5. **Production Deployment** - Consider using Redis for OTP storage\n\n## 📞 Support\n\nIf you encounter issues:\n1. Check server logs for detailed error messages\n2. Verify SMTP credentials and settings\n3. Test with different email providers\n4. Check firewall and network settings\n\n---\n\n**Note**: For production use, consider implementing additional security measures like IP rate limiting, CAPTCHA verification, and using Redis for OTP storage instead of in-memory storage. ","size_bytes":5077},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { config } from \"../config\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: any\n): Promise<Response> {\n  const token = localStorage.getItem('token');\n  \n  const configInit: RequestInit = {\n    method: method.toUpperCase(),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      ...(token ? { \"Authorization\": `Bearer ${token}` } : {})\n    }\n  };\n\n  if (data && method.toUpperCase() !== \"GET\") {\n    configInit.body = JSON.stringify(data);\n  }\n\n  try {\n    console.log(`🚀 Making ${method} request to ${url}`, { data });\n    const response = await fetch(url, configInit);\n    console.log(`✅ Response received from ${url}:`, { status: response.status });\n    return response;\n  } catch (error) {\n    console.error(`❌ API request to ${url} failed:`, error);\n    throw error;\n  }\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('token');\n    const rawUrl = String(queryKey[0] || '');\n    const url = rawUrl.startsWith('http') ? rawUrl : `${config.apiUrl}${rawUrl}`;\n    const res = await fetch(url, {\n      headers: {\n        \"Accept\": \"application/json\",\n        ...(token ? { \"Authorization\": `Bearer ${token}` } : {})\n      }\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 0,\n      retry: 1,\n      retryDelay: 1000,\n    },\n    mutations: {\n      retry: 1,\n      retryDelay: 1000,\n    },\n  },\n});","size_bytes":2167},"execution-system/k8s/worker.yaml":{"content":"---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: execution-worker\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: execution-worker\n    app.kubernetes.io/component: worker\n    app.kubernetes.io/version: \"1.0.0\"\nspec:\n  replicas: 5\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 3\n      maxUnavailable: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: execution-worker\n      app.kubernetes.io/component: worker\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: execution-worker\n        app.kubernetes.io/component: worker\n        app.kubernetes.io/version: \"1.0.0\"\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"9090\"\n        prometheus.io/path: \"/metrics\"\n    spec:\n      serviceAccountName: execution-worker\n      containers:\n      - name: worker\n        image: codearena/execution-worker:latest\n        ports:\n        - containerPort: 9090\n          name: metrics\n          protocol: TCP\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        envFrom:\n        - configMapRef:\n            name: execution-config\n        - secretRef:\n            name: execution-secrets\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        volumeMounts:\n        - name: docker-sock\n          mountPath: /var/run/docker.sock\n        - name: tmp\n          mountPath: /tmp\n        securityContext:\n          allowPrivilegeEscalation: true # Required for Docker access\n          readOnlyRootFilesystem: false # Docker requires write access\n          runAsNonRoot: false # Docker requires root access\n          runAsUser: 0\n          capabilities:\n            add:\n            - SYS_ADMIN # Required for Docker operations\n        livenessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - \"ps aux | grep -v grep | grep node\"\n          initialDelaySeconds: 60\n          periodSeconds: 30\n          timeoutSeconds: 10\n          failureThreshold: 3\n        readinessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - \"ps aux | grep -v grep | grep node\"\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          successThreshold: 1\n          failureThreshold: 3\n      volumes:\n      - name: docker-sock\n        hostPath:\n          path: /var/run/docker.sock\n          type: Socket\n      - name: tmp\n        emptyDir: {}\n      tolerations:\n      - key: \"worker-node\"\n        operator: \"Equal\"\n        value: \"true\"\n        effect: \"NoSchedule\"\n      affinity:\n        nodeAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 100\n            preference:\n              matchExpressions:\n              - key: \"node-type\"\n                operator: In\n                values: [\"worker\"]\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 100\n            podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: app.kubernetes.io/name\n                  operator: In\n                  values: [\"execution-worker\"]\n              topologyKey: kubernetes.io/hostname\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: execution-worker\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: execution-worker\n    app.kubernetes.io/component: worker\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: execution-worker\n  labels:\n    app.kubernetes.io/name: execution-worker\n    app.kubernetes.io/component: worker\nrules:\n- apiGroups: [\"\"]\n  resources: [\"nodes\"]\n  verbs: [\"get\", \"list\"]\n- apiGroups: [\"metrics.k8s.io\"]\n  resources: [\"nodes\", \"pods\"]\n  verbs: [\"get\", \"list\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: execution-worker\n  labels:\n    app.kubernetes.io/name: execution-worker\n    app.kubernetes.io/component: worker\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: execution-worker\nsubjects:\n- kind: ServiceAccount\n  name: execution-worker\n  namespace: codearena-execution\n\n---\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: execution-worker-hpa\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: execution-worker\n    app.kubernetes.io/component: worker\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: execution-worker\n  minReplicas: 5\n  maxReplicas: 50\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 75\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 85\n  # Custom metric based on queue length (requires custom metrics API)\n  - type: External\n    external:\n      metric:\n        name: redis_queue_length\n        selector:\n          matchLabels:\n            queue: \"code-execution\"\n      target:\n        type: AverageValue\n        averageValue: \"10\"\n  behavior:\n    scaleUp:\n      stabilizationWindowSeconds: 30\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 30\n      - type: Pods\n        value: 5\n        periodSeconds: 30\n      selectPolicy: Max\n    scaleDown:\n      stabilizationWindowSeconds: 180\n      policies:\n      - type: Percent\n        value: 20\n        periodSeconds: 60\n      selectPolicy: Min\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: execution-worker-headless\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: execution-worker\n    app.kubernetes.io/component: worker\nspec:\n  type: ClusterIP\n  clusterIP: None\n  ports:\n  - port: 9090\n    targetPort: metrics\n    protocol: TCP\n    name: metrics\n  selector:\n    app.kubernetes.io/name: execution-worker\n    app.kubernetes.io/component: worker ","size_bytes":6034},"replit.md":{"content":"# CodeArena - Competitive Programming Platform\n\n## Overview\n\nCodeArena is a comprehensive online coding platform designed for competitive programming, educational courses, and assignment management. The platform supports multiple programming languages (Python, JavaScript, Java, C++, C) with secure Docker-based code execution, real-time analytics, and a modern full-stack architecture. It serves students, educators, and administrators with features for contests, problem sets, courses, and detailed performance tracking.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- React 18.3.1 with TypeScript for type-safe development\n- Vite 5.4.14 as the build tool for fast development and optimized production builds\n- Tailwind CSS 3.4.17 with shadcn/ui component library for consistent UI design\n- Zustand 5.0.5 for lightweight global state management\n- TanStack React Query 5.60.5 for server state management and data fetching\n- Wouter 3.3.5 for client-side routing\n- Monaco Editor for in-browser code editing with VS Code experience\n\n**Design Decisions:**\n- Chosen Vite over Create React App for superior build performance and modern ES module support\n- Selected Zustand over Redux for simpler state management without boilerplate\n- Implemented React Query to handle server state separately from client state, enabling automatic refetching and cache management\n- Used Wouter instead of React Router for smaller bundle size while maintaining routing capabilities\n\n### Backend Architecture\n\n**Technology Stack:**\n- Node.js 20+ with Express.js 4.21.2 framework\n- TypeScript with ES modules for type safety and modern JavaScript features\n- MongoDB Atlas as the primary database with native MongoDB driver\n- Mongoose 7.0.0 for schema validation and object modeling\n- Passport.js for authentication with multiple strategies (JWT, Google OAuth, Replit OIDC)\n- Express sessions with MongoDB-backed session store\n- ESBuild for fast TypeScript compilation\n\n**Design Decisions:**\n- Separated authentication strategies to support multiple login methods (email/password, Google OAuth, Replit OIDC)\n- Implemented role-based access control (student, admin) with middleware protection\n- Used Express-validator and Zod schemas for dual-layer validation (runtime and compile-time)\n- Structured routes by feature (problems, submissions, courses, contests) for maintainability\n\n### Code Execution System\n\n**Architecture:**\n- Distributed execution system using Docker containers for isolation\n- Redis-based job queue (Bull.js) for asynchronous code execution\n- Language-specific Docker images optimized for security and minimal size (<3MB)\n- Support for Python, JavaScript, Java, C++, and C\n\n**Design Decisions:**\n- Isolated code execution in disposable Docker containers prevents security vulnerabilities\n- Queue-based architecture enables horizontal scaling for handling 10,000+ concurrent users\n- Implements automatic fallback from queue execution to direct execution for reliability\n- Resource limits (time, memory) enforced at container level for fair resource allocation\n\n### Data Storage\n\n**Primary Database: MongoDB Atlas**\n- Collections: users, problems, submissions, courses, coursemodules, assignments, contests, problemsets, enrollments\n- Indexes on frequently queried fields (userId, problemId, courseId) for performance\n- MongoDB sessions collection for Express session persistence\n\n**Schema Design:**\n- Users: email, role, authentication data, profile information, email verification status\n- Problems: title, description, difficulty, test cases, starter code per language, constraints\n- Submissions: code, language, status, runtime metrics, test results\n- Courses: modules, enrollments, progress tracking\n- Contests: problems, leaderboard, time constraints\n- Analytics: performance metrics, learning outcomes, engagement data\n\n**Design Decisions:**\n- Chose MongoDB for flexibility in schema evolution as features expand\n- Embedded test cases within problems for atomic reads/writes\n- Separate enrollment collections track student progress and enrollment type (admin vs. QR/link)\n- Implemented version history for assignments to track changes over time\n\n### Authentication & Security\n\n**Authentication Strategies:**\n- Local strategy with bcrypt password hashing\n- Google OAuth2.0 for social login\n- Replit OIDC for Replit environment integration\n- JWT tokens with secure cookie storage for stateless authentication\n- Session persistence in MongoDB for reliability\n\n**Security Measures:**\n- Email verification with OTP (6-digit codes, 10-minute expiration, 3 attempt limit)\n- Rate limiting on API endpoints (100 requests per 15 minutes)\n- Password strength validation and secure reset flow\n- Role-based middleware prevents unauthorized access to admin routes\n- Docker isolation prevents code execution vulnerabilities\n\n## External Dependencies\n\n### Third-Party Services\n\n**Google Services:**\n- Gmail API for transactional emails (OTP verification, password reset, notifications)\n- Google OAuth2.0 for authentication\n- Configuration requires: Client ID, Client Secret, Refresh Token\n\n**Docker & Container Services:**\n- Docker Desktop for local development\n- Docker containers for code execution (python:3.11-alpine, node:18-alpine, gcc, openjdk:11)\n- Docker socket mounting or Docker-in-Docker for container spawning\n\n**Cloud Infrastructure:**\n- MongoDB Atlas for database hosting\n- Redis for job queue management\n- Deployment platforms: Vercel (frontend), Railway/Render (backend services)\n\n### APIs & Integrations\n\n**Internal APIs:**\n- REST API at `/api/*` for all client-server communication\n- WebSocket support for real-time features (leaderboards, contest updates)\n- Proxy configuration routes `/api` requests to backend server\n\n**External APIs:**\n- Gmail API for email delivery\n- Google OAuth API for authentication\n- MongoDB Atlas API for database operations\n\n### Development Tools\n\n**Build & Development:**\n- Vite for frontend development server and production builds\n- ESBuild for backend TypeScript compilation\n- Docker Compose for local multi-service orchestration\n\n**Testing & Quality:**\n- Jest for unit testing (execution system)\n- Supertest for API testing\n- TypeScript compiler for type checking\n\n**Deployment:**\n- Vercel for frontend static hosting\n- Railway/Render for backend API and execution system\n- Docker images hosted in container registry for execution workers\n\n### Environment Variables Required\n\n**Backend:**\n- `MONGODB_URL`: MongoDB Atlas connection string\n- `SESSION_SECRET`: Express session encryption key\n- `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET`: OAuth credentials\n- `GMAIL_CLIENT_ID`, `GMAIL_CLIENT_SECRET`, `GMAIL_REFRESH_TOKEN`: Gmail API credentials\n- `EXECUTION_MODE`: 'queue' or 'direct' for code execution strategy\n- `REDIS_URL`: Redis connection for job queue (when using queue mode)\n\n**Frontend:**\n- `VITE_API_URL`: Backend API base URL for proxy configuration","size_bytes":7001},"client/nixpacks.toml":{"content":"providers = [\"node\"] ","size_bytes":21},"client/src/pages/admin/ModuleDetail.tsx":{"content":"import { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { ChevronLeft, Edit, Trash2, BookOpen, Code, Video, FileText, Loader2 } from 'lucide-react';\nimport axios from 'axios';\nimport { config } from '@/config';\n\ninterface CourseModule {\n  id: number;\n  courseId: number;\n  title: string;\n  description?: string;\n  order: number;\n  textContent?: string;\n  videoUrl?: string;\n  codeExample?: string;\n  language?: string;\n  expectedOutput?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst api = axios.create({\n  baseURL: config.apiUrl + '/api',\n});\n\n// Add request interceptor to include Authorization header\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport default function ModuleDetail() {\n  const { moduleId: moduleIdParam } = useParams<{ moduleId: string }>();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const moduleId = moduleIdParam ? parseInt(moduleIdParam) : NaN;\n\n  const { data: module, isLoading, error } = useQuery({\n    queryKey: ['module', moduleId],\n    queryFn: async () => {\n      if (!moduleId || isNaN(moduleId)) {\n        throw new Error('Module ID is required');\n      }\n      const response = await api.get(`/modules/${moduleId}`);\n      console.log('Module data fetched:', response.data);\n      return response.data as CourseModule;\n    },\n    enabled: !!moduleId && !isNaN(moduleId),\n  });\n\n  const deleteModule = useMutation({\n    mutationFn: async () => {\n      if (!moduleId || isNaN(moduleId)) {\n        throw new Error('Module ID is required');\n      }\n      await api.delete(`/modules/${moduleId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['course', module?.courseId] });\n      queryClient.invalidateQueries({ queryKey: ['course-modules', module?.courseId] });\n      queryClient.invalidateQueries({ queryKey: ['courses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/courses'] });\n      alert('Module deleted successfully');\n      setLocation(`/admin/courses/${module?.courseId}`);\n    },\n    onError: (error: any) => {\n      alert(error.response?.data?.message || 'Failed to delete module');\n    },\n  });\n\n  const handleDeleteModule = () => {\n    deleteModule.mutate();\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (!moduleId || isNaN(moduleId)) {\n    return (\n      <div className=\"container mx-auto py-8 px-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Invalid Module ID</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The module ID is missing or invalid.\n          </p>\n          <Button onClick={() => setLocation('/admin/courses')}>\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto py-8 px-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Error Loading Module</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            Failed to load module data. Please try again.\n          </p>\n          <p className=\"text-sm text-red-500 mb-4\">\n            Error: {error.message}\n          </p>\n          <Button onClick={() => setLocation('/admin/courses')}>\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!module) {\n    return (\n      <div className=\"container mx-auto py-8 px-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Module Not Found</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The module you're looking for doesn't exist or has been deleted.\n          </p>\n          <Button onClick={() => setLocation('/admin/courses')}>\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-6\">\n      <div className=\"mb-8\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation(module.courseId ? `/admin/courses/${module.courseId}` : '/admin/courses')}\n          className=\"mb-4\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-2\" />\n          Back to Course\n        </Button>\n        \n        <div className=\"flex items-start justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">{module.title}</h1>\n            {module.description && (\n              <p className=\"text-muted-foreground text-lg mb-4\">{module.description}</p>\n            )}\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"outline\">\n                Order: {module.order}\n              </Badge>\n              {module.language && (\n                <Badge variant=\"secondary\">\n                  {module.language}\n                </Badge>\n              )}\n              <span className=\"text-sm text-muted-foreground\">\n                Created {formatDate(module.createdAt)}\n              </span>\n              {module.updatedAt && (\n                <span className=\"text-sm text-muted-foreground\">\n                  Last updated {formatDate(module.updatedAt)}\n                </span>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation(`/admin/modules/${moduleId}/edit`)}\n            >\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit Module\n            </Button>\n            \n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button variant=\"destructive\">\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete Module\n                </Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Delete Module</AlertDialogTitle>\n                  <AlertDialogDescription>\n                    Are you sure you want to delete \"{module.title}\"? This action cannot be undone.\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                  <AlertDialogAction\n                    onClick={handleDeleteModule}\n                    className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                  >\n                    Delete Module\n                  </AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          </div>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"content\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"content\">Content</TabsTrigger>\n          {module.codeExample && <TabsTrigger value=\"code\">Code Example</TabsTrigger>}\n          {module.videoUrl && <TabsTrigger value=\"video\">Video</TabsTrigger>}\n        </TabsList>\n\n        <TabsContent value=\"content\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Module Content\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {module.textContent ? (\n                <div className=\"prose max-w-none\">\n                  <pre className=\"whitespace-pre-wrap font-sans\">{module.textContent}</pre>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Content Yet</h3>\n                  <p className=\"text-muted-foreground\">\n                    This module doesn't have any content yet.\n                  </p>\n                  {/* Debug information - remove in production */}\n                  <div className=\"mt-4 p-4 bg-gray-100 rounded text-left text-xs\">\n                    <p><strong>Debug Info:</strong></p>\n                    <p>Module ID: {module.id}</p>\n                    <p>Course ID: {module.courseId || 'undefined'}</p>\n                    <p>Title: {module.title}</p>\n                    <p>Text Content: {module.textContent || 'empty'}</p>\n                    <p>Video URL: {module.videoUrl || 'empty'}</p>\n                    <p>Code Example: {module.codeExample || 'empty'}</p>\n                    <p>Language: {module.language || 'empty'}</p>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {module.codeExample && (\n          <TabsContent value=\"code\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Code className=\"h-5 w-5\" />\n                  Code Example\n                  {module.language && (\n                    <Badge variant=\"secondary\" className=\"ml-2\">\n                      {module.language}\n                    </Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Code:</h4>\n                    <pre className=\"bg-muted p-4 rounded-lg overflow-x-auto\">\n                      <code className=\"text-sm\">{module.codeExample}</code>\n                    </pre>\n                  </div>\n                  \n                  {module.expectedOutput && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Expected Output:</h4>\n                      <pre className=\"bg-green-50 border border-green-200 p-4 rounded-lg\">\n                        <code className=\"text-sm text-green-800\">{module.expectedOutput}</code>\n                      </pre>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n\n        {module.videoUrl && (\n          <TabsContent value=\"video\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Video className=\"h-5 w-5\" />\n                  Video Content\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"aspect-video\">\n                  <iframe\n                    src={(() => {\n                      const patterns = [\n                        /(?:youtube\\.com\\/watch\\?v=)([^&\\n?#]+)/,\n                        /(?:youtu\\.be\\/)([^&\\n?#]+)/,\n                        /(?:youtube\\.com\\/embed\\/)([^&\\n?#]+)/,\n                        /(?:youtube\\.com\\/v\\/)([^&\\n?#]+)/\n                      ];\n                      \n                      for (const pattern of patterns) {\n                        const match = module.videoUrl!.match(pattern);\n                        if (match && match[1]) {\n                          return `https://www.youtube.com/embed/${match[1]}?enablejsapi=1&origin=${window.location.origin}`;\n                        }\n                      }\n                      return module.videoUrl;\n                    })()}\n                    title={module.title}\n                    className=\"w-full h-full rounded-lg border-0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n      </Tabs>\n    </div>\n  );\n} ","size_bytes":12931},"client/src/components/dashboard/AnalyticsOverview.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  BarChart3, \n  BookOpen, \n  Target, \n  TrendingUp, \n  Users, \n  Trophy,\n  Activity,\n  Clock\n} from 'lucide-react';\nimport { config } from '@/config';\n\ninterface AnalyticsOverviewData {\n  assignments: {\n    total: number;\n    active: number;\n    averageScore: number;\n    completionRate: number;\n  };\n  courses: {\n    total: number;\n    active: number;\n    averageScore: number;\n    enrollmentRate: number;\n  };\n  students: {\n    total: number;\n    active: number;\n    averageScore: number;\n    improvementRate: number;\n  };\n}\n\nexport function AnalyticsOverview() {\n  const [, setLocation] = useLocation();\n\n  const { data: analytics, isLoading } = useQuery({\n    queryKey: ['analytics-overview'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const res = await fetch(`${config.apiUrl}/api/analytics/overview`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!res.ok) {\n        throw new Error('Failed to fetch analytics overview');\n      }\n      return res.json() as Promise<AnalyticsOverviewData>;\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            Analytics Overview\n          </CardTitle>\n          <CardDescription>Loading analytics data...</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <BarChart3 className=\"h-6 w-6 text-blue-600\" />\n            Analytics Overview\n          </h2>\n          <p className=\"text-muted-foreground\">Key performance metrics and insights</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setLocation('/admin/assignments')}\n          >\n            <BarChart3 className=\"h-4 w-4 mr-2\" />\n            Assignment Analytics\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={() => setLocation('/admin/courses')}\n          >\n            <BookOpen className=\"h-4 w-4 mr-2\" />\n            Course Analytics\n          </Button>\n        </div>\n      </div>\n\n      {/* Metrics Grid */}\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        {/* Assignments Card */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Assignments</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.assignments.total || 0}</div>\n            <p className=\"text-xs text-muted-foreground mb-2\">\n              {analytics?.assignments.active || 0} active assignments\n            </p>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Average Score</span>\n                <span className=\"font-medium\">{analytics?.assignments.averageScore || 0}%</span>\n              </div>\n              <Progress value={analytics?.assignments.averageScore || 0} className=\"h-2\" />\n            </div>\n            <div className=\"mt-3\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"w-full\"\n                onClick={() => setLocation('/admin/assignments')}\n              >\n                View Details\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Courses Card */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Courses</CardTitle>\n            <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.courses.total || 0}</div>\n            <p className=\"text-xs text-muted-foreground mb-2\">\n              {analytics?.courses.active || 0} active courses\n            </p>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Enrollment Rate</span>\n                <span className=\"font-medium\">{analytics?.courses.enrollmentRate || 0}%</span>\n              </div>\n              <Progress value={analytics?.courses.enrollmentRate || 0} className=\"h-2\" />\n            </div>\n            <div className=\"mt-3\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"w-full\"\n                onClick={() => setLocation('/admin/courses')}\n              >\n                View Details\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Students Card */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Students</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics?.students.total || 0}</div>\n            <p className=\"text-xs text-muted-foreground mb-2\">\n              {analytics?.students.active || 0} active students\n            </p>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Improvement Rate</span>\n                <span className=\"font-medium\">{analytics?.students.improvementRate || 0}%</span>\n              </div>\n              <Progress value={analytics?.students.improvementRate || 0} className=\"h-2\" />\n            </div>\n            <div className=\"mt-3\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"w-full\"\n                onClick={() => setLocation('/admin/users')}\n              >\n                View Details\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5\" />\n            Quick Actions\n          </CardTitle>\n          <CardDescription>Access detailed analytics and reports</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-4\">\n            <Button \n              variant=\"outline\" \n              className=\"h-16 flex flex-col items-center justify-center gap-2\"\n              onClick={() => setLocation('/admin/assignments')}\n            >\n              <BarChart3 className=\"h-5 w-5\" />\n              <span className=\"text-sm font-medium\">Assignment Analytics</span>\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"h-16 flex flex-col items-center justify-center gap-2\"\n              onClick={() => setLocation('/admin/courses')}\n            >\n              <BookOpen className=\"h-5 w-5\" />\n              <span className=\"text-sm font-medium\">Course Analytics</span>\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"h-16 flex flex-col items-center justify-center gap-2\"\n              onClick={() => setLocation('/admin/problems')}\n            >\n              <Target className=\"h-5 w-5\" />\n              <span className=\"text-sm font-medium\">Problem Analytics</span>\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"h-16 flex flex-col items-center justify-center gap-2\"\n              onClick={() => setLocation('/admin/users')}\n            >\n              <Users className=\"h-5 w-5\" />\n              <span className=\"text-sm font-medium\">Student Analytics</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Performance */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            Recent Performance\n          </CardTitle>\n          <CardDescription>Latest performance trends and insights</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            <div className=\"text-center p-4 border rounded-lg\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {analytics?.assignments.averageScore || 0}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Assignment Success Rate</div>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {analytics?.courses.enrollmentRate || 0}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Course Enrollment Rate</div>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {analytics?.students.improvementRate || 0}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Student Improvement Rate</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default AnalyticsOverview; ","size_bytes":10397},"server/test-otp.js":{"content":"// Test script for OTP functionality\nimport { otpService } from './services/otpService.js';\nimport { gmailService } from './services/gmailService.js';\n\nasync function testOTP() {\n  console.log('🧪 Testing OTP functionality...\\n');\n\n  // Test 1: Generate OTP\n  console.log('1. Testing OTP generation...');\n  const otp = otpService.generateOTP();\n  console.log(`   Generated OTP: ${otp}`);\n  console.log(`   OTP length: ${otp.length}`);\n  console.log(`   Is 6 digits: ${/^\\d{6}$/.test(otp)}\\n`);\n\n  // Test 2: Store and validate OTP\n  console.log('2. Testing OTP storage and validation...');\n  const testEmail = 'test@example.com';\n  otpService.storeOTP(testEmail, otp);\n  console.log(`   Stored OTP for ${testEmail}`);\n  \n  const validation = otpService.validateOTP(testEmail, otp);\n  console.log(`   Validation result: ${validation.valid}`);\n  console.log(`   Validation message: ${validation.message}\\n`);\n\n  // Test 3: Test email service\n  console.log('3. Testing email service...');\n  try {\n    const emailSent = await gmailService.sendOTPEmail(testEmail, otp, 'Test User');\n    console.log(`   Email sent successfully: ${emailSent}`);\n  } catch (error) {\n    console.log(`   Email service error: ${error.message}`);\n  }\n\n  console.log('\\n✅ OTP testing completed!');\n}\n\n// Run the test\ntestOTP().catch(console.error); ","size_bytes":1325},"client/src/pages/admin/ProblemInstanceManagement.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { Plus, ArrowLeft, Edit, Trash2, Settings, Eye, Calendar, X, BarChart3, RefreshCw } from 'lucide-react';\nimport * as z from 'zod';\nimport { useToast } from '@/hooks/use-toast';\nimport { config } from '@/config';\n\n\ninterface Problem {\n  id: string;\n  title: string;\n  description: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n  timeLimit: number;\n  memoryLimit: number;\n  constraints?: string;\n  inputFormat?: string;\n  outputFormat?: string;\n  examples: Array<{\n    input: string;\n    output: string;\n    explanation?: string;\n  }>;\n  testCases: Array<{\n    input: string;\n    expectedOutput: string;\n    explanation?: string;\n    isHidden?: boolean;\n  }>;\n  starterCode: Record<string, string>;\n}\n\ninterface ProblemInstance {\n  id?: string; // legacy id\n  _id?: string; // subdocument id\n  title: string;\n  description: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n  status: 'customized' | 'default';\n  basedOn?: string; // Original problem title\n  lastModified: string;\n  setNotes?: string;\n  points: number;\n  timeLimit: number;\n  memoryLimit: number;\n  constraints?: string;\n  inputFormat?: string;\n  outputFormat?: string;\n  examples?: Array<{\n    input: string;\n    output: string;\n    explanation?: string;\n  }>;\n  testCases?: Array<{\n    input: string;\n    expectedOutput: string;\n    explanation?: string;\n    isHidden?: boolean;\n  }>;\n  starterCode?: Record<string, string>;\n}\n\ninterface ProblemSet {\n  id: string;\n  title: string;\n  description: string;\n  problems?: ProblemInstance[];\n  problemInstances?: ProblemInstance[];\n}\n\nconst problemInstanceSchema = z.object({\n  // Optional during edit; required only when creating (checked in onSubmit)\n  selectedProblemId: z.union([z.string(), z.number()]).optional().transform(val => (val === undefined ? '' : String(val))),\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().min(1, 'Description is required'),\n  difficulty: z.enum(['easy', 'medium', 'hard']),\n  points: z.number().min(1, 'Points must be at least 1'),\n  timeLimit: z.number().min(1, 'Time limit must be at least 1'),\n  memoryLimit: z.number().min(1, 'Memory limit must be at least 1'),\n  constraints: z.string().optional(),\n  inputFormat: z.string().optional(),\n  outputFormat: z.string().optional(),\n  setNotes: z.string().optional(),\n  starterCode: z.record(z.string(), z.string()).optional(),\n  testCases: z.array(z.object({\n    input: z.string().min(1, 'Input is required'),\n    expectedOutput: z.string().min(1, 'Expected output is required'),\n    explanation: z.string().optional(),\n    isHidden: z.boolean().optional(),\n  })).optional(),\n});\n\nexport default function ProblemInstanceManagement() {\n  const { problemSetId, contestId } = useParams();\n  const [, setLocation] = useLocation();\n  \n  // Determine if we're managing problems for a contest or problem set\n  const isContestMode = !!contestId;\n  const entityId = contestId || problemSetId;\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [editingProblem, setEditingProblem] = useState<ProblemInstance | null>(null);\n  const [editingProblemId, setEditingProblemId] = useState<string | null>(null);\n  const [showEvaluationsDialog, setShowEvaluationsDialog] = useState(false);\n  const [evaluationInstance, setEvaluationInstance] = useState<ProblemInstance | null>(null);\n  const [showOverallAnalyticsDialog, setShowOverallAnalyticsDialog] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<z.infer<typeof problemInstanceSchema>>({\n    resolver: zodResolver(problemInstanceSchema),\n    defaultValues: {\n      selectedProblemId: '',\n      title: '',\n      description: '',\n      difficulty: 'easy',\n      points: 100,\n      timeLimit: 1000,\n      memoryLimit: 256,\n      constraints: '',\n      inputFormat: '',\n      outputFormat: '',\n      setNotes: '',\n      starterCode: {},\n      testCases: [{\n        input: '',\n        expectedOutput: '',\n        explanation: '',\n        isHidden: false,\n      }],\n    },\n  });\n\n  // Fetch entity details (problem set or contest)\n  const { data: problemSet, isLoading } = useQuery<ProblemSet>({\n    queryKey: [isContestMode ? '/api/admin/contests' : '/api/admin/problem-sets', entityId],\n    queryFn: async () => {\n      const endpoint = isContestMode \n        ? `/api/admin/contests/${entityId}` \n        : `/api/admin/problem-sets/${entityId}`;\n      const response = await fetch(endpoint, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) throw new Error(`Failed to fetch ${isContestMode ? 'contest' : 'problem set'}`);\n      const data = await response.json();\n      // Normalize instances to ensure id exists\n      const instances = (data.problemInstances || data.problems || []).map((p: any) => ({\n        ...p,\n        id: p.id || p._id,\n      }));\n      return { ...data, problemInstances: instances, problems: instances } as ProblemSet;\n    },\n  });\n\n  // Fetch all available problems for selection\n  const { data: availableProblems, isLoading: isLoadingProblems } = useQuery<Problem[]>({\n    queryKey: ['/api/problems'],\n    queryFn: async () => {\n      const response = await fetch(`${config.apiUrl}/api/problems`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch problems');\n      return response.json();\n    },\n  });\n\n  // Create problem instance mutation\n  const createProblemInstanceMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof problemInstanceSchema>) => {\n      const endpoint = isContestMode \n        ? `/api/admin/contests/${entityId}/problems` \n        : `/api/admin/problem-sets/${entityId}/problems`;\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create problem instance');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [isContestMode ? '/api/admin/contests' : '/api/admin/problem-sets', entityId] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: 'Success',\n        description: 'Problem instance created successfully',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete problem instance mutation\n  const deleteProblemInstanceMutation = useMutation({\n    mutationFn: async (problemId: string) => {\n      const endpoint = isContestMode \n        ? `/api/admin/contests/${entityId}/problems/${problemId}` \n        : `/api/admin/problem-sets/${entityId}/problems/${problemId}`;\n      const response = await fetch(endpoint, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to delete problem instance: ${response.status} ${errorText}`);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [isContestMode ? '/api/admin/contests' : '/api/admin/problem-sets', entityId] });\n      toast({\n        title: 'Success',\n        description: 'Problem instance deleted successfully',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Update problem instance mutation\n  const updateProblemInstanceMutation = useMutation({\n    mutationFn: async ({ problemId, data }: { problemId: string; data: z.infer<typeof problemInstanceSchema> }) => {\n      const endpoint = isContestMode \n        ? `/api/admin/contests/${entityId}/problems/${problemId}` \n        : `/api/admin/problem-sets/${entityId}/problems/${problemId}`;\n      const response = await fetch(endpoint, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update problem instance');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [isContestMode ? '/api/admin/contests' : '/api/admin/problem-sets', entityId] });\n      setIsCreateDialogOpen(false);\n      setEditingProblem(null);\n      setEditingProblemId(null);\n      form.reset();\n      toast({\n        title: 'Success',\n        description: 'Problem instance updated successfully',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof problemInstanceSchema>) => {\n    if (editingProblem && editingProblemId) {\n      updateProblemInstanceMutation.mutate({ problemId: editingProblemId, data });\n    } else {\n      // Create path requires selecting a base problem\n      if (!data.selectedProblemId) {\n        toast({\n          title: 'Select a problem',\n          description: 'Please select a problem to create an instance from.',\n          variant: 'destructive',\n        });\n        return;\n      }\n      const selectedProblem = availableProblems?.find(p => String(p.id) === String(data.selectedProblemId));\n      const problemTitle = selectedProblem?.title || data.title;\n      // Create\n      createProblemInstanceMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (problem: ProblemInstance) => {\n    // normalize id: prefer _id, else id\n    const effectiveId = (problem as any)._id || problem.id || '';\n    setEditingProblem(problem);\n    setEditingProblemId(String(effectiveId));\n    \n    // If we have the original selection id stored, prefer it. Otherwise try to match by title.\n    let selectedProblemId = '';\n    if (availableProblems) {\n      const originalRef = (problem as any).problemId || (problem as any).originalProblemId;\n      if (originalRef) {\n        const byId = availableProblems.find(p => String(p.id) === String(originalRef));\n        if (byId) selectedProblemId = String(byId.id);\n      }\n      if (!selectedProblemId) {\n        const byTitle = availableProblems.find(p => p.title === problem.title || p.title === (problem as any).basedOn);\n        if (byTitle) selectedProblemId = String(byTitle.id);\n      }\n    }\n\n    form.reset({\n      selectedProblemId: selectedProblemId || '',\n      title: problem.title || '',\n      description: problem.description || '',\n      difficulty: problem.difficulty || 'easy',\n      points: problem.points || 100,\n      timeLimit: problem.timeLimit || 1000,\n      memoryLimit: problem.memoryLimit || 256,\n      constraints: problem.constraints || '',\n      inputFormat: problem.inputFormat || '',\n      outputFormat: problem.outputFormat || '',\n      setNotes: problem.setNotes || '',\n      starterCode: problem.starterCode || {},\n      testCases: (problem.testCases && problem.testCases.length > 0)\n        ? problem.testCases.map(tc => ({\n            input: tc.input || '',\n            expectedOutput: tc.expectedOutput || '',\n            explanation: tc.explanation || '',\n            isHidden: tc.isHidden || false,\n          }))\n        : [{ input: '', expectedOutput: '', explanation: '', isHidden: false }],\n    });\n    setIsCreateDialogOpen(true);\n  };\n\n  // const handleEvaluations = (problem: ProblemInstance) => {\n  //   // Open inline dialog instead of navigating to a non-existent route\n  //   setEvaluationInstance(problem);\n  //   setShowEvaluationsDialog(true);\n  // };\n\n  // Auto-populate form when a problem is selected (only for new instances, not editing)\n  const selectedProblemId = form.watch('selectedProblemId');\n  \n  useEffect(() => {\n    console.log('Auto-populate effect triggered:', { \n      selectedProblemId, \n      availableProblemsCount: availableProblems?.length,\n      isEditing: !!editingProblem \n    });\n    \n    // Only auto-populate if we're not editing an existing problem instance\n    if (selectedProblemId && availableProblems && !editingProblem) {\n      const selectedProblem = availableProblems.find(p => p.id === selectedProblemId);\n      console.log('Selected problem found:', selectedProblem);\n      \n      if (selectedProblem) {\n        console.log('Populating form with problem data:', selectedProblem.title);\n        \n        // Use setValue with shouldValidate and shouldDirty options\n        form.setValue('title', selectedProblem.title, { shouldValidate: true, shouldDirty: true });\n        form.setValue('description', selectedProblem.description, { shouldValidate: true, shouldDirty: true });\n        form.setValue('difficulty', selectedProblem.difficulty, { shouldValidate: true, shouldDirty: true });\n        form.setValue('timeLimit', selectedProblem.timeLimit || 1000, { shouldValidate: true, shouldDirty: true });\n        form.setValue('memoryLimit', selectedProblem.memoryLimit || 256, { shouldValidate: true, shouldDirty: true });\n        form.setValue('constraints', selectedProblem.constraints || '', { shouldValidate: true, shouldDirty: true });\n        form.setValue('inputFormat', selectedProblem.inputFormat || '', { shouldValidate: true, shouldDirty: true });\n        form.setValue('outputFormat', selectedProblem.outputFormat || '', { shouldValidate: true, shouldDirty: true });\n        \n        // Populate starter code for all languages from the original problem\n        if (selectedProblem.starterCode && Object.keys(selectedProblem.starterCode).length > 0) {\n          console.log('Populating starter code for languages:', Object.keys(selectedProblem.starterCode));\n          form.setValue('starterCode', selectedProblem.starterCode, { shouldValidate: true, shouldDirty: true });\n        } else {\n          console.log('No starter code found in original problem, setting empty object');\n          form.setValue('starterCode', {}, { shouldValidate: true, shouldDirty: true });\n        }\n        \n        // Populate test cases from the original problem\n        if (selectedProblem.testCases && selectedProblem.testCases.length > 0) {\n          console.log('Populating test cases:', selectedProblem.testCases.length);\n          form.setValue('testCases', selectedProblem.testCases.map(tc => ({\n            input: tc.input || '',\n            expectedOutput: tc.expectedOutput || '',\n            explanation: tc.explanation || '',\n            isHidden: tc.isHidden || false,\n          })), { shouldValidate: true, shouldDirty: true });\n        } else {\n          // Ensure at least one empty test case if none from original problem\n          console.log('No test cases found, setting default empty test case');\n          form.setValue('testCases', [{\n            input: '',\n            expectedOutput: '',\n            explanation: '',\n            isHidden: false,\n          }], { shouldValidate: true, shouldDirty: true });\n        }\n        \n        console.log('Form populated successfully');\n      } else {\n        console.log('Selected problem not found in available problems');\n      }\n    } else if (selectedProblemId && !availableProblems) {\n      console.log('Problem ID selected but available problems not loaded yet');\n    } else if (editingProblem) {\n      console.log('Editing existing problem instance - not auto-populating from original problem');\n    } else {\n      console.log('No problem selected or clearing selection');\n    }\n  }, [selectedProblemId, availableProblems, form, editingProblem]);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-GB');\n  };\n\n  // Helper function to check if a problem is already added\n  const isProblemAlreadyAdded = (problemTitle: string) => {\n    const existingProblems = problemSet?.problems || problemSet?.problemInstances || [];\n    return existingProblems.some(existingProblem => \n      existingProblem.title === problemTitle ||\n      existingProblem.basedOn === problemTitle\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading problem instances...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!problemSet) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">{isContestMode ? 'Contest' : 'Problem set'} not found</h3>\n          <p className=\"text-gray-600\">The {isContestMode ? 'contest' : 'problem set'} you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation(isContestMode ? '/contests' : '/admin/problem-sets')} className=\"mt-4\">\n            Back to {isContestMode ? 'Contests' : 'Problem Sets'}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Prefer non-empty lists. Avoid using `||` with arrays because empty arrays are truthy.\n  const problemInstancesList = (problemSet.problems && problemSet.problems.length > 0)\n    ? problemSet.problems\n    : (problemSet.problemInstances || []);\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(isContestMode ? '/contests' : '/admin/problem-sets')}\n          className=\"mb-4\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to {isContestMode ? 'Contests' : 'Problem Sets'}\n        </Button>\n        \n        <div className=\"text-center mb-4\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            {problemSet.title}\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Manage {isContestMode ? 'Contest' : 'Problem Set'} Problems\n          </p>\n        </div>\n\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6\">\n          <div className=\"flex items-center\">\n            <Settings className=\"h-5 w-5 mr-2 text-yellow-600\" />\n            <span className=\"text-yellow-800 font-medium\">Isolated Problem Management</span>\n          </div>\n          <p className=\"text-yellow-700 text-sm mt-1\">Changes only affect this {isContestMode ? 'contest' : 'set'}</p>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h2 className=\"text-xl font-semibold\">Problem Instances</h2>\n            <p className=\"text-gray-600\">Manage individual problems in this {isContestMode ? 'contest' : 'set'}</p>\n            {/* Summary of available vs added problems */}\n            {availableProblems && (\n              <div className=\"mt-2 text-sm text-gray-500\">\n                <span className=\"font-medium\">\n                  {(problemSet?.problems || problemSet?.problemInstances || []).length} added\n                </span>\n                {' • '}\n                <span>\n                  {availableProblems.length - (problemSet?.problems || problemSet?.problemInstances || []).length} available\n                </span>\n                {' • '}\n                <span className=\"text-blue-600\">\n                  {availableProblems.length} total problems\n                </span>\n              </div>\n            )}\n          </div>\n          <div className=\"flex gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowOverallAnalyticsDialog(true)}\n              className=\"bg-blue-50 hover:bg-blue-100 border-blue-200 text-blue-700\"\n            >\n              <BarChart3 className=\"h-4 w-4 mr-2\" />\n              Overall Analytics\n            </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button               onClick={() => {\n                // Reset form when opening dialog for new instance\n                form.reset({\n                  selectedProblemId: '',\n                  title: '',\n                  description: '',\n                  difficulty: 'easy',\n                  points: 100,\n                  timeLimit: 1000,\n                  memoryLimit: 256,\n                  constraints: '',\n                  inputFormat: '',\n                  outputFormat: '',\n                  setNotes: '',\n                  starterCode: {},\n                  testCases: [{\n                    input: '',\n                    expectedOutput: '',\n                    explanation: '',\n                    isHidden: false,\n                  }],\n                });\n                setEditingProblem(null);\n                setEditingProblemId(null);\n                setIsCreateDialogOpen(true);\n              }}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Problem Instance\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>{editingProblem ? 'Edit Problem Instance' : 'Add Problem Instance'}</DialogTitle>\n                <DialogDescription>\n                  {editingProblem \n                    ? 'Update the problem instance details and configuration.' \n                    : `Add a new problem instance to this ${isContestMode ? 'contest' : 'set'}.`\n                  }\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  {/* Problem Selection Dropdown */}\n                  <FormField\n                    control={form.control}\n                    name=\"selectedProblemId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Select Problem</FormLabel>\n                        <Select \n                          onValueChange={(value) => {\n                            console.log('Problem selected:', value);\n                            field.onChange(value);\n                          }} \n                          value={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Choose a problem to create instance from\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {isLoadingProblems ? (\n                              <SelectItem value=\"loading\" disabled>Loading problems...</SelectItem>\n                            ) : (\n                              availableProblems?.map((problem) => {\n                                // Check if this problem is already added\n                                const isAlreadyAdded = isProblemAlreadyAdded(problem.title);\n                                \n                                return (\n                                  <SelectItem \n                                    key={problem.id} \n                                    value={problem.id}\n                                    disabled={isAlreadyAdded}\n                                    className={isAlreadyAdded ? \"opacity-50 cursor-not-allowed\" : \"\"}\n                                  >\n                                    <div className=\"flex items-center space-x-2\">\n                                      <span>{problem.title}</span>\n                                      <Badge \n                                        variant={problem.difficulty === 'easy' ? 'default' : \n                                                 problem.difficulty === 'medium' ? 'secondary' : 'destructive'}\n                                      >\n                                        {problem.difficulty}\n                                      </Badge>\n                                      {isAlreadyAdded && (\n                                        <Badge variant=\"outline\" className=\"text-xs text-gray-500\">\n                                          Already Added\n                                        </Badge>\n                                      )}\n                                    </div>\n                                  </SelectItem>\n                                );\n                              })\n                            )}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center space-x-2\">\n                          <span>Title</span>\n                          {selectedProblemId && (\n                            <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                              Editable\n                            </Badge>\n                          )}\n                        </FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            placeholder={selectedProblemId || editingProblem ? \"Customize problem instance title\" : \"Select a problem first\"} \n                            disabled={!selectedProblemId && !editingProblem}\n                            className={selectedProblemId || editingProblem ? \"border-blue-200 focus:border-blue-400\" : \"bg-gray-50\"}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            {...field} \n                            placeholder=\"Enter problem description\"\n                            className=\"min-h-[100px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"difficulty\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Difficulty</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select difficulty\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"easy\">Easy</SelectItem>\n                              <SelectItem value=\"medium\">Medium</SelectItem>\n                              <SelectItem value=\"hard\">Hard</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"points\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Points</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\"\n                              {...field}\n                              onChange={e => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"timeLimit\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Time Limit (ms)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\"\n                              {...field}\n                              onChange={e => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"memoryLimit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Memory Limit (MB)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            {...field}\n                            onChange={e => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"setNotes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Set Notes (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            {...field} \n                            placeholder=\"Add notes specific to this problem set\"\n                            className=\"min-h-[60px]\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => {\n                        setIsCreateDialogOpen(false);\n                        setEditingProblem(null);\n                        setEditingProblemId(null);\n                          form.reset();\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createProblemInstanceMutation.isPending || updateProblemInstanceMutation.isPending}>\n                      {createProblemInstanceMutation.isPending \n                        ? 'Creating...' \n                        : updateProblemInstanceMutation.isPending\n                          ? 'Updating...'\n                          : editingProblem \n                            ? 'Update Problem' \n                            : 'Add Problem'\n                      }\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n          </div>\n        </div>\n      </div>\n\n      {/* Problem Instances List */}\n      <div className=\"space-y-4\">\n        {problemInstancesList.map((problem, index) => (\n          <Card\n            key={`${(problem as any).id || (problem as any)._id || problem.title || 'pi'}-${index}`}\n            className=\"hover:shadow-md transition-shadow\"\n          >\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <h3 className=\"text-lg font-semibold\">{problem.title}</h3>\n                    <Badge \n                      variant={problem.difficulty === 'easy' ? 'default' : \n                               problem.difficulty === 'medium' ? 'secondary' : 'destructive'}\n                      className={problem.difficulty === 'easy' ? 'bg-green-100 text-green-800' :\n                               problem.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                               'bg-red-100 text-red-800'}\n                    >\n                      {problem.difficulty}\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-800\">\n                      {problem.status}\n                    </Badge>\n                  </div>\n                  \n                  <p className=\"text-gray-600 mb-3 line-clamp-2\">\n                    {problem.description}\n                  </p>\n                  \n                  <div className=\"space-y-1 text-sm text-gray-500\">\n                    <div className=\"flex items-center\">\n                      <span className=\"font-medium mr-2\">Based on:</span>\n                      {problem.basedOn}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      <span>Last modified: {formatDate(problem.lastModified)}</span>\n                    </div>\n                    {problem.setNotes && (\n                      <div className=\"flex items-start\">\n                        <span className=\"font-medium mr-2\">Set Notes:</span>\n                        <span className=\"text-gray-600\">{problem.setNotes}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2 ml-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(problem)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  {/* <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEvaluations(problem)}\n                  >\n                    Evaluations\n                  </Button> */}\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    className=\"hover:bg-red-600\"\n                    onClick={() => {\n                      // Try different possible ID field names\n                      console.log(problem,\"clicked the delete \");\n                      const problemId = problem.id || (problem as any)._id || (problem as any).problemId;\n                      \n                      if (!problemId) {\n                        // Try to find the problem by title in the contest\n                        const contest = problemSet;\n                        const problemByTitle = contest?.problems?.find(p => p.title === problem.title) || \n                                              contest?.problemInstances?.find(p => p.title === problem.title);\n                        \n                        if (problemByTitle && problemByTitle.id) {\n                          if (confirm(`Are you sure you want to delete \"${problem.title}\"? This action cannot be undone.`)) {\n                            deleteProblemInstanceMutation.mutate(problemByTitle.id);\n                          }\n                          return;\n                        }\n                        \n                        toast({\n                          title: 'Error',\n                          description: 'Problem ID is missing. Cannot delete.',\n                          variant: 'destructive',\n                        });\n                        return;\n                      }\n                      \n                      if (confirm(`Are you sure you want to delete \"${problem.title}\"? This action cannot be undone.`)) {\n                        deleteProblemInstanceMutation.mutate(problemId);\n                      }\n                    }}\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-1\" />\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {problemInstancesList.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Eye className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No problem instances yet</h3>\n          <p className=\"text-gray-600\">Add problem instances to start building this {isContestMode ? 'contest' : 'problem set'}.</p>\n        </div>\n      )}\n\n      {/* Evaluations Dialog */}\n      <EvaluationsDialog \n        open={showEvaluationsDialog}\n        onOpenChange={setShowEvaluationsDialog}\n        problemInstance={evaluationInstance}\n        problemSetId={problemSetId}\n      />\n\n      {/* Overall Analytics Dialog */}\n      <OverallAnalyticsDialog\n        open={showOverallAnalyticsDialog}\n        onOpenChange={setShowOverallAnalyticsDialog}\n        problemSetId={problemSetId}\n        problemSetTitle={problemSet?.title}\n      />\n    </div>\n  );\n} \n\n// Evaluations Dialog Component\ninterface EvaluationsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  problemInstance: any;\n  problemSetId: string | undefined;\n}\n\nfunction EvaluationsDialog({ open, onOpenChange, problemInstance, problemSetId }: EvaluationsDialogProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  // Fetch evaluations data\n  const { data: evaluationsData, isLoading } = useQuery<{\n    students: Array<{\n      id: string;\n      name: string;\n      email: string;\n      status: 'completed' | 'not-completed';\n      submissionDate: string | null;\n      score: number | null;\n    }>;\n    summary: {\n      total: number;\n      completed: number;\n      notCompleted: number;\n    };\n  }>({\n    queryKey: [`/api/problem-sets/${problemSetId}/problems/${problemInstance?.id}/evaluations`],\n    enabled: !!problemSetId && !!problemInstance?.id && open,\n  });\n\n  if (!problemInstance) return null;\n\n  const students = evaluationsData?.students || [];\n  const completedCount = students.filter(s => s.status === 'completed').length;\n  const totalCount = students.length;\n  const completionRate = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;\n\n  // Filter students based on search and status\n  const filteredStudents = students.filter(student => {\n    const matchesSearch = student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         student.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"completed\" && student.status === \"completed\") ||\n                         (statusFilter === \"not-completed\" && student.status !== \"completed\");\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle>Problem Evaluations</DialogTitle>\n          <DialogDescription>\n            Student completion statistics for \"{problemInstance.title}\"\n          </DialogDescription>\n        </DialogHeader>\n\n        {isLoading ? (\n          <div className=\"p-8 text-center\">Loading evaluation data...</div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Summary Stats */}\n            <div className=\"grid grid-cols-3 gap-4\">\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">{completedCount}</div>\n                  <div className=\"text-sm text-gray-600\">Completed</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\">{totalCount - completedCount}</div>\n                  <div className=\"text-sm text-gray-600\">Not Completed</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{completionRate}%</div>\n                  <div className=\"text-sm text-gray-600\">Completion Rate</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filters and Search */}\n            <div className=\"flex gap-4 items-center\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search students by name or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Students</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"not-completed\">Incomplete</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Students List */}\n            <div className=\"border rounded-lg max-h-96 overflow-y-auto\">\n              <div className=\"grid grid-cols-4 gap-4 p-3 bg-gray-50 font-medium text-sm border-b\">\n                <div>Student</div>\n                <div>Status</div>\n                <div>Submission Date</div>\n                <div>Score</div>\n              </div>\n              {filteredStudents.length === 0 ? (\n                <div className=\"p-8 text-center text-gray-500\">\n                  {searchTerm || statusFilter !== \"all\" ? \"No students match the filters\" : \"No students enrolled\"}\n                </div>\n              ) : (\n                filteredStudents.map((student, index: number) => (\n                  <div key={student.id || index} className=\"grid grid-cols-4 gap-4 p-3 border-b hover:bg-gray-50\">\n                    <div>\n                      <div className=\"font-medium\">{student.name}</div>\n                      <div className=\"text-sm text-gray-600\">{student.email}</div>\n                    </div>\n                    <div>\n                      <Badge variant={student.status === 'completed' ? 'default' : 'secondary'}>\n                        {student.status === 'completed' ? 'Completed' : 'Not Completed'}\n                      </Badge>\n                    </div>\n                    <div className=\"text-sm\">\n                      {student.submissionDate ? new Date(student.submissionDate).toLocaleDateString() : '-'}\n                    </div>\n                    <div className=\"text-sm\">\n                      {student.score !== undefined && student.score !== null ? `${student.score}%` : '-'}\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex justify-end\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Overall Analytics Dialog Component\ninterface OverallAnalyticsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  problemSetId: string | undefined;\n  problemSetTitle: string | undefined;\n}\n\nfunction OverallAnalyticsDialog({ open, onOpenChange, problemSetId, problemSetTitle }: OverallAnalyticsDialogProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch overall analytics data for the problem set - NO automatic refresh\n  const { data: analyticsData, isLoading, refetch } = useQuery<{\n    students: Array<{\n      id: string;\n      name: string;\n      email: string;\n      progress: number;\n      completedProblems: number;\n      totalProblems: number;\n      lastActivity: string | null;\n      overallScore: number;\n    }>;\n    summary: {\n      totalEnrolled: number;\n      averageProgress: number;\n      averageScore: number;\n      completionRate: number;\n    };\n  }>({\n    queryKey: [`/api/problem-sets/${problemSetId}/overall-analytics`],\n    enabled: !!problemSetId && open,\n    refetchInterval: false, // Disable automatic refresh\n    refetchIntervalInBackground: false,\n    staleTime: 5 * 60 * 1000, // Consider data fresh for 5 minutes\n  });\n\n  // Comprehensive refresh mutation\n  const comprehensiveRefreshMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/problem-sets/${problemSetId}/refresh-analytics`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to refresh analytics');\n      }\n      \n      return response.json();\n    },\n    onSuccess: async (data) => {\n      toast({\n        title: \"Analytics Recalculated\",\n        description: `Successfully recalculated analytics for ${data.updatedCount} enrollments.`,\n        duration: 3000,\n      });\n      \n      // Refetch the analytics data to show updated results\n      await refetch();\n          setLastUpdated(new Date());\n    },\n    onError: (error) => {\n          toast({\n        title: \"Refresh Failed\",\n        description: error instanceof Error ? error.message : \"Failed to recalculate analytics\",\n        variant: \"destructive\",\n            duration: 3000,\n          });\n        }\n      });\n\n  // Manual refresh function\n  const handleManualRefresh = async () => {\n    try {\n      await refetch();\n          setLastUpdated(new Date());\n          toast({\n        title: \"Analytics Refreshed\",\n        description: \"Student progress data has been updated.\",\n        duration: 2000,\n      });\n    } catch (error) {\n      toast({\n        title: \"Refresh Failed\",\n        description: \"Failed to refresh analytics data. Please try again.\",\n        variant: \"destructive\",\n            duration: 3000,\n          });\n        }\n  };\n\n  // Comprehensive refresh function\n  const handleComprehensiveRefresh = async () => {\n    try {\n      await comprehensiveRefreshMutation.mutateAsync();\n    } catch (error) {\n      // Error is handled by the mutation's onError\n    }\n  };\n\n  if (!problemSetId) return null;\n\n  const students = analyticsData?.students || [];\n  const summary = analyticsData?.summary || {\n    totalEnrolled: 0,\n    averageProgress: 0,\n    averageScore: 0,\n    completionRate: 0\n  };\n\n  // Filter students based on search and status\n  const filteredStudents = students.filter(student => {\n    const matchesSearch = student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         student.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"completed\" && student.progress >= 100) ||\n                         (statusFilter === \"in-progress\" && student.progress > 0 && student.progress < 100) ||\n                         (statusFilter === \"not-started\" && student.progress === 0);\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Overall Analytics</DialogTitle>\n          <DialogDescription>\n            Student progress and completion statistics for \"{problemSetTitle}\"\n          </DialogDescription>\n          <div className=\"flex justify-between items-center mt-2\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n                <span className=\"text-sm text-gray-600 font-medium\">Manual Refresh Only</span>\n              </div>\n              <span className=\"text-sm text-gray-500\">\n                Last updated: {lastUpdated.toLocaleTimeString()}\n              </span>\n            </div>\n            <div className=\"flex space-x-2\">\n            \n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={handleComprehensiveRefresh}\n                disabled={comprehensiveRefreshMutation.isPending || isLoading}\n                className=\"border-orange-200 text-orange-700 hover:bg-orange-50\"\n              >\n                <RefreshCw className={`h-4 w-4 mr-2 ${comprehensiveRefreshMutation.isPending ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n            </div>\n          </div>\n        </DialogHeader>\n\n        {isLoading ? (\n          <div className=\"p-8 text-center\">Loading analytics data...</div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Summary Stats */}\n            <div className=\"grid grid-cols-4 gap-4\">\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {summary.totalEnrolled}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total Enrolled</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {summary.averageProgress.toFixed(1)}%\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Average Progress</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {summary.averageScore.toFixed(1)}%\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Average Score</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {summary.completionRate.toFixed(1)}%\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Completion Rate</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filters and Search */}\n            <div className=\"flex gap-4 items-center\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search students by name or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Students</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                  <SelectItem value=\"not-started\">Not Started</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Students List */}\n            <div className=\"border rounded-lg max-h-96 overflow-y-auto\">\n              <div className=\"grid grid-cols-6 gap-4 p-3 bg-gray-50 font-medium text-sm border-b\">\n                <div>Student</div>\n                <div>Progress</div>\n                <div>Problems Completed</div>\n                <div>Overall Score</div>\n                <div>Last Activity</div>\n                <div>Status</div>\n              </div>\n              {filteredStudents.length === 0 ? (\n                <div className=\"p-8 text-center text-gray-500\">\n                  {searchTerm || statusFilter !== \"all\" ? \"No students match the filters\" : \"No students enrolled\"}\n                </div>\n              ) : (\n                filteredStudents.map((student, index: number) => {\n                  const getStatusBadge = (progress: number) => {\n                    if (progress >= 100) return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Completed</Badge>;\n                    if (progress > 0) return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">In Progress</Badge>;\n                    return <Badge variant=\"outline\" className=\"bg-gray-100 text-gray-600\">Not Started</Badge>;\n                  };\n\n                  return (\n                    <div key={student.id || index} className=\"grid grid-cols-6 gap-4 p-3 border-b hover:bg-gray-50\">\n                      <div>\n                        <div className=\"font-medium\">{student.name}</div>\n                        <div className=\"text-sm text-gray-600\">{student.email}</div>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-full bg-gray-200 rounded-full h-2 mr-2\">\n                          <div \n                            className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n                            style={{ width: `${Math.min(100, Math.max(0, student.progress))}%` }}\n                          ></div>\n                        </div>\n                        <span className=\"text-sm font-medium\">{Math.max(0, Math.min(100, student.progress)).toFixed(1)}%</span>\n                      </div>\n                      <div className=\"text-sm\">\n                        {student.completedProblems} / {student.totalProblems}\n                      </div>\n                      <div className=\"text-sm font-medium\">\n                        {Math.max(0, Math.min(100, student.overallScore)).toFixed(1)}%\n                      </div>\n                      <div className=\"text-sm\">\n                        {student.lastActivity ? new Date(student.lastActivity).toLocaleDateString() : 'Never'}\n                      </div>\n                      <div>\n                        {getStatusBadge(student.progress)}\n                      </div>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex justify-end\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":56652},"client/src/pages/ContestManagement.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Switch } from '@/components/ui/switch';\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { \n  Calendar, \n  Clock, \n  Users, \n  Trophy, \n  Plus, \n  Play, \n  Pause, \n  BarChart3,\n  Eye,\n  Edit,\n  Award,\n  Trash2,\n  Settings\n} from 'lucide-react';\nimport { format } from 'date-fns';\n\n// Contest form schema\nconst contestFormSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().optional(),\n  type: z.enum(['coding', 'algorithm', 'competitive']),\n  visibility: z.enum(['public', 'private', 'unlisted']),\n  startTime: z.string(),\n  endTime: z.string(),\n  duration: z.number().min(1).optional(),\n  timeZone: z.string().default('UTC'),\n  scoringMethod: z.enum(['maximum', 'time_based', 'partial', 'acm_icpc']),\n  wrongSubmissionPenalty: z.number().min(0).default(0),\n  timePenalty: z.boolean().default(false),\n  freezeLeaderboard: z.boolean().default(false),\n  freezeTime: z.number().optional(),\n  registrationOpen: z.boolean().default(true),\n  allowLateRegistration: z.boolean().default(false),\n  prizePool: z.string().optional(),\n  certificates: z.boolean().default(false),\n  enableAnalytics: z.boolean().default(true),\n  allowReplay: z.boolean().default(true),\n});\n\ntype ContestFormData = z.infer<typeof contestFormSchema>;\n\ninterface Contest {\n  id: string;\n  title: string;\n  description?: string;\n  type: 'coding' | 'algorithm' | 'competitive';\n  visibility: 'public' | 'private' | 'unlisted';\n  status: 'draft' | 'published' | 'active' | 'ended' | 'cancelled';\n  startTime: string;\n  endTime: string;\n  duration?: number;\n  participants: string[];\n  problems: any[];\n  createdBy?: string;\n  createdAt: string;\n  updatedAt: string;\n  prizePool?: string;\n  certificates: boolean;\n}\n\nexport default function ContestManagement() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedContest, setSelectedContest] = useState<Contest | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [editingContest, setEditingContest] = useState<Contest | null>(null);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [selectedProblems, setSelectedProblems] = useState<string[]>([]);\n  const [editSelectedProblems, setEditSelectedProblems] = useState<string[]>([]);\n\n  // Fetch contests\n  const { data: contests = [], isLoading } = useQuery<Contest[]>({\n    queryKey: ['/api/contests'],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Fetch available problems for contest creation/editing\n  const { data: availableProblems = [] } = useQuery<any[]>({\n    queryKey: ['/api/contests/available-problems'],\n    enabled: (showCreateDialog || showEditDialog) && !!user && user.role === 'admin',\n  });\n\n  // Debug available problems whenever they change\n  console.log('[DEBUG] Available problems loaded:', availableProblems);\n\n  // Effect to set selected problems when available problems load and we have an editing contest\n  useEffect(() => {\n    if (editingContest && availableProblems.length > 0 && showEditDialog) {\n      console.log('[DEBUG] Setting up selected problems for edit dialog');\n      console.log('[DEBUG] Available problems:', availableProblems.map(p => ({ id: p.id, title: p.title })));\n      \n      // Extract originalProblemIds from contest problems and match them with available problems\n      let existingProblemIds: string[] = [];\n      \n      if (editingContest.problems && Array.isArray(editingContest.problems)) {\n        editingContest.problems.forEach((contestProblem: any, index: number) => {\n          console.log(`[DEBUG] Contest problem ${index}:`, contestProblem);\n          \n          // For contest problems, we need to match originalProblemId with available problem ids\n          const originalProblemId = contestProblem.originalProblemId;\n          \n          if (originalProblemId) {\n            // Find the matching available problem by ID\n            const matchingProblem = availableProblems.find(p => p.id === originalProblemId);\n            if (matchingProblem) {\n              existingProblemIds.push(matchingProblem.id);\n              console.log(`[DEBUG] Matched contest problem ${originalProblemId} with available problem ${matchingProblem.id}`);\n            } else {\n              console.log(`[DEBUG] No matching available problem found for originalProblemId: ${originalProblemId}`);\n            }\n          }\n        });\n      }\n      \n      console.log('[DEBUG] Final mapped existing problem IDs:', existingProblemIds);\n      console.log('[DEBUG] Setting editSelectedProblems to:', existingProblemIds);\n      setEditSelectedProblems(existingProblemIds);\n    }\n  }, [editingContest, availableProblems, showEditDialog]);\n\n  // Contest form\n  const form = useForm<ContestFormData>({\n    resolver: zodResolver(contestFormSchema),\n    defaultValues: {\n      type: 'coding',\n      visibility: 'public',\n      scoringMethod: 'maximum',\n      wrongSubmissionPenalty: 0,\n      timePenalty: false,\n      freezeLeaderboard: false,\n      registrationOpen: true,\n      allowLateRegistration: false,\n      certificates: false,\n      enableAnalytics: true,\n      allowReplay: true,\n      timeZone: 'UTC',\n    },\n  });\n\n  // Edit contest form\n  const editForm = useForm<ContestFormData>({\n    resolver: zodResolver(contestFormSchema),\n    defaultValues: {\n      type: 'coding',\n      visibility: 'public',\n      scoringMethod: 'maximum',\n      wrongSubmissionPenalty: 0,\n      timePenalty: false,\n      freezeLeaderboard: false,\n      registrationOpen: true,\n      allowLateRegistration: false,\n      certificates: false,\n      enableAnalytics: true,\n      allowReplay: true,\n      timeZone: 'UTC',\n    },\n  });\n\n  // Create contest mutation\n  const createContestMutation = useMutation({\n    mutationFn: async (data: ContestFormData) => {\n      const selectedProblemObjects = availableProblems.filter(problem => \n        selectedProblems.includes(problem.id)\n      );\n      \n      const contestData = {\n        ...data,\n        selectedProblems: selectedProblemObjects,\n        startTime: new Date(data.startTime),\n        endTime: new Date(data.endTime),\n        status: 'draft' as const,\n      };\n      return apiRequest('/api/contests', 'POST', contestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/contests'] });\n      setShowCreateDialog(false);\n      setSelectedProblems([]);\n      form.reset();\n    },\n  });\n\n  // Update contest mutation\n  const updateContestMutation = useMutation({\n    mutationFn: async (data: ContestFormData) => {\n      if (!editingContest) {\n        console.log('[DEBUG] No editing contest found');\n        return;\n      }\n      \n      console.log('[DEBUG] Update mutation - selectedProblems:', editSelectedProblems);\n      console.log('[DEBUG] Update mutation - availableProblems:', availableProblems);\n      \n      const selectedProblemObjects = availableProblems.filter(problem => \n        editSelectedProblems.includes(problem.id)\n      );\n      \n      console.log('[DEBUG] Selected problem objects for update:', selectedProblemObjects);\n      \n      const contestData: any = {\n        ...data,\n        startTime: new Date(data.startTime),\n        endTime: new Date(data.endTime),\n      };\n      // Only include selectedProblems when actually changing problems\n      if (Array.isArray(editSelectedProblems) && editSelectedProblems.length > 0) {\n        contestData.selectedProblems = selectedProblemObjects;\n      }\n      \n      console.log('[DEBUG] Final contest data for update:', contestData);\n      return apiRequest(`/api/contests/${editingContest.id}`, 'PUT', contestData);\n    },\n    onSuccess: (result) => {\n      console.log('[DEBUG] Update contest successful:', result);\n      queryClient.invalidateQueries({ queryKey: ['/api/contests'] });\n      setShowEditDialog(false);\n      setEditingContest(null);\n      setEditSelectedProblems([]);\n      editForm.reset();\n    },\n    onError: (error) => {\n      console.error('[DEBUG] Update contest failed:', error);\n    }\n  });\n\n  // Update contest status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ contestId, status }: { contestId: string; status: string }) => {\n      return apiRequest(`/api/contests/${contestId}`, 'PUT', { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/contests'] });\n    },\n  });\n\n  // Delete contest mutation\n  const deleteContestMutation = useMutation({\n    mutationFn: async (contestId: string) => {\n      return apiRequest(`/api/contests/${contestId}`, 'DELETE');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/contests'] });\n      setSelectedContest(null);\n    },\n  });\n\n  if (!user || user.role !== 'admin') {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Card className=\"w-96\">\n          <CardHeader>\n            <CardTitle>Access Denied</CardTitle>\n            <CardDescription>Admin privileges required to access contest management.</CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    );\n  }\n\n  const onSubmit = (data: ContestFormData) => {\n    createContestMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: ContestFormData) => {\n    console.log('[DEBUG] onEditSubmit called with:', data);\n    console.log('[DEBUG] editSelectedProblems:', editSelectedProblems);\n    console.log('[DEBUG] availableProblems:', availableProblems);\n    updateContestMutation.mutate(data);\n  };\n\n  // Handle edit contest\n  const handleEditContest = (contest: Contest) => {\n    setEditingContest(contest);\n    \n    // First show the dialog to trigger the available problems query\n    setShowEditDialog(true);\n    \n    // Populate form with existing contest data\n    editForm.reset({\n      title: contest.title,\n      description: contest.description || '',\n      type: contest.type,\n      visibility: contest.visibility,\n      startTime: new Date(contest.startTime).toISOString().slice(0, 16),\n      endTime: new Date(contest.endTime).toISOString().slice(0, 16),\n      duration: contest.duration || 120,\n      timeZone: 'UTC',\n      scoringMethod: 'maximum',\n      wrongSubmissionPenalty: 0,\n      timePenalty: false,\n      freezeLeaderboard: false,\n      registrationOpen: true,\n      allowLateRegistration: false,\n      prizePool: contest.prizePool || '',\n      certificates: contest.certificates || false,\n      enableAnalytics: true,\n      allowReplay: true,\n    });\n\n    // Set selected problems - this will be properly handled by the useEffect\n    console.log('[DEBUG] Contest object:', contest);\n    console.log('[DEBUG] Contest problems:', contest.problems);\n  };\n\n  const handleStatusChange = (contestId: string, status: string) => {\n    updateStatusMutation.mutate({ contestId, status });\n  };\n\n  const handleDeleteContest = (contestId: string) => {\n    if (confirm('Are you sure you want to delete this contest? This action cannot be undone.')) {\n      deleteContestMutation.mutate(contestId);\n    }\n  };\n\n  // Handle problem selection for create dialog\n  const handleProblemToggle = (problemId: string) => {\n    setSelectedProblems(prev => \n      prev.includes(problemId) \n        ? prev.filter(id => id !== problemId)\n        : [...prev, problemId]\n    );\n  };\n\n  // Handle problem selection for edit dialog\n  const handleEditProblemToggle = (problemId: string) => {\n    console.log('[DEBUG] Toggling problem selection for:', problemId);\n    setEditSelectedProblems(prev => {\n      const newSelection = prev.includes(problemId) \n        ? prev.filter(id => id !== problemId)\n        : [...prev, problemId];\n      console.log('[DEBUG] New edit selected problems:', newSelection);\n      return newSelection;\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft': return 'bg-gray-500';\n      case 'published': return 'bg-blue-500';\n      case 'active': return 'bg-green-500';\n      case 'ended': return 'bg-red-500';\n      case 'cancelled': return 'bg-orange-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n          <p className=\"mt-4\">Loading contests...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Contest Management</h1>\n          <p className=\"text-gray-600 mt-2\">Create and manage programming contests with advanced features</p>\n        </div>\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button size=\"lg\" className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Contest\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New Programming Contest</DialogTitle>\n              <DialogDescription>\n                Set up a comprehensive contest with problems, participants, leaderboards, and analytics.\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Contest Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Weekly Coding Challenge #1\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Contest Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"coding\">Coding Contest</SelectItem>\n                            <SelectItem value=\"algorithm\">Algorithm Challenge</SelectItem>\n                            <SelectItem value=\"competitive\">Competitive Programming</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe the contest objectives, rules, and what participants can expect...\"\n                          className=\"min-h-[100px]\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"visibility\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Visibility</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"public\">Public - Anyone can join</SelectItem>\n                            <SelectItem value=\"private\">Private - Invitation only</SelectItem>\n                            <SelectItem value=\"unlisted\">Unlisted - Hidden from public list</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"startTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Time</FormLabel>\n                        <FormControl>\n                          <Input type=\"datetime-local\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"endTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>End Time</FormLabel>\n                        <FormControl>\n                          <Input type=\"datetime-local\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"scoringMethod\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Scoring Method</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"maximum\">Maximum Score - Highest score wins</SelectItem>\n                            <SelectItem value=\"time_based\">Time-based - Speed matters</SelectItem>\n                            <SelectItem value=\"partial\">Partial Credit - Points for partial solutions</SelectItem>\n                            <SelectItem value=\"acm_icpc\">ACM ICPC Style - Problem solving focus</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"wrongSubmissionPenalty\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Wrong Submission Penalty</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"0\"\n                            placeholder=\"0\"\n                            {...field}\n                            onChange={(e) => field.onChange(Number(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Points deducted per wrong submission\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium flex items-center\">\n                      <Trophy className=\"w-5 h-5 mr-2\" />\n                      Contest Rules\n                    </h3>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"timePenalty\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Time Penalty</FormLabel>\n                            <FormDescription>\n                              Apply penalty based on submission time\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"freezeLeaderboard\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Freeze Leaderboard</FormLabel>\n                            <FormDescription>\n                              Hide leaderboard updates before contest ends\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium flex items-center\">\n                      <Users className=\"w-5 h-5 mr-2\" />\n                      Registration & Features\n                    </h3>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"registrationOpen\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Registration Open</FormLabel>\n                            <FormDescription>\n                              Allow participants to register\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"certificates\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel className=\"text-base\">Certificates</FormLabel>\n                            <FormDescription>\n                              Generate certificates for winners\n                            </FormDescription>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"prizePool\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Prize Pool (Optional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g., $500 cash prizes, Certificates, Gift cards, etc.\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Describe prizes and rewards for winners to motivate participants\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Problem Selection Section */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium flex items-center\">\n                    <Trophy className=\"w-5 h-5 mr-2\" />\n                    Select Problems\n                  </h3>\n                  <div className=\"max-h-60 overflow-y-auto border rounded-lg p-4 space-y-2\">\n                    {availableProblems.map((problem: any) => (\n                      <div key={problem.id} className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 rounded\">\n                        <input\n                          type=\"checkbox\"\n                          id={`problem-${problem.id}`}\n                          checked={selectedProblems.includes(problem.id)}\n                          onChange={() => handleProblemToggle(problem.id)}\n                          className=\"w-4 h-4\"\n                        />\n                        <label htmlFor={`problem-${problem.id}`} className=\"flex-1 cursor-pointer\">\n                          <div className=\"font-medium\">{problem.title}</div>\n                          <Badge variant=\"outline\" className=\"mt-1\">\n                            {problem.difficulty}\n                          </Badge>\n                        </label>\n                      </div>\n                    ))}\n                    {availableProblems.length === 0 && (\n                      <div className=\"text-center py-4 text-gray-500\">\n                        No problems available. Create problems first to add them to contests.\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowCreateDialog(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createContestMutation.isPending}>\n                    {createContestMutation.isPending ? 'Creating Contest...' : 'Create Contest'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Contest Grid */}\n      <div className=\"grid gap-6\">\n        {contests.map((contest: Contest) => (\n          <Card key={contest.id} className=\"overflow-hidden hover:shadow-lg transition-shadow border-l-4 border-l-blue-500\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <CardTitle className=\"text-xl font-bold\">{contest.title}</CardTitle>\n                    <Badge className={`${getStatusColor(contest.status)} text-white font-medium`}>\n                      {contest.status.charAt(0).toUpperCase() + contest.status.slice(1)}\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"font-medium\">{contest.type}</Badge>\n                    <Badge variant=\"secondary\">{contest.visibility}</Badge>\n                  </div>\n                  {contest.description && (\n                    <CardDescription className=\"text-sm line-clamp-2\">\n                      {contest.description}\n                    </CardDescription>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setSelectedContest(contest)}\n                  >\n                    <Eye className=\"w-4 h-4 mr-1\" />\n                    Manage\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEditContest(contest)}\n                  >\n                    <Edit className=\"w-4 h-4 mr-1\" />\n                    Edit\n                  </Button>\n                  {contest.status === 'draft' && (\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleStatusChange(contest.id, 'published')}\n                      className=\"bg-blue-600 hover:bg-blue-700\"\n                    >\n                      <Play className=\"w-4 h-4 mr-1\" />\n                      Publish\n                    </Button>\n                  )}\n                  {contest.status === 'published' && (\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleStatusChange(contest.id, 'active')}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      <Play className=\"w-4 h-4 mr-1\" />\n                      Start\n                    </Button>\n                  )}\n                  {contest.status === 'active' && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onClick={() => handleStatusChange(contest.id, 'ended')}\n                    >\n                      <Pause className=\"w-4 h-4 mr-1\" />\n                      End\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => handleDeleteContest(contest.id)}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              <div className=\"grid grid-cols-5 gap-4 text-sm\">\n                <div className=\"flex items-center\">\n                  <Calendar className=\"w-4 h-4 mr-2 text-blue-500\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Start</p>\n                    <p className=\"text-gray-600\">\n                      {format(new Date(contest.startTime), 'MMM dd, HH:mm')}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Clock className=\"w-4 h-4 mr-2 text-orange-500\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">End</p>\n                    <p className=\"text-gray-600\">\n                      {format(new Date(contest.endTime), 'MMM dd, HH:mm')}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Users className=\"w-4 h-4 mr-2 text-green-500\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Participants</p>\n                    <p className=\"text-gray-600\">{contest.participants.length}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Trophy className=\"w-4 h-4 mr-2 text-purple-500\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Problems</p>\n                    <p className=\"text-gray-600\">{contest.problems.length}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  <Award className=\"w-4 h-4 mr-2 text-yellow-500\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">Prize Pool</p>\n                    <p className=\"text-gray-600\">{contest.prizePool || 'None'}</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {contests.length === 0 && (\n          <Card className=\"text-center py-16 border-2 border-dashed border-gray-300\">\n            <CardContent>\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"p-4 bg-blue-100 rounded-full\">\n                  <Trophy className=\"w-16 h-16 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-medium mb-2\">No contests yet</h3>\n                  <p className=\"text-gray-600 mb-6 max-w-md\">\n                    Create your first programming contest to enable competitive coding, leaderboards, and analytics for your users.\n                  </p>\n                </div>\n                <Button onClick={() => setShowCreateDialog(true)} size=\"lg\" className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\">\n                  <Plus className=\"w-5 h-5 mr-2\" />\n                  Create Your First Contest\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Edit Contest Dialog */}\n      {showEditDialog && (\n        <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Edit Contest</DialogTitle>\n              <DialogDescription>\n                Modify contest settings and problem selection\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Contest Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Weekly Coding Challenge #1\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={editForm.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Contest Type</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"coding\">Coding Contest</SelectItem>\n                            <SelectItem value=\"algorithm\">Algorithm Challenge</SelectItem>\n                            <SelectItem value=\"competitive\">Competitive Programming</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={editForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe the contest objectives, rules, and what participants can expect...\"\n                          className=\"min-h-[100px]\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"visibility\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Visibility</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"public\">Public - Anyone can join</SelectItem>\n                            <SelectItem value=\"private\">Private - Invitation only</SelectItem>\n                            <SelectItem value=\"unlisted\">Unlisted - Hidden from public list</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"startTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Time</FormLabel>\n                        <FormControl>\n                          <Input type=\"datetime-local\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"endTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>End Time</FormLabel>\n                        <FormControl>\n                          <Input type=\"datetime-local\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={editForm.control}\n                  name=\"duration\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Duration (minutes)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"120\"\n                          {...field}\n                          onChange={(e) => field.onChange(Number(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Problem Selection Section for Edit */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium flex items-center\">\n                    <Trophy className=\"w-5 h-5 mr-2\" />\n                    Select Problems\n                  </h3>\n                  <div className=\"max-h-60 overflow-y-auto border rounded-lg p-4 space-y-2\">\n                    {availableProblems.map((problem: any) => (\n                      <div key={problem.id} className=\"flex items-center space-x-3 p-2 hover:bg-gray-50 rounded\">\n                        <input\n                          type=\"checkbox\"\n                          id={`edit-problem-${problem.id}`}\n                          checked={editSelectedProblems.includes(problem.id)}\n                          onChange={() => handleEditProblemToggle(problem.id)}\n                          className=\"w-4 h-4\"\n                        />\n                        <label htmlFor={`edit-problem-${problem.id}`} className=\"flex-1 cursor-pointer\">\n                          <div className=\"font-medium\">{problem.title}</div>\n                          <Badge variant=\"outline\" className=\"mt-1\">\n                            {problem.difficulty}\n                          </Badge>\n                        </label>\n                      </div>\n                    ))}\n                    {availableProblems.length === 0 && (\n                      <div className=\"text-center py-4 text-gray-500\">\n                        No problems available. Create problems first to add them to contests.\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowEditDialog(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={updateContestMutation.isPending}>\n                    {updateContestMutation.isPending ? 'Updating Contest...' : 'Update Contest'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Contest Detail Modal */}\n      {selectedContest && (\n        <Dialog open={!!selectedContest} onOpenChange={() => setSelectedContest(null)}>\n          <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Trophy className=\"w-6 h-6 text-blue-600\" />\n                {selectedContest.title}\n              </DialogTitle>\n              <DialogDescription>\n                Comprehensive contest management and analytics dashboard\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-6\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"problems\">Problems</TabsTrigger>\n                <TabsTrigger value=\"participants\">Participants</TabsTrigger>\n                <TabsTrigger value=\"leaderboard\">Leaderboard</TabsTrigger>\n                <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n                <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"overview\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-4 gap-4\">\n                  <Card className=\"border-l-4 border-l-blue-500\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm flex items-center\">\n                        <Users className=\"w-4 h-4 mr-2\" />\n                        Participants\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold text-blue-600\">{selectedContest.participants.length}</div>\n                      <p className=\"text-xs text-gray-600\">Registered users</p>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"border-l-4 border-l-purple-500\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm flex items-center\">\n                        <Trophy className=\"w-4 h-4 mr-2\" />\n                        Problems\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold text-purple-600\">{selectedContest.problems.length}</div>\n                      <p className=\"text-xs text-gray-600\">Total challenges</p>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"border-l-4 border-l-green-500\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm flex items-center\">\n                        <Award className=\"w-4 h-4 mr-2\" />\n                        Status\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <Badge className={`${getStatusColor(selectedContest.status)} text-white`}>\n                        {selectedContest.status.charAt(0).toUpperCase() + selectedContest.status.slice(1)}\n                      </Badge>\n                      <p className=\"text-xs text-gray-600 mt-1\">Current state</p>\n                    </CardContent>\n                  </Card>\n                  <Card className=\"border-l-4 border-l-orange-500\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm flex items-center\">\n                        <BarChart3 className=\"w-4 h-4 mr-2\" />\n                        Analytics\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold text-orange-600\">Ready</div>\n                      <p className=\"text-xs text-gray-600\">Data collection</p>\n                    </CardContent>\n                  </Card>\n                </div>\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle>Contest Details</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"font-medium\">Start Time</Label>\n                        <p className=\"text-sm text-gray-600 mt-1\">\n                          {format(new Date(selectedContest.startTime), 'PPpp')}\n                        </p>\n                      </div>\n                      <div>\n                        <Label className=\"font-medium\">End Time</Label>\n                        <p className=\"text-sm text-gray-600 mt-1\">\n                          {format(new Date(selectedContest.endTime), 'PPpp')}\n                        </p>\n                      </div>\n                    </div>\n                    {selectedContest.description && (\n                      <div>\n                        <Label className=\"font-medium\">Description</Label>\n                        <p className=\"text-sm text-gray-600 mt-1\">\n                          {selectedContest.description}\n                        </p>\n                      </div>\n                    )}\n                    {selectedContest.prizePool && (\n                      <div>\n                        <Label className=\"font-medium\">Prize Pool</Label>\n                        <p className=\"text-sm text-gray-600 mt-1 flex items-center\">\n                          <Award className=\"w-4 h-4 mr-1 text-yellow-500\" />\n                          {selectedContest.prizePool}\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              \n              <TabsContent value=\"problems\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Trophy className=\"w-5 h-5 mr-2\" />\n                      Contest Problems & Problem Isolation\n                    </CardTitle>\n                    <CardDescription>\n                      Manage problems for this contest with isolated modifications and custom settings\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-12\">\n                      <div className=\"p-4 bg-purple-100 rounded-full w-fit mx-auto mb-4\">\n                        <Trophy className=\"w-12 h-12 text-purple-600\" />\n                      </div>\n                      <h3 className=\"text-lg font-medium mb-2\">Advanced Problem Management</h3>\n                      <p className=\"text-gray-600 mb-4 max-w-md mx-auto\">\n                        Copy problems from your library, customize them for this contest, set custom points, and manage test cases independently.\n                      </p>\n                      <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Problems to Contest\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              \n              <TabsContent value=\"participants\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Users className=\"w-5 h-5 mr-2\" />\n                      Participant Management\n                    </CardTitle>\n                    <CardDescription>\n                      View registrations, manage participants, and handle invitations\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-12\">\n                      <div className=\"p-4 bg-green-100 rounded-full w-fit mx-auto mb-4\">\n                        <Users className=\"w-12 h-12 text-green-600\" />\n                      </div>\n                      <h3 className=\"text-lg font-medium mb-2\">Participant Dashboard</h3>\n                      <p className=\"text-gray-600 mb-4 max-w-md mx-auto\">\n                        Manage registrations, send invitations, track participant activity, and handle disqualifications.\n                      </p>\n                      <Button className=\"bg-green-600 hover:bg-green-700\">\n                        <Users className=\"w-4 h-4 mr-2\" />\n                        Manage Participants\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              \n              <TabsContent value=\"leaderboard\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <BarChart3 className=\"w-5 h-5 mr-2\" />\n                      Real-time Leaderboard\n                    </CardTitle>\n                    <CardDescription>\n                      Live contest rankings with advanced scoring and tie-breaking rules\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-12\">\n                      <div className=\"p-4 bg-yellow-100 rounded-full w-fit mx-auto mb-4\">\n                        <BarChart3 className=\"w-12 h-12 text-yellow-600\" />\n                      </div>\n                      <h3 className=\"text-lg font-medium mb-2\">Dynamic Leaderboard</h3>\n                      <p className=\"text-gray-600 mb-4 max-w-md mx-auto\">\n                        Real-time rankings with custom scoring, penalty tracking, freeze capabilities, and detailed submission analytics.\n                      </p>\n                      <Button className=\"bg-yellow-600 hover:bg-yellow-700\">\n                        <BarChart3 className=\"w-4 h-4 mr-2\" />\n                        View Live Leaderboard\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              \n              <TabsContent value=\"analytics\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <BarChart3 className=\"w-5 h-5 mr-2\" />\n                      Contest Analytics & Insights\n                    </CardTitle>\n                    <CardDescription>\n                      Comprehensive performance analytics and plagiarism detection\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-12\">\n                      <div className=\"p-4 bg-blue-100 rounded-full w-fit mx-auto mb-4\">\n                        <BarChart3 className=\"w-12 h-12 text-blue-600\" />\n                      </div>\n                      <h3 className=\"text-lg font-medium mb-2\">Advanced Analytics</h3>\n                      <p className=\"text-gray-600 mb-4 max-w-md mx-auto\">\n                        Detailed submission analytics, problem difficulty analysis, participant engagement metrics, and plagiarism detection reports.\n                      </p>\n                      <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                        <BarChart3 className=\"w-4 h-4 mr-2\" />\n                        View Analytics Dashboard\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              \n              <TabsContent value=\"settings\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Settings className=\"w-5 h-5 mr-2\" />\n                      Contest Configuration\n                    </CardTitle>\n                    <CardDescription>\n                      Modify contest settings, security options, and advanced features\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-12\">\n                      <div className=\"p-4 bg-gray-100 rounded-full w-fit mx-auto mb-4\">\n                        <Settings className=\"w-12 h-12 text-gray-600\" />\n                      </div>\n                      <h3 className=\"text-lg font-medium mb-2\">Advanced Settings</h3>\n                      <p className=\"text-gray-600 mb-4 max-w-md mx-auto\">\n                        Configure security settings, modify scoring rules, manage announcements, Q&A system, and export contest data.\n                      </p>\n                      <Button variant=\"outline\">\n                        <Settings className=\"w-4 h-4 mr-2\" />\n                        Manage Settings\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}","size_bytes":57048},"client/src/hooks/useAnalyticsEvents.ts":{"content":"import { useCallback } from 'react';\nimport { emitSubmissionUpdate, emitProblemCompleted, emitActivityUpdate } from '@/lib/analyticsEvents';\n\n// Custom hook for managing analytics events\nexport const useAnalyticsEvents = () => {\n  // Emit submission update event\n  const triggerSubmissionUpdate = useCallback((problemSetId: string) => {\n    emitSubmissionUpdate(problemSetId);\n  }, []);\n\n  // Emit problem completion event\n  const triggerProblemCompleted = useCallback((problemSetId: string, problemId: string | number) => {\n    emitProblemCompleted(problemSetId, problemId);\n  }, []);\n\n  // Emit activity update event\n  const triggerActivityUpdate = useCallback((problemSetId: string, userId: string) => {\n    emitActivityUpdate(problemSetId, userId);\n  }, []);\n\n  return {\n    triggerSubmissionUpdate,\n    triggerProblemCompleted,\n    triggerActivityUpdate,\n  };\n}; ","size_bytes":868},"test_files/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"test_files/test-docker-now.js":{"content":"// Immediate test to verify Docker execution with running CodeArena server\nconst axios = require('axios');\n\nconst SERVER_URL = 'http://localhost:3000';\n\nasync function testDockerExecution() {\n  console.log('🧪 TESTING DOCKER EXECUTION WITH RUNNING SERVER');\n  console.log('===============================================\\n');\n\n  // Test 1: Test the /api/execute endpoint (direct)\n  console.log('1. Testing /api/execute endpoint...');\n  try {\n    const testCode = {\n      code: \"print('Hello from Docker!')\",\n      language: 'python'\n    };\n\n    const response = await axios.post(`${SERVER_URL}/api/execute`, testCode, {\n      headers: { 'Content-Type': 'application/json' },\n      timeout: 30000\n    });\n\n    console.log('✅ /api/execute successful!');\n    console.log(`   Output: ${response.data.output}`);\n    console.log(`   Runtime: ${response.data.runtime}ms`);\n    console.log(`   Memory: ${response.data.memory}MB`);\n  } catch (error) {\n    console.log('❌ /api/execute failed:');\n    console.log(`   Status: ${error.response?.status}`);\n    console.log(`   Error: ${error.response?.data?.message || error.message}`);\n  }\n\n  // Test 2: Test the /api/problems/run endpoint (with dummy data)\n  console.log('\\n2. Testing /api/problems/run endpoint...');\n  try {\n    const testCode = {\n      problemId: 1, // Dummy problem ID\n      code: \"print('Hello from Docker Problem Run!')\",\n      language: 'python'\n    };\n\n    const response = await axios.post(`${SERVER_URL}/api/problems/run`, testCode, {\n      headers: { \n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer dummy-token' // This might fail due to auth\n      },\n      timeout: 30000\n    });\n\n    console.log('✅ /api/problems/run successful!');\n    console.log(`   Status: ${response.data.status}`);\n    console.log(`   Output: ${response.data.output}`);\n    console.log(`   Runtime: ${response.data.runtime}ms`);\n  } catch (error) {\n    console.log('❌ /api/problems/run failed:');\n    console.log(`   Status: ${error.response?.status}`);\n    console.log(`   Error: ${error.response?.data?.message || error.message}`);\n    \n    if (error.response?.status === 401) {\n      console.log('   ℹ️  This is expected - authentication required');\n    }\n  }\n\n  console.log('\\n===============================================');\n  console.log('🎯 SUMMARY:');\n  console.log('   - If /api/execute works, Docker is functioning!');\n  console.log('   - The /api/problems/run needs authentication');\n  console.log('   - Check server logs for Docker execution messages');\n  console.log('===============================================');\n}\n\n// Run the test\ntestDockerExecution().catch(console.error); ","size_bytes":2682},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/pages/admin/EditCourse.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ChevronLeft, Save, Loader2 } from 'lucide-react';\nimport axios from 'axios';\nimport { config } from '@/config';\n\ninterface Course {\n  id: number;\n  title: string;\n  description?: string;\n  isPublic: boolean;\n  enableMarkComplete?: boolean;\n  createdAt: string;\n  updatedAt?: string;\n}\n\nconst api = axios.create({\n  baseURL: config.apiUrl + '/api',\n});\n\n// Add request interceptor to include Authorization header\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport default function EditCourse() {\n  const { courseId: courseIdParam } = useParams<{ courseId: string }>();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const courseId = courseIdParam ? parseInt(courseIdParam) : NaN;\n\n  const [formData, setFormData] = useState<Partial<Course>>({\n    title: '',\n    description: '',\n    isPublic: false,\n    enableMarkComplete: true,\n  });\n\n  const { data: course, isLoading } = useQuery({\n    queryKey: ['course', courseId],\n    queryFn: async () => {\n      if (!courseId || isNaN(courseId)) {\n        throw new Error('Course ID is required');\n      }\n      const response = await api.get(`/courses/${courseId}`);\n      return response.data;\n    },\n    enabled: !!courseId && !isNaN(courseId),\n  });\n\n  // Update form data when course data is loaded\n  useEffect(() => {\n    if (course) {\n      setFormData({\n        title: course.title || '',\n        description: course.description || '',\n        isPublic: course.isPublic || false,\n        enableMarkComplete: course.enableMarkComplete ?? true,\n      });\n    }\n  }, [course]);\n\n  const updateCourse = useMutation({\n    mutationFn: async (data: Partial<Course>) => {\n      if (!courseId || isNaN(courseId)) {\n        throw new Error('Course ID is required');\n      }\n      const response = await api.put(`/courses/${courseId}`, data);\n      return response.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['course', courseId] });\n      queryClient.invalidateQueries({ queryKey: ['courses'] });\n      alert('Course updated successfully');\n      setLocation('/admin/courses');\n    },\n    onError: (error: any) => {\n      alert(error.response?.data?.message || 'Failed to update course');\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!courseId || isNaN(courseId)) {\n      alert('Course ID is missing');\n      return;\n    }\n    \n    // Validate form data\n    if (!formData.title?.trim()) {\n      alert('Course title is required');\n      return;\n    }\n\n    updateCourse.mutate(formData);\n  };\n\n  if (!courseId || isNaN(courseId)) {\n    return (\n      <div className=\"container mx-auto py-8 px-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Invalid Course ID</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The course ID is missing or invalid.\n          </p>\n          <Button onClick={() => setLocation('/admin/courses')}>\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"container mx-auto py-8 px-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Course Not Found</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The course you're looking for doesn't exist or has been deleted.\n          </p>\n          <Button onClick={() => setLocation('/admin/courses')}>\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-6\">\n      <div className=\"mb-8\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation(`/admin/courses/${courseId}`)}\n          className=\"mb-4\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-2\" />\n          Back to Course\n        </Button>\n        \n        <h1 className=\"text-3xl font-bold mb-2\">Edit Course</h1>\n        <p className=\"text-muted-foreground\">\n          Update the course details below\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Course Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Course Title</Label>\n              <Input\n                id=\"title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                placeholder=\"Enter course title\"\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Enter course description\"\n                rows={4}\n              />\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"isPublic\"\n                checked={formData.isPublic}\n                onCheckedChange={(checked) => setFormData({ ...formData, isPublic: checked })}\n              />\n              <Label htmlFor=\"isPublic\">Make this course public</Label>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"enableMarkComplete\"\n                checked={formData.enableMarkComplete}\n                onCheckedChange={(checked) => setFormData({ ...formData, enableMarkComplete: checked })}\n              />\n              <Label htmlFor=\"enableMarkComplete\">Enable Mark Complete</Label>\n            </div>\n\n            <div className=\"flex justify-end space-x-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setLocation(`/admin/courses/${courseId}`)}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={updateCourse.isPending}\n              >\n                {updateCourse.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save Changes\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7628},"server/db.ts":{"content":"import { MongoClient, Db, ReadPreferenceMode, WriteConcern } from 'mongodb';\nimport { EventEmitter } from 'events';\nimport mongoose from 'mongoose';\nimport 'dotenv/config';\n\n\n// Use the || operator to provide a hardcoded fallback for the MONGODB_URL.\nconst MONGODB_URL = process.env.MONGODB_URL || \"mongodb+srv://CodeArena:raghavmail@codearena.vl1ishe.mongodb.net/?retryWrites=true&w=majority&appName=CodeArena\";\n\n// --- MODIFICATION START ---\n// The original 'if' block would have thrown an error when the fallback URL was used.\n// This new check ensures that EITHER the environment variable OR the hardcoded string is present.\nif (!MONGODB_URL) {\n  throw new Error(\n    'MONGODB_URL is not set. Please define it in your .env file or hardcode it in db.ts.'\n  );\n}\n// --- MODIFICATION END ---\n\n\n// MongoDB connection options\nconst MONGODB_OPTIONS = {\n  serverSelectionTimeoutMS: parseInt(process.env.DB_SERVER_SELECTION_TIMEOUT || '30000'),\n  connectTimeoutMS: parseInt(process.env.DB_CONNECT_TIMEOUT || '30000'),\n  socketTimeoutMS: parseInt(process.env.DB_SOCKET_TIMEOUT || '45000'),\n  maxPoolSize: parseInt(process.env.DB_MAX_POOL_SIZE || '50'),\n  minPoolSize: parseInt(process.env.DB_MIN_POOL_SIZE || '10'),\n  retryWrites: true,\n  retryReads: true,\n  writeConcern: {\n    w: parseInt(process.env.DB_WRITE_CONCERN_W || '1'),\n    wtimeout: parseInt(process.env.DB_WRITE_CONCERN_TIMEOUT || '2500')\n  },\n  readPreference: (process.env.DB_READ_PREFERENCE || 'primary') as ReadPreferenceMode,\n  monitorCommands: process.env.DB_MONITOR_COMMANDS === 'true',\n};\n\nclass DatabaseConnection extends EventEmitter {\n  private client: MongoClient | null = null;\n  private db: Db | null = null;\n  private isConnecting: boolean = false;\n  private connectionPromise: Promise<Db> | null = null;\n  private static instance: DatabaseConnection;\n  private mongooseConnection: typeof mongoose | null = null;\n\n  private constructor() {\n    super();\n    this.connect = this.connect.bind(this);\n    this.getDb = this.getDb.bind(this);\n    this.close = this.close.bind(this);\n  }\n\n  public static getInstance(): DatabaseConnection {\n    if (!DatabaseConnection.instance) {\n      DatabaseConnection.instance = new DatabaseConnection();\n    }\n    return DatabaseConnection.instance;\n  }\n\n  private async waitForConnection(): Promise<void> {\n    if (!this.client || !this.db) {\n      throw new Error('No connection available');\n    }\n\n    let attempts = 0;\n    const maxAttempts = parseInt(process.env.DB_PING_ATTEMPTS || '5');\n    const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n    while (attempts < maxAttempts) {\n      try {\n        // Try to ping the database\n        await this.db.command({ ping: 1 });\n        return; // Connection is working\n      } catch (error) {\n        attempts++;\n        if (attempts === maxAttempts) {\n          throw new Error(`Failed to verify database connection after ${maxAttempts} attempts`);\n        }\n        await delay(1000); // Wait 1 second before retrying\n      }\n    }\n  }\n\n  async connect(): Promise<Db> {\n    try {\n      // If we're already connecting, return the existing promise\n      if (this.isConnecting && this.connectionPromise) {\n        return this.connectionPromise;\n      }\n\n      // If we already have a working connection, verify and return it\n      if (this.client && this.db) {\n        try {\n          await this.waitForConnection();\n          return this.db;\n        } catch (error) {\n          console.log('[DB] Existing connection failed, creating new connection...');\n          await this.close();\n        }\n      }\n\n      this.isConnecting = true;\n\n      // Connect using Mongoose first\n      console.log('[DB] Connecting to MongoDB with Mongoose...');\n      console.log('[DB] Database URL:', MONGODB_URL.replace(/\\/\\/[^@]*@/, '//***:***@')); // Hide credentials in logs\n      console.log(\"Connecting to MongoDB with URL:\", MONGODB_URL);\n      \n      await mongoose.connect(MONGODB_URL, {\n        serverSelectionTimeoutMS: MONGODB_OPTIONS.serverSelectionTimeoutMS,\n        socketTimeoutMS: MONGODB_OPTIONS.socketTimeoutMS,\n      });\n\n      this.mongooseConnection = mongoose;\n      console.log('[DB] Mongoose connection successful');\n\n      // Set up Mongoose connection event handlers\n      mongoose.connection.on('error', (error) => {\n        console.error('[DB] Mongoose connection error:', error);\n      });\n\n      mongoose.connection.on('disconnected', () => {\n        console.log('[DB] Mongoose disconnected');\n      });\n\n      mongoose.connection.on('reconnected', () => {\n        console.log('[DB] Mongoose reconnected');\n      });\n\n      // Now connect with MongoClient for raw operations\n      this.connectionPromise = new Promise(async (resolve, reject) => {\n        try {\n          console.log('[DB] Initializing MongoDB client connection...');\n\n          this.client = new MongoClient(MONGODB_URL, MONGODB_OPTIONS);\n\n          // Connect to MongoDB\n          await this.client.connect();\n          console.log('[DB] Connected to MongoDB server');\n\n          // Get database instance\n          this.db = this.client.db();\n          console.log('[DB] Database instance created');\n\n          // Verify the connection works\n          await this.waitForConnection();\n          console.log('[DB] Connection verified and ready');\n\n          // Set up error handling\n          this.client.on('error', (error) => {\n            console.error('[DB] MongoDB client error:', error);\n            this.handleError(error);\n          });\n\n          this.client.on('timeout', () => {\n            console.error('[DB] MongoDB operation timeout');\n            this.handleError(new Error('Operation timeout'));\n          });\n\n          resolve(this.db);\n        } catch (error) {\n          console.error('[DB] Failed to connect to MongoDB:', error);\n          this.isConnecting = false;\n          this.connectionPromise = null;\n          reject(error);\n        }\n      });\n\n      const db = await this.connectionPromise;\n      this.isConnecting = false;\n      return db;\n    } catch (error) {\n      this.isConnecting = false;\n      this.connectionPromise = null;\n      console.error('[DB] Connection error:', error);\n      throw new Error(\n        `Database connection failed: ${error instanceof Error ? error.message : 'Unknown error'}\\n` +\n        'Please check your MONGODB_URL environment variable and ensure the database is accessible.'\n      );\n    }\n  }\n\n  private async handleError(error: Error): Promise<void> {\n    console.error('[DB] Handling MongoDB error:', error);\n\n    // Close the existing connection\n    await this.close();\n\n    // Reset connection state\n    this.isConnecting = false;\n    this.connectionPromise = null;\n\n    // Emit error event\n    this.emit('error', error);\n  }\n\n  getDb(): Db {\n    if (!this.db || !this.client) {\n      throw new Error(\n        'Database not connected. Call connectToMongoDB() first or check your MONGODB_URL configuration.'\n      );\n    }\n    return this.db;\n  }\n\n  async close(): Promise<void> {\n    try {\n      if (this.mongooseConnection) {\n        await this.mongooseConnection.disconnect();\n        console.log('[DB] Mongoose connection closed');\n        this.mongooseConnection = null;\n      }\n\n      if (this.client) {\n        await this.client.close(true); // Force close\n        this.client = null;\n        this.db = null;\n        this.isConnecting = false;\n        this.connectionPromise = null;\n        console.log('[DB] MongoDB connection closed');\n      }\n    } catch (error) {\n      console.error('[DB] Error closing MongoDB connection:', error);\n      throw error;\n    }\n  }\n\n  // Health check method\n  async healthCheck(): Promise<{ status: string; latency?: number; error?: string }> {\n    if (!this.db) {\n      return { status: 'disconnected', error: 'No database connection' };\n    }\n\n    try {\n      const start = Date.now();\n      await this.db.command({ ping: 1 });\n      const latency = Date.now() - start;\n      return { status: 'connected', latency };\n    } catch (error) {\n      return {\n        status: 'error',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}\n\n// Export singleton instance functions\nexport const connectToMongoDB = async (): Promise<Db> => {\n  return DatabaseConnection.getInstance().connect();\n};\n\nexport const getDb = (): Db => {\n  try {\n    const connection = DatabaseConnection.getInstance();\n    const db = connection.getDb();\n\n    // Test the connection in background\n    db.command({ ping: 1 }).catch(async (error) => {\n      console.error('[DB] Database ping failed:', error);\n      // Try to reconnect\n      try {\n        await connection.connect();\n      } catch (reconnectError) {\n        console.error('[DB] Failed to reconnect:', reconnectError);\n      }\n    });\n\n    return db;\n  } catch (error) {\n    console.error('[DB] Error getting database connection:', error);\n    throw new Error(\n      'Database connection error. Please check your configuration and try again.\\n' +\n      'Ensure MONGODB_URL is set correctly in your environment variables.'\n    );\n  }\n};\n\nexport const closeMongoDB = async (): Promise<void> => {\n  return DatabaseConnection.getInstance().close();\n};\n\nexport const dbHealthCheck = async () => {\n  return DatabaseConnection.getInstance().healthCheck();\n};","size_bytes":9298},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"server/models/CourseModule.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface ICourseModule {\n  id: number;\n  courseId: number;\n  title: string;\n  description: string;\n  order: number;\n  textContent?: string;\n  videoUrl?: string;\n  codeExample?: string;\n  language?: string;\n  expectedOutput?: string;\n  duration?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface ICourseModuleDocument extends Omit<ICourseModule, 'id'>, Document {\n  _id: mongoose.Types.ObjectId;\n  id: number;\n}\n\nconst courseModuleSchema = new mongoose.Schema<ICourseModuleDocument>({\n  id: {\n    type: Number,\n    required: true,\n    unique: true,\n  },\n  courseId: {\n    type: Number,\n    required: [true, 'Course ID is required'],\n    index: true,\n  },\n  title: {\n    type: String,\n    required: [true, 'Module title is required'],\n    trim: true,\n  },\n  description: {\n    type: String,\n    required: [true, 'Module description is required'],\n    trim: true,\n  },\n  order: {\n    type: Number,\n    required: [true, 'Module order is required'],\n    min: [1, 'Order must be at least 1'],\n  },\n  textContent: {\n    type: String,\n    trim: true,\n  },\n  videoUrl: {\n    type: String,\n    trim: true,\n    validate: {\n      validator: function(v: string) {\n        if (!v) return true; // Allow empty\n        return /^https?:\\/\\/.+/.test(v);\n      },\n      message: 'Video URL must be a valid HTTP/HTTPS URL'\n    }\n  },\n  codeExample: {\n    type: String,\n    trim: true,\n  },\n  language: {\n    type: String,\n    trim: true,\n    default: 'javascript',\n  },\n  expectedOutput: {\n    type: String,\n    trim: true,\n  },\n  duration: {\n    type: Number,\n    min: [0, 'Duration cannot be negative'],\n  },\n}, {\n  timestamps: true,\n});\n\n// Indexes for efficient queries\ncourseModuleSchema.index({ courseId: 1, order: 1 });\ncourseModuleSchema.index({ id: 1 });\n\n// Virtual for module duration in minutes\ncourseModuleSchema.virtual('durationMinutes').get(function() {\n  return this.duration ? Math.round(this.duration / 60) : null;\n});\n\n// Method to get next module\ncourseModuleSchema.methods.getNextModule = async function() {\n  return await mongoose.model('CourseModule').findOne({\n    courseId: this.courseId,\n    order: { $gt: this.order }\n  }).sort({ order: 1 });\n};\n\n// Method to get previous module\ncourseModuleSchema.methods.getPreviousModule = async function() {\n  return await mongoose.model('CourseModule').findOne({\n    courseId: this.courseId,\n    order: { $lt: this.order }\n  }).sort({ order: -1 });\n};\n\n// Static method to find modules by course\ncourseModuleSchema.statics.findByCourse = function(courseId: number) {\n  return this.find({ courseId }).sort({ order: 1 });\n};\n\n// Static method to get next order number for a course\ncourseModuleSchema.statics.getNextOrder = async function(courseId: number) {\n  const lastModule = await this.findOne({ courseId }).sort({ order: -1 });\n  return lastModule ? lastModule.order + 1 : 1;\n};\n\nexport const CourseModule = mongoose.model<ICourseModuleDocument>('CourseModule', courseModuleSchema); ","size_bytes":2999},"server/routes/problems.ts":{"content":"import { Router } from 'express';\nimport { protect, requireAdmin } from '../middleware/auth';\nimport type { AuthRequest } from '../middleware/auth';\nimport {\n  getProblems,\n  getProblemById,\n  createProblem,\n  updateProblem,\n  getProblemUsage,\n  deleteProblem,\n  runProblemCode,\n  runProblemCodeWithCustomInput,\n} from '../controllers/problemsController';\n\n// Import execution service for cleanup\nimport executionService from '../services/executionService';\n\nconst router = Router();\n\nrouter.get('/', getProblems);\nrouter.get('/:id', getProblemById);\nrouter.get('/:id/usage', protect as any, requireAdmin as any, getProblemUsage as any);\nrouter.post('/', protect as any, requireAdmin as any, createProblem as any);\nrouter.put('/:id', protect as any, requireAdmin as any, updateProblem as any);\nrouter.delete('/:id', protect as any, requireAdmin as any, deleteProblem as any);\nrouter.post('/run', protect as any, runProblemCode as any);\nrouter.post('/run-custom-input', protect as any, runProblemCodeWithCustomInput as any);\n\n// Manual cleanup endpoint for testing\nrouter.post('/cleanup', protect as any, async (req, res) => {\n  try {\n    console.log('[PROBLEMS-ROUTE] 🧹 Manual cleanup requested');\n    \n    // Call the public cleanup method\n    await executionService.cleanupAllTempFiles();\n    \n    res.json({ \n      status: 'success',\n      message: 'Temporary files cleaned up successfully',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error: any) {\n    console.error('[PROBLEMS-ROUTE] ❌ Manual cleanup failed:', error);\n    res.status(500).json({ \n      status: 'error',\n      error: error.message \n    });\n  }\n});\n\nexport default router; ","size_bytes":1665},"server/seed-submissions.js":{"content":"import { MongoClient, ObjectId } from 'mongodb';\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/codearena';\n\nasync function seedSubmissions() {\n  const client = new MongoClient(MONGODB_URI);\n  \n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n    \n    const db = client.db();\n    const submissionsCollection = db.collection('submissions');\n    \n    // Clear existing submissions\n    await submissionsCollection.deleteMany({});\n    console.log('Cleared existing submissions');\n    \n    // Sample submissions for testing\n    const submissions = [\n      {\n        id: 1,\n        problemId: 1,\n        userId: \"user1\",\n        code: \"function reverseString(s) { return s.reverse(); }\",\n        language: \"javascript\",\n        status: \"completed\",\n        runtime: 1500,\n        memory: 45,\n        score: \"100.00\",\n        feedback: \"Excellent solution!\",\n        submittedAt: new Date(\"2025-01-15T10:30:00Z\"),\n        testResults: [\n          { testCase: 1, passed: true, output: \"olleh\" },\n          { testCase: 2, passed: true, output: \"dlrow\" }\n        ]\n      },\n      {\n        id: 2,\n        problemId: 1,\n        userId: \"user2\",\n        code: \"function reverseString(s) { return s.split('').reverse().join(''); }\",\n        language: \"javascript\",\n        status: \"completed\",\n        runtime: 1200,\n        memory: 42,\n        score: \"100.00\",\n        feedback: \"Good solution with proper string handling\",\n        submittedAt: new Date(\"2025-01-15T11:15:00Z\"),\n        testResults: [\n          { testCase: 1, passed: true, output: \"olleh\" },\n          { testCase: 2, passed: true, output: \"dlrow\" }\n        ]\n      },\n      {\n        id: 3,\n        problemId: 2,\n        userId: \"user1\",\n        code: \"function isValid(s) { return true; }\",\n        language: \"javascript\",\n        status: \"completed\",\n        runtime: 800,\n        memory: 38,\n        score: \"50.00\",\n        feedback: \"Partially correct, needs improvement\",\n        submittedAt: new Date(\"2025-01-15T12:00:00Z\"),\n        testResults: [\n          { testCase: 1, passed: true, output: \"true\" },\n          { testCase: 2, passed: false, output: \"true\" }\n        ]\n      },\n      {\n        id: 4,\n        problemId: 2,\n        userId: \"user3\",\n        code: \"function isValid(s) { /* incomplete */ }\",\n        language: \"python\",\n        status: \"in_progress\",\n        runtime: 500,\n        memory: 35,\n        score: \"0.00\",\n        feedback: \"Incomplete solution\",\n        submittedAt: new Date(\"2025-01-15T13:45:00Z\"),\n        testResults: [\n          { testCase: 1, passed: false, output: \"undefined\" },\n          { testCase: 2, passed: false, output: \"undefined\" }\n        ]\n      },\n      {\n        id: 5,\n        problemId: 3,\n        userId: \"user2\",\n        code: \"def reverseString(s): return s[::-1]\",\n        language: \"python\",\n        status: \"completed\",\n        runtime: 900,\n        memory: 40,\n        score: \"100.00\",\n        feedback: \"Perfect Python solution!\",\n        submittedAt: new Date(\"2025-01-15T14:20:00Z\"),\n        testResults: [\n          { testCase: 1, passed: true, output: \"olleh\" },\n          { testCase: 2, passed: true, output: \"dlrow\" }\n        ]\n      },\n      {\n        id: 6,\n        problemId: 1,\n        userId: \"user3\",\n        code: \"function reverseString(s) { /* wrong approach */ }\",\n        language: \"javascript\",\n        status: \"failed\",\n        runtime: 2000,\n        memory: 50,\n        score: \"0.00\",\n        feedback: \"Incorrect approach, try again\",\n        submittedAt: new Date(\"2025-01-15T15:10:00Z\"),\n        testResults: [\n          { testCase: 1, passed: false, output: \"error\" },\n          { testCase: 2, passed: false, output: \"error\" }\n        ]\n      },\n      {\n        id: 7,\n        problemId: 2,\n        userId: \"user2\",\n        code: \"function isValid(s) { const stack = []; for (let char of s) { if (char === '(' || char === '{' || char === '[') { stack.push(char); } else { const last = stack.pop(); if (!last || (char === ')' && last !== '(') || (char === '}' && last !== '{') || (char === ']' && last !== '[')) { return false; } } } return stack.length === 0; }\",\n        language: \"javascript\",\n        status: \"completed\",\n        runtime: 1100,\n        memory: 44,\n        score: \"100.00\",\n        feedback: \"Excellent implementation with proper stack usage!\",\n        submittedAt: new Date(\"2025-01-15T16:30:00Z\"),\n        testResults: [\n          { testCase: 1, passed: true, output: \"true\" },\n          { testCase: 2, passed: true, output: \"false\" }\n        ]\n      },\n      {\n        id: 8,\n        problemId: 3,\n        userId: \"user1\",\n        code: \"def reverseString(s): return ''.join(reversed(s))\",\n        language: \"python\",\n        status: \"completed\",\n        runtime: 850,\n        memory: 39,\n        score: \"100.00\",\n        feedback: \"Good alternative approach using reversed()\",\n        submittedAt: new Date(\"2025-01-15T17:45:00Z\"),\n        testResults: [\n          { testCase: 1, passed: true, output: \"olleh\" },\n          { testCase: 2, passed: true, output: \"dlrow\" }\n        ]\n      }\n    ];\n    \n    // Insert submissions\n    const result = await submissionsCollection.insertMany(submissions);\n    console.log(`Inserted ${result.insertedCount} submissions`);\n    \n    console.log('Submissions seeded successfully!');\n  } catch (error) {\n    console.error('Error seeding submissions:', error);\n  } finally {\n    await client.close();\n  }\n}\n\nseedSubmissions(); ","size_bytes":5488},"execution-system/simple-api.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst { spawn } = require('child_process');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst fetch = require('node-fetch');\nconst dotenv = require('dotenv');\n\n// Load environment variables\ndotenv.config();\n\n// Configuration from environment variables\nconst config = {\n  port: parseInt(process.env.PORT || '3000'),\n  host: process.env.HOST || '0.0.0.0',\n  nodeEnv: process.env.NODE_ENV || 'development',\n  mainApiUrl: process.env.MAIN_API_URL || 'http://localhost:3001',\n  redisUrl: process.env.REDIS_URL || 'redis://localhost:6379',\n  \n  // Execution limits\n  executionTimeout: parseInt(process.env.EXECUTION_TIMEOUT || '5000'),\n  memoryLimit: process.env.MEMORY_LIMIT || '128m',\n  cpuLimit: process.env.CPU_LIMIT || '0.5',\n  pidsLimit: parseInt(process.env.PIDS_LIMIT || '64'),\n  \n  // File system\n  tempDir: process.env.TEMP_DIR || './temp',\n  hostTempDir: process.env.HOST_TEMP_DIR || path.join(process.cwd(), 'temp'),\n  cleanupInterval: parseInt(process.env.CLEANUP_INTERVAL || '300000'), // 5 minutes\n  \n  // Security\n  userId: process.env.USER_ID || '1000',\n  groupId: process.env.GROUP_ID || '1000',\n  securityOpts: process.env.SECURITY_OPTS || 'no-new-privileges',\n  \n  // Docker\n  dockerHost: process.env.DOCKER_HOST || 'unix:///var/run/docker.sock',\n  dockerNetwork: process.env.DOCKER_NETWORK || 'none',\n  \n  // Debug\n  debugMode: process.env.DEBUG_MODE === 'true',\n  logLevel: process.env.LOG_LEVEL || 'info',\n  verboseLogging: process.env.VERBOSE_LOGGING === 'true',\n};\n\nconst app = express();\n\n// Middleware\napp.use(cors({\n  origin: config.nodeEnv === 'production' \n    ? process.env.CORS_ORIGIN?.split(',') || [config.mainApiUrl]\n    : true, // Allow all origins in development\n  credentials: true\n}));\napp.use(express.json({ limit: '10mb' }));\n\n// Language configurations\nconst SUPPORTED_LANGUAGES = (process.env.SUPPORTED_LANGUAGES || 'python,javascript,typescript,java,cpp,c').split(',');\n\n// Use configurable temp directory\nconst HOST_TEMP_DIR = config.hostTempDir;\n\n// Function to fetch problem details from main server\nasync function fetchProblem(problemId) {\n  try {\n    const apiUrl = `${config.mainApiUrl}/api/problems/${problemId}`;\n    if (config.debugMode) {\n      console.log(`[API] Fetching problem from: ${apiUrl}`);\n    }\n    \n    const response = await fetch(apiUrl, {\n      timeout: 10000, // 10 second timeout\n      headers: {\n        'User-Agent': 'CodeArena-ExecutionSystem/1.0'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch problem: ${response.statusText} (${response.status})`);\n    }\n    \n    const problem = await response.json();\n    console.log('[API] ✅ Fetched problem:', problem.title);\n    console.log('[API] 📝 Test cases count:', problem.testCases?.length || 0);\n    return problem;\n  } catch (error) {\n    console.error('[API] ❌ Error fetching problem:', error.message);\n    throw error;\n  }\n}\n\nfunction getFilename(language, sessionId = '') {\n  if (language === 'java') {\n    return `Solution${sessionId}.java`;\n  }\n  \n  const extensions = {\n    python: '.py',\n    javascript: '.js', \n    typescript: '.ts',\n    java: '.java',\n    cpp: '.cpp',\n    c: '.c'\n  };\n  \n  return `code${sessionId}${extensions[language]}`;\n}\n\nasync function writeFile(content, filename) {\n  const filepath = path.join(HOST_TEMP_DIR, filename);\n  try {\n    // Ensure any old files are removed\n    try {\n      await fs.unlink(filepath);\n    } catch (err) {\n      // Ignore if file doesn't exist\n    }\n    \n    await fs.writeFile(filepath, content, 'utf8');\n    await fs.chmod(filepath, 0o666);\n    \n    if (config.verboseLogging) {\n      console.log(`[API] ✅ Created file: ${filepath}`);\n    }\n    return filepath;\n  } catch (error) {\n    console.error(`❌ Failed to write file ${filepath}:`, error);\n    throw error;\n  }\n}\n\n// Prepare Java code with proper class name\nfunction prepareJavaCode(code, sessionId) {\n  const className = `Solution${sessionId}`;\n  \n  // If code already has a public class, replace it\n  if (code.includes('public class')) {\n    return code.replace(/public class \\w+/g, `public class ${className}`);\n  }\n  \n  // If code has a main method but no class, wrap it\n  if (code.includes('public static void main')) {\n    return `public class ${className} {\\n${code}\\n}`;\n  }\n  \n  // If code has neither, create a complete class structure\n  return `public class ${className} {\n    public static void main(String[] args) {\n        ${code}\n    }\n}`;\n}\n\nasync function executeInDocker(language, code, input, timeLimit = config.executionTimeout, sessionId = Date.now()) {\n  const dockerImages = {\n    python: 'execution-system-python',\n    javascript: 'execution-system-javascript',\n    typescript: 'execution-system-javascript',\n    java: 'execution-system-java',\n    cpp: 'execution-system-cpp',\n    c: 'execution-system-c'\n  };\n\n  const dockerImage = dockerImages[language];\n  if (!dockerImage) {\n    throw new Error(`Unsupported language: ${language}. Supported: ${SUPPORTED_LANGUAGES.join(', ')}`);\n  }\n\n  // Prepare code and filename\n  let processedCode = code;\n  const filename = getFilename(language, sessionId);\n  \n  // Special handling for Java\n  if (language === 'java') {\n    processedCode = prepareJavaCode(code, sessionId);\n  }\n\n  // Write the code file\n  await writeFile(processedCode, filename);\n\n  // Commands to run inside container\n  const commands = {\n    python: ['python3', `/tmp/${filename}`],\n    javascript: ['node', `/tmp/${filename}`],\n    typescript: ['ts-node', `/tmp/${filename}`],\n    java: ['sh', '-c', `cd /tmp && javac ${filename} && java Solution${sessionId}`],\n    cpp: ['sh', '-c', `cd /tmp && g++ -std=c++17 -o exec${sessionId} ${filename} && ./exec${sessionId}`],\n    c: ['sh', '-c', `cd /tmp && gcc -o exec${sessionId} ${filename} && ./exec${sessionId}`]\n  };\n\n  const command = commands[language];\n  \n  const dockerArgs = [\n    'run', '--rm', \n    '--network', config.dockerNetwork,\n    '--memory', config.memoryLimit, \n    '--memory-swap', config.memoryLimit, \n    '--cpus', config.cpuLimit,\n    '--pids-limit', config.pidsLimit.toString(), \n    '--ulimit', 'nofile=64:64', \n    '--ulimit', 'nproc=32:32',\n    '--ulimit', 'fsize=1000000:1000000', \n    '--user', `${config.userId}:${config.groupId}`, \n    '--read-only',\n    '--security-opt', config.securityOpts, \n    '--cap-drop', 'ALL',\n    '-v', `${HOST_TEMP_DIR}:/tmp:rw`,\n    '-i', // Enable interactive mode for stdin\n    dockerImage,\n    ...command\n  ];\n\n  if (config.verboseLogging) {\n    console.log(`[API] 🐳 Executing: docker ${dockerArgs.join(' ')}`);\n  }\n  console.log(`[API] 📝 Input for execution: \"${input || '(empty)'}\"}`);\n\n  return new Promise((resolve, reject) => {\n    const startTime = Date.now();\n    const docker = spawn('docker', dockerArgs, {\n      stdio: ['pipe', 'pipe', 'pipe'] // Enable stdin, stdout, stderr pipes\n    });\n    \n    let stdout = '';\n    let stderr = '';\n    let timeoutId;\n    let isResolved = false;\n\n    // Set timeout for execution\n    timeoutId = setTimeout(() => {\n      if (!isResolved) {\n        isResolved = true;\n        docker.kill('SIGKILL');\n        console.log('[API] ⏰ Execution timed out');\n        \n        cleanupAllTempFiles().then(() => {\n          resolve({\n            status: 'timeout',\n            output: 'Time Limit Exceeded',\n            error: 'Execution timed out',\n            runtime: timeLimit,\n            memory: 0\n          });\n        });\n      }\n    }, timeLimit);\n\n    // Handle stdout\n    docker.stdout.on('data', (data) => {\n      const chunk = data.toString();\n      stdout += chunk;\n      if (config.verboseLogging) {\n        console.log(`[API] 📤 stdout: \"${chunk.trim()}\"}`);\n      }\n    });\n\n    // Handle stderr\n    docker.stderr.on('data', (data) => {\n      const chunk = data.toString();\n      stderr += chunk;\n      if (config.verboseLogging) {\n        console.log(`[API] 📥 stderr: \"${chunk.trim()}\"}`);\n      }\n    });\n\n    // Handle process completion\n    docker.on('close', async (code) => {\n      if (!isResolved) {\n        isResolved = true;\n        clearTimeout(timeoutId);\n        const runtime = Date.now() - startTime;\n        \n        console.log(`[API] 🏁 Process exited with code ${code} in ${runtime}ms`);\n        if (config.verboseLogging) {\n          console.log(`[API] 📤 Final output: \"${stdout.trim()}\"}`);\n          if (stderr.trim()) console.log(`[API] 📥 Final error: \"${stderr.trim()}\"}`);\n        }\n        \n        // Clean up temp files\n        await cleanupAllTempFiles();\n\n        if (code !== 0) {\n          resolve({\n            status: 'error',\n            output: stdout.trim(),\n            error: stderr.trim() || 'Runtime Error',\n            runtime,\n            memory: Math.floor(Math.random() * 50) + 5\n          });\n        } else {\n          resolve({\n            status: 'success',\n            output: stdout.trim(),\n            error: stderr.trim(),\n            runtime,\n            memory: Math.floor(Math.random() * 50) + 5\n          });\n        }\n      }\n    });\n\n    // Handle process errors\n    docker.on('error', async (error) => {\n      if (!isResolved) {\n        isResolved = true;\n        clearTimeout(timeoutId);\n        console.error('[API] ❌ Docker error:', error);\n        \n        await cleanupAllTempFiles();\n        \n        resolve({\n          status: 'error',\n          output: '',\n          error: error.message,\n          runtime: Date.now() - startTime,\n          memory: 0\n        });\n      }\n    });\n\n    // Write input to stdin and close it\n    try {\n      if (input !== null && input !== undefined && input !== '') {\n        if (config.verboseLogging) {\n          console.log(`[API] 📥 Writing to docker stdin: \"${input}\"}`);\n        }\n        docker.stdin.write(input);\n        \n        // Add newline if input doesn't end with one\n        if (!input.endsWith('\\n')) {\n          docker.stdin.write('\\n');\n        }\n      }\n      \n      if (config.verboseLogging) {\n        console.log(`[API] 🔒 Closing docker stdin`);\n      }\n      docker.stdin.end();\n      \n    } catch (stdinError) {\n      console.error(`[API] ❌ Error writing to docker stdin:`, stdinError);\n      if (!isResolved) {\n        isResolved = true;\n        clearTimeout(timeoutId);\n        docker.kill('SIGKILL');\n        \n        cleanupAllTempFiles().then(() => {\n          resolve({\n            status: 'error',\n            output: '',\n            error: `Failed to provide input: ${stdinError.message}`,\n            runtime: Date.now() - startTime,\n            memory: 0\n          });\n        });\n      }\n    }\n  });\n}\n\n// Enhanced cleanup function to remove ALL temporary files\nasync function cleanupAllTempFiles() {\n  try {\n    if (config.verboseLogging) {\n      console.log(`[API] 🧹 Starting cleanup of temp directory: ${HOST_TEMP_DIR}`);\n    }\n    \n    const files = await fs.readdir(HOST_TEMP_DIR);\n    \n    // Files to clean up for each language\n    const cleanupPatterns = [\n      /^code.*\\.(py|js|ts|cpp|c)$/,\n      /^Solution.*\\.(java|class)$/,\n      /^exec.*$/,\n      /^input.*\\.txt$/,\n      /^temp.*$/,\n      /^.*\\.tmp$/\n    ];\n    \n    let cleanedCount = 0;\n    \n    for (const file of files) {\n      const shouldClean = cleanupPatterns.some(pattern => pattern.test(file));\n      \n      if (shouldClean) {\n        try {\n          const filePath = path.join(HOST_TEMP_DIR, file);\n          const stats = await fs.stat(filePath);\n          \n          if (stats.isFile()) {\n            await fs.unlink(filePath);\n            cleanedCount++;\n            if (config.verboseLogging) {\n              console.log(`[API] 🧹 Cleaned up: ${file}`);\n            }\n          }\n        } catch (err) {\n          // Ignore cleanup errors\n        }\n      }\n    }\n    \n    if (config.debugMode && cleanedCount > 0) {\n      console.log(`[API] 🧹 Cleanup completed. Removed ${cleanedCount} files.`);\n    }\n    \n  } catch (error) {\n    console.error('[API] ❌ Error during cleanup:', error);\n  }\n}\n\n// Function to normalize output for comparison\nfunction normalizeOutput(output) {\n  return output.trim().replace(/\\r\\n/g, '\\n').replace(/\\s+$/gm, '');\n}\n\n// API endpoints\napp.post('/api/problems/run', async (req, res) => {\n  try {\n    console.log('[API] 🚀 Execution request received');\n    const { code, language, problemId, testCases, timeLimit: requestTimeLimit } = req.body;\n\n    if (!code || !language) {\n      return res.status(400).json({\n        error: 'Code and language are required',\n        results: []\n      });\n    }\n\n    if (!SUPPORTED_LANGUAGES.includes(language)) {\n      return res.status(400).json({\n        error: `Unsupported language: ${language}. Supported: ${SUPPORTED_LANGUAGES.join(', ')}`,\n        results: []\n      });\n    }\n\n    console.log(`[API] 🔧 Processing ${language} code for problem ${problemId || 'custom'}`);\n\n    // Determine which test cases to run\n    let casesToRun = [];\n    let problemData = null;\n\n    if (problemId && !testCases) {\n      try {\n        problemData = await fetchProblem(problemId);\n        if (!problemData.testCases || problemData.testCases.length === 0) {\n          throw new Error('No test cases found for this problem');\n        }\n        casesToRun = problemData.testCases;\n      } catch (error) {\n        console.error('[API] ❌ Failed to fetch problem:', error);\n        return res.status(404).json({\n          error: error.message,\n          results: []\n        });\n      }\n    } else if (testCases && Array.isArray(testCases)) {\n      casesToRun = testCases;\n    } else {\n      casesToRun = [{ input: '', expectedOutput: '', isHidden: false }];\n    }\n\n    console.log(`[API] 📝 Running ${casesToRun.length} test cases`);\n\n    // Run all test cases\n    const results = [];\n    let allPassed = true;\n    const timeLimit = requestTimeLimit || (problemData?.timeLimit) || config.executionTimeout;\n    \n    for (let i = 0; i < casesToRun.length; i++) {\n      const testCase = casesToRun[i];\n      const sessionId = `${Date.now()}_${i}`;\n      \n      console.log(`[API] 🧪 Running test case ${i + 1}/${casesToRun.length}:`, {\n        input: testCase.input || '(empty)',\n        expected: testCase.isHidden ? '[Hidden]' : (testCase.expectedOutput || '(empty)')\n      });\n      \n      try {\n        const result = await executeInDocker(\n          language, \n          code, \n          testCase.input || '', \n          timeLimit,\n          sessionId\n        );\n        \n        // Compare output with expected output\n        const normalizedOutput = normalizeOutput(result.output);\n        const normalizedExpected = normalizeOutput(testCase.expectedOutput || '');\n        const passed = result.status === 'success' && normalizedOutput === normalizedExpected;\n        \n        if (!passed) allPassed = false;\n\n        const testResult = {\n          status: result.status === 'success' ? (passed ? 'success' : 'failed') : result.status,\n          output: result.output,\n          error: result.error,\n          runtime: result.runtime,\n          memory: result.memory,\n          input: testCase.input || '',\n          expectedOutput: testCase.expectedOutput || '',\n          isHidden: testCase.isHidden || false,\n          testCaseNumber: i + 1,\n          passed: passed\n        };\n        \n        results.push(testResult);\n        console.log(`[API] ${passed ? '✅' : '❌'} Test case ${i + 1}: ${passed ? 'PASSED' : 'FAILED'}`);\n        \n      } catch (error) {\n        console.error(`[API] ❌ Error executing test case ${i + 1}:`, error);\n        allPassed = false;\n        \n        results.push({\n          status: 'error',\n          output: '',\n          error: error.message,\n          runtime: 0,\n          memory: 0,\n          input: testCase.input || '',\n          expectedOutput: testCase.expectedOutput || '',\n          isHidden: testCase.isHidden || false,\n          testCaseNumber: i + 1,\n          passed: false\n        });\n      }\n    }\n    \n    console.log(`[API] 🏆 All test cases completed. Overall: ${allPassed ? 'PASSED' : 'FAILED'}`);\n    \n    // Final cleanup\n    await cleanupAllTempFiles();\n    \n    res.json({ \n      results,\n      summary: {\n        totalTests: results.length,\n        passedTests: results.filter(r => r.passed).length,\n        failedTests: results.filter(r => !r.passed).length,\n        allPassed: allPassed,\n        problemTitle: problemData?.title || 'Custom Execution',\n        difficulty: problemData?.difficulty || 'N/A'\n      }\n    });\n    \n  } catch (error) {\n    console.error('[API] ❌ Execution failed:', error);\n    await cleanupAllTempFiles();\n    \n    res.status(500).json({\n      error: error.message,\n      results: []\n    });\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ \n    status: 'ok', \n    timestamp: new Date().toISOString(),\n    supportedLanguages: SUPPORTED_LANGUAGES,\n    tempDir: HOST_TEMP_DIR,\n    config: {\n      nodeEnv: config.nodeEnv,\n      mainApiUrl: config.mainApiUrl,\n      executionTimeout: config.executionTimeout,\n      memoryLimit: config.memoryLimit,\n      cpuLimit: config.cpuLimit\n    }\n  });\n});\n\n// Manual cleanup endpoint\napp.post('/api/cleanup', async (req, res) => {\n  try {\n    console.log('[API] 🧹 Manual cleanup requested');\n    await cleanupAllTempFiles();\n    \n    res.json({ \n      status: 'success',\n      message: 'Temporary files cleaned up successfully',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('[API] ❌ Manual cleanup failed:', error);\n    res.status(500).json({ \n      status: 'error',\n      error: error.message \n    });\n  }\n});\n\n// Test cleanup endpoint\napp.get('/api/cleanup/test', async (req, res) => {\n  try {\n    const files = await fs.readdir(HOST_TEMP_DIR);\n    const fileStats = [];\n    \n    for (const file of files) {\n      try {\n        const filePath = path.join(HOST_TEMP_DIR, file);\n        const stats = await fs.stat(filePath);\n        fileStats.push({\n          name: file,\n          isFile: stats.isFile(),\n          size: stats.size,\n          modified: stats.mtime\n        });\n      } catch (err) {\n        fileStats.push({\n          name: file,\n          error: err.message\n        });\n      }\n    }\n    \n    res.json({ \n      tempDir: HOST_TEMP_DIR,\n      fileCount: files.length,\n      files: fileStats\n    });\n  } catch (error) {\n    res.status(500).json({ \n      status: 'error',\n      error: error.message \n    });\n  }\n});\n\n// Quick execution endpoint\napp.post('/api/execute', async (req, res) => {\n  try {\n    const { code, language, input = '' } = req.body;\n    \n    if (!code || !language) {\n      return res.status(400).json({ error: 'Code and language are required' });\n    }\n    \n    console.log('[API] 🧪 Quick execution test');\n    const result = await executeInDocker(language, code, input);\n    \n    await cleanupAllTempFiles();\n    \n    res.json({\n      status: result.status,\n      output: result.output,\n      error: result.error,\n      runtime: result.runtime,\n      memory: result.memory\n    });\n    \n  } catch (error) {\n    console.error('[API] ❌ Quick execution failed:', error);\n    await cleanupAllTempFiles();\n    \n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Ensure temp directory exists\nasync function ensureTempDir() {\n  try {\n    await fs.mkdir(HOST_TEMP_DIR, { recursive: true });\n    await fs.chmod(HOST_TEMP_DIR, 0o777);\n    console.log(`[API] 📁 Temp directory ready: ${HOST_TEMP_DIR}`);\n  } catch (error) {\n    console.error('[API] ❌ Failed to create temp directory:', error);\n    throw error;\n  }\n}\n\n// Periodic cleanup\nif (config.cleanupInterval > 0) {\n  setInterval(async () => {\n    if (config.debugMode) {\n      console.log('[API] 🔄 Running periodic cleanup...');\n    }\n    await cleanupAllTempFiles();\n  }, config.cleanupInterval);\n}\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  console.log('[API] 🛑 SIGTERM received, cleaning up and shutting down...');\n  await cleanupAllTempFiles();\n  process.exit(0);\n});\n\nprocess.on('SIGINT', async () => {\n  console.log('[API] 🛑 SIGINT received, cleaning up and shutting down...');\n  await cleanupAllTempFiles();\n  process.exit(0);\n});\n\n// Start server\nensureTempDir().then(() => {\n  app.listen(config.port, config.host, () => {\n    console.log(`🚀 CodeArena Execution System`);\n    console.log(`📍 Running on http://${config.host}:${config.port}`);\n    console.log(`🔧 Environment: ${config.nodeEnv}`);\n    console.log(`🔧 Supported languages: ${SUPPORTED_LANGUAGES.join(', ')}`);\n    console.log(`📁 Temp directory: ${HOST_TEMP_DIR}`);\n    console.log(`🌐 Main API: ${config.mainApiUrl}`);\n    console.log(`⏱️  Execution timeout: ${config.executionTimeout}ms`);\n    console.log(`💾 Memory limit: ${config.memoryLimit}`);\n    console.log(`🔍 Debug mode: ${config.debugMode ? 'ON' : 'OFF'}`);\n    \n    if (config.cleanupInterval > 0) {\n      console.log(`🧹 Periodic cleanup: every ${config.cleanupInterval / 1000}s`);\n    }\n    \n    console.log('\\n🔗 Endpoints:');\n    console.log(`   - Health: http://${config.host}:${config.port}/health`);\n    console.log(`   - Execute: POST http://${config.host}:${config.port}/api/problems/run`);\n    console.log(`   - Quick Test: POST http://${config.host}:${config.port}/api/execute`);\n    console.log('=====================================\\n');\n  });\n}).catch((error) => {\n  console.error('[API] ❌ Failed to start server:', error);\n  process.exit(1);\n});","size_bytes":21459},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/models/ContestQuestion.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface IContestQuestion {\n  id: string;\n  contestId: string;\n  userId: string;\n  problemId?: string;\n  question: string;\n  answer?: string;\n  answeredBy?: string;\n  answeredAt?: Date;\n  timestamp: Date;\n  status: 'pending' | 'answered';\n  isPublic: boolean;\n}\n\ninterface IContestQuestionDocument extends Omit<IContestQuestion, 'id'>, Document {\n  id: string;\n}\n\nconst contestQuestionSchema = new mongoose.Schema<IContestQuestionDocument>({\n  id: { type: String, required: true, unique: true, index: true },\n  contestId: { type: String, required: true, index: true },\n  userId: { type: String, required: true, index: true },\n  problemId: { type: String },\n  question: { type: String, required: true },\n  answer: { type: String },\n  answeredBy: { type: String },\n  answeredAt: { type: Date },\n  timestamp: { type: Date, default: Date.now },\n  status: { type: String, enum: ['pending', 'answered'], default: 'pending' },\n  isPublic: { type: Boolean, default: false },\n}, { timestamps: true });\n\ncontestQuestionSchema.index({ contestId: 1, timestamp: -1 });\n\nexport const ContestQuestion = mongoose.model<IContestQuestionDocument>('ContestQuestion', contestQuestionSchema); ","size_bytes":1228},"server/models/User.ts":{"content":"import mongoose, { Document } from 'mongoose';\nimport bcrypt from 'bcryptjs';\n\nexport interface IUser {\n  email: string;\n  password?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  googleId?: string;\n  role: 'student' | 'admin';\n  isEmailVerified: boolean;\n  emailVerificationOTP?: string;\n  emailVerificationExpires?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n  comparePassword(candidatePassword: string): Promise<boolean>;\n}\n\ninterface IUserDocument extends IUser, Document {\n  _id: mongoose.Types.ObjectId;\n}\n\nconst userSchema = new mongoose.Schema<IUserDocument>({\n  email: {\n    type: String,\n    required: [true, 'Email is required'],\n    unique: true,\n    trim: true,\n    validate: {\n      validator: function(v: string) {\n        return /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(v);\n      },\n      message: props => `${props.value} is not a valid email address!`\n    }\n  },\n  password: {\n    type: String,\n    required: [function(this: IUserDocument) {\n      return !this.googleId; // Password is required only if not using Google OAuth\n    }, 'Password is required for email registration'],\n    minlength: [8, 'Password must be at least 8 characters long'],\n    select: false, // Don't include password in query results by default\n  },\n  firstName: {\n    type: String,\n    required: [true, 'First name is required'],\n    trim: true\n  },\n  lastName: {\n    type: String,\n    required: false, // make optional\n    default: \"\",\n    trim: true\n  },\n  profileImageUrl: String,\n  googleId: String,\n  role: {\n    type: String,\n    enum: {\n      values: ['student', 'admin'],\n      message: '{VALUE} is not a valid role'\n    },\n    default: 'student',\n  },\n  isEmailVerified: {\n    type: Boolean,\n    default: false\n  },\n  emailVerificationOTP: String,\n  emailVerificationExpires: Date,\n}, {\n  timestamps: true,\n});\n\n// Hash password before saving\nuserSchema.pre('save', async function(this: IUserDocument, next: mongoose.CallbackWithoutResultAndOptionalError) {\n  try {\n    if (!this.isModified('password')) {\n      return next();\n    }\n\n    if (!this.password) {\n      return next(new Error('Password is required'));\n    }\n\n    const salt = await bcrypt.genSalt(12);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    console.error('[DEBUG] Error in password hashing:', error);\n    next(error instanceof Error ? error : new Error(String(error)));\n  }\n});\n\n// Compare password method\nuserSchema.methods.comparePassword = async function(candidatePassword: string): Promise<boolean> {\n  try {\n    if (!this.password) {\n      throw new Error('No password set for this user');\n    }\n    return await bcrypt.compare(candidatePassword, this.password);\n  } catch (error) {\n    console.error('[DEBUG] Error comparing passwords:', error);\n    throw error;\n  }\n};\n\n// Handle unique email error\nuserSchema.post('save', function(error: any, doc: any, next: any) {\n  if (error.name === 'MongoServerError' && error.code === 11000) {\n    next(new Error('Email address is already registered'));\n  } else {\n    console.error('[DEBUG] Error in User model:', error);\n    next(error);\n  }\n});\n\nexport const User = mongoose.model<IUserDocument>('User', userSchema); \n","size_bytes":3226},"client/src/pages/Courses.tsx":{"content":"import { CourseDashboard } from '@/components/courses/CourseDashboard';\n\nexport default function Courses() {\n  return <CourseDashboard />;\n} ","size_bytes":141},"client/src/components/ui/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      className=\"h-8 w-8 p-0\"\n    >\n      <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":668},"server/scripts/test-participant-registration.js":{"content":"const mongoose = require('mongoose');\nconst { Contest } = require('../models/Contest');\nconst { ContestParticipant } = require('../models/ContestParticipant');\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/codearena', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nasync function testParticipantRegistration() {\n  try {\n    console.log('Testing participant registration...');\n    \n    // Get a contest to test with\n    const contest = await Contest.findOne({}).lean();\n    if (!contest) {\n      console.log('No contests found to test with');\n      return;\n    }\n    \n    console.log(`Testing with contest: ${contest.title} (${contest.id})`);\n    console.log(`Current participants:`, contest.participants || []);\n    \n    // Test user ID (you can change this)\n    const testUserId = 'test_user_123';\n    \n    // Check if user is already a participant\n    const existingParticipant = await ContestParticipant.findOne({ \n      contestId: contest.id, \n      userId: testUserId \n    }).lean();\n    \n    if (existingParticipant) {\n      console.log(`User ${testUserId} is already a participant`);\n      console.log(`Participant data:`, existingParticipant);\n    } else {\n      console.log(`User ${testUserId} is not a participant yet`);\n    }\n    \n    // Check current contest state\n    const currentContest = await Contest.findOne({ id: contest.id }).lean();\n    console.log(`Current contest participants:`, currentContest.participants || []);\n    \n    // Test adding a participant manually\n    console.log('\\n--- Testing manual participant addition ---');\n    \n    // Method 1: Try $addToSet\n    try {\n      const addResult = await Contest.updateOne(\n        { id: contest.id },\n        { \n          $addToSet: { participants: testUserId },\n          $set: { updatedAt: new Date() }\n        }\n      );\n      console.log(`$addToSet result:`, {\n        matchedCount: addResult.matchedCount,\n        modifiedCount: addResult.modifiedCount\n      });\n    } catch (error) {\n      console.error(`$addToSet error:`, error.message);\n    }\n    \n    // Method 2: Try $set with array\n    try {\n      const setResult = await Contest.updateOne(\n        { id: contest.id },\n        { \n          $set: { \n            participants: [testUserId],\n            updatedAt: new Date() \n          }\n        }\n      );\n      console.log(`$set result:`, {\n        matchedCount: setResult.matchedCount,\n        modifiedCount: setResult.modifiedCount\n      });\n    } catch (error) {\n      console.error(`$set error:`, error.message);\n    }\n    \n    // Check final state\n    const finalContest = await Contest.findOne({ id: contest.id }).lean();\n    console.log(`\\nFinal contest participants:`, finalContest.participants || []);\n    \n    // Check if the field was added\n    console.log(`\\nContest document keys:`, Object.keys(finalContest));\n    console.log(`Has participants field:`, 'participants' in finalContest);\n    \n  } catch (error) {\n    console.error('Test failed:', error);\n  } finally {\n    mongoose.connection.close();\n    console.log('Database connection closed');\n  }\n}\n\n// Run test\ntestParticipantRegistration(); ","size_bytes":3158},"server/config/gmail.ts":{"content":"// Gmail API Configuration for Email Service\n\n// --- MODIFICATION START ---\n// The configuration now directly references environment variables.\n// If any of these are missing, the validation check below will stop the server.\nconst GMAIL_CLIENT_ID = process.env.GMAIL_CLIENT_ID;\nconst GMAIL_CLIENT_SECRET = process.env.GMAIL_CLIENT_SECRET;\nconst GMAIL_REFRESH_TOKEN = process.env.GMAIL_REFRESH_TOKEN;\nconst GMAIL_USER_EMAIL = process.env.GMAIL_USER_EMAIL;\n\n// Validate that all required Gmail environment variables are provided.\nif (!GMAIL_CLIENT_ID || !GMAIL_CLIENT_SECRET || !GMAIL_REFRESH_TOKEN || !GMAIL_USER_EMAIL) {\n  throw new Error(\n    'Missing required Gmail API environment variables. ' +\n    'Please ensure GMAIL_CLIENT_ID, GMAIL_CLIENT_SECRET, GMAIL_REFRESH_TOKEN, and GMAIL_USER_EMAIL are set in your .env file.'\n  );\n}\n// --- MODIFICATION END ---\n\n\nexport interface GmailAPIConfig {\n  clientId: string;\n  clientSecret: string;\n  refreshToken: string;\n  userEmail: string;\n}\n\nexport const gmailConfig: GmailAPIConfig = {\n  clientId: GMAIL_CLIENT_ID,\n  clientSecret: GMAIL_CLIENT_SECRET,\n  refreshToken: GMAIL_REFRESH_TOKEN,\n  userEmail: GMAIL_USER_EMAIL\n};\n\n// --- MODIFICATION START ---\n// This function is now simplified, as there's only one configuration source.\nexport const getCurrentGmailConfig = (): GmailAPIConfig => {\n  const env = process.env.NODE_ENV || 'development';\n  console.log(`🔧 Environment: ${env} - Loading Gmail API config from environment variables.`);\n  return gmailConfig;\n};\n// --- MODIFICATION END ---\n\n\n// Gmail API Scopes required for sending emails\nexport const GMAIL_SCOPES = [\n  'https://www.googleapis.com/auth/gmail.send',\n  'https://www.googleapis.com/auth/gmail.compose'\n];\n\n// Gmail API discovery URL\nexport const GMAIL_DISCOVERY_URL = 'https://gmail.googleapis.com/$discovery/rest?version=v1';","size_bytes":1846},"client/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"src\"),\n    },\n  },\n  build: {\n    outDir: \"build\",\n    emptyOutDir: true,\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          ui: ['@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu', '@radix-ui/react-select'],\n        },\n      },\n    },\n    target: 'es2020',\n    minify: 'esbuild',\n    sourcemap: false,\n    chunkSizeWarningLimit: 1000,\n    assetsInlineLimit: 4096,\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    proxy: {\n      '/api': {\n        target: process.env.VITE_API_URL || 'http://localhost:3000',\n        changeOrigin: true,\n        secure: false,\n        ws: true,\n      }\n    },\n    hmr: {\n      overlay: false\n    }\n  },\n  optimizeDeps: {\n    include: ['react', 'react-dom'],\n    exclude: ['@replit/vite-plugin-cartographer', '@replit/vite-plugin-runtime-error-modal'],\n  },\n  esbuild: {\n    target: 'es2020',\n    format: 'esm',\n  },\n  define: {\n    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development'),\n  },\n  base: '/',\n});","size_bytes":1270},"client/src/pages/admin-dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useMaintenanceMode } from \"@/contexts/MaintenanceModeContext\";\nimport { MaintenanceMessage } from \"@/components/MaintenanceMessage\";\nimport {\n  Users,\n  Trophy,\n  BookOpen,\n  FileText,\n  Calendar,\n  TrendingUp,\n  UserPlus,\n  Settings,\n  Edit,\n  Trash2,\n  Plus,\n  Shield,\n  MessageSquare,\n  UsersIcon,\n  BarChart3,\n  Target,\n  Activity\n} from \"lucide-react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { useState, useCallback, useEffect, useMemo } from \"react\";\nimport type { User, Assignment, Group, Announcement } from \"@/shared/schema\";\nimport { config } from \"@/config\";\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent\n} from \"@/components/ui/chart\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer } from \"recharts\";\nimport { AvatarFallback, AvatarImage, Avatar } from \"@/components/ui/avatar\";\n\n// Analytics type definition\ninterface Analytics {\n  totalUsers: number;\n  totalProblems: number;\n  totalSubmissions: number;\n  activeContests: number;\n  recentActivity: Array<{\n    id: string;\n    problemId: string;\n    language: string;\n    status: string;\n    timestamp: string;\n  }>;\n}\n\n// Form schemas\nconst assignmentSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  problems: z.array(z.number()).min(1, \"At least one problem is required\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  assignedTo: z.array(z.string()).min(1, \"At least one student must be assigned\"),\n});\n\nconst groupSchema = z.object({\n  name: z.string().min(1, \"Group name is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  members: z.array(z.string()).min(1, \"At least one member is required\"),\n  instructors: z.array(z.string()).min(1, \"At least one instructor is required\"),\n});\n\nconst announcementSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  priority: z.enum([\"low\", \"medium\", \"high\"]),\n  targetAudience: z.array(z.string()).min(1, \"Target audience is required\"),\n  isVisible: z.boolean().default(true),\n});\n\nconst createUserSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  role: z.enum([\"student\", \"admin\"]).default(\"student\"),\n});\n\nexport default function AdminDashboard() {\n  const [location, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const { \n    isMaintenanceMode, \n    maintenanceFrom, \n    maintenanceTo, \n    timeUntilMaintenance,\n    timeUntilMaintenanceEnd,\n    isMaintenanceActive,\n    isPreMaintenanceWarning,\n    toggleMaintenanceMode, \n    setMaintenanceMode,\n    setMaintenanceTimes \n  } = useMaintenanceMode();\n\n  // Debug: Log when isMaintenanceMode changes\n  useEffect(() => {\n    console.log('Admin Dashboard - isMaintenanceMode changed to:', isMaintenanceMode);\n  }, [isMaintenanceMode]);\n\n  // Sync with server maintenance status\n  const { data: serverMaintenanceStatus, isLoading: serverStatusLoading } = useQuery({\n    queryKey: ['/api/admin/maintenance/status'],\n    queryFn: async () => {\n      const res = await fetch('/api/admin/maintenance/status', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (!res.ok) throw new Error('Failed to fetch maintenance status');\n      const data = await res.json();\n      console.log('Admin Dashboard - Server Status Loaded:', data);\n      return data;\n    },\n    refetchInterval: 1000, // Refetch every 1 second for real-time updates\n    enabled: isAuthenticated && user?.role === 'admin'\n  });\n\n  // Update maintenance configuration on server\n  const updateMaintenanceConfig = useMutation({\n    mutationFn: async (config: { isMaintenanceMode: boolean; maintenanceFrom: string; maintenanceTo: string }) => {\n      console.log('=== CLIENT SENDING MAINTENANCE CONFIG ===');\n      console.log('Config to send:', config);\n      console.log('Token:', token ? 'Present' : 'Missing');\n      \n      const res = await fetch('/api/admin/maintenance/config', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(config)\n      });\n      \n      console.log('Response status:', res.status);\n      console.log('Response headers:', Object.fromEntries(res.headers.entries()));\n      \n      if (!res.ok) {\n        const errorData = await res.json();\n        console.error('Server error response:', errorData);\n        throw new Error('Failed to update maintenance config');\n      }\n      \n      const result = await res.json();\n      console.log('Server success response:', result);\n      return result;\n    },\n    onSuccess: () => {\n      console.log('Mutation successful, forcing refresh...');\n      // Force refresh the server status\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/maintenance/status'] });\n      toast({\n        title: \"Maintenance configuration updated\",\n        description: \"Server maintenance settings have been updated successfully.\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating maintenance config\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Handle maintenance mode toggle with server sync\n  const handleMaintenanceToggle = (enabled: boolean) => {\n    console.log('=== ADMIN TOGGLE CHANGE ===');\n    console.log('Current state before toggle:', isMaintenanceMode);\n    console.log('Toggling to:', enabled);\n    if (enabled) {\n      toggleMaintenanceMode();\n      // When enabling, sync with server\n      const configToSend = {\n        isMaintenanceMode: true,\n        maintenanceFrom: maintenanceFrom,\n        maintenanceTo: maintenanceTo\n      };\n      console.log('Sending TURN ON config:', configToSend);\n      updateMaintenanceConfig.mutate(configToSend);\n    } else {\n      // Disable maintenance mode - update local state immediately\n      setMaintenanceMode(false);\n      setMaintenanceTimes('', '');\n      // Also update server\n      const configToSend = {\n        isMaintenanceMode: false,\n        maintenanceFrom: '',\n        maintenanceTo: ''\n      };\n      console.log('Sending TURN OFF config:', configToSend);\n      updateMaintenanceConfig.mutate(configToSend);\n    }\n  };\n\n  // Handle maintenance times change with server sync\n  const handleMaintenanceTimesChange = (from: string, to: string) => {\n    setMaintenanceTimes(from, to);\n    if (isMaintenanceMode) {\n      updateMaintenanceConfig.mutate({\n        isMaintenanceMode: true,\n        maintenanceFrom: from,\n        maintenanceTo: to\n      });\n    }\n  };\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n  const [showCreateAssignment, setShowCreateAssignment] = useState(false);\n  const [showCreateGroup, setShowCreateGroup] = useState(false);\n  const [showCreateAnnouncement, setShowCreateAnnouncement] = useState(false);\n  const [showCreateUser, setShowCreateUser] = useState(false);\n\n  // Memoize token and fetch options to prevent recreation on every render\n  const token = useMemo(() => localStorage.getItem('token'), []);\n  const fetchOptions = useMemo(() => ({\n    credentials: 'include' as const,\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  }), [token]);\n\n  useEffect(() => {\n    // Handle authentication data from URL parameters (Google OAuth callback)\n    const params = new URLSearchParams(window.location.search);\n    const token = params.get('token');\n    const userStr = params.get('user');\n\n    if (token && userStr) {\n      try {\n        const userData = JSON.parse(decodeURIComponent(userStr));\n        // Store auth data\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(userData));\n\n        // Clean up URL parameters\n        const cleanUrl = window.location.pathname;\n        window.history.replaceState({}, document.title, cleanUrl);\n\n        // Show success message\n        toast({\n          title: \"Successfully signed in\",\n          description: `Welcome back${userData.firstName ? ', ' + userData.firstName : ''}!`\n        });\n      } catch (error) {\n        console.error('[DEBUG] Error processing auth data:', error);\n      }\n    }\n  }, []); // Run only once on mount\n\n  // Memoize the auth check to prevent unnecessary redirects\n  const shouldRedirect = useMemo(() =>\n    !isAuthenticated || user?.role !== 'admin',\n    [isAuthenticated, user?.role]\n  );\n\n  useEffect(() => {\n    if (shouldRedirect) {\n      setLocation('/dashboard');\n    }\n  }, [shouldRedirect, setLocation]);\n\n  // Early return if not authenticated or not admin\n  if (shouldRedirect) {\n    return null;\n  }\n\n  // Queries with proper configuration and error handling\n  const { data: analytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"admin\", \"analytics\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/analytics/summary`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated,\n    staleTime: 30000, // Add staleTime to prevent frequent refetches\n  });\n\n  // Platform Statistics Time Series Data\n  const { data: platformStats, isLoading: platformStatsLoading } = useQuery({\n    queryKey: [\"admin\", \"analytics\", \"platform-stats\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/analytics/platform-stats`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated,\n    staleTime: 30000,\n  });\n\n  // User Distribution Time Series Data\n  const { data: userDistribution, isLoading: userDistributionLoading } = useQuery({\n    queryKey: [\"admin\", \"analytics\", \"user-distribution\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/analytics/user-distribution`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated,\n    staleTime: 30000,\n  });\n\n  // Recent admin activities (version history)\n  const { data: recentAdminActivities } = useQuery({\n    queryKey: [\"admin\", \"version-history\", \"recent\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/version-history/recent?limit=4`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated,\n    staleTime: 15000,\n  });\n\n  // Users query\n  const { data: users, isLoading: usersLoading } = useQuery({\n    queryKey: [\"admin\", \"users\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/users`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated,\n    staleTime: 30000,\n  });\n\n  // Submissions query\n  const { data: submissions, isLoading: submissionsLoading } = useQuery({\n    queryKey: [\"admin\", \"submissions\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/submissions`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated,\n    staleTime: 30000,\n  });\n\n  // Submission stats query\n  const { data: submissionStats, isLoading: submissionStatsLoading } = useQuery({\n    queryKey: [\"admin\", \"submission-stats\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/submissions/stats`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated,\n    staleTime: 30000,\n  });\n\n  // Assignments query\n  const { data: assignments, isLoading: assignmentsLoading } = useQuery({\n    queryKey: [\"admin\", \"assignments\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/assignments`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated,\n    staleTime: 30000,\n  });\n\n  // Groups query\n  const { data: groups, isLoading: groupsLoading } = useQuery({\n    queryKey: [\"admin\", \"groups\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/groups`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated,\n    staleTime: 30000,\n  });\n\n  // Announcements query\n  const { data: announcements, isLoading: announcementsLoading } = useQuery({\n    queryKey: [\"admin\", \"announcements\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/admin/announcements`, fetchOptions);\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    retry: false,\n    enabled: !!token && isAuthenticated,\n    staleTime: 30000,\n  });\n\n  // Mutations\n  const updateUserRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      const res = await fetch(`${config.apiUrl}/api/admin/users/${userId}/role`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ role }),\n      });\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin\", \"users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof createUserSchema>) => {\n      const res = await fetch(`${config.apiUrl}/api/admin/users`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin\", \"users\"] });\n      setShowCreateUser(false);\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const res = await fetch(`${config.apiUrl}/api/admin/users/${userId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!res.ok && res.status !== 204) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin\", \"users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createAssignmentMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof assignmentSchema>) => {\n      const res = await fetch(`${config.apiUrl}/api/admin/assignments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin\", \"assignments\"] });\n      setShowCreateAssignment(false);\n      toast({\n        title: \"Success\",\n        description: \"Assignment created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createGroupMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof groupSchema>) => {\n      const res = await fetch(`${config.apiUrl}/api/admin/groups`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin\", \"groups\"] });\n      setShowCreateGroup(false);\n      toast({\n        title: \"Success\",\n        description: \"Group created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create group\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createAnnouncementMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof announcementSchema>) => {\n      const res = await fetch(`${config.apiUrl}/api/admin/announcements`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      });\n      if (!res.ok) {\n        const error = await res.text();\n        throw new Error(error);\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin\", \"announcements\"] });\n      setShowCreateAnnouncement(false);\n      toast({\n        title: \"Success\",\n        description: \"Announcement created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create announcement\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Forms\n  const assignmentForm = useForm<z.infer<typeof assignmentSchema>>({\n    resolver: zodResolver(assignmentSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      problems: [],\n      dueDate: \"\",\n      assignedTo: [],\n    },\n  });\n\n  const groupForm = useForm<z.infer<typeof groupSchema>>({\n    resolver: zodResolver(groupSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      members: [],\n      instructors: [],\n    },\n  });\n\n  const announcementForm = useForm<z.infer<typeof announcementSchema>>({\n    resolver: zodResolver(announcementSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      priority: \"medium\",\n      targetAudience: [\"all\"],\n      isVisible: true,\n    },\n  });\n\n  const createUserForm = useForm<z.infer<typeof createUserSchema>>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      role: \"student\",\n    },\n  });\n\n  // Memoized handlers to prevent re-renders\n  const [pendingRoleChange, setPendingRoleChange] = useState<{\n    userId: string;\n    newRole: string;\n    currentRole?: string;\n    name?: string;\n  } | null>(null);\n\n  const handleUpdateUserRole = useCallback((userId: string, role: string, currentRole?: string, name?: string) => {\n    if (currentRole !== role) {\n      setPendingRoleChange({ userId, newRole: role, currentRole, name });\n      return;\n    }\n    updateUserRoleMutation.mutate({ userId, role });\n  }, [updateUserRoleMutation]);\n\n  const handleTabChange = useCallback((value: string) => {\n    setSelectedTab(value);\n  }, []);\n\n  const onAssignmentSubmit = (data: z.infer<typeof assignmentSchema>) => {\n    createAssignmentMutation.mutate(data);\n  };\n\n  const onGroupSubmit = (data: z.infer<typeof groupSchema>) => {\n    createGroupMutation.mutate(data);\n  };\n\n  const onAnnouncementSubmit = (data: z.infer<typeof announcementSchema>) => {\n    createAnnouncementMutation.mutate(data);\n  };\n\n  const onCreateUserSubmit = (data: z.infer<typeof createUserSchema>) => {\n    createUserMutation.mutate(data);\n  };\n\n  if (analyticsLoading || usersLoading || assignmentsLoading || groupsLoading || announcementsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {/* Maintenance Message Banner */}\n      <MaintenanceMessage />\n      \n      <div className=\"container mx-auto p-4 sm:p-6 space-y-4 sm:space-y-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-2xl lg:text-3xl font-bold\">Admin Dashboard</h1>\n            <p className=\"text-muted-foreground\">Manage your CodeArena platform</p>\n          </div>\n        {/* create assignment , group , announcement \n         <div className=\"flex flex-col sm:flex-row gap-2\">\n          <Button onClick={() => setShowCreateAssignment(true)} className=\"w-full sm:w-auto\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Assignment\n          </Button>\n          <Button onClick={() => setShowCreateGroup(true)} variant=\"outline\" className=\"w-full sm:w-auto\">\n            <UsersIcon className=\"w-4 h-4 mr-2\" />\n            Create Group\n          </Button>\n          <Button onClick={() => setShowCreateAnnouncement(true)} variant=\"outline\" className=\"w-full sm:w-auto\">\n            <MessageSquare className=\"w-4 h-4 mr-2\" />\n            Create Announcement\n          </Button>\n        </div> */}\n      </div>\n\n      <Tabs value={selectedTab} onValueChange={handleTabChange} className=\"space-y-4\">\n        <div className=\"w-full overflow-x-auto pb-2\">\n          <TabsList className=\"flex h-10 w-max min-w-full lg:w-full lg:grid lg:grid-cols-2\">\n            <TabsTrigger value=\"overview\" className=\"flex-shrink-0 whitespace-nowrap\">Overview</TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"flex-shrink-0 whitespace-nowrap\">Users</TabsTrigger>\n\n          </TabsList>\n        </div>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid gap-3 sm:gap-4 sm:grid-cols-2 lg:grid-cols-2\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics?.totalUsers || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">Registered students and admins</p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Problems</CardTitle>\n                <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{analytics?.totalProblems || 0}</div>\n                <p className=\"text-xs text-muted-foreground\">Available coding problems</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Maintenance Mode Toggle */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                System Settings\n              </CardTitle>\n              <CardDescription>Manage system-wide settings and maintenance mode</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"maintenance-mode\" className=\"text-base font-medium\">\n                    Maintenance Mode\n                  </Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Enable to schedule maintenance and stop server access\n                  </p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Switch\n                    id=\"maintenance-mode\"\n                    checked={isMaintenanceMode}\n                    onCheckedChange={handleMaintenanceToggle}\n                    disabled={serverStatusLoading}\n                  />\n                  {serverStatusLoading && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      Loading...\n                    </div>\n                  )}\n                  <div className=\"text-xs text-muted-foreground\">\n                    State: {isMaintenanceMode ? 'ON' : 'OFF'}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maintenance-from\" className={`text-sm font-medium ${!isMaintenanceMode ? 'text-muted-foreground' : ''}`}>\n                      Maintenance Start Time\n                    </Label>\n                    <Input\n                      id=\"maintenance-from\"\n                      type=\"time\"\n                      value={maintenanceFrom}\n                      onChange={(e) => handleMaintenanceTimesChange(e.target.value, maintenanceTo)}\n                      disabled={!isMaintenanceMode}\n                      className={`w-full ${!isMaintenanceMode ? 'opacity-50 cursor-not-allowed' : ''}`}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maintenance-to\" className={`text-sm font-medium ${!isMaintenanceMode ? 'text-muted-foreground' : ''}`}>\n                      Maintenance End Time\n                    </Label>\n                    <Input\n                      id=\"maintenance-to\"\n                      type=\"time\"\n                      value={maintenanceTo}\n                      onChange={(e) => handleMaintenanceTimesChange(maintenanceFrom, e.target.value)}\n                      disabled={!isMaintenanceMode}\n                      className={`w-full ${!isMaintenanceMode ? 'opacity-50 cursor-not-allowed' : ''}`}\n                    />\n                  </div>\n                </div>\n                \n                {!isMaintenanceMode && (\n                  <div className=\"p-3 bg-gray-50 dark:bg-gray-950/20 border border-gray-200 dark:border-gray-800 rounded-md\">\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      💡 <strong>Tip:</strong> Enable maintenance mode above to schedule server maintenance and set start/end times.\n                    </p>\n                  </div>\n                )}\n                \n            {isMaintenanceMode && (\n              <>\n                {/* Admin Status Display */}\n                <div className={`p-4 rounded-md border ${\n                  isMaintenanceActive \n                    ? 'bg-red-50 dark:bg-red-950/20 border-red-200 dark:border-red-800' \n                    : isPreMaintenanceWarning \n                      ? 'bg-amber-50 dark:bg-amber-950/20 border-amber-200 dark:border-amber-800'\n                      : 'bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800'\n                }`}>\n                      <div className=\"space-y-2\">\n                        <p className={`text-sm font-medium ${\n                          isMaintenanceActive \n                            ? 'text-red-800 dark:text-red-200' \n                            : isPreMaintenanceWarning \n                              ? 'text-amber-800 dark:text-amber-200'\n                              : 'text-blue-800 dark:text-blue-200'\n                        }`}>\n                          {isMaintenanceActive \n                            ? '🔴 Server is DOWN - Maintenance in progress'\n                            : isPreMaintenanceWarning \n                              ? '⚠️ Pre-maintenance warning active'\n                              : '📅 Maintenance scheduled'\n                          }\n                        </p>\n                        \n                        {maintenanceFrom && maintenanceTo && (\n                          <p className={`text-sm ${\n                            isMaintenanceActive \n                              ? 'text-red-700 dark:text-red-300' \n                              : isPreMaintenanceWarning \n                                ? 'text-amber-700 dark:text-amber-300'\n                                : 'text-blue-700 dark:text-blue-300'\n                          }`}>\n                            Scheduled: {maintenanceFrom} - {maintenanceTo}\n                          </p>\n                        )}\n                        \n                        {timeUntilMaintenance !== null && timeUntilMaintenance > 0 && (\n                          <p className={`text-sm ${\n                            isPreMaintenanceWarning \n                              ? 'text-amber-700 dark:text-amber-300'\n                              : 'text-blue-700 dark:text-blue-300'\n                          }`}>\n                            {isPreMaintenanceWarning ? 'Starts in:' : 'Time until start:'} {Math.floor(timeUntilMaintenance / 60)}h {timeUntilMaintenance % 60}m\n                          </p>\n                        )}\n                        \n                        {isMaintenanceActive && timeUntilMaintenanceEnd !== null && timeUntilMaintenanceEnd > 0 && (\n                          <p className=\"text-sm text-red-700 dark:text-red-300\">\n                            Estimated completion in: {Math.floor(timeUntilMaintenanceEnd / 60)}h {timeUntilMaintenanceEnd % 60}m\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    \n                {/* Admin Status Info */}\n                <div className=\"p-3 bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded-md\">\n                  <p className=\"text-sm text-green-800 dark:text-green-200\">\n                    <strong>✅ Admin Access:</strong> You can continue working normally during maintenance. \n                    Regular users will see a blocking modal, but you have full access to all features.\n                  </p>\n                </div>\n                \n                {/* Warning about server shutdown */}\n                <div className=\"p-3 bg-orange-50 dark:bg-orange-950/20 border border-orange-200 dark:border-orange-800 rounded-md\">\n                  <p className=\"text-sm text-orange-800 dark:text-orange-200\">\n                    <strong>⚠️ Important:</strong> When maintenance is active, regular users will be blocked with a modal and unable to access the website. \n                    This includes production environments.\n                  </p>\n                </div>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <div>\n                <CardTitle>Recent Admin Activities</CardTitle>\n                <CardDescription>Latest 4 version history entries</CardDescription>\n              </div>\n              <Button variant=\"outline\" onClick={() => setLocation('/admin/version-history')}>Show More</Button>\n            </CardHeader>\n            <CardContent>\n              {recentAdminActivities && recentAdminActivities.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {recentAdminActivities.map((a: any) => (\n                    <div key={a.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"min-w-0\">\n                        <p className=\"font-medium truncate\">{a.description || `${a.entityType}${a.entityId ? ` #${a.entityId}` : ''}`}</p>\n                        <p className=\"text-sm text-muted-foreground truncate\">{a.action}</p>\n\n                      </div>\n                      <div className=\"text-right ml-4\">\n                        <p className=\"text-sm\">{a.adminName || a.adminId}</p>\n                        <p className=\"text-xs text-muted-foreground\">{new Date(a.createdAt).toLocaleString()}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground\">No recent admin activities</p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>User Management</CardTitle>\n                  <CardDescription>Manage user roles and permissions</CardDescription>\n                </div>\n                <Button onClick={() => setShowCreateUser(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create User\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {usersLoading ? (\n                <div>Loading users...</div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Joined</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {users?.map((user: User) => (\n                      <TableRow key={user.id}>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            {user.profileImageUrl ? (\n                              <img\n                                src={user.profileImageUrl}\n                                alt=\"Profile\"\n                                className=\"w-8 h-8 rounded-full object-cover\"\n                              />\n                            ) : (\n                              <Avatar className=\"w-8 h-8 rounded-full  overflow-hidden\">\n                                <AvatarImage src={user.profileImageUrl}  />\n                                <AvatarFallback className=\"flex bg-green-600 text-white items-center justify-center w-full h-full text-center\">\n                                  {user.firstName?.charAt(0)}\n                                </AvatarFallback>\n                              </Avatar>\n                            )}\n                            <div>\n                              <p className=\"font-medium\">{user.firstName} {user.lastName}</p>\n                            </div>\n                          </div>\n\n                        </TableCell>\n                        <TableCell>{user.email}</TableCell>\n                        <TableCell>\n                          <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                            {user.role || 'student'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{new Date(user.createdAt!).toLocaleDateString()}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Select\n                              value={user.role || 'student'}\n                              onValueChange={(role) => handleUpdateUserRole(user.id, role, user.role, `${user.firstName} ${user.lastName}`)}\n                            >\n                              <SelectTrigger className=\"w-32\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"student\">Student</SelectItem>\n                                <SelectItem value=\"admin\">Admin</SelectItem>\n                              </SelectContent>\n                            </Select>\n\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button variant=\"destructive\" size=\"sm\" className=\"hover:bg-red-600\">\n                                  <Trash2 className=\"w-4 h-4 mr-1\" />\n                                  Delete\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Delete User</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Are you sure you want to delete {user.firstName} {user.lastName} ({user.email})? This action cannot be undone.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction\n                                    onClick={() => deleteUserMutation.mutate(user.id)}\n                                    className=\"bg-red-600 hover:bg-red-700\"\n                                  >\n                                    Delete User\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Create User Dialog */}\n        <Dialog open={showCreateUser} onOpenChange={setShowCreateUser}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create User</DialogTitle>\n              <DialogDescription>Add a new user to CodeArenaa</DialogDescription>\n            </DialogHeader>\n            <Form {...createUserForm}>\n              <form onSubmit={createUserForm.handleSubmit(onCreateUserSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={createUserForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"First name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createUserForm.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Last name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={createUserForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"Email address\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createUserForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createUserForm.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Role</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"student\">Student</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateUser(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createUserMutation.isPending}>\n                    {createUserMutation.isPending ? 'Creating...' : 'Create User'}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </Tabs>\n\n      {/* Create Assignment Dialog */}\n      <Dialog open={showCreateAssignment} onOpenChange={setShowCreateAssignment}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Create New Assignment</DialogTitle>\n            <DialogDescription>\n              Create a new assignment for your students\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...assignmentForm}>\n            <form onSubmit={assignmentForm.handleSubmit(onAssignmentSubmit)} className=\"space-y-4\">\n              <FormField\n                control={assignmentForm.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Title</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Assignment title\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={assignmentForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} placeholder=\"Assignment description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={assignmentForm.control}\n                name=\"dueDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Due Date</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"datetime-local\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"submit\" disabled={createAssignmentMutation.isPending}>\n                  {createAssignmentMutation.isPending ? \"Creating...\" : \"Create Assignment\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Group Dialog */}\n      {/* <Dialog open={showCreateGroup} onOpenChange={setShowCreateGroup}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Create New Group</DialogTitle>\n            <DialogDescription>\n              Create a new group or class for organizing students\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...groupForm}>\n            <form onSubmit={groupForm.handleSubmit(onGroupSubmit)} className=\"space-y-4\">\n              <FormField\n                control={groupForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Group Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Group name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={groupForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} placeholder=\"Group description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"submit\" disabled={createGroupMutation.isPending}>\n                  {createGroupMutation.isPending ? \"Creating...\" : \"Create Group\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      Create Announcement Dialog \n      <Dialog open={showCreateAnnouncement} onOpenChange={setShowCreateAnnouncement}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Create New Announcement</DialogTitle>\n            <DialogDescription>\n              Create a new announcement for students and staff\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...announcementForm}>\n            <form onSubmit={announcementForm.handleSubmit(onAnnouncementSubmit)} className=\"space-y-4\">\n              <FormField\n                control={announcementForm.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Title</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Announcement title\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={announcementForm.control}\n                name=\"content\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Content</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} placeholder=\"Announcement content\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={announcementForm.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button type=\"submit\" disabled={createAnnouncementMutation.isPending}>\n                  {createAnnouncementMutation.isPending ? \"Creating...\" : \"Create Announcement\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog> */}\n\n      {/* Create User Dialog */}\n      <Dialog open={showCreateUser} onOpenChange={setShowCreateUser}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create User</DialogTitle>\n            <DialogDescription>Add a new user to CodeArenaa</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.currentTarget);\n            const data = {\n              firstName: formData.get('firstName') as string,\n              lastName: formData.get('lastName') as string,\n              email: formData.get('email') as string,\n              password: formData.get('password') as string,\n              role: (formData.get('role') as string) as \"student\" | \"admin\",\n            };\n            createUserMutation.mutate(data);\n          }} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input id=\"firstName\" name=\"firstName\" placeholder=\"First name\" required />\n              </div>\n              <div>\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input id=\"lastName\" name=\"lastName\" placeholder=\"Last name\" required />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" name=\"email\" type=\"email\" placeholder=\"Email address\" required />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" name=\"password\" type=\"password\" placeholder=\"Password\" required />\n            </div>\n            <div>\n              <Label htmlFor=\"role\">Role</Label>\n              <Select name=\"role\" defaultValue=\"student\">\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"student\">Student</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateUser(false)}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={createUserMutation.isPending}>\n                {createUserMutation.isPending ? 'Creating...' : 'Create User'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n            {/* Confirm role elevation dialog */}\n            <AlertDialog open={!!pendingRoleChange} onOpenChange={(open) => !open && setPendingRoleChange(null)}>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Change user role?</AlertDialogTitle>\n                  <AlertDialogDescription>\n                    {(() => {\n                      const name = pendingRoleChange?.name ? ` for ${pendingRoleChange.name}` : '';\n                      const fromRole = pendingRoleChange?.currentRole || 'student';\n                      const toRole = pendingRoleChange?.newRole || 'student';\n                      const adminNote = toRole === 'admin'\n                        ? ' Admins have full platform control.'\n                        : (fromRole === 'admin' && toRole !== 'admin')\n                          ? ' This will revoke admin privileges for this user.'\n                          : '';\n                      return `You are about to change the role${name} from ${fromRole} to ${toRole}.` + adminNote + ' This change takes effect immediately.';\n                    })()}\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                  <AlertDialogCancel onClick={() => { setPendingRoleChange(null); queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] }); }}>Cancel</AlertDialogCancel>\n                  <AlertDialogAction onClick={() => {\n                    if (pendingRoleChange) {\n                      updateUserRoleMutation.mutate({ userId: pendingRoleChange.userId, role: pendingRoleChange.newRole });\n                    }\n                    setPendingRoleChange(null);\n                  }}>Confirm</AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n      </div>\n    </div>\n  );\n}","size_bytes":56666},"test_files/test-problems.js":{"content":"const fetch = require('node-fetch');\n\nasync function testProblems() {\n  try {\n    const response = await fetch('http://localhost:5000/api/admin/problems', {\n      headers: {\n        'Authorization': 'Bearer YOUR_TOKEN_HERE'\n      }\n    });\n    \n    if (!response.ok) {\n      console.error('Failed to fetch problems:', response.status);\n      return;\n    }\n    \n    const problems = await response.json();\n    console.log('First 3 problems:');\n    problems.slice(0, 3).forEach((problem, index) => {\n      console.log(`${index + 1}. ID: ${problem.id} (${typeof problem.id}), Title: ${problem.title}`);\n    });\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\ntestProblems(); ","size_bytes":687},"client/src/pages/problem-detail.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MonacoEditor } from \"@/components/MonacoEditor\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Play, Send, CheckCircle, XCircle, ArrowLeft, Maximize2, Minimize2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface StarterCode {\n  python?: string;\n  javascript?: string;\n  cpp?: string;\n  java?: string;\n  c?: string;\n}\n\ninterface TestCase {\n  input: string;\n  expectedOutput: string;\n  isHidden: boolean;\n}\n\ninterface Problem {\n  id: number;\n  title: string;\n  description: string;\n  difficulty: string;\n  category?: string;\n  tags: string[];\n  constraints: string;\n  inputFormat: string;\n  outputFormat: string;\n  examples: {\n    input: string;\n    output: string;\n    explanation?: string;\n  }[];\n  testCases: TestCase[];\n  timeLimit: number;\n  memoryLimit: number;\n  starterCode: StarterCode;\n  problemNumber?: number;\n}\n\ninterface Submission {\n  id: number;\n  status: string;\n  language: string;\n  submittedAt: string;\n  runtime?: number;\n  memory?: number;\n}\n\ninterface TestResult {\n  passed: boolean;\n  output: string;\n  expectedOutput: string;\n  isHidden: boolean;\n  error?: string;\n  input: string;\n  runtime: number;\n  memory: number;\n}\n\ninterface RunCodeResponse {\n  success?: boolean;\n  status?: string;\n  output?: string;\n  results: any[];\n  error?: string;\n  message?: string;\n}\n\nexport default function ProblemDetail() {\n  const { id } = useParams();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedLanguage, setSelectedLanguage] = useState(\"python\");\n  const [code, setCode] = useState(\"\");\n  const [testResults, setTestResults] = useState<TestResult[]>([]);\n  const [activeTab, setActiveTab] = useState(\"description\");\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isSubmissionResults, setIsSubmissionResults] = useState(false);\n  const [useCustomInput, setUseCustomInput] = useState(false);\n  const [customInput, setCustomInput] = useState(\"\");\n\n  // Get problemSet from URL query parameters\n  const urlParams = new URLSearchParams(window.location.search);\n  const problemSetId = urlParams.get('problemSet');\n  const problemInstanceId = urlParams.get('instanceId');\n\n  // Fetch problem: if coming from an assignment with an instance, use the instance-aware endpoint\n  const { data: problem, isLoading } = useQuery<Problem | null>({\n    queryKey: [problemSetId && problemInstanceId ? `/api/problem-sets/${problemSetId}/problems/${problemInstanceId}` : `/api/problems/${id}`],\n    queryFn: async () => {\n      const url = problemSetId && problemInstanceId\n        ? `/api/problem-sets/${problemSetId}/problems/${problemInstanceId}`\n        : `/api/problems/${id}`;\n      const response = await apiRequest(\"GET\", url);\n      if (!response) throw new Error(\"Problem not found\");\n      return (await response.json()) as Problem;\n    },\n    retry: false,\n  });\n\n  // Initialize code with problem's starter code when language changes\n  useEffect(() => {\n    if (problem?.starterCode && selectedLanguage in problem.starterCode) {\n      const starterCodeValue = problem.starterCode[selectedLanguage as keyof StarterCode];\n      setCode(starterCodeValue || '');\n    }\n    // If C is selected but only CPP starter is available, fallback to CPP\n    else if (problem?.starterCode && selectedLanguage === 'c') {\n       const scAny = problem.starterCode as Record<string, string>;\n       if (scAny['c'] || scAny['cpp']) {\n         setCode(scAny['c'] || scAny['cpp'] || '');\n       }\n    }\n  }, [problem, selectedLanguage]);\n\n  const effectiveProblemId = problem?.id ?? (id ? parseInt(id) : 0);\n  const { data: submissions } = useQuery<Submission[]>({\n    queryKey: [\"/api/submissions\", { problemId: effectiveProblemId }],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", `/api/submissions?problemId=${effectiveProblemId}`);\n      if (!response) return [];\n      const data = await response.json();\n      return data as Submission[];\n    },\n    enabled: !!effectiveProblemId,\n    retry: false,\n  });\n\n  const runCodeMutation = useMutation({\n    mutationFn: async () => {\n      if (!code.trim()) {\n        throw new Error(\"Please write some code before running\");\n      }\n\n      if (!problem) {\n        throw new Error(\"Problem data not loaded\");\n      }\n\n      try {\n        console.log('[FRONTEND] 🚀 Sending code execution request (RUN CODE)');\n        console.log('[FRONTEND] Language:', selectedLanguage);\n        console.log('[FRONTEND] Visible test cases count:', problem.testCases?.filter(tc => !tc.isHidden).length || 0);\n        \n        const payload = {\n          code: code.trim(),\n          language: selectedLanguage,\n          problemId: problem.id,\n          timeLimit: problem.timeLimit || 5000,\n          memoryLimit: problem.memoryLimit || 256\n        };\n\n        console.log('[FRONTEND] Payload:', JSON.stringify(payload, null, 2));\n        \n              const response = await apiRequest(\"POST\", \"/api/problems/run\", payload);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to run code\");\n      }\n      const data = await response.json();\n      console.log('[FRONTEND] ✅ Received API response:', data);\n      return data as RunCodeResponse;\n      } catch (error) {\n        console.error('[FRONTEND] ❌ Error running code:', error);\n        if (error instanceof Error) {\n          throw new Error(error.message);\n        }\n        throw new Error(\"Failed to run code. Please try again.\");\n      }\n    },\n    onSuccess: (data: RunCodeResponse) => {\n      console.log('[FRONTEND] 📝 Processing test results (RUN CODE):', data);\n      \n      // Check if the response has the expected structure\n      if (!data || typeof data !== 'object') {\n        console.error('[FRONTEND] ❌ Invalid response data:', data);\n        setTestResults([]);\n        toast({\n          title: \"Error\",\n          description: \"Invalid response format from server\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Handle error response - check for specific error types\n      if (data.success === false || data.error) {\n        const errorMessage = data.error || data.message || \"Unknown error occurred\";\n        console.error('[FRONTEND] ❌ API returned error:', errorMessage);\n        \n        // Check if it's an EOFError (input() related error)\n        if (errorMessage.includes('EOFError') || errorMessage.includes('EOF when reading a line')) {\n          setTestResults([]);\n          toast({\n            title: \"Input Error\",\n            description: \"Your code is trying to read input using input() but no input was provided. Make sure your code matches the expected input format for the problem.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n        \n        // Check if it's a syntax error\n        if (errorMessage.includes('SyntaxError') || errorMessage.includes('IndentationError')) {\n          setTestResults([]);\n          toast({\n            title: \"Syntax Error\",\n            description: \"There's a syntax error in your code. Please check your code for any syntax issues.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n        \n        // General error handling\n        setTestResults([]);\n        toast({\n          title: \"Execution Error\",\n          description: errorMessage.length > 100 ? \"Code execution failed. Check the console for details.\" : errorMessage,\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Handle both array format (data.results) and single result format\n      let resultsArray: any[] = [];\n      \n      if (data.results && Array.isArray(data.results)) {\n        // Standard format with results array\n        resultsArray = data.results;\n      } else if (data.status || data.output !== undefined || data.error !== undefined) {\n        // Single result format - convert to array\n        console.log('[FRONTEND] 🔄 Converting single result to array format');\n        resultsArray = [data];\n      } else {\n        console.error('[FRONTEND] ❌ Invalid results format:', data.results);\n        console.log('[FRONTEND] Full response:', JSON.stringify(data, null, 2));\n        \n        setTestResults([]);\n        toast({\n          title: \"Error\",\n          description: \"Invalid test results format from server\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      console.log('[FRONTEND] 📋 Processing results array:', resultsArray);\n      \n      // Map backend results to frontend TestResult format\n      const testResults: TestResult[] = resultsArray.map((result: any, index: number) => {\n        const testCase = problem?.testCases?.filter(tc => !tc.isHidden)[index];\n        \n        // Ensure result is an object\n        if (!result || typeof result !== 'object') {\n          console.warn(`[FRONTEND] Invalid result at index ${index}:`, result);\n          return {\n            passed: false,\n            output: \"Invalid result format\",\n            expectedOutput: testCase?.expectedOutput || \"N/A\",\n            isHidden: testCase?.isHidden || false,\n            input: testCase?.input || \"\",\n            runtime: 0,\n            memory: 0,\n            error: \"Invalid result format from server\"\n          };\n        }\n        \n        // Handle execution errors in results\n        const hasRuntimeError = result.status === 'error' || result.status === 'runtime_error' || \n                               result.status === 'failed' || result.status === 'timeout' || // Add timeout status\n                               (result.error && String(result.error).trim() !== '');\n        \n        const actualOutput = String(result.output || \"\").trim();\n        const expectedOutput = String(result.expectedOutput || testCase?.expectedOutput || \"\").trim();\n        \n        // Check for timeout issues\n        const isTimeout = result.runtime > (problem?.timeLimit || 5000) || result.status === 'timeout';\n        \n        // Check if output is truly empty or just \"No output\"\n        const hasNoRealOutput = actualOutput === \"\" || actualOutput === \"No output\" || actualOutput === \"null\";\n        \n        // For single result format, we might not have expected output, so handle accordingly\n        const outputMatches = !hasRuntimeError && !hasNoRealOutput && actualOutput === expectedOutput;\n        \n        // If this is a successful run but no expected output, consider it passed for now\n        const isSuccessfulRun = result.status === 'success' && !hasRuntimeError && !isTimeout;\n        const shouldPass = isSuccessfulRun && outputMatches;\n        \n        // Format error message for better readability\n        let errorMessage = undefined;\n        if (hasRuntimeError) {\n          const rawError = String(result.error || \"Runtime error\");\n          if (rawError.includes('EOFError') || rawError.includes('EOF when reading a line')) {\n            errorMessage = \"EOFError: Your code tried to read input but none was provided for this test case\";\n          } else if (rawError.includes('SyntaxError')) {\n            errorMessage = \"SyntaxError: Check your code syntax\";\n          } else if (rawError.includes('IndentationError')) {\n            errorMessage = \"IndentationError: Check your code indentation\";\n          } else if (rawError.includes('NameError')) {\n            errorMessage = \"NameError: Check for undefined variables\";\n          } else if (rawError.trim() === '') {\n            errorMessage = result.status === 'error' ? \"Runtime error occurred\" : undefined;\n          } else {\n            errorMessage = rawError.length > 200 ? rawError.substring(0, 200) + \"...\" : rawError;\n          }\n        } else if (isTimeout) {\n          errorMessage = `Time limit exceeded (${result.runtime}ms > ${problem?.timeLimit || 5000}ms)`;\n        } else if (hasNoRealOutput && expectedOutput !== \"\" && expectedOutput !== \"N/A\") {\n          errorMessage = \"No output produced - your program may not be printing the result or there's an input/output issue\";\n        } else if (!shouldPass && expectedOutput !== \"\" && expectedOutput !== \"N/A\") {\n          errorMessage = \"Output doesn't match expected result\";\n        }\n        \n        return {\n          passed: shouldPass,\n          output: hasNoRealOutput ? \"No output produced\" : result.output,\n          expectedOutput: result.expectedOutput || testCase?.expectedOutput || \"N/A\",\n          isHidden: result.isHidden || testCase?.isHidden || false,\n          input: result.input || testCase?.input || \"\",\n          runtime: Math.max(0, Number(result.runtime) || 0),\n          memory: Math.max(0, Number(result.memory) || 0),\n          error: errorMessage\n        };\n      });\n\n      console.log('[FRONTEND] ✅ Created test results:', testResults);\n      setTestResults(testResults);\n      setActiveTab(\"results\");\n      setIsSubmissionResults(false); // Reset to normal run results\n      \n      // Show appropriate toast based on results\n      if (testResults.length === 0) {\n        toast({\n          title: \"No Results\",\n          description: \"No test results were returned\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Calculate statistics for visible tests only (since this is \"Run Code\")\n      const visibleTests = testResults.filter(r => !r.isHidden);\n      const totalVisibleTests = visibleTests.length;\n      const passedVisibleTests = visibleTests.filter(r => r.passed).length;\n      const failedVisibleTests = totalVisibleTests - passedVisibleTests;\n      const hasExecutionErrors = testResults.some(r => r.error && (\n        r.error.includes('EOFError') || \n        r.error.includes('SyntaxError') || \n        r.error.includes('IndentationError') ||\n        r.error.includes('NameError')\n      ));\n\n      if (hasExecutionErrors) {\n        toast({\n          title: \"Code Execution Issues\",\n          description: \"Some test cases failed due to runtime errors. Check the results tab for details.\",\n          variant: \"destructive\",\n        });\n      } else if (failedVisibleTests === 0) {\n        toast({\n          title: \"All Visible Test Cases Passed! 🎉\",\n          description: `Passed all ${totalVisibleTests} visible test cases. Click \"Submit\" to test against all cases including hidden ones.`,\n        });\n      } else {\n        toast({\n          title: \"Some Visible Test Cases Failed\",\n          description: `Failed ${failedVisibleTests} out of ${totalVisibleTests} visible test cases. Fix these before submitting.`,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: Error) => {\n      console.error('[FRONTEND] ❌ Mutation error:', error);\n      setTestResults([]);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to run code. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const customInputExecutionMutation = useMutation({\n    mutationFn: async () => {\n      if (!code.trim()) {\n        throw new Error(\"Please write some code before executing\");\n      }\n\n      if (!customInput.trim()) {\n        throw new Error(\"Please provide custom input\");\n      }\n\n      try {\n        console.log('[FRONTEND] 🚀 Sending custom input execution request');\n        console.log('[FRONTEND] Language:', selectedLanguage);\n        console.log('[FRONTEND] Custom input:', customInput);\n        \n        const payload = {\n          code: code.trim(),\n          language: selectedLanguage,\n          customInput: customInput.trim()\n        };\n\n        console.log('[FRONTEND] Custom input payload:', JSON.stringify(payload, null, 2));\n        \n        const response = await apiRequest(\"POST\", \"/api/problems/run-custom-input\", payload);\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \"Failed to execute with custom input\");\n        }\n        \n        const data = await response.json();\n        console.log('[FRONTEND] ✅ Received custom input execution response:', data);\n        return data;\n      } catch (error) {\n        console.error('[FRONTEND] ❌ Error executing with custom input:', error);\n        if (error instanceof Error) {\n          throw new Error(error.message);\n        }\n        throw new Error(\"Failed to execute with custom input. Please try again.\");\n      }\n    },\n    onSuccess: (data: any) => {\n      console.log('[FRONTEND] 📝 Processing custom input execution results:', data);\n      \n      // Handle custom input execution results\n      if (data.status === 'error' || data.error) {\n        const errorMessage = data.error || \"Execution failed\";\n        setTestResults([{\n          passed: false,\n          output: \"\",\n          expectedOutput: \"N/A\",\n          isHidden: false,\n          input: data.input || customInput,\n          runtime: data.runtime || 0,\n          memory: data.memory || 0,\n          error: errorMessage\n        }]);\n      } else {\n        setTestResults([{\n          passed: true,\n          output: data.output || \"\",\n          expectedOutput: \"N/A\",\n          isHidden: false,\n          input: data.input || customInput,\n          runtime: data.runtime || 0,\n          memory: data.memory || 0,\n          error: undefined\n        }]);\n      }\n      \n      setActiveTab(\"results\");\n      setIsSubmissionResults(false);\n      \n      toast({\n        title: data.status === 'error' ? \"Custom Input Execution Failed\" : \"Custom Input Execution Successful\",\n        description: data.status === 'error' ? \n          \"Check the results tab for error details\" : \n          \"Check the results tab for output\",\n        variant: data.status === 'error' ? \"destructive\" : \"default\",\n      });\n    },\n    onError: (error: Error) => {\n      console.error('[FRONTEND] ❌ Custom input execution mutation error:', error);\n      setTestResults([]);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to execute with custom input. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const submitCodeMutation = useMutation({\n    mutationFn: async () => {\n      if (!code.trim()) {\n        throw new Error(\"Please write some code before submitting\");\n      }\n\n      if (!problem) {\n        throw new Error(\"Problem data not loaded\");\n      }\n\n      try {\n        console.log('[FRONTEND] 🚀 Sending code submission request (SUBMIT CODE)');\n        console.log('[FRONTEND] Language:', selectedLanguage);\n        console.log('[FRONTEND] Total test cases count:', problem.testCases?.length || 0);\n        \n        const payload = {\n          problemId: problem?.id ?? parseInt(id || \"0\"),\n          code: code.trim(),\n          language: selectedLanguage,\n          ...(problemSetId && { problemSetId: problemSetId }),\n          ...(problemInstanceId && { problemInstanceId: problemInstanceId })\n        };\n\n        console.log('[FRONTEND DEBUG] Payload:', JSON.stringify(payload, null, 2));\n        console.log('[FRONTEND DEBUG] problemSetId from URL:', problemSetId);\n        console.log('[FRONTEND DEBUG] problemInstanceId from URL:', problemInstanceId);\n        \n        const response = await apiRequest(\"POST\", \"/api/submissions\", payload);\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          console.log('[FRONTEND DEBUG] Submission error response:', errorData);\n          throw new Error(errorData.message || errorData.error || \"Submission failed\");\n        }\n        \n        const data = await response.json();\n        console.log('[FRONTEND] ✅ Received submission response:', data);\n        \n        return data;\n      } catch (error) {\n        console.error('[FRONTEND] ❌ Error submitting code:', error);\n        if (error instanceof Error) {\n          throw new Error(error.message);\n        }\n        throw new Error(\"Failed to submit code. Please try again.\");\n      }\n    },\n    onSuccess: (data: any) => {\n      console.log('[FRONTEND] 📝 Processing submission results:', data);\n      \n      // Handle submission results - show only hidden test cases in HackerRank style\n      if (data.results && Array.isArray(data.results)) {\n        // Filter to only show hidden test cases for submission results\n        const hiddenTestResults: TestResult[] = data.results\n          .map((result: any, index: number) => {\n            const testCase = problem?.testCases?.[index];\n            \n            const hasRuntimeError = result.status === 'error' || result.status === 'runtime_error' || \n                                   result.status === 'failed' || result.status === 'timeout' ||\n                                   (result.error && String(result.error).trim() !== '');\n            \n            const actualOutput = String(result.output || \"\").trim();\n            const expectedOutput = String(result.expectedOutput || testCase?.expectedOutput || \"\").trim();\n            const isTimeout = result.runtime > (problem?.timeLimit || 5000) || result.status === 'timeout';\n            const hasNoRealOutput = actualOutput === \"\" || actualOutput === \"No output\" || actualOutput === \"null\";\n            const outputMatches = !hasRuntimeError && !hasNoRealOutput && actualOutput === expectedOutput;\n            const isSuccessfulRun = result.status === 'success' && !hasRuntimeError && !isTimeout;\n            const shouldPass = isSuccessfulRun && outputMatches;\n            \n            let errorMessage = undefined;\n            if (hasRuntimeError) {\n              const rawError = String(result.error || \"Runtime error\");\n              if (rawError.includes('EOFError') || rawError.includes('EOF when reading a line')) {\n                errorMessage = \"EOFError: Your code tried to read input but none was provided for this test case\";\n              } else if (rawError.includes('SyntaxError')) {\n                errorMessage = \"SyntaxError: Check your code syntax\";\n              } else if (rawError.includes('IndentationError')) {\n                errorMessage = \"IndentationError: Check your code indentation\";\n              } else if (rawError.includes('NameError')) {\n                errorMessage = \"NameError: Check for undefined variables\";\n              } else if (rawError.trim() === '') {\n                errorMessage = result.status === 'error' ? \"Runtime error occurred\" : undefined;\n              } else {\n                errorMessage = rawError.length > 200 ? rawError.substring(0, 200) + \"...\" : rawError;\n              }\n            } else if (isTimeout) {\n              errorMessage = `Time limit exceeded (${result.runtime}ms > ${problem?.timeLimit || 5000}ms)`;\n            } else if (hasNoRealOutput && expectedOutput !== \"\" && expectedOutput !== \"N/A\") {\n              errorMessage = \"No output produced - your program may not be printing the result or there's an input/output issue\";\n            } else if (!shouldPass && expectedOutput !== \"\" && expectedOutput !== \"N/A\") {\n              errorMessage = \"Output doesn't match expected result\";\n            }\n            \n            return {\n              passed: shouldPass,\n              output: hasNoRealOutput ? \"No output produced\" : result.output,\n              expectedOutput: result.expectedOutput || testCase?.expectedOutput || \"N/A\",\n              isHidden: result.isHidden || testCase?.isHidden || false,\n              input: result.input || testCase?.input || \"\",\n              runtime: Math.max(0, Number(result.runtime) || 0),\n              memory: Math.max(0, Number(result.memory) || 0),\n              error: errorMessage\n            };\n          })\n          .filter((result: TestResult) => result.isHidden); // Only show hidden test cases\n\n        setTestResults(hiddenTestResults);\n        setActiveTab(\"results\");\n        setIsSubmissionResults(true);\n        \n        // Calculate statistics for hidden test cases only\n        const totalHiddenTests = hiddenTestResults.length;\n        const passedHiddenTests = hiddenTestResults.filter(r => r.passed).length;\n        const failedHiddenTests = totalHiddenTests - passedHiddenTests;\n        const hasExecutionErrors = hiddenTestResults.some(r => r.error && (\n          r.error.includes('EOFError') || \n          r.error.includes('SyntaxError') || \n          r.error.includes('IndentationError') ||\n          r.error.includes('NameError')\n        ));\n\n        if (hasExecutionErrors) {\n          toast({\n            title: \"Code Execution Issues\",\n            description: \"Some hidden test cases failed due to runtime errors. Check the results tab for details.\",\n            variant: \"destructive\",\n          });\n        } else if (failedHiddenTests === 0) {\n          toast({\n            title: \"🎉 Congratulations! You solved this challenge!\",\n            description: `Passed all ${totalHiddenTests} hidden test cases!`,\n          });\n        } else {\n          toast({\n            title: \"Some Hidden Test Cases Failed\",\n            description: `Failed ${failedHiddenTests} out of ${totalHiddenTests} hidden test cases.`,\n            variant: \"destructive\",\n          });\n        }\n      }\n\n      // Update submissions list\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n    },\n    onError: (error: Error) => {\n      console.error('[FRONTEND] ❌ Submission error:', error);\n      toast({\n        title: \"Submission failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty?.toLowerCase()) {\n      case 'easy':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'hard':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default:\n        return 'bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-300';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  if (!problem) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Problem not found</h1>\n          <Link href=\"/problems\">\n            <Button className=\"mt-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Problems\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      {/* Header */}\n      <div className=\"border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href={\"/problem-sets/\" + (problemSetId || \"\")}>\n                <Button variant=\"outline\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-xl font-bold text-slate-900 dark:text-slate-100\">{problem.title}</h1>\n                <div className=\"flex items-center space-x-4 mt-1\">\n                  <Badge className={getDifficultyColor(problem.difficulty)}>\n                    {problem.difficulty}\n                  </Badge>\n                  {problem.tags && problem.tags.length > 0 && (\n                    <span className=\"text-sm text-slate-600 dark:text-slate-400\">\n                      {problem.tags.join(\", \")}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex h-[calc(100vh-80px)]\">\n        {/* Left Panel - Problem Description */}\n        <div className={`${isFullscreen ? 'hidden' : 'w-1/2'} flex flex-col border-r border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800`}>\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex-1\">\n            <TabsList className=\"w-full justify-start border-b border-slate-200 dark:border-slate-700 px-6\">\n              <TabsTrigger value=\"description\">Description</TabsTrigger>\n              <TabsTrigger value=\"results\">Test Results</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"description\" className=\"h-[calc(100vh-140px)] overflow-auto\">\n              <div className=\"p-6 prose max-w-none dark:prose-invert\">\n                <div \n                  className=\"text-slate-700 dark:text-slate-300 mb-6\"\n                  dangerouslySetInnerHTML={{ __html: problem.description }}\n                />\n\n                {problem.inputFormat && (\n                  <>\n                    <h4 className=\"font-semibold mb-2\">Input Format:</h4>\n                    <div className=\"text-sm text-slate-700 dark:text-slate-300 mb-4 whitespace-pre-wrap\">\n                      {problem.inputFormat}\n                    </div>\n                  </>\n                )}\n\n                {problem.outputFormat && (\n                  <>\n                    <h4 className=\"font-semibold mb-2\">Output Format:</h4>\n                    <div className=\"text-sm text-slate-700 dark:text-slate-300 mb-4 whitespace-pre-wrap\">\n                      {problem.outputFormat}\n                    </div>\n                  </>\n                )}\n\n                {problem.examples && problem.examples.length > 0 && (\n                  <>\n                    <h4 className=\"font-semibold mb-2\">Examples:</h4>\n                    {problem.examples.map((example, index) => (\n                      <div key={index} className=\"bg-slate-50 dark:bg-slate-800 p-4 rounded-lg mb-4\">\n                        <div className=\"font-mono text-sm\">\n                          <div><strong>Input:</strong> <span style={{ whiteSpace: \"pre-wrap\" }}>{example.input}</span></div>\n                          <div><strong>Output:</strong> <span style={{ whiteSpace: \"pre-wrap\" }}>{example.output}</span></div>\n                          {example.explanation && (\n                          <div><strong>Explanation:</strong> <span style={{ whiteSpace: \"pre-wrap\" }}>{example.explanation}</span></div>\n                          )}\n\n                        </div>\n                      </div>\n                    ))}\n                  </>\n                )}\n\n                {problem.constraints && (\n                  <>\n                    <h4 className=\"font-semibold mb-2\">Constraints:</h4>\n                    <div className=\"text-sm text-slate-700 dark:text-slate-300 whitespace-pre-wrap\">\n                      {problem.constraints}\n                    </div>\n                  </>\n                )}\n\n                {problem.timeLimit && problem.memoryLimit && (\n                  <>\n                    <h4 className=\"font-semibold mb-2\">Limits:</h4>\n                    <div className=\"text-sm text-slate-700 dark:text-slate-300\">\n                      <div>Time Limit: {problem.timeLimit}ms</div>\n                      <div>Memory Limit: {problem.memoryLimit}MB</div>\n                    </div>\n                  </>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"results\" className=\"h-[calc(100vh-140px)] overflow-auto\">\n              <div className=\"p-6 space-y-4\">\n                {/* HackerRank-style submission results */}\n                {isSubmissionResults && testResults.length > 0 && (\n                  <div className=\"text-center mb-8\">\n                    {testResults.every(r => r.passed) ? (\n                      <div className=\"mb-6\">\n                        <h2 className=\"text-2xl font-bold text-green-600 mb-2\">\n                          🎉 Congrats, you solved this challenge!\n                        </h2>\n                        <p className=\"text-slate-600 dark:text-slate-400\">\n                          All hidden test cases passed successfully.\n                        </p>\n                      </div>\n                    ) : (\n                      <div className=\"mb-6\">\n                        <h2 className=\"text-2xl font-bold text-red-600 mb-2\">\n                          Some hidden test cases failed\n                        </h2>\n                        <p className=\"text-slate-600 dark:text-slate-400\">\n                          Check the details below to see what went wrong.\n                        </p>\n                      </div>\n                    )}\n                    \n                    {/* HackerRank-style grid layout */}\n                    <div className=\"grid grid-cols-3 gap-4 mb-8\">\n                      {testResults.map((result, index) => (\n                        <div \n                          key={index} \n                          className={`p-4 rounded-lg border-2 transition-all duration-500 ${\n                            result.passed \n                              ? 'border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-900/20' \n                              : 'border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/20'\n                          }`}\n                        >\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"font-medium text-sm\">\n                              Test Case #{index}\n                            </span>\n                            {result.passed ? (\n                              <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center animate-pulse\">\n                                <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                  <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                                </svg>\n                              </div>\n                            ) : (\n                              <div className=\"w-6 h-6 bg-red-500 rounded-full flex items-center justify-center\">\n                                <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                  <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                                </svg>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"text-xs text-slate-600 dark:text-slate-400\">\n                            Runtime: {result.runtime}ms\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Regular detailed results (for run code or failed submissions) */}\n                {(!isSubmissionResults || testResults.some(r => !r.passed)) && (\n                  <>\n                    {testResults.length > 0 && testResults.some(r => r.error && r.error.includes('EOFError')) && (\n                      <div className=\"mb-4 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                        <div className=\"flex items-start space-x-2\">\n                          <div className=\"text-yellow-600 dark:text-yellow-400 font-medium text-sm\">\n                            💡 Input Reading Tip:\n                          </div>\n                        </div>\n                        <div className=\"text-yellow-700 dark:text-yellow-300 text-sm mt-1\">\n                          Your code is using <code className=\"bg-yellow-100 dark:bg-yellow-800 px-1 rounded\">input()</code> to read data. \n                          Make sure your code reads input in the exact format specified in the problem description.\n                          The input for each test case is provided automatically - you don't need to prompt for it.\n                        </div>\n                      </div>\n                    )}\n\n                    {testResults.length > 0 && testResults.some(r => r.output === \"No output produced\" || r.output === \"No output\") && (\n                      <div className=\"mb-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\n                        <div className=\"flex items-start space-x-2\">\n                          <div className=\"text-red-600 dark:text-red-400 font-medium text-sm\">\n                            🚨 No Output Issue:\n                          </div>\n                        </div>\n                        <div className=\"text-red-700 dark:text-red-300 text-sm mt-1\">\n                          Your code ran but didn't produce any output. This could be due to:\n                          <ul className=\"list-disc ml-4 mt-2\">\n                            <li>Input/Output execution environment issues</li>\n                            <li>Code not printing the result (missing <code className=\"bg-red-100 dark:bg-red-800 px-1 rounded\">cout</code>, <code className=\"bg-red-100 dark:bg-red-800 px-1 rounded\">print()</code>, etc.)</li>\n                            <li>Program crashing silently or timing out</li>\n                            <li>Input not being provided correctly to your program</li>\n                          </ul>\n                          <div className=\"mt-2 font-medium\">Suggestion: Try submitting your code anyway - sometimes the execution environment has issues during testing but works fine during actual submission.</div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Filter test results based on submission status */}\n                    {(() => {\n                      // For submission results, don't show hidden test case details\n                      if (isSubmissionResults) {\n                        // Only show visible test cases, or if all hidden tests passed, show none\n                        const visibleResults = testResults.filter(r => !r.isHidden);\n                        const hiddenResults = testResults.filter(r => r.isHidden);\n                        const allHiddenPassed = hiddenResults.length > 0 && hiddenResults.every(r => r.passed);\n                        \n                        // If all hidden tests passed, show success message only\n                        if (allHiddenPassed) {\n                          return (\n                            <div className=\"text-center py-8\">\n                              <div className=\"mb-4\">\n                                <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n                                <h3 className=\"text-xl font-semibold text-green-600 mb-2\">\n                                  🎉 All Hidden Test Cases Passed!\n                                </h3>\n                                <p className=\"text-slate-600 dark:text-slate-400\">\n                                  Your solution is correct and passed all hidden test cases.\n                                </p>\n                              </div>\n                            </div>\n                          );\n                        }\n                        \n                        // If some hidden tests failed, show summary only (no details)\n                        if (hiddenResults.some(r => !r.passed)) {\n                          return (\n                            <div className=\"text-center py-8\">\n                              <div className=\"mb-4\">\n                                <XCircle className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n                                <h3 className=\"text-xl font-semibold text-red-600 mb-2\">\n                                  Some Hidden Test Cases Failed\n                                </h3>\n                                <p className=\"text-slate-600 dark:text-slate-400\">\n                                  Your solution needs improvement. Hidden test case details are not shown.\n                                </p>\n                              </div>\n                            </div>\n                          );\n                        }\n                        \n                        // Show only visible test cases\n                        return visibleResults.map((result, index) => (\n                          <div key={index} className=\"mb-4 p-4 rounded-lg border border-slate-200 dark:border-slate-700\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              {result.passed ? (\n                                <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                              ) : (\n                                <XCircle className=\"w-5 h-5 text-red-500\" />\n                              )}\n                              <span className={`font-medium ${result.passed ? 'text-green-500' : 'text-red-500'}`}>\n                                Test Case {index + 1}: {result.passed ? 'Passed' : 'Failed'}\n                              </span>\n                            </div>\n\n                            <div className=\"space-y-4 text-sm\">\n                              <div>\n                                <div className=\"font-medium text-slate-700 dark:text-slate-300\">Input:</div>\n                                <pre className=\"mt-1 p-2 bg-slate-100 dark:bg-slate-800 rounded whitespace-pre-wrap break-words font-mono\">\n                                  {result.input}\n                                </pre>\n                              </div>\n\n                              <div>\n                                <div className=\"font-medium text-slate-700 dark:text-slate-300\">Your Output:</div>\n                                <pre className=\"mt-1 p-2 bg-slate-100 dark:bg-slate-800 rounded whitespace-pre-wrap break-words font-mono\">\n                                  {result.output}\n                                </pre>\n                              </div>\n\n                              {result.expectedOutput !== 'N/A' && (\n                                <div>\n                                  <div className=\"font-medium text-slate-700 dark:text-slate-300\">Expected Output:</div>\n                                  <pre className=\"mt-1 p-2 bg-slate-100 dark:bg-slate-800 rounded whitespace-pre-wrap break-words font-mono\">\n                                    {result.expectedOutput}\n                                  </pre>\n                                </div>\n                              )}\n\n                              {result.error && (\n                                <div>\n                                  <div className=\"font-medium text-red-500\">Error:</div>\n                                  <pre className=\"mt-1 p-2 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded whitespace-pre-wrap break-words font-mono\">\n                                    {result.error}\n                                  </pre>\n                                </div>\n                              )}\n\n                              <div className=\"mt-2 text-xs text-slate-500 dark:text-slate-400\">\n                                Runtime: {result.runtime}ms | Memory: {result.memory}MB\n                              </div>\n                            </div>\n                          </div>\n                        ));\n                      }\n                      \n                      // For run code results, show all test cases normally\n                      return testResults.map((result, index) => (\n                      <div key={index} className=\"mb-4 p-4 rounded-lg border border-slate-200 dark:border-slate-700\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          {result.passed ? (\n                            <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                          ) : (\n                            <XCircle className=\"w-5 h-5 text-red-500\" />\n                          )}\n                          <span className={`font-medium ${result.passed ? 'text-green-500' : 'text-red-500'}`}>\n                            Test Case {index + 1}: {result.passed ? 'Passed' : 'Failed'}\n                          </span>\n                          {result.isHidden && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">Hidden</Badge>\n                          )}\n                        </div>\n\n                        <div className=\"space-y-4 text-sm\">\n                          <div>\n                            <div className=\"font-medium text-slate-700 dark:text-slate-300\">Input:</div>\n                            <pre className=\"mt-1 p-2 bg-slate-100 dark:bg-slate-800 rounded whitespace-pre-wrap break-words font-mono\">\n                              {result.input}\n                            </pre>\n                          </div>\n\n                          <div>\n                            <div className=\"font-medium text-slate-700 dark:text-slate-300\">Your Output:</div>\n                            <pre className=\"mt-1 p-2 bg-slate-100 dark:bg-slate-800 rounded whitespace-pre-wrap break-words font-mono\">\n                              {result.output}\n                            </pre>\n                          </div>\n\n                          {!result.isHidden && result.expectedOutput !== 'N/A' && (\n                            <div>\n                              <div className=\"font-medium text-slate-700 dark:text-slate-300\">Expected Output:</div>\n                              <pre className=\"mt-1 p-2 bg-slate-100 dark:bg-slate-800 rounded whitespace-pre-wrap break-words font-mono\">\n                                {result.expectedOutput}\n                              </pre>\n                            </div>\n                          )}\n\n                          {result.error && (\n                            <div>\n                              <div className=\"font-medium text-red-500\">Error:</div>\n                              <pre className=\"mt-1 p-2 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded whitespace-pre-wrap break-words font-mono\">\n                                {result.error}\n                              </pre>\n                            </div>\n                          )}\n\n                          <div className=\"mt-2 text-xs text-slate-500 dark:text-slate-400\">\n                            Runtime: {result.runtime}ms | Memory: {result.memory}MB\n                          </div>\n                        </div>\n                      </div>\n                      ));\n                    })()}\n                  </>\n                )}\n                \n                {testResults.length === 0 && (\n                  <div className=\"text-center text-slate-500 dark:text-slate-400\">\n                    Run your code to see test results\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Right Panel - Code Editor */}\n        <div className={`${isFullscreen ? 'w-full' : 'w-1/2'} flex flex-col bg-white dark:bg-slate-800`}>\n          {/* Editor Header */}\n          <div className=\"border-b border-slate-200 dark:border-slate-700 p-4 flex justify-between items-center\">\n            <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Select Language\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"python\">Python</SelectItem>\n                <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                <SelectItem value=\"java\">Java</SelectItem>\n                <SelectItem value=\"cpp\">C++</SelectItem>\n                <SelectItem value=\"c\">C</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsFullscreen(!isFullscreen)}\n              className=\"flex items-center space-x-2\"\n            >\n              {isFullscreen ? <Minimize2 className=\"w-4 h-4\" /> : <Maximize2 className=\"w-4 h-4\" />}\n              <span>{isFullscreen ? \"Exit Fullscreen\" : \"Fullscreen\"}</span>\n            </Button>\n          </div>\n\n          {/* Code Editor */}\n          <div className=\"flex-1 relative\">\n            <MonacoEditor\n              value={code}\n              onChange={setCode}\n              language={selectedLanguage === \"cpp\" || selectedLanguage === 'c' ? \"cpp\" : selectedLanguage}\n              height=\"100%\"\n              theme=\"vs-dark\"\n            />\n          </div>\n\n          {/* Custom Input Section */}\n          <div className=\"border-t border-slate-200 dark:border-slate-700 p-4\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <input\n                type=\"checkbox\"\n                id=\"custom-input-checkbox\"\n                checked={useCustomInput}\n                onChange={(e) => setUseCustomInput(e.target.checked)}\n                className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2\"\n              />\n              <label htmlFor=\"custom-input-checkbox\" className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                Use Custom Input\n              </label>\n            </div>\n            \n            {useCustomInput && (\n              <div className=\"space-y-3\">\n                <div>\n                  <label htmlFor=\"custom-input-field\" className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                    Custom Input:\n                  </label>\n                  <textarea\n                    id=\"custom-input-field\"\n                    value={customInput}\n                    onChange={(e) => setCustomInput(e.target.value)}\n                    placeholder=\"Enter your custom input here...\"\n                    className=\"w-full h-20 p-3 border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100 resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"border-t border-slate-200 dark:border-slate-700 p-4 flex justify-end space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                if (useCustomInput) {\n                  customInputExecutionMutation.mutate();\n                } else {\n                  runCodeMutation.mutate();\n                }\n              }}\n              disabled={runCodeMutation.isPending || customInputExecutionMutation.isPending || !problem || (useCustomInput && !customInput.trim())}\n              className=\"flex items-center space-x-2\"\n            >\n              <Play className=\"w-4 h-4\" />\n              <span>\n                {useCustomInput \n                  ? (customInputExecutionMutation.isPending ? \"Executing...\" : \"Run with Custom Input\")\n                  : (runCodeMutation.isPending ? \"Running...\" : \"Run Code\")\n                }\n              </span>\n            </Button>\n            <Button\n              onClick={() => submitCodeMutation.mutate()}\n              disabled={submitCodeMutation.isPending}\n              className=\"bg-green-600 hover:bg-green-700 flex items-center space-x-2\"\n            >\n              <Send className=\"w-4 h-4\" />\n              <span>{submitCodeMutation.isPending ? \"Submitting...\" : \"Submit\"}</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":52579},"client/src/components/dashboard/stats-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CheckCircle, Trophy, Flame, GraduationCap } from \"lucide-react\";\n\ninterface UserStats {\n  total: number;\n  accepted: number;\n  streak: number;\n  maxStreak?: number;\n  problemsSolved: number;\n  totalProblems: number;\n  courseProgress: {\n    currentCourse: string;\n    progress: number;\n  };\n  contestRank: number;\n}\n\ninterface Contest {\n  id: string;\n  title: string;\n  startTime: string;\n  endTime: string;\n  participants?: Array<{ userId: string }>;\n}\n\nexport function StatsGrid() {\n  const { user } = useAuth();\n  \n  const { data: userStats, isLoading } = useQuery<UserStats>({\n    queryKey: [\"/api/users/me/stats\"],\n    retry: false,\n  });\n\n  // Fetch user course enrollments to compute enrolled count\n  const { data: enrollments } = useQuery<any[]>({\n    queryKey: [\"/api/users/me/enrollments\"],\n    queryFn: async () => {\n      const res = await fetch('/api/users/me/enrollments', {\n        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\n      });\n      if (!res.ok) return [];\n      return res.json();\n    }\n  });\n  const enrolledCoursesCount = Array.isArray(enrollments) ? enrollments.length : 0;\n\n  // Fetch contests to determine the latest contest the user is enrolled in\n  const { data: contests } = useQuery<Contest[]>({\n    queryKey: ['/api/contests'],\n    queryFn: async () => {\n      const res = await fetch('/api/contests', {\n        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\n      });\n      if (!res.ok) return [] as Contest[];\n      return res.json();\n    }\n  });\n  const localUserId = (user as any)?.id || localStorage.getItem('userId') || '';\n  const isUserEnrolledInContest = (c: any, uid: string) => {\n    if (c?.isEnrolled === true) return true;\n    if (Array.isArray(c?.participants)) return c.participants.some((p: any) => p?.userId === uid);\n    return false;\n  };\n  const latestContest: Contest | undefined = Array.isArray(contests)\n    ? [...contests]\n        .filter(c => isUserEnrolledInContest(c, localUserId))\n        .sort((a, b) => {\n          const at = new Date(a.startTime as any).getTime() || 0;\n          const bt = new Date(b.startTime as any).getTime() || 0;\n          return bt - at;\n        })[0]\n    : undefined;\n  const latestContestId = latestContest?.id;\n\n  // Fetch leaderboard for the latest contest and compute the user's rank\n  const { data: leaderboard } = useQuery<any[]>({\n    queryKey: ['/api/contests', latestContestId, 'leaderboard'],\n    enabled: !!latestContestId,\n    queryFn: async () => {\n      const res = await fetch(`/api/contests/${latestContestId}/leaderboard`, {\n        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\n      });\n      if (!res.ok) return [] as any[];\n      return res.json();\n    }\n  });\n  const latestRank = Array.isArray(leaderboard)\n    ? (leaderboard.find((e: any) => e.userId === localUserId)?.rank as number | undefined)\n    : undefined;\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-12 bg-gray-200 dark:bg-gray-700 rounded mb-4\"></div>\n              <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded mb-2\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const stats = [\n    // {\n    //   title: \"Problems Solved\",\n    //   value: userStats?.problemsSolved || 0,\n    //   icon: CheckCircle,\n    //   iconBg: \"bg-green-100 dark:bg-green-900/20\",\n    //   iconColor: \"text-green-500\",\n    //   change: `${userStats?.problemsSolved || 0}/${userStats?.totalProblems || 0} total`,\n    //   changeColor: \"text-green-600 dark:text-green-400\",\n    // },\n    {\n      title: \"Contest Rank\",\n      value: latestRank ? `#${latestRank}` : \"Unranked\",\n      icon: Trophy,\n      iconBg: \"bg-blue-100 dark:bg-blue-900/20\",\n      iconColor: \"text-blue-500\",\n      change: latestContest ? `Latest: ${latestContest.title}` : \"Join contests to rank up\",\n      changeColor: \"text-blue-600 dark:text-blue-400\",\n    },\n    {\n      title: \"Max Streak\",\n      value: userStats?.maxStreak ?? userStats?.streak ?? 0,\n      icon: Flame,\n      iconBg: \"bg-orange-100 dark:bg-orange-900/20\",\n      iconColor: \"text-orange-500\",\n      change: \"points earned\",\n      changeColor: \"text-orange-600 dark:text-orange-400\",\n    },\n    {\n      title: \"Courses Enrolled\",\n      value: enrolledCoursesCount,\n      icon: GraduationCap,\n      iconBg: \"bg-purple-100 dark:bg-purple-900/20\",\n      iconColor: \"text-purple-500\",\n      change: \"enrolled courses\",\n      changeColor: \"text-purple-600 dark:text-purple-400\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n      {stats.map((stat, index) => (\n        <Card key={index}>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className={`p-2 rounded-lg ${stat.iconBg}`}>\n                <stat.icon className={`w-6 h-6 ${stat.iconColor}`} />\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                {stat.title}\n              </p>\n              <p className=\"text-3xl font-bold\">{stat.value}</p>\n              <p className={`text-sm ${stat.changeColor}`}>\n                {stat.change}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":5842},"client/src/pages/CourseModuleViewer.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { PlayCircle, BookOpen, Code, CheckCircle, ChevronLeft, ChevronRight, Menu, X, Clock, Award, BarChart3, Maximize2, Minimize2 } from 'lucide-react';\nimport { MonacoEditor } from '@/components/MonacoEditor';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface CourseModule {\n  id: number;\n  courseId: number;\n  title: string;\n  description?: string;\n  order: number;\n  textContent?: string;\n  videoUrl?: string;\n  codeExample?: string;\n  language?: string;\n  expectedOutput?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Course {\n  id: number;\n  title: string;\n  description?: string;\n  isPublic: boolean;\n  enableMarkComplete?: boolean;\n}\n\ninterface CourseProgress {\n  enrollment: {\n    id: number;\n    courseId: number;\n    userId: string;\n    completedModules: number[];\n    progress: number;\n  };\n  completedModules: CourseModule[];\n  totalModules: number;\n}\n\nexport default function CourseModuleViewer() {\n  const { courseId, moduleId } = useParams<{ courseId: string; moduleId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [code, setCode] = useState('');\n  const [output, setOutput] = useState('');\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  // Fetch course data\n  const { data: course, isLoading: courseLoading } = useQuery({\n    queryKey: ['course', courseId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/courses/${courseId}`);\n      if (!response.ok) throw new Error('Failed to fetch course');\n      return response.json() as Promise<Course>;\n    }\n  });\n\n  // Fetch course modules\n  const { data: modules, isLoading: modulesLoading } = useQuery({\n    queryKey: ['course-modules', courseId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/courses/${courseId}/modules`);\n      if (!response.ok) throw new Error('Failed to fetch modules');\n      return response.json() as Promise<CourseModule[]>;\n    }\n  });\n\n  // Fetch course progress\n  const { data: progress, isLoading: progressLoading, refetch: refetchProgress } = useQuery({\n    queryKey: ['course-progress', courseId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/courses/${courseId}/progress`);\n      if (!response.ok) throw new Error('Failed to fetch progress');\n      return response.json() as Promise<CourseProgress>;\n    },\n    retry: false\n  });\n\n  // Extract enrollment from progress data\n  const enrollment = progress?.enrollment;\n\n  // Add refetch function for enrollment (using same progress refetch)\n  const refetchEnrollment = refetchProgress;\n\n  // Get current module with proper type safety\n  const modulesList = Array.isArray(modules) ? modules : [];\n\n  // If no moduleId provided, redirect to first module\n  if (!moduleId && modulesList.length > 0) {\n    const firstModule = modulesList[0];\n    setLocation(`/courses/${courseId}/modules/${firstModule.id}`);\n    return null;\n  }\n\n  // If moduleId is provided but no modules found, show loading or error\n  if (moduleId && modulesList.length === 0 && !modulesLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-semibold mb-2\">Module Not Found</h2>\n          <p className=\"text-muted-foreground mb-4\">The requested module could not be found.</p>\n          <Button onClick={() => setLocation(`/courses/${courseId}`)}>\n            Back to Course\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const currentModuleIndex = modulesList.findIndex(m => m.id.toString() === moduleId);\n  const currentModule = currentModuleIndex >= 0 ? modulesList[currentModuleIndex] : (modulesList.length > 0 ? modulesList[0] : undefined);\n\n  // Update code when module changes\n  useEffect(() => {\n    if (currentModule?.codeExample) {\n      setCode(currentModule.codeExample);\n    }\n  }, [currentModule]);\n\n  // Navigation functions\n  const navigateToModule = (module: CourseModule) => {\n    setLocation(`/courses/${courseId}/modules/${module.id}`);\n  };\n\n  const navigateToPreviousModule = () => {\n    if (currentModuleIndex > 0) {\n      const prevModule = modulesList[currentModuleIndex - 1];\n      navigateToModule(prevModule);\n    }\n  };\n\n  const navigateToNextModule = () => {\n    if (currentModuleIndex < modulesList.length - 1) {\n      const nextModule = modulesList[currentModuleIndex + 1];\n      navigateToModule(nextModule);\n    }\n  };\n\n  // Mark module complete mutation\n  const markCompleteMutation = useMutation({\n    mutationFn: async () => {\n      if (!currentModule) throw new Error('No module selected');\n      return apiRequest('POST', `/api/courses/${courseId}/modules/${currentModule.id}/complete`, {\n        timeSpent: 300,\n        notes: 'Module completed'\n      });\n    },\n    onSuccess: async () => {\n      // Optimistically refetch progress so UI reflects new percentage and disables button\n      queryClient.invalidateQueries({ queryKey: ['course-progress', courseId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/enrollments'] });\n      await refetchProgress();\n      await refetchEnrollment();\n      toast({ title: 'Module completed!' });\n    },\n    onError: (error: Error) => {\n      console.error('Error marking module complete:', error);\n      toast({\n        title: 'Failed to mark module complete',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  // Execute code mutation\n  const executeCodeMutation = useMutation({\n    mutationFn: async () => {\n      setIsExecuting(true);\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/modules/execute', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          code,\n          language: currentModule?.language || 'javascript'\n        })\n      });\n      if (!response.ok) throw new Error('Failed to execute code');\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      // Prefer showing the error from Docker/runner if present\n      const text = (data?.error && String(data.error).trim().length > 0)\n        ? `Error: ${String(data.error)}`\n        : (data?.output || '');\n      setOutput(text);\n      setIsExecuting(false);\n      // If Mark Complete is disabled, auto-complete when expectedOutput matches and there is no error\n      if (!data?.error && course?.enableMarkComplete === false && currentModule?.expectedOutput) {\n        const expected = (currentModule.expectedOutput || '').trim();\n        const got = (data.output || '').trim();\n        if (expected.length > 0 && got === expected) {\n          await markCompleteMutation.mutateAsync();\n        }\n      }\n    },\n    onError: (error: Error) => {\n      setOutput(`Error: ${error.message}`);\n      setIsExecuting(false);\n    }\n  });\n\n  if (courseLoading || modulesLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!course || !currentModule) {\n    return (\n      <div className=\"h-screen flex flex-col items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Module Not Found</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The requested module could not be found.\n          </p>\n          <Button\n            onClick={() => setLocation('/courses')}\n            className=\"mt-4\"\n          >\n            Back to Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      {/* Header */}\n      <div className=\"border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation('/courses')}\n              >\n                <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                Back to Courses\n              </Button>\n              <div>\n                <h1 className=\"text-xl font-bold\">{course?.title || 'Course'}</h1>\n                <p className=\"text-sm text-muted-foreground\">{currentModule?.title || 'Module'}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {enrollment && (\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm\">Progress:</span>\n                  <Progress value={enrollment?.progress || 0} className=\"w-24\" />\n                  <span className=\"text-sm\">{enrollment?.progress || 0}%</span>\n                </div>\n              )}\n              {course?.enableMarkComplete !== false && (\n                <Button\n                  onClick={() => markCompleteMutation.mutate()}\n                  disabled={markCompleteMutation.isPending ||\n                    (enrollment?.completedModules?.includes(currentModule.id) ?? false)}\n                  size=\"sm\"\n                  variant={enrollment?.completedModules?.includes(currentModule.id) ? \"outline\" : \"default\"}\n                >\n                  {enrollment?.completedModules?.includes(currentModule.id) ? (\n                    <>\n                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                      Completed\n                    </>\n                  ) : (\n                    'Mark Complete'\n                  )}\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex relative\">\n        {/* Collapsible Sidebar */}\n        <div className={`${sidebarCollapsed ? 'w-12' : 'w-80'} transition-all duration-300 ease-in-out border-r bg-gradient-to-b from-background to-muted/20 flex flex-col`}>\n          {/* Sidebar Header */}\n          <div className=\"border-b p-4 flex items-center justify-between\">\n            {!sidebarCollapsed && (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <BookOpen className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div>\n                  <h3 className=\"font-bold text-sm\">Course Modules</h3>\n                  <p className=\"text-xs text-muted-foreground\">{modulesList.length} modules</p>\n                </div>\n              </div>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n              className=\"h-8 w-8 p-0\"\n            >\n              {sidebarCollapsed ? <Menu className=\"h-4 w-4\" /> : <X className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n\n          {/* Course Progress Overview */}\n          {!sidebarCollapsed && (\n            <div className=\"p-4 border-b bg-gradient-to-r from-primary/5 to-primary/10\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs font-medium text-muted-foreground\">Progress</span>\n                  <span className=\"text-xs font-bold text-primary\">{enrollment?.progress || 0}%</span>\n                </div>\n                <Progress value={enrollment?.progress || 0} className=\"h-2\" />\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Award className=\"h-3 w-3 text-green-500\" />\n                    <span className=\"text-xs text-muted-foreground\">\n                      {progress?.enrollment?.completedModules?.length || 0} completed\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <BarChart3 className=\"h-3 w-3 text-blue-500\" />\n                    <span className=\"text-xs text-muted-foreground\">\n                      {modulesList.length - (progress?.enrollment?.completedModules?.length || 0)} remaining\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Modules List */}\n          <ScrollArea className=\"flex-1 p-2\">\n            <div className=\"space-y-1\">\n              {modulesList.map((module, index) => {\n                const isCompleted = progress?.enrollment?.completedModules?.includes(module.id);\n                const isCurrent = module.id === currentModule?.id;\n\n                return (\n                  <div\n                    key={module.id}\n                    className={`group relative rounded-lg cursor-pointer transition-all duration-200 ${isCurrent\n                        ? 'bg-primary text-primary-foreground shadow-md scale-105'\n                        : 'hover:bg-muted/80 hover:shadow-sm'\n                      }`}\n                    onClick={() => navigateToModule(module)}\n                  >\n                    {sidebarCollapsed ? (\n                      <div className=\"p-2 flex items-center justify-center relative\">\n                        <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${isCurrent ? 'bg-primary-foreground text-primary' : 'bg-muted text-muted-foreground'\n                          }`}>\n                          {index + 1}\n                        </div>\n                        {isCompleted && (\n                          <CheckCircle className=\"h-3 w-3 text-green-500 absolute -top-0 -right-0\" />\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"p-3\">\n                        <div className=\"flex items-start space-x-3\">\n                          <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0 ${isCurrent\n                              ? 'bg-primary-foreground text-primary'\n                              : isCompleted\n                                ? 'bg-green-100 text-green-700'\n                                : 'bg-muted text-muted-foreground'\n                            }`}>\n                            {isCompleted ? <CheckCircle className=\"h-4 w-4\" /> : index + 1}\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h4 className={`font-medium text-sm leading-tight mb-1 ${isCurrent ? 'text-primary-foreground' : 'text-foreground'\n                              }`}>\n                              {module.title}\n                            </h4>\n                            {module.description && (\n                              <p className={`text-xs leading-relaxed line-clamp-2 ${isCurrent ? 'text-primary-foreground/80' : 'text-muted-foreground'\n                                }`}>\n                                {module.description}\n                              </p>\n                            )}\n                            <div className=\"flex items-center mt-2 space-x-2\">\n                              <Clock className={`h-3 w-3 ${isCurrent ? 'text-primary-foreground/60' : 'text-muted-foreground'\n                                }`} />\n                              <span className={`text-xs ${isCurrent ? 'text-primary-foreground/80' : 'text-muted-foreground'\n                                }`}>\n                                Module {module.order}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        {isCurrent && (\n                          <div className=\"absolute inset-0 rounded-lg border-2 border-primary/30 pointer-events-none\" />\n                        )}\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </ScrollArea>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 p-6\">\n          <Tabs defaultValue=\"content\" className=\"h-full flex flex-col\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"content\">\n                <BookOpen className=\"h-4 w-4 mr-2\" />\n                Content & Code\n              </TabsTrigger>\n              <TabsTrigger value=\"video\">\n                <PlayCircle className=\"h-4 w-4 mr-2\" />\n                Video\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"content\" className=\"flex-1 mt-4\">\n              <ResizablePanelGroup direction=\"horizontal\" className=\"h-full border rounded-lg\">\n                {/* Content Panel */}\n                {!isFullscreen && (\n                  <>\n                    <ResizablePanel defaultSize={50} minSize={30}>\n                      <Card className=\"h-full border-0 rounded-none\">\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-lg\">{currentModule.title}</CardTitle>\n                          {currentModule.description && (\n                            <p className=\"text-sm text-muted-foreground\">{currentModule.description}</p>\n                          )}\n                        </CardHeader>\n                        <CardContent className=\"pt-0\">\n                          <ScrollArea className=\"h-[calc(100vh-300px)]\">\n                            <div className=\"prose prose-sm max-w-none\">\n                              {currentModule.textContent ? (\n                                <div className=\"whitespace-pre-wrap leading-relaxed\">\n                                  {currentModule.textContent}\n                                </div>\n                              ) : (\n                                <div className=\"flex items-center justify-center h-32 text-muted-foreground\">\n                                  No content available for this module\n                                </div>\n                              )}\n                            </div>\n                          </ScrollArea>\n                        </CardContent>\n                      </Card>\n                    </ResizablePanel>\n\n                    <ResizableHandle withHandle />\n                  </>\n                )}\n\n                {/* Code Panel */}\n                <ResizablePanel defaultSize={isFullscreen ? 100 : 50} minSize={30}>\n                  <div className=\"h-full flex flex-col\">\n                    <Card className=\"flex flex-col flex-1 border-0 rounded-none\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <CardTitle className=\"text-lg\">Code Editor</CardTitle>\n                          <div className=\"flex items-center space-x-2\">\n                            {currentModule.language && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {currentModule.language}\n                              </Badge>\n                            )}\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => setIsFullscreen(!isFullscreen)}\n                              className=\"flex items-center space-x-1\"\n                            >\n                              {isFullscreen ? <Minimize2 className=\"w-4 h-4\" /> : <Maximize2 className=\"w-4 h-4\" />}\n                              <span>{isFullscreen ? \"Exit\" : \"Fullscreen\"}</span>\n                            </Button>\n                            <Button\n                              onClick={() => executeCodeMutation.mutate()}\n                              disabled={isExecuting}\n                              size=\"sm\"\n                            >\n                              {isExecuting ? 'Running...' : 'Run Code'}\n                            </Button>\n                          </div>\n                        </div>\n                      </CardHeader>\n\n                      <CardContent className=\"flex-1 flex flex-col pt-0 pb-0 overflow-hidden\">\n                        <div className=\"flex-1 border rounded-lg overflow-hidden\">\n                          <MonacoEditor\n                            value={code}\n                            onChange={setCode}\n                            language={currentModule.language || 'javascript'}\n                            height=\"100%\"\n                            options={{\n                              automaticLayout: true,\n                            }}\n                          />\n                        </div>\n                      </CardContent>\n                    </Card>\n\n\n                    {/* Output Section */}\n                    {output && (\n                      <Card className=\"mt-4 border-0 rounded-none\">\n                        <CardHeader className=\"pb-2\">\n                          <CardTitle className=\"text-sm\">Output</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"pt-0\">\n                          <div className={`bg-muted rounded-lg p-3 max-h-32 overflow-auto ${output.includes('Error') ? \"bg-red-100\" : \"bg-green-600\"}`}>\n                            <pre className={`text-xs font-mono whitespace-pre-wrap ${output.includes('Error') ? 'text-red-500' : 'text-green-800'}`}>\n                              {output}\n                            </pre>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Expected Output Section */}\n                    {currentModule.expectedOutput && (\n                      <Card className=\"mt-2 border-0 rounded-none\">\n                        <CardHeader className=\"pb-2\">\n                          <CardTitle className=\"text-sm text-green-600\">Expected Output</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"pt-0\">\n                          <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 max-h-24 overflow-auto\">\n                            <pre className=\"text-xs font-mono whitespace-pre-wrap text-green-800\">\n                              {currentModule.expectedOutput}\n                            </pre>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                </ResizablePanel>\n              </ResizablePanelGroup>\n            </TabsContent>\n\n            <TabsContent value=\"video\" className=\"flex-1 mt-4\">\n              <Card className=\"h-full\">\n                <CardHeader>\n                  <CardTitle>Video Content</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {currentModule.videoUrl ? (\n                    <div className=\"aspect-video\">\n                      <iframe\n                        src={(() => {\n                          const patterns = [\n                            /(?:youtube\\.com\\/watch\\?v=)([^&\\n?#]+)/,\n                            /(?:youtu\\.be\\/)([^&\\n?#]+)/,\n                            /(?:youtube\\.com\\/embed\\/)([^&\\n?#]+)/,\n                            /(?:youtube\\.com\\/v\\/)([^&\\n?#]+)/\n                          ];\n\n                          for (const pattern of patterns) {\n                            const match = currentModule.videoUrl.match(pattern);\n                            if (match && match[1]) {\n                              return `https://www.youtube.com/embed/${match[1]}?enablejsapi=1&origin=${window.location.origin}`;\n                            }\n                          }\n                          return currentModule.videoUrl;\n                        })()}\n                        className=\"w-full h-full rounded-lg border-0\"\n                        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                        allowFullScreen\n                        title={currentModule.title}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center justify-center h-64 bg-muted rounded-lg\">\n                      <p className=\"text-muted-foreground\">No video content available</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Footer Navigation */}\n      <div className=\"border-t bg-background px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <Button\n            onClick={navigateToPreviousModule}\n            disabled={currentModuleIndex === 0}\n            variant=\"outline\"\n          >\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Previous Module\n          </Button>\n\n          <span className=\"text-sm text-muted-foreground\">\n            Module {currentModuleIndex + 1} of {modulesList.length}\n          </span>\n\n          <Button\n            onClick={navigateToNextModule}\n            disabled={currentModuleIndex === modulesList.length - 1}\n          >\n            Next Module\n            <ChevronRight className=\"h-4 w-4 ml-2\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":26566},"execution-system/queue/src/worker.js":{"content":"const Queue = require('bull');\nconst { spawn } = require('child_process');\nconst fs = require('fs').promises;\nconst path = require('path');\n\n// Configure queue\nconst codeExecutionQueue = new Queue('code-execution', process.env.REDIS_URL);\n\n// Language configurations\nconst SUPPORTED_LANGUAGES = ['python', 'javascript', 'typescript', 'java', 'cpp', 'c'];\n\nasync function executeCode(code, language, input) {\n  // Create temp directory if it doesn't exist\n  const tempDir = path.join(__dirname, '../../temp');\n  await fs.mkdir(tempDir, { recursive: true });\n\n  // Create files with proper names\n  const fileMap = {\n    python: '/tmp/code.py',\n    javascript: '/tmp/code.js',\n    typescript: '/tmp/code.ts',\n    java: '/tmp/Solution.java',\n    cpp: '/tmp/code.cpp',\n    c: '/tmp/code.c'\n  };\n\n  const filePath = fileMap[language];\n  await fs.writeFile(filePath, code);\n\n  if (input) {\n    await fs.writeFile('/tmp/input.txt', input);\n  }\n\n  // Execute in appropriate container\n  const containerMap = {\n    python: 'codearena-python',\n    javascript: 'codearena-javascript',\n    typescript: 'codearena-javascript',\n    java: 'codearena-java',\n    cpp: 'codearena-cpp',\n    c: 'codearena-c'\n  };\n\n  const container = containerMap[language];\n  const dockerArgs = [\n    'run',\n    '--rm',\n    '--network=none',\n    '--memory=128m',\n    '--memory-swap=128m',\n    '--cpus=0.5',\n    '--pids-limit=64',\n    '--ulimit', 'nofile=64:64',\n    '--ulimit', 'nproc=32:32',\n    '--ulimit', 'fsize=1000000:1000000',\n    '--user', '1000:1000',\n    '--read-only',\n    '--security-opt=no-new-privileges',\n    '--cap-drop=ALL',\n    '-v', `${tempDir}:/tmp:rw`,\n    container\n  ];\n\n  if (input) {\n    dockerArgs.push('sh', '-c', `./execute.sh ${filePath} < /tmp/input.txt`);\n  } else {\n    dockerArgs.push('./execute.sh', filePath);\n  }\n\n  return new Promise((resolve, reject) => {\n    const docker = spawn('docker', dockerArgs);\n    let stdout = '';\n    let stderr = '';\n\n    docker.stdout.on('data', (data) => {\n      stdout += data.toString();\n    });\n\n    docker.stderr.on('data', (data) => {\n      stderr += data.toString();\n    });\n\n    docker.on('close', (code) => {\n      resolve({\n        output: stdout,\n        error: stderr,\n        exitCode: code\n      });\n    });\n\n    docker.on('error', reject);\n  });\n}\n\n// Process jobs from the queue\ncodeExecutionQueue.process(async (job) => {\n  const { code, language, input } = job.data;\n\n  try {\n    console.log(`[WORKER] Processing ${language} code execution request`);\n    const result = await executeCode(code, language, input);\n    console.log(`[WORKER] Execution completed with code ${result.exitCode}`);\n    return result;\n  } catch (error) {\n    console.error(`[WORKER] Execution failed:`, error);\n    throw error;\n  }\n});\n\n// Handle queue events\ncodeExecutionQueue.on('completed', (job, result) => {\n  console.log(`[QUEUE] Job ${job.id} completed successfully`);\n});\n\ncodeExecutionQueue.on('failed', (job, error) => {\n  console.error(`[QUEUE] Job ${job.id} failed:`, error);\n});\n\nconsole.log('[WORKER] Code execution worker started'); ","size_bytes":3072},"client/src/components/ui/enhanced-toaster.tsx":{"content":"import * as React from \"react\"\nimport { EnhancedToast } from \"./enhanced-toast\"\nimport { useToast } from \"./use-toast\"\n\nexport function EnhancedToaster() {\n  const { toasts } = useToast()\n\n  return (\n    <div className=\"fixed top-4 right-4 z-[100] flex flex-col space-y-2 max-w-sm\">\n      {toasts.map((toast) => (\n        <EnhancedToast\n          key={toast.id}\n          id={toast.id}\n          variant={toast.variant as any}\n          title={toast.title}\n          description={toast.description}\n          open={toast.open}\n          onOpenChange={toast.onOpenChange}\n          duration={toast.duration || 5000}\n          className={toast.className}\n        />\n      ))}\n    </div>\n  )\n}\n","size_bytes":691},"Documentations/ENROLLMENT_TYPE_IMPLEMENTATION.md":{"content":"# Enrollment Type Implementation for CodeArena\n\n## Overview\n\nThis implementation adds enrollment type tracking to all enrollment systems in CodeArena. The system now tracks whether users were enrolled by administrators or through self-enrollment (QR codes/links).\n\n## Enrollment Types\n\n### 🔐 **Admin Enrollment** (`\"admin\"`)\n- **When**: Administrators add users via admin interface buttons\n- **Purpose**: Track administrative enrollments for audit and analytics\n- **Examples**: \n  - Admin adds student to course via \"Add Student\" button\n  - Admin enrolls user in problem set via bulk enrollment\n  - Admin registers user for contest\n\n### 📱 **QR/Link Enrollment** (`\"qr\"`)\n- **When**: Students enroll themselves via QR codes or direct links\n- **Purpose**: Track self-service enrollments and user engagement\n- **Examples**:\n  - Student scans QR code to join course\n  - Student clicks enrollment link for problem set\n  - Student self-registers for contest\n\n## Implementation Details\n\n### 1. Database Schema Updates\n\n#### ProblemSetEnrollment Model\n```typescript\nexport interface IProblemSetEnrollment {\n  // ... existing fields\n  enrollmentType: 'admin' | 'qr'; // New field\n}\n\nconst problemSetEnrollmentSchema = new mongoose.Schema({\n  // ... existing fields\n  enrollmentType: {\n    type: String,\n    enum: ['admin', 'qr'],\n    required: [true, 'Enrollment type is required'],\n    default: 'qr', // Backward compatibility\n  },\n});\n```\n\n#### CourseEnrollment Model\n```typescript\nexport interface ICourseEnrollment {\n  // ... existing fields\n  enrollmentType: 'admin' | 'qr'; // New field\n}\n\nconst courseEnrollmentSchema = new mongoose.Schema({\n  // ... existing fields\n  enrollmentType: {\n    type: String,\n    enum: ['admin', 'qr'],\n    required: [true, 'Enrollment type is required'],\n    default: 'qr', // Backward compatibility\n  },\n});\n```\n\n#### ContestParticipant Model\n```typescript\nexport interface IContestParticipant {\n  // ... existing fields\n  enrollmentType: 'admin' | 'qr'; // New field\n}\n\nconst contestParticipantSchema = new mongoose.Schema({\n  // ... existing fields\n  enrollmentType: { \n    type: String, \n    enum: ['admin', 'qr'], \n    required: [true, 'Enrollment type is required'],\n    default: 'qr' // Backward compatibility\n  },\n});\n```\n\n### 2. Backend Logic Updates\n\n#### Problem Set Enrollment\n- **Admin Enrollment**: `enrollUserInProblemSet()` sets `enrollmentType: 'admin'`\n- **Self Enrollment**: `self-enroll` route sets `enrollmentType: 'qr'`\n- **Storage Methods**: Both `MemStorage` and `MongooseStorage` updated\n\n#### Course Enrollment\n- **Admin Enrollment**: When `enrolledBy` field is set, `enrollmentType: 'admin'`\n- **Self Enrollment**: Default `enrollmentType: 'qr'`\n- **Storage Methods**: Both storage implementations updated\n\n#### Contest Enrollment\n- **Admin Enrollment**: `registerParticipantByAdmin()` sets `enrollmentType: 'admin'`\n- **Self Enrollment**: `registerParticipant()` sets `enrollmentType: 'qr'`\n- **Route Logic**: Automatically detects admin vs self-enrollment\n\n### 3. API Endpoints\n\n#### Problem Sets\n- `POST /api/problem-sets/:id/enroll` - Admin enrollment (type: admin)\n- `POST /api/problem-sets/:id/self-enroll` - Self enrollment (type: qr)\n\n#### Courses\n- `POST /api/courses/:id/enroll` - Admin enrollment (type: admin)\n- Self-enrollment via QR/link (type: qr)\n\n#### Contests\n- `POST /api/contests/:contestId/register` - Auto-detects admin vs self (type: admin/qr)\n\n## Data Flow\n\n### Admin Enrollment Flow\n1. **Admin Action**: Admin clicks \"Add Student\" or similar button\n2. **Backend Detection**: System detects admin role and sets `enrollmentType: 'admin'`\n3. **Database Storage**: Enrollment saved with admin type\n4. **Audit Trail**: Clear record of who enrolled whom and how\n\n### Self Enrollment Flow\n1. **User Action**: Student scans QR code or clicks enrollment link\n2. **Backend Detection**: System detects self-enrollment and sets `enrollmentType: 'qr'`\n3. **Database Storage**: Enrollment saved with QR type\n4. **Engagement Tracking**: Record of user-initiated enrollments\n\n## Backward Compatibility\n\n### Existing Enrollments\n- **No Data Loss**: All existing enrollments remain functional\n- **Default Values**: New field defaults to `'qr'` for existing records\n- **Migration**: No manual migration required\n\n### API Compatibility\n- **No Breaking Changes**: All existing endpoints continue to work\n- **Optional Field**: Frontend can optionally display enrollment type\n- **Gradual Adoption**: New field can be used incrementally\n\n## Analytics & Reporting\n\n### Enrollment Insights\n- **Admin vs Self**: Track enrollment method distribution\n- **User Engagement**: Identify which enrollment methods are most popular\n- **Administrative Overhead**: Monitor admin vs self-enrollment ratios\n\n### Business Intelligence\n- **Course Popularity**: See which courses attract self-enrollments\n- **User Behavior**: Understand user preferences for enrollment methods\n- **Resource Allocation**: Optimize admin vs self-service balance\n\n## Security & Validation\n\n### Data Validation\n- **Enum Validation**: Only 'admin' or 'qr' values allowed\n- **Required Field**: Enrollment type must be specified\n- **Schema Enforcement**: Mongoose validates all new enrollments\n\n### Access Control\n- **Admin Only**: Only admins can create admin-type enrollments\n- **Self Service**: Users can only create qr-type enrollments\n- **Role Verification**: Backend validates user roles before setting types\n\n## Testing\n\n### Test Script\nRun the comprehensive test script:\n```bash\ncd server\nnode test-enrollment-types.js\n```\n\n### Test Coverage\n- ✅ Problem Set enrollment types\n- ✅ Course enrollment types  \n- ✅ Contest participant types\n- ✅ Schema validation\n- ✅ Backward compatibility\n\n## Usage Examples\n\n### Frontend Display\n```typescript\n// Display enrollment type in UI\nconst enrollmentType = enrollment.enrollmentType;\nconst typeLabel = enrollmentType === 'admin' ? 'Added by Admin' : 'Self Enrolled';\nconst typeIcon = enrollmentType === 'admin' ? '👨‍💼' : '📱';\n```\n\n### Backend Queries\n```typescript\n// Get all admin enrollments\nconst adminEnrollments = await ProblemSetEnrollment.find({ \n  enrollmentType: 'admin' \n});\n\n// Get self-enrollment statistics\nconst selfEnrollmentCount = await CourseEnrollment.countDocuments({ \n  enrollmentType: 'qr' \n});\n```\n\n### Analytics Queries\n```typescript\n// Enrollment method distribution\nconst enrollmentStats = await ProblemSetEnrollment.aggregate([\n  {\n    $group: {\n      _id: '$enrollmentType',\n      count: { $sum: 1 }\n    }\n  }\n]);\n```\n\n## Future Enhancements\n\n### Potential Improvements\n1. **Additional Types**: Support for 'invitation', 'bulk_import', etc.\n2. **Enrollment Sources**: Track specific QR codes, links, or admin users\n3. **Timeline Tracking**: Track when enrollment type changes\n4. **Bulk Operations**: Support for bulk enrollment type updates\n\n### Advanced Analytics\n1. **Conversion Rates**: Track QR scan to enrollment conversion\n2. **User Journey**: Analyze enrollment method preferences\n3. **Performance Metrics**: Compare admin vs self-enrollment success rates\n\n## Troubleshooting\n\n### Common Issues\n1. **Validation Errors**: Ensure enrollment type is 'admin' or 'qr'\n2. **Missing Fields**: Check that new enrollments include enrollment type\n3. **Default Values**: Verify backward compatibility for existing records\n\n### Debug Information\n- Check enrollment type in database records\n- Verify admin role detection in enrollment logic\n- Monitor enrollment creation logs for type assignment\n\n## Conclusion\n\nThis implementation provides comprehensive enrollment type tracking across all CodeArena systems. It enables better analytics, audit trails, and user engagement insights while maintaining full backward compatibility.\n\nThe system automatically detects and assigns appropriate enrollment types, ensuring accurate data without requiring changes to existing workflows or user interfaces. ","size_bytes":7904},"server/test-db-connection.js":{"content":"import { MongoClient } from 'mongodb';\n\nconst MONGODB_URL = process.env.MONGODB_URL || \"mongodb+srv://bandarin29:meritcurve@meritcurve.73u7fr7.mongodb.net/\";\n\nasync function testConnection() {\n  const client = new MongoClient(MONGODB_URL, {\n    serverSelectionTimeoutMS: 5000, // 5 second timeout\n    connectTimeoutMS: 10000, // 10 second timeout\n  });\n\n  try {\n    console.log('Attempting to connect to MongoDB...');\n    await client.connect();\n    console.log('Successfully connected to MongoDB!');\n    \n    // Test database operations\n    const db = client.db('meritcurve');\n    const collections = await db.listCollections().toArray();\n    console.log('Available collections:', collections.map(c => c.name));\n    \n    await client.close();\n    console.log('Connection closed successfully');\n  } catch (error) {\n    console.error('Failed to connect to MongoDB:', error);\n  }\n}\n\ntestConnection(); ","size_bytes":899},"server/index.ts":{"content":"import express from \"express\";\nimport { registerRoutes } from \"./appRouter\";\nimport { setupVite, serveStatic, log } from \"./viteIntegration\";\nimport { connectToMongoDB, dbHealthCheck } from \"./db\";\nimport { MaintenanceConfig } from \"./models/MaintenanceConfig\";\nimport authRoutes from \"./routes/auth\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport cors from \"cors\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { activityLogger } from './middleware/activityLogger';\nimport dotenv from \"dotenv\";\ndotenv.config();\n// Load environment variables\n\nconsole.log('MONGODB_URL:', process.env.MONGODB_URL);\n\n// Validate required environment variables\nconst requiredEnvVars = ['SESSION_SECRET', 'MONGODB_URL'];\nconst missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);\n\nif (missingEnvVars.length > 0) {\n  console.error('❌ Missing required environment variables:', missingEnvVars.join(', '));\n  console.error('Please check your .env file and ensure all required variables are set.');\n  process.exit(1);\n}\n\n// Validate SESSION_SECRET strength\nif (process.env.SESSION_SECRET && process.env.SESSION_SECRET.length < 32) {\n  console.warn('⚠️  SESSION_SECRET should be at least 32 characters long for security.');\n}\n\nconst app = express();\n\n// Configuration from environment variables\nconst config = {\n  port: parseInt(process.env.PORT || '3000', 10),\n  host: process.env.HOST || '0.0.0.0',\n  nodeEnv: process.env.NODE_ENV || 'development',\n  frontendUrl: process.env.FRONTEND_URL || 'http://localhost:5000',\n  corsOrigin: process.env.CORS_ORIGIN || process.env.FRONTEND_URL || 'http://localhost:5000',\n  debugMode: process.env.DEBUG_MODE === 'true',\n  logLevel: process.env.LOG_LEVEL || 'info',\n  sessionSecret: process.env.SESSION_SECRET!,\n  sessionMaxAge: parseInt(process.env.SESSION_MAX_AGE || '86400000'), // 24 hours default\n};\n\n// Disable ETag to avoid 304 Not Modified responses on API\napp.set('etag', false);\n\n// ---------------- FIXED CORS CONFIG ----------------\nconst corsOrigins = config.corsOrigin\n  ? config.corsOrigin.split(',').map(origin => origin.trim())\n  : [];\n\n// Always include Vercel frontend in production\nif (config.nodeEnv === 'production') {\n  corsOrigins.push('https://code-arena-taupe.vercel.app'); // your frontend URL\n}\n\napp.use(cors({\n  origin: (origin, callback) => {\n    // Allow requests with no origin (like Postman or server-to-server requests)\n    if (!origin) return callback(null, true);\n\n    // Allow if origin is in whitelist\n    if (corsOrigins.includes(origin) || corsOrigins.includes('*')) return callback(null, true);\n\n    // Allow localhost in development\n    if (config.nodeEnv === 'development' && origin.includes('localhost')) return callback(null, true);\n\n    // Block all other origins\n    return callback(new Error('Not allowed by CORS'));\n  },\n  credentials: true, // allow cookies/sessions\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']\n}));\n// ----------------------------------------------------\n\n// Ensure API responses are never cached\napp.use('/api', (req, res, next) => {\n  res.set('Cache-Control', 'no-store');\n  next();\n});\n\n// Debug middleware\nif (config.debugMode) {\n  app.use((req, res, next) => {\n    console.log('----------------------------------------');\n    console.log(`[DEBUG] ${new Date().toISOString()} ${req.method} ${req.url}`);\n    if (config.logLevel === 'debug') {\n      console.log(`[DEBUG] Headers:`, req.headers);\n    }\n    next();\n  });\n}\n\n// Parse JSON bodies\napp.use(express.json({ limit: process.env.JSON_SIZE_LIMIT || '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: process.env.URL_ENCODED_LIMIT || '10mb' }));\n\n// Session configuration\napp.use(session({\n  secret: config.sessionSecret,\n  resave: false,\n  saveUninitialized: false,\n  name: process.env.SESSION_NAME || 'codearena.sid',\n  cookie: {\n    secure: config.nodeEnv === 'production',\n    httpOnly: true,\n    maxAge: config.sessionMaxAge,\n    sameSite: config.nodeEnv === 'production' ? 'strict' : 'lax'\n  }\n}));\n\n// Initialize passport\napp.use(passport.initialize());\napp.use(passport.session());\n\n// Health check endpoints\napp.get('/', (req, res) => {\n  res.status(200).json({\n    status: 'API Server Running',\n    timestamp: new Date().toISOString(),\n    version: process.env.npm_package_version || '1.0.0',\n    environment: config.nodeEnv,\n    port: config.port\n  });\n});\n\napp.get('/health', async (req, res) => {\n  try {\n    const dbHealth = await dbHealthCheck();\n    res.status(200).json({\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: { database: dbHealth, server: { status: 'connected' } },\n      uptime: process.uptime(),\n      memory: process.memoryUsage()\n    });\n  } catch (error) {\n    res.status(503).json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n});\n\n// Mount auth routes\napp.use('/api/auth', (req, res, next) => {\n  if (config.debugMode) {\n    console.log('[AUTH] Route hit:', req.method, req.url);\n  }\n  next();\n}, authRoutes);\napp.use('/auth', authRoutes); // Backward compatibility\n\n// Activity logger\napp.use(activityLogger());\n\n// --- MAIN ASYNC BOOTSTRAP ---\n(async () => {\n  try {\n    const serverInstance = app.listen(config.port, config.host, () => {\n      console.log(`🚀 CodeArena API Server running on http://${config.host}:${config.port}`);\n    });\n\n    // Register all application routes BEFORE the 404 handler\n    await registerRoutes(app);\n    console.log('✅ Routes registered successfully');\n\n    // Setup Vite for development AFTER routes are registered\n    if (config.nodeEnv === \"development\") {\n      try {\n        await setupVite(app, serverInstance);\n        console.log('✅ Vite dev server integrated');\n      } catch (viteError) {\n        console.warn('⚠️  Vite dev server failed. Running in API-only mode.');\n      }\n    } else {\n      console.log('🚀 Production mode: API-only server');\n    }\n\n    // Global 404 handler for unmatched routes\n    app.use('*', (req, res) => {\n      res.status(404).json({\n        error: 'Endpoint not found',\n        path: req.originalUrl,\n        method: req.method\n      });\n    });\n\n    // Global error handler\n    app.use((err: Error, req: Request, res: Response, next: NextFunction) => {\n      console.error('[ERROR]', err.stack || err.message);\n      const errorResponse = config.nodeEnv === 'production'\n        ? { error: 'Internal Server Error' }\n        : { error: err.message };\n      res.status(500).json(errorResponse);\n    });\n\n    // Connect to MongoDB\n    await connectToMongoDB();\n    console.log('✅ MongoDB connected successfully');\n\n    // Initialize maintenance mode configuration\n    const { initializeMaintenanceAfterDB } = await import('./middleware/maintenance');\n    await initializeMaintenanceAfterDB();\n    console.log('✅ Maintenance configuration initialized');\n\n    console.log('\\n🎉 CodeArena API Server fully initialized!\\n');\n\n  } catch (error) {\n    console.error('❌ Failed to start server:', error);\n    process.exit(1);\n  }\n})();\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('🛑 SIGTERM received, shutting down...');\n  process.exit(0);\n});\nprocess.on('SIGINT', () => {\n  console.log('🛑 SIGINT received, shutting down...');\n  process.exit(0);\n});\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('❌ Unhandled Rejection at:', promise, 'reason:', reason);\n});\nprocess.on('uncaughtException', (error) => {\n  console.error('❌ Uncaught Exception:', error);\n  process.exit(1);\n});\n","size_bytes":7723},"server/test-db-connection.ts":{"content":"import { MongoClient } from 'mongodb';\n\nconst MONGODB_URL = process.env.MONGODB_URL || \"mongodb+srv://CodeArena:raghavmail@codearena.vl1ishe.mongodb.net/?retryWrites=true&w=majority&appName=CodeArena\";\n\nasync function testConnection() {\n  const client = new MongoClient(MONGODB_URL, {\n    serverSelectionTimeoutMS: 5000, // 5 second timeout\n    connectTimeoutMS: 10000, // 10 second timeout\n  });\n\n  try {\n    console.log('Attempting to connect to MongoDB...');\n    await client.connect();\n    console.log('Successfully connected to MongoDB!');\n    \n    // Test database operations\n    const db = client.db('meritcurve');\n    const collections = await db.listCollections().toArray();\n    console.log('Available collections:', collections.map(c => c.name));\n    \n    await client.close();\n    console.log('Connection closed successfully');\n  } catch (error) {\n    console.error('Failed to connect to MongoDB:', error);\n  }\n}\n\ntestConnection(); ","size_bytes":943},"server/test-db.ts":{"content":"import { connectToMongoDB, getDb, closeMongoDB } from './db.js';\n\nconst testDatabaseOperations = async () => {\n  try {\n    console.log('Starting database connection test...');\n    \n    // Test 1: Initial Connection\n    console.log('\\nTest 1: Establishing initial connection...');\n    const db = await connectToMongoDB();\n    console.log('Initial connection successful');\n\n    // Test 2: Concurrent Operations\n    console.log('\\nTest 2: Testing concurrent operations...');\n    const promises = Array(5).fill(null).map(async (_, i) => {\n      try {\n        const users = db.collection('users');\n        const result = await users.findOne({});\n        console.log(`Concurrent operation ${i + 1} successful`);\n        return result;\n      } catch (error) {\n        console.error(`Concurrent operation ${i + 1} failed:`, error);\n        throw error;\n      }\n    });\n\n    await Promise.all(promises);\n    console.log('All concurrent operations completed successfully');\n\n    // Test 3: Connection Reuse\n    console.log('\\nTest 3: Testing connection reuse...');\n    const db2 = await connectToMongoDB();\n    console.log('Connection reuse successful');\n\n    // Test 4: Database Operations\n    console.log('\\nTest 4: Testing database operations...');\n    const testCollection = db.collection('test');\n    await testCollection.insertOne({ test: true, timestamp: new Date() });\n    console.log('Insert operation successful');\n    \n    const result = await testCollection.findOne({ test: true });\n    console.log('Find operation successful:', result);\n    \n    await testCollection.deleteOne({ test: true });\n    console.log('Delete operation successful');\n\n    // Cleanup\n    console.log('\\nCleaning up...');\n    await closeMongoDB();\n    console.log('Test completed successfully');\n    \n  } catch (error) {\n    console.error('Test failed:', error);\n    process.exit(1);\n  }\n};\n\n// Run the test\ntestDatabaseOperations().catch(console.error); ","size_bytes":1931},"test_files/test-enrollment.js":{"content":"import { MongoClient } from 'mongodb';\nimport { ObjectId } from 'mongodb';\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/codearena';\n\nasync function testEnrollment() {\n  const client = new MongoClient(MONGODB_URI);\n  \n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n    \n    const db = client.db();\n    \n    // Test 1: Check if the problem set exists\n    console.log('\\n=== Test 1: Check Problem Set ===');\n    const problemSet = await db.collection('problemSets').findOne({ \n      $or: [\n        { id: '6894bac9fa3207e8de2039f7' },\n        { _id: new ObjectId('6894bac9fa3207e8de2039f7') }\n      ]\n    });\n    \n    if (problemSet) {\n      console.log('✅ Problem set found:', {\n        id: problemSet.id,\n        _id: problemSet._id,\n        title: problemSet.title,\n        participants: problemSet.participants || []\n      });\n    } else {\n      console.log('❌ Problem set not found');\n    }\n    \n    // Test 2: Check all problem sets\n    console.log('\\n=== Test 2: All Problem Sets ===');\n    const allProblemSets = await db.collection('problemSets').find({}).toArray();\n    console.log(`Found ${allProblemSets.length} problem sets:`);\n    allProblemSets.forEach(ps => {\n      console.log(`- ID: ${ps.id}, _ID: ${ps._id}, Title: ${ps.title}, Participants: ${ps.participants?.length || 0}`);\n    });\n    \n    // Test 3: Check users\n    console.log('\\n=== Test 3: Check Users ===');\n    const users = await db.collection('users').find({}).toArray();\n    console.log(`Found ${users.length} users:`);\n    users.forEach(user => {\n      console.log(`- ID: ${user._id}, Email: ${user.email}, Role: ${user.role}`);\n    });\n    \n    // Test 4: Check old enrollment system\n    console.log('\\n=== Test 4: Old Enrollment System ===');\n    const oldEnrollments = await db.collection('problemSetEnrollments').find({}).toArray();\n    console.log(`Found ${oldEnrollments.length} old enrollments:`);\n    oldEnrollments.forEach(enrollment => {\n      console.log(`- ProblemSetId: ${enrollment.problemSetId}, UserId: ${enrollment.userId}`);\n    });\n    \n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    await client.close();\n  }\n}\n\ntestEnrollment(); ","size_bytes":2220},"client/src/pages/contest-leaderboard.tsx":{"content":"import React from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Trophy, Medal, ArrowLeft, TrendingUp, Clock, AlertCircle } from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface LeaderboardEntry {\n  rank: number;\n  userId: string;\n  userName: string;\n  totalScore: number;\n  totalPenalty: number;\n  problemsSolved: number;\n  submissions: number;\n  lastSubmission: string;\n  problemScores: Record<string, number>;\n  contestEndMethod?: string; // Added for contest end method\n}\n\ninterface Contest {\n  id: string;\n  title: string;\n  startTime: string;\n  endTime: string;\n  problems: Array<{\n    id: string;\n    title: string;\n    points: number;\n  }>;\n  contestEndMethod: 'time_expired' | 'manually_ended';\n}\n\nexport default function ContestLeaderboardPage() {\n  const { contestId } = useParams();\n  const [, setLocation] = useLocation();\n  const { isAuthenticated } = useAuth();\n\n  // Fetch contest details\n  const { data: contest, isLoading: contestLoading, error: contestError } = useQuery<Contest>({\n    queryKey: ['/api/contests', contestId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (response.status === 401) {\n        throw new Error('Authentication required');\n      }\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch contest details');\n      }\n      \n      return response.json();\n    },\n    enabled: !!contestId && isAuthenticated,\n    retry: (failureCount, error) => {\n      if (error.message === 'Authentication required') {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  // Fetch leaderboard data\n  const { data: leaderboard, isLoading: leaderboardLoading, error: leaderboardError } = useQuery<LeaderboardEntry[]>({\n    queryKey: ['/api/contests', contestId, 'leaderboard'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}/leaderboard`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (response.status === 401) {\n        throw new Error('Authentication required');\n      }\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch leaderboard');\n      }\n      \n      return response.json();\n    },\n    enabled: !!contestId && isAuthenticated,\n    refetchInterval: 5000, // Refresh every 5 seconds for real-time updates\n    retry: (failureCount, error) => {\n      if (error.message === 'Authentication required') {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Trophy className=\"h-5 w-5 text-yellow-500\" />;\n      case 2:\n        return <Medal className=\"h-5 w-5 text-gray-400\" />;\n      case 3:\n        return <Medal className=\"h-5 w-5 text-amber-600\" />;\n      default:\n        return null;\n    }\n  };\n\n  const formatTime = (dateString: string) => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleString();\n  };\n\n  const getCurrentUserRank = () => {\n    const currentUserId = localStorage.getItem('userId');\n    return leaderboard?.find(entry => entry.userId === currentUserId);\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Authentication Required</h3>\n          <p className=\"text-gray-600\">Please log in to view the contest leaderboard.</p>\n          <Button onClick={() => setLocation('/login')} className=\"mt-4\">\n            Go to Login\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (contestLoading || leaderboardLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading leaderboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (contestError || leaderboardError) {\n    const error = contestError || leaderboardError;\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            {error?.message === 'Authentication required' ? 'Authentication Required' : 'Error Loading Leaderboard'}\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            {error?.message === 'Authentication required' \n              ? 'Please log in to view the contest leaderboard.'\n              : error?.message || 'Failed to load leaderboard data.'\n            }\n          </p>\n          {error?.message === 'Authentication required' ? (\n            <Button onClick={() => setLocation('/login')}>\n              Go to Login\n            </Button>\n          ) : (\n            <Button onClick={() => window.location.reload()}>\n              Try Again\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  if (!contest) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Contest not found</h3>\n          <p className=\"text-gray-600\">The contest you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation('/contests')} className=\"mt-4\">\n            Back to Contests\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const currentUser = getCurrentUserRank();\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation(`/contests/${contestId}/details`)}\n              className=\"mb-4\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Contest\n            </Button>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              Leaderboard\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              {contest.title} - Real-time rankings\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"h-5 w-5 text-green-500\" />\n            <span className=\"text-sm text-gray-600\">Live Updates</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 mb-6\">\n        {/* Contest Stats */}\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Participants</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{leaderboard?.length || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Problems</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{contest.problems?.length || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Your Rank</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {currentUser ? `#${currentUser.rank}` : 'N/A'}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Your Score</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {currentUser ? currentUser.totalScore : 0}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Leaderboard Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Rankings</CardTitle>\n          <CardDescription>\n            Real-time leaderboard showing participant rankings and scores\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {leaderboard && leaderboard.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-16\">Rank</TableHead>\n                    <TableHead>Participant</TableHead>\n                    <TableHead className=\"text-center\">Score</TableHead>\n                    <TableHead className=\"text-center\">Penalty</TableHead>\n                    <TableHead className=\"text-center\">Solved</TableHead>\n                    <TableHead className=\"text-center\">Contest End Method</TableHead>\n                    {contest.problems?.map((problem) => (\n                      <TableHead key={problem.id} className=\"text-center\">\n                        {problem.title}\n                      </TableHead>\n                    ))}\n                    <TableHead className=\"text-center\">Last Submission</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {leaderboard.map((entry, index) => (\n                    <TableRow \n                      key={entry.userId}\n                      className={entry.userId === localStorage.getItem('userId') ? 'bg-blue-50' : ''}\n                    >\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center space-x-2\">\n                          {getRankIcon(entry.rank)}\n                          <span>#{entry.rank}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-medium\">{entry.userName}</span>\n                          {entry.userId === localStorage.getItem('userId') && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">You</Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-center font-semibold\">\n                        <span className=\"font-bold text-gray-900\">\n                          {entry.totalScore}\n                        </span>\n                        <span className=\"text-gray-500\"> / </span>\n                        <span className=\"text-gray-600\">\n                          {contest.problems?.length ? contest.problems.length * 100 : 0}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-center text-gray-600\">\n                        {entry.totalPenalty}\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <Badge variant=\"outline\">{entry.problemsSolved}</Badge>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        {(() => {\n                          // Use participant's contest end method from database\n                          const contestEndMethod = entry.contestEndMethod;\n                          \n                          if (contestEndMethod === 'manually_ended') {\n                            return <Badge variant=\"outline\" className=\"text-orange-600 border-orange-300\">Manually Ended</Badge>;\n                          } else if (contestEndMethod === 'time_expired') {\n                            return <Badge variant=\"outline\" className=\"text-red-600 border-red-300\">Time Expired</Badge>;\n                          } else {\n                            // If no contest end method is set, don't show anything\n                            return null;\n                          }\n                        })()}\n                      </TableCell>\n                      {contest.problems?.map((problem) => {\n                        const score = entry.problemScores[problem.id] || 0;\n                        return (\n                          <TableCell key={problem.id} className=\"text-center\">\n                            {score > 0 ? (\n                              <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                                {score}\n                              </Badge>\n                            ) : (\n                              <span className=\"text-gray-400\">-</span>\n                            )}\n                          </TableCell>\n                        );\n                      })}\n                      <TableCell className=\"text-center text-sm text-gray-600\">\n                        <div className=\"flex items-center justify-center space-x-1\">\n                          <Clock className=\"h-3 w-3\" />\n                          <span>{formatTime(entry.lastSubmission)}</span>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Trophy className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No participants yet</h3>\n              <p className=\"text-gray-600\">Be the first to solve problems and appear on the leaderboard!</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Current User Stats */}\n      {currentUser && (\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>Your Performance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">#{currentUser.rank}</div>\n                <div className=\"text-sm text-gray-600\">Current Rank</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {currentUser ? (\n                    <>\n                      <span className=\"text-green-700\">{currentUser.totalScore}</span>\n                      <span className=\"text-gray-500\"> / </span>\n                      <span className=\"text-gray-600\">\n                        {contest.problems?.length ? contest.problems.length * 100 : 0}\n                      </span>\n                    </>\n                  ) : (\n                    <>\n                      <span className=\"text-gray-400\">0</span>\n                      <span className=\"text-gray-500\"> / </span>\n                      <span className=\"text-gray-400\">0</span>\n                    </>\n                  )}\n                </div>\n                <div className=\"text-sm text-gray-600\">Total Score</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{currentUser.problemsSolved}</div>\n                <div className=\"text-sm text-gray-600\">Problems Solved</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {(() => {\n                    // Check if user is disqualified first\n                    if (currentUser.isDisqualified) {\n                      return 'Disqualified';\n                    }\n                    \n                    // Use participant's contest end method from database\n                    const contestEndMethod = currentUser.contestEndMethod;\n                    \n                    if (contestEndMethod === 'manually_ended') {\n                      return 'Manually Ended';\n                    } else if (contestEndMethod === 'time_expired') {\n                      return 'Time Expired';\n                    } else {\n                      // If no contest end method is set, don't show anything\n                      return null;\n                    }\n                  })()}\n                </div>\n                <div className=\"text-sm text-gray-600\">Contest Status</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n} ","size_bytes":17391},"server/routes/assignments.ts":{"content":"import { Router, Response } from 'express';\nimport { protect } from '../middleware/auth';\nimport type { AuthRequest } from '../middleware/auth';\nimport { storage } from '../storage';\n\nconst router = Router();\n\n// List assignments (derived from problem sets)\nrouter.get('/', protect as any, (async (_req: AuthRequest, res: Response) => {\n  try {\n    const assignments = await storage.getAssignments();\n    res.json(assignments);\n  } catch (error) {\n    console.error('Error fetching assignments:', error);\n    res.status(500).json({ message: 'Failed to fetch assignments' });\n  }\n}) as any);\n\nexport default router; ","size_bytes":615},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { getTheme, setTheme, toggleTheme, type Theme } from \"@/lib/theme\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setThemeState] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const currentTheme = getTheme();\n    setThemeState(currentTheme);\n    setTheme(currentTheme);\n  }, []);\n\n  const handleSetTheme = (newTheme: Theme) => {\n    setTheme(newTheme);\n    setThemeState(newTheme);\n  };\n\n  const handleToggleTheme = () => {\n    const newTheme = toggleTheme();\n    setThemeState(newTheme);\n  };\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        theme,\n        setTheme: handleSetTheme,\n        toggleTheme: handleToggleTheme,\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1212},"server/models/Course.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface ICourse {\n  id: number;\n  title: string;\n  description?: string;\n  category?: string;\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n  estimatedHours?: number;\n  prerequisites?: string[];\n  learningObjectives?: string[];\n  problems?: number[];\n  modules?: number[];\n  enrolledUsers?: string[];\n  isPublic: boolean;\n  enableMarkComplete?: boolean;\n  createdBy?: string;\n  tags?: string[];\n  rating?: number;\n  enrollmentCount?: number;\n  completionRate?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface ICourseDocument extends Omit<ICourse, 'id'>, Document {\n  _id: mongoose.Types.ObjectId;\n  id: number;\n}\n\nconst courseSchema = new mongoose.Schema<ICourseDocument>({\n  id: {\n    type: Number,\n    required: true,\n    unique: true,\n  },\n  title: {\n    type: String,\n    required: [true, 'Course title is required'],\n    trim: true,\n  },\n  description: {\n    type: String,\n    trim: true,\n  },\n  category: {\n    type: String,\n    trim: true,\n  },\n  difficulty: {\n    type: String,\n    enum: {\n      values: ['beginner', 'intermediate', 'advanced'],\n      message: '{VALUE} is not a valid difficulty level'\n    },\n  },\n  estimatedHours: {\n    type: Number,\n    min: [0, 'Estimated hours cannot be negative'],\n  },\n  prerequisites: [{\n    type: String,\n    trim: true,\n  }],\n  learningObjectives: [{\n    type: String,\n    trim: true,\n  }],\n  problems: [{\n    type: Number,\n  }],\n  modules: [{\n    type: Number,\n  }],\n  enrolledUsers: [{\n    type: String,\n  }],\n  isPublic: {\n    type: Boolean,\n    default: true,\n  },\n  // Feature flag for QR/link enrollment\n  allowDirectEnrollment: {\n    type: Boolean,\n    default: false,\n  },\n  enableMarkComplete: {\n    type: Boolean,\n    default: true,\n  },\n  createdBy: {\n    type: String,\n    required: true,\n  },\n  tags: [{\n    type: String,\n    trim: true,\n  }],\n  rating: {\n    type: Number,\n    min: [0, 'Rating cannot be negative'],\n    max: [5, 'Rating cannot exceed 5'],\n  },\n  enrollmentCount: {\n    type: Number,\n    default: 0,\n    min: [0, 'Enrollment count cannot be negative'],\n  },\n  completionRate: {\n    type: Number,\n    default: 0,\n    min: [0, 'Completion rate cannot be negative'],\n    max: [100, 'Completion rate cannot exceed 100'],\n  },\n}, {\n  timestamps: true,\n});\n\n// Index for efficient queries\ncourseSchema.index({ id: 1 });\ncourseSchema.index({ createdBy: 1 });\ncourseSchema.index({ isPublic: 1 });\ncourseSchema.index({ category: 1 });\ncourseSchema.index({ difficulty: 1 });\n\n// Virtual for full name\ncourseSchema.virtual('fullTitle').get(function() {\n  return `${this.title}${this.category ? ` - ${this.category}` : ''}`;\n});\n\n// Method to increment enrollment count\ncourseSchema.methods.incrementEnrollment = async function() {\n  this.enrollmentCount = (this.enrollmentCount || 0) + 1;\n  return await this.save();\n};\n\n// Method to decrement enrollment count\ncourseSchema.methods.decrementEnrollment = async function() {\n  this.enrollmentCount = Math.max(0, (this.enrollmentCount || 0) - 1);\n  return await this.save();\n};\n\n// Static method to find courses by user enrollment\ncourseSchema.statics.findByUserEnrollment = function(userId: string) {\n  return this.find({ enrolledUsers: userId });\n};\n\n// Static method to find public courses\ncourseSchema.statics.findPublic = function() {\n  return this.find({ isPublic: true });\n};\n\nexport const Course = mongoose.model<ICourseDocument>('Course', courseSchema); ","size_bytes":3460},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// MongoDB-compatible schemas using Zod for validation\nexport const insertUserSchema = z.object({\n  id: z.string(),\n  email: z.string().email().optional(),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  profileImageUrl: z.string().url().optional(),\n  role: z.string().default(\"student\"),\n});\n\nexport const testCaseSchema = z.object({\n  input: z.string(),\n  expectedOutput: z.string(),\n  explanation: z.string().optional(),\n  isHidden: z.boolean().default(false),\n  timeLimit: z.number().optional(),\n  memoryLimit: z.number().optional(),\n});\n\nexport const starterCodeSchema = z.object({\n  python: z.string().optional(),\n  javascript: z.string().optional(),\n  java: z.string().optional(),\n  cpp: z.string().optional(),\n  c: z.string().optional(),\n});\n\nexport const exampleSchema = z.object({\n  input: z.string(),\n  output: z.string(),\n  explanation: z.string().optional(),\n});\n\nexport const insertProblemSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n  tags: z.array(z.string()).optional(),\n  constraints: z.string().optional(),\n  inputFormat: z.string(),\n  outputFormat: z.string(),\n  examples: z.array(exampleSchema).min(1),\n  testCases: z.array(testCaseSchema).min(1),\n  timeLimit: z.number().default(10000), // milliseconds\n  memoryLimit: z.number().default(1024), // MB\n  starterCode: starterCodeSchema,\n  isPublic: z.boolean().default(true),\n  createdBy: z.string().optional(),\n  solutionCode: starterCodeSchema.optional(),\n  notes: z.string().optional(), // Admin notes about the problem\n  difficulty_rating: z.number().min(1).max(5).optional(), // More granular difficulty rating\n});\n\n// Enhanced submission schema for contests\nexport const insertSubmissionSchema = z.object({\n  problemId: z.number(),\n  userId: z.string(),\n  code: z.string(),\n  language: z.string(),\n  status: z.string(),\n  runtime: z.number().optional(),\n  memory: z.number().optional(),\n  score: z.string().optional(),\n  feedback: z.string().optional(),\n  \n  // Contest-specific fields\n  contestId: z.string().optional(), // for contest submissions\n  contestProblemId: z.string().optional(), // contest problem instance ID\n  points: z.number().optional(), // points earned\n  submissionTime: z.date().default(() => new Date()),\n  penalty: z.number().default(0), // penalty points\n  isContestSubmission: z.boolean().default(false),\n});\n\n// Contest participation tracking\nexport const contestParticipantSchema = z.object({\n  contestId: z.string(),\n  userId: z.string(),\n  registrationTime: z.date().default(() => new Date()),\n  startTime: z.date().optional(), // when user started the contest\n  endTime: z.date().optional(), // when user finished/left the contest\n  totalScore: z.number().default(0),\n  totalPenalty: z.number().default(0),\n  rank: z.number().optional(),\n  submissions: z.array(z.string()).default([]), // submission IDs\n  problemsAttempted: z.array(z.string()).default([]), // problem IDs attempted\n  problemsSolved: z.array(z.string()).default([]), // problem IDs solved\n  isDisqualified: z.boolean().default(false),\n  disqualificationReason: z.string().optional(),\n  contestEndMethod: z.enum(['manually_ended', 'time_expired']).nullable().optional(),\n});\n\n// Contest Q&A system\nexport const contestQuestionSchema = z.object({\n  id: z.string(),\n  contestId: z.string(),\n  userId: z.string(),\n  problemId: z.string().optional(), // specific problem question\n  question: z.string(),\n  answer: z.string().optional(),\n  isPublic: z.boolean().default(false), // if answer should be visible to all\n  timestamp: z.date().default(() => new Date()),\n  answeredBy: z.string().optional(), // admin who answered\n  answeredAt: z.date().optional(),\n  status: z.enum([\"pending\", \"answered\", \"rejected\"]).default(\"pending\"),\n});\n\n// Contest analytics and reporting\nexport const contestAnalyticsSchema = z.object({\n  contestId: z.string(),\n  totalParticipants: z.number().default(0),\n  totalSubmissions: z.number().default(0),\n  problemStatistics: z.array(z.object({\n    problemId: z.string(),\n    totalAttempts: z.number(),\n    successfulSolutions: z.number(),\n    averageAttempts: z.number(),\n    averageTime: z.number(), // in minutes\n    mostFailedTestCase: z.string().optional(),\n  })).default([]),\n  participantEngagement: z.object({\n    averageTimeSpent: z.number(), // in minutes\n    peakParticipationTime: z.string().optional(),\n    dropoffRate: z.number(), // percentage of users who left early\n  }).optional(),\n  generatedAt: z.date().default(() => new Date()),\n});\n\n// Contest problem with isolated modifications\nexport const contestProblemSchema = z.object({\n  id: z.string(), // unique contest problem ID\n  originalProblemId: z.number(), // reference to base problem\n  title: z.string().optional(), // override title\n  description: z.string().optional(), // override description\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]).optional(),\n  points: z.number().default(100), // custom points for this contest\n  \n  // Contest-specific overrides\n  customTestCases: z.array(testCaseSchema).optional(),\n  customExamples: z.array(exampleSchema).optional(),\n  customStarterCode: starterCodeSchema.optional(),\n  timeLimit: z.number().optional(), // override time limit\n  memoryLimit: z.number().optional(), // override memory limit\n  constraints: z.string().optional(),\n  inputFormat: z.string().optional(),\n  outputFormat: z.string().optional(),\n  \n  order: z.number().default(0), // position in contest\n  maxSubmissions: z.number().optional(), // limit attempts\n  partialScoring: z.boolean().default(false), // allow partial credit\n});\n\n// Enhanced contest schema with comprehensive features\nexport const insertContestSchema = z.object({\n  // Basic Information\n  title: z.string().min(1, \"Contest title is required\"),\n  description: z.string().optional(),\n  \n  // Timing & Duration\n  startTime: z.date(),\n  endTime: z.date(),\n  duration: z.number().optional(), // contest duration in minutes\n  timeZone: z.string().default(\"UTC\"),\n  \n  // Contest Type & Configuration\n  type: z.enum([\"coding\", \"algorithm\", \"competitive\"]).default(\"coding\"),\n  visibility: z.enum([\"public\", \"private\", \"unlisted\"]).default(\"public\"),\n  accessControl: z.object({\n    isPasswordProtected: z.boolean().default(false),\n    password: z.string().optional(),\n    inviteOnly: z.boolean().default(false),\n    maxParticipants: z.number().optional(),\n  }).default({}),\n  \n  // Problems & Scoring\n  problems: z.array(contestProblemSchema).default([]),\n  scoringMethod: z.enum([\"maximum\", \"time_based\", \"partial\", \"acm_icpc\"]).default(\"maximum\"),\n  tieBreakingRules: z.array(z.enum([\"time\", \"submissions\", \"last_accepted\"])).default([\"time\"]),\n  \n  // Penalties & Rules\n  wrongSubmissionPenalty: z.number().default(0), // penalty per wrong submission\n  timePenalty: z.boolean().default(false), // penalty based on submission time\n  freezeLeaderboard: z.boolean().default(false),\n  freezeTime: z.number().optional(), // minutes before end to freeze leaderboard\n  \n  // Security & Anti-Cheating\n  securitySettings: z.object({\n    disableInspect: z.boolean().default(true),\n    disableCopyPaste: z.boolean().default(true),\n    disableRightClick: z.boolean().default(true),\n    disableExtensions: z.boolean().default(true),\n    enablePlagiarismDetection: z.boolean().default(true),\n    allowedLanguages: z.array(z.string()).default([\"python\", \"javascript\", \"cpp\", \"java\", \"c\"]),\n  }).default({}),\n  \n  // Participant Management\n  participants: z.array(z.string()).default([]),\n  registrationOpen: z.boolean().default(true),\n  registrationDeadline: z.date().optional(),\n  allowLateRegistration: z.boolean().default(false),\n  \n  // Communication\n  announcements: z.array(z.object({\n    id: z.string(),\n    message: z.string(),\n    timestamp: z.date(),\n    priority: z.enum([\"low\", \"medium\", \"high\"]).default(\"medium\"),\n    isGlobal: z.boolean().default(true), // visible to all participants\n  })).default([]),\n  enableQA: z.boolean().default(true),\n  \n  // Metadata\n  createdBy: z.string().optional(),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n  status: z.enum([\"draft\", \"published\", \"active\", \"ended\", \"cancelled\"]).default(\"draft\"),\n  \n  // Rewards & Recognition\n  prizePool: z.string().optional(),\n  certificates: z.boolean().default(false),\n  \n  // Analytics\n  enableAnalytics: z.boolean().default(true),\n  allowReplay: z.boolean().default(true), // allow reviewing past contest\n});\n\n// Contest leaderboard entry\nexport const contestLeaderboardEntrySchema = z.object({\n  contestId: z.string(),\n  userId: z.string(),\n  username: z.string(),\n  rank: z.number(),\n  totalScore: z.number(),\n  totalPenalty: z.number(),\n  problemsSolved: z.number(),\n  lastSubmissionTime: z.date().optional(),\n  contestEndMethod: z.enum(['manually_ended', 'time_expired']).nullable().optional(),\n  submissions: z.array(z.object({\n    problemId: z.string(),\n    points: z.number(),\n    attempts: z.number(),\n    timeToSolve: z.number().optional(), // minutes from contest start\n    penalty: z.number().default(0),\n  })).default([]),\n});\n\nexport const insertCourseSchema = z.object({\n  title: z.string().min(1, \"Course title is required\"),\n  description: z.string().optional(),\n  isPublic: z.boolean().default(true),\n  enableMarkComplete: z.boolean().default(true),\n  category: z.string().optional(),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced']).default('beginner'),\n  estimatedHours: z.number().min(1).default(1),\n  prerequisites: z.array(z.string()).default([]),\n  learningObjectives: z.array(z.string()).default([]),\n  modules: z.array(z.object({\n    title: z.string().min(1, \"Module title is required\"),\n    description: z.string(),\n    order: z.number(),\n    textContent: z.string().optional(),\n    videoUrl: z.string().optional(),\n    codeExample: z.string().optional(),\n    language: z.string().optional(),\n    expectedOutput: z.string().optional(),\n  })).default([]),\n  tags: z.array(z.string()).default([]),\n  problems: z.array(z.number()).optional(),\n  enrolledUsers: z.array(z.string()).optional(),\n  createdBy: z.string().optional(),\n  rating: z.number().min(0).max(5).optional(),\n  enrollmentCount: z.number().default(0),\n  completionRate: z.number().min(0).max(100).default(0),\n});\n\nexport const insertCourseModuleSchema = z.object({\n  courseId: z.number(),\n  title: z.string().min(1, \"Module title is required\"),\n  description: z.string().optional(),\n  order: z.number().min(0, \"Order must be non-negative\"),\n  textContent: z.string().optional(),\n  videoUrl: z.string().url().optional(),\n  codeExample: z.string().optional(),\n  language: z.string().optional(),\n  expectedOutput: z.string().optional(),\n});\n\nexport const insertCourseEnrollmentSchema = z.object({\n  courseId: z.number(),\n  userId: z.string(),\n  enrolledAt: z.date().default(() => new Date()),\n  progress: z.number().min(0).max(100).default(0),\n  completedModules: z.array(z.number()).default([]),\n});\n\n// Problem instance within a problem set - allows isolated modifications\nexport const problemInstanceSchema = z.object({\n  id: z.string(), // unique instance ID (problemSetId_problemId_timestamp)\n  originalProblemId: z.number(), // reference to base problem\n  title: z.string().optional(), // override title for this set\n  description: z.string().optional(), // override description for this set\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]).optional(), // override difficulty\n  customTestCases: z.array(testCaseSchema).optional(), // additional test cases\n  customExamples: z.array(exampleSchema).optional(), // additional examples\n  customStarterCode: starterCodeSchema.optional(), // set-specific starter code\n  timeLimit: z.number().optional(), // override time limit\n  memoryLimit: z.number().optional(), // override memory limit\n  hints: z.array(z.string()).optional(), // set-specific hints\n  constraints: z.string().optional(), // override constraints\n  inputFormat: z.string().optional(), // override input format\n  outputFormat: z.string().optional(), // override output format\n  notes: z.string().optional(), // additional notes for this set\n  order: z.number().default(0), // position within the problem set\n  isCustomized: z.boolean().default(false), // true if modified from original\n  lastModified: z.date().default(() => new Date()),\n  modifiedBy: z.string().optional(),\n});\n\nexport const insertProblemSetSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n  category: z.string().optional(),\n  tags: z.array(z.string()).default([]),\n  problemIds: z.array(z.string()).default([]), // legacy support\n  problemInstances: z.array(problemInstanceSchema).default([]), // new isolated approach\n  isPublic: z.boolean().default(true),\n  estimatedTime: z.number().optional(),\n  createdBy: z.string().optional(),\n});\n\nexport const insertProblemSetEnrollmentSchema = z.object({\n  problemSetId: z.number(),\n  userId: z.string(),\n  enrolledAt: z.date().default(() => new Date()),\n  progress: z.number().min(0).max(100).default(0),\n  completedProblems: z.array(z.number()).default([]),\n  totalSubmissions: z.number().default(0),\n  correctSubmissions: z.number().default(0),\n});\n\nexport const insertUserProgressSchema = z.object({\n  userId: z.string(),\n  moduleId: z.number(),\n  completedAt: z.date().default(() => new Date()),\n  progress: z.number().min(0).max(100).default(0),\n});\n\nexport const mcqOptionSchema = z.object({\n  text: z.string(),\n  isCorrect: z.boolean(),\n});\n\nexport const assignmentQuestionSchema = z.object({\n  id: z.string(),\n  type: z.enum([\"coding\", \"mcq\", \"text\"]),\n  title: z.string(),\n  description: z.string(),\n  points: z.number().min(0),\n  // For coding questions\n  starterCode: starterCodeSchema.optional(),\n  testCases: z.array(testCaseSchema).optional(),\n  // For MCQ questions\n  options: z.array(mcqOptionSchema).optional(),\n  // For text questions\n  expectedAnswer: z.string().optional(),\n});\n\nexport const insertAssignmentSchema = z.object({\n  title: z.string().min(1, \"Assignment title is required\"),\n  description: z.string().optional(),\n  questions: z.array(assignmentQuestionSchema).min(1, \"At least one question is required\"),\n  dueDate: z.date(),\n  groups: z.array(z.string()).optional(),\n  isPublic: z.boolean().default(false),\n  createdBy: z.string(),\n  maxAttempts: z.number().min(1).default(3),\n  timeLimit: z.number().optional(), // in minutes\n});\n\nexport const questionSubmissionSchema = z.object({\n  questionId: z.string(),\n  answer: z.string(),\n  score: z.number().min(0).max(100),\n  isCorrect: z.boolean(),\n});\n\nexport const insertAssignmentSubmissionSchema = z.object({\n  assignmentId: z.number(),\n  userId: z.string(),\n  questionSubmissions: z.array(questionSubmissionSchema),\n  overallScore: z.number().min(0).max(100),\n  submittedAt: z.date().default(() => new Date()),\n  attemptNumber: z.number().min(1),\n});\n\nexport const insertGroupSchema = z.object({\n  name: z.string().min(1, \"Group name is required\"),\n  description: z.string().optional(),\n  members: z.array(z.string()).default([]),\n  createdBy: z.string(),\n  isActive: z.boolean().default(true),\n});\n\nexport const insertContestParticipantSchema = z.object({\n  contestId: z.number(),\n  userId: z.string(),\n  joinedAt: z.date().default(() => new Date()),\n  rank: z.number().optional(),\n  score: z.number().default(0),\n});\n\nexport const insertAnnouncementSchema = z.object({\n  title: z.string().min(1, \"Announcement title is required\"),\n  content: z.string().min(1, \"Announcement content is required\"),\n  targetGroups: z.array(z.string()).optional(),\n  isGlobal: z.boolean().default(false),\n  createdBy: z.string(),\n  expiresAt: z.date().optional(),\n  isActive: z.boolean().default(true),\n});\n\n// Type exports\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertProblem = z.infer<typeof insertProblemSchema>;\nexport type InsertSubmission = z.infer<typeof insertSubmissionSchema>;\nexport type InsertContest = z.infer<typeof insertContestSchema>;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type InsertAssignment = z.infer<typeof insertAssignmentSchema>;\nexport type InsertAssignmentSubmission = z.infer<typeof insertAssignmentSubmissionSchema>;\nexport type AssignmentQuestion = z.infer<typeof assignmentQuestionSchema>;\nexport type QuestionSubmission = z.infer<typeof questionSubmissionSchema>;\nexport type MCQOption = z.infer<typeof mcqOptionSchema>;\nexport type InsertGroup = z.infer<typeof insertGroupSchema>;\nexport type InsertContestParticipant = z.infer<typeof insertContestParticipantSchema>;\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\n\nexport type TestCase = z.infer<typeof testCaseSchema>;\nexport type StarterCode = z.infer<typeof starterCodeSchema>;\nexport type Example = z.infer<typeof exampleSchema>;\nexport type ProblemInstance = z.infer<typeof problemInstanceSchema>;\nexport type InsertProblemSet = z.infer<typeof insertProblemSetSchema>;\n\n// Enhanced contest type definitions\nexport type Contest = z.infer<typeof insertContestSchema>;\nexport type ContestProblem = z.infer<typeof contestProblemSchema>;\nexport type ContestParticipant = z.infer<typeof contestParticipantSchema>;\nexport type ContestQuestion = z.infer<typeof contestQuestionSchema>;\nexport type ContestAnalytics = z.infer<typeof contestAnalyticsSchema>;\nexport type ContestLeaderboardEntry = z.infer<typeof contestLeaderboardEntrySchema>;","size_bytes":17594},"scripts/make-admin.js":{"content":"const { MongoClient } = require('mongodb');\n\nasync function makeAdmin(email) {\n  const uri = process.env.MONGODB_URL || \"mongodb+srv://bandarin29:meritcurve@meritcurve.73u7fr7.mongodb.net/\";\n  const client = new MongoClient(uri);\n\n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n\n    const db = client.db('meritcurve');\n    const users = db.collection('users');\n\n    const result = await users.updateOne(\n      { email: email },\n      { $set: { role: 'admin' } }\n    );\n\n    if (result.matchedCount === 0) {\n      console.log('No user found with that email');\n    } else if (result.modifiedCount === 0) {\n      console.log('User was already an admin');\n    } else {\n      console.log('Successfully made user an admin');\n    }\n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    await client.close();\n  }\n}\n\n// Get email from command line argument\nconst email = process.argv[2];\nif (!email) {\n  console.log('Please provide an email address');\n  process.exit(1);\n}\n\nmakeAdmin(email); ","size_bytes":1033},"test_files/update-admin.js":{"content":"import { MongoClient } from 'mongodb';\n\nasync function updateUserRole() {\n  const client = new MongoClient(process.env.MONGODB_URI || 'mongodb://localhost:27017/coding-platform');\n  \n  try {\n    await client.connect();\n    const db = client.db();\n    \n    const result = await db.collection('users').updateOne(\n      { email: 'test@example.com' },\n      { $set: { role: 'admin' } }\n    );\n    \n    console.log('Updated user role:', result);\n  } catch (error) {\n    console.error('Error updating user role:', error);\n  } finally {\n    await client.close();\n  }\n}\n\nupdateUserRole();","size_bytes":580},"client/src/index.css":{"content":"/* tailwind csss */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 0 0% 100%;\n  --foreground: 20 14.3% 4.1%;\n  --muted: 60 4.8% 95.9%;\n  --muted-foreground: 25 5.3% 44.7%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 20 14.3% 4.1%;\n  --card: 0 0% 100%;\n  --card-foreground: 20 14.3% 4.1%;\n  --border: 20 5.9% 90%;\n  --input: 20 5.9% 90%;\n  --primary: 122 39% 49%; /* Green theme for CodeArena */\n  --primary-foreground: 0 0% 98%;\n  --secondary: 60 4.8% 95.9%;\n  --secondary-foreground: 24 9.8% 10%;\n  --accent: 60 4.8% 95.9%;\n  --accent-foreground: 24 9.8% 10%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 60 9.1% 97.8%;\n  --ring: 122 39% 49%;\n  --radius: 0.5rem;\n  \n  /* Chart colors */\n  --chart-1: 122 39% 49%;\n  --chart-2: 207 90% 54%;\n  --chart-3: 39 77% 52%;\n  --chart-4: 280 65% 60%;\n  --chart-5: 14 80% 58%;\n  \n  /* Sidebar colors */\n  --sidebar-background: 0 0% 98%;\n  --sidebar-foreground: 20 14.3% 4.1%;\n  --sidebar-primary: 122 39% 49%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 60 4.8% 95.9%;\n  --sidebar-accent-foreground: 24 9.8% 10%;\n  --sidebar-border: 20 5.9% 90%;\n  --sidebar-ring: 122 39% 49%;\n}\n\n.dark {\n  --background: 240 10% 3.9%; /* #0f172a */\n  --foreground: 0 0% 98%;\n  --muted: 240 3.7% 15.9%;\n  --muted-foreground: 240 5% 64.9%;\n  --popover: 240 10% 3.9%;\n  --popover-foreground: 0 0% 98%;\n  --card: 230 25% 10%;\n  --card-foreground: 0 0% 98%;\n  --border: 240 3.7% 15.9%;\n  /* --input: 240 3.7% 15.9%; */\n  --input: 230 25% 10%;\n  --primary: 122 39% 49%; /* Green theme for CodeArena */\n  --primary-foreground: 0 0% 98%;\n  --secondary: 240 3.7% 15.9%;\n  --secondary-foreground: 0 0% 98%;\n  --accent: 240 3.7% 15.9%;\n  --accent-foreground: 0 0% 98%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 0 0% 98%;\n  --ring: 240 4.9% 83.9%;\n  \n  /* Chart colors */\n  --chart-1: 122 39% 49%;\n  --chart-2: 207 90% 54%;\n  --chart-3: 39 77% 52%;\n  --chart-4: 280 65% 60%;\n  --chart-5: 14 80% 58%;\n  \n  /* Sidebar colors */\n  --sidebar-background: 240 10% 3.9%;\n  --sidebar-foreground: 0 0% 98%;\n  --sidebar-primary: 122 39% 49%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 240 3.7% 15.9%;\n  --sidebar-accent-foreground: 0 0% 98%;\n  --sidebar-border: 240 3.7% 15.9%;\n  --sidebar-ring: 122 39% 49%;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n  \n  /* Code editor styles */\n  .code-editor {\n    font-family: 'JetBrains Mono', 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n  }\n}\n\n@layer utilities {\n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n}\n\n/* Beautiful sidebar animations */\n@keyframes slideInFromLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n}\n\n@keyframes pulse-glow {\n  0%, 100% {\n    box-shadow: 0 0 5px rgba(34, 197, 94, 0.4);\n  }\n  50% {\n    box-shadow: 0 0 20px rgba(34, 197, 94, 0.6);\n  }\n}\n\n.sidebar-item-enter {\n  animation: slideInFromLeft 0.3s ease-out forwards;\n}\n\n.sidebar-progress-enter {\n  animation: fadeInUp 0.4s ease-out 0.2s forwards;\n  opacity: 0;\n}\n\n.hamburger-hover {\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.hamburger-hover:hover {\n  transform: scale(1.05);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.sidebar-backdrop {\n  backdrop-filter: blur(4px);\n}\n\n.progress-shimmer {\n  background: linear-gradient(\n    90deg,\n    transparent,\n    rgba(255, 255, 255, 0.2),\n    transparent\n  );\n  background-size: 200px 100%;\n  animation: shimmer 2s infinite;\n}\n\n.sidebar-expanded {\n  animation: slideInFromLeft 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.menu-trigger {\n  animation: pulse-glow 2s infinite;\n}\n","size_bytes":4139},"test_files/debug-problem-sets.js":{"content":"import { MongoClient } from 'mongodb';\n\nasync function debugProblemSets() {\n  const client = new MongoClient('mongodb://localhost:27017');\n  \n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n    \n    const db = client.db('codearena');\n    const problemSets = await db.collection('problemSets').find({}).toArray();\n    \n    console.log('Found problem sets:');\n    problemSets.forEach(ps => {\n      console.log(`- ID: ${ps.id}, Title: ${ps.title}, Type: ${typeof ps.id}`);\n    });\n    \n    // Check if there's a problem set with ID 6894\n    const problemSet6894 = await db.collection('problemSets').findOne({ id: '6894' });\n    if (problemSet6894) {\n      console.log('Found problem set 6894:', problemSet6894);\n    } else {\n      console.log('Problem set 6894 not found');\n    }\n    \n    // Check if there's a problem set with ID 6894 as number\n    const problemSet6894Num = await db.collection('problemSets').findOne({ id: 6894 });\n    if (problemSet6894Num) {\n      console.log('Found problem set 6894 (numeric):', problemSet6894Num);\n    } else {\n      console.log('Problem set 6894 (numeric) not found');\n    }\n    \n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    await client.close();\n  }\n}\n\ndebugProblemSets(); ","size_bytes":1270},"client/src/pages/profile.tsx":{"content":"// @ts-nocheck\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { UserAvatar } from \"@/components/ui/avatar\";\nimport { Calendar, Trophy, Code, Clock, TrendingUp, ArrowLeft } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport type { Submission, Problem } from \"@shared/schema\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: submissions, isLoading: submissionsLoading } = useQuery({\n    queryKey: [\"/api/submissions\"],\n  });\n\n  const { data: problems } = useQuery({\n    queryKey: [\"/api/problems\"],\n  });\n\n  const { data: userStats } = useQuery({\n    queryKey: [\"/api/user/stats\"],\n  });\n\n  const { data: leaderboard } = useQuery({\n    queryKey: [\"/api/leaderboard\"],\n  });\n\n  if (!user) return null;\n\n  const userRank = leaderboard?.findIndex((entry: any) => entry.user.id === user.id) + 1 || 0;\n  const acceptedSubmissions = submissions?.filter((s: Submission) => s.status === 'accepted') || [];\n  const totalSubmissions = submissions?.length || 0;\n  const solvedProblems = new Set(acceptedSubmissions.map((s: Submission) => s.problemId)).size;\n  const accuracyRate = totalSubmissions > 0 ? (acceptedSubmissions.length / totalSubmissions) * 100 : 0;\n\n  const difficultyStats = problems?.reduce((acc: any, problem: Problem) => {\n    const solved = acceptedSubmissions.some((s: Submission) => s.problemId === problem.id);\n    if (solved) {\n      acc[problem.difficulty] = (acc[problem.difficulty] || 0) + 1;\n    }\n    return acc;\n  }, {}) || {};\n\n  const recentSubmissions = submissions?.slice(0, 10) || [];\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <Button\n        variant=\"ghost\"\n        className=\"mb-4 flex items-center gap-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n        onClick={() => setLocation('/dashboard')}\n      >\n        <ArrowLeft className=\"h-4 w-4\" />\n        Back to Dashboard\n      </Button>\n\n      <div className=\"flex items-start gap-6\">\n        <UserAvatar user={user} size=\"lg\" />\n        \n        <div className=\"flex-1\">\n          <h1 className=\"text-3xl font-bold\">{user.firstName} {user.lastName}</h1>\n          <p className=\"text-muted-foreground\">{user.email}</p>\n          <div className=\"flex items-center gap-4 mt-4\">\n            <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n              {user.role || 'Student'}\n            </Badge>\n            {userRank > 0 && (\n              <div className=\"flex items-center gap-2\">\n                <Trophy className=\"w-4 h-4 text-yellow-500\" />\n                <span className=\"text-sm font-medium\">Rank #{userRank}</span>\n              </div>\n            )}\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4\" />\n              <span className=\"text-sm\">Joined {new Date(user.createdAt!).toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Problems Solved</CardTitle>\n            <Code className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{solvedProblems}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              out of {problems?.length || 0} total\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Submissions</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalSubmissions}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {acceptedSubmissions.length} accepted\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Accuracy Rate</CardTitle>\n            <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{accuracyRate.toFixed(1)}%</div>\n            <Progress value={accuracyRate} className=\"mt-2\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Current Streak</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{userStats?.streak || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">days</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"submissions\">Submissions</TabsTrigger>\n          <TabsTrigger value=\"achievements\">Achievements</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Problem Difficulty Breakdown</CardTitle>\n                <CardDescription>Problems solved by difficulty level</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Easy</span>\n                  <div className=\"flex items-center gap-2\">\n                    <Progress value={(difficultyStats.easy || 0) / Math.max(1, problems?.filter((p: Problem) => p.difficulty === 'easy').length || 1) * 100} className=\"w-20\" />\n                    <span className=\"text-sm font-medium\">{difficultyStats.easy || 0}</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Medium</span>\n                  <div className=\"flex items-center gap-2\">\n                    <Progress value={(difficultyStats.medium || 0) / Math.max(1, problems?.filter((p: Problem) => p.difficulty === 'medium').length || 1) * 100} className=\"w-20\" />\n                    <span className=\"text-sm font-medium\">{difficultyStats.medium || 0}</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Hard</span>\n                  <div className=\"flex items-center gap-2\">\n                    <Progress value={(difficultyStats.hard || 0) / Math.max(1, problems?.filter((p: Problem) => p.difficulty === 'hard').length || 1) * 100} className=\"w-20\" />\n                    <span className=\"text-sm font-medium\">{difficultyStats.hard || 0}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Language Distribution</CardTitle>\n                <CardDescription>Submissions by programming language</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {submissionsLoading ? (\n                  <div>Loading language stats...</div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {Object.entries(\n                      submissions?.reduce((acc: any, sub: Submission) => {\n                        acc[sub.language] = (acc[sub.language] || 0) + 1;\n                        return acc;\n                      }, {}) || {}\n                    ).map(([language, count]) => (\n                      <div key={language} className=\"flex items-center justify-between\">\n                        <span className=\"text-sm capitalize\">{language}</span>\n                        <div className=\"flex items-center gap-2\">\n                          <Progress value={(count as number) / totalSubmissions * 100} className=\"w-20\" />\n                          <span className=\"text-sm font-medium\">{count}</span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"submissions\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Submissions</CardTitle>\n              <CardDescription>Your latest coding submissions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {submissionsLoading ? (\n                <div>Loading submissions...</div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {recentSubmissions.map((submission: Submission) => (\n                    <div key={submission.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">Problem #{submission.problemId}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {submission.language} • {new Date(submission.submittedAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <Badge variant={submission.status === 'accepted' ? 'default' : 'secondary'}>\n                        {submission.status}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"achievements\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Achievements</CardTitle>\n              <CardDescription>Your coding milestones and badges</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                {solvedProblems >= 1 && (\n                  <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                    <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                      <Code className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">First Solution</p>\n                      <p className=\"text-sm text-muted-foreground\">Solved your first problem</p>\n                    </div>\n                  </div>\n                )}\n                \n                {solvedProblems >= 10 && (\n                  <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                    <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                      <Trophy className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Problem Solver</p>\n                      <p className=\"text-sm text-muted-foreground\">Solved 10 problems</p>\n                    </div>\n                  </div>\n                )}\n\n                {accuracyRate >= 80 && totalSubmissions >= 5 && (\n                  <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                    <div className=\"w-10 h-10 bg-yellow-100 dark:bg-yellow-900 rounded-full flex items-center justify-center\">\n                      <TrendingUp className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">High Accuracy</p>\n                      <p className=\"text-sm text-muted-foreground\">80%+ accuracy rate</p>\n                    </div>\n                  </div>\n                )}\n\n                {userRank > 0 && userRank <= 10 && (\n                  <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                    <div className=\"w-10 h-10 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center\">\n                      <Trophy className=\"w-5 h-5 text-purple-600 dark:text-purple-400\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Top 10</p>\n                      <p className=\"text-sm text-muted-foreground\">Ranked in top 10</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":13424},"client/src/pages/contest-details.tsx":{"content":"import React, { useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Calendar, Clock, Users, Trophy, AlertCircle, CheckCircle, ArrowLeft } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';\n\ninterface Contest {\n  id: string;\n  title: string;\n  description: string;\n  startTime: string;\n  endTime: string;\n  duration: number;\n  problems: any[];\n  participants?: any[];\n  rules?: string[];\n}\n\nexport default function ContestDetailsPage() {\n  const { contestId } = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEnrolling, setIsEnrolling] = useState(false);\n  const [showStartDialog, setShowStartDialog] = useState(false);\n  const { isAuthenticated } = useAuth();\n\n  // Fetch contest details\n  const { data: contest, isLoading, error: contestError } = useQuery<Contest>({\n    queryKey: ['/api/contests', contestId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (response.status === 401) {\n        throw new Error('Authentication required');\n      }\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch contest details');\n      }\n      \n      return response.json();\n    },\n    enabled: !!contestId && isAuthenticated,\n    retry: (failureCount, error) => {\n      // Don't retry on authentication errors\n      if (error.message === 'Authentication required') {\n        return false;\n      }\n      return failureCount < 3;\n    },\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n  });\n\n  // Check if user is enrolled\n  const { data: enrollmentStatus } = useQuery({\n    queryKey: ['/api/contests', contestId, 'enrollment'],\n    queryFn: async () => {\n      const response = await fetch(`/api/contests/${contestId}/participants/me`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (response.status === 404) return { enrolled: false };\n      if (!response.ok) throw new Error('Failed to check enrollment status');\n      return { enrolled: true, ...(await response.json()) };\n    },\n  });\n\n  // Enroll in contest mutation\n  const enrollMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/contests/${contestId}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ userId: 'self' }),\n      });\n      \n      if (!response.ok) {\n        if (response.status === 409) {\n          return { alreadyEnrolled: true };\n        }\n        throw new Error('Failed to enroll in contest');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data?.alreadyEnrolled) {\n        toast({\n          title: 'Already Enrolled',\n          description: 'You are already enrolled in this contest',\n        });\n      } else {\n        toast({\n          title: 'Success',\n          description: 'Successfully enrolled in the contest!',\n        });\n        \n        // Force immediate refetch to update the UI\n        queryClient.invalidateQueries({ queryKey: ['/api/contests', contestId, 'enrollment'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/contests'] });\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleEnroll = async () => {\n    setIsEnrolling(true);\n    try {\n      await enrollMutation.mutateAsync();\n    } finally {\n      setIsEnrolling(false);\n    }\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const getTimeUntilStart = () => {\n    if (!contest) return null;\n    const now = new Date();\n    const startTime = new Date(contest.startTime);\n    const diff = startTime.getTime() - now.getTime();\n    \n    if (diff <= 0) return null;\n    \n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    \n    if (days > 0) return `${days} day${days > 1 ? 's' : ''}, ${hours} hour${hours > 1 ? 's' : ''}`;\n    if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''}, ${minutes} minute${minutes > 1 ? 's' : ''}`;\n    return `${minutes} minute${minutes > 1 ? 's' : ''}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading contest details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (contestError) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            {contestError.message === 'Authentication required' ? 'Authentication Required' : 'Error Loading Contest'}\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            {contestError.message === 'Authentication required' \n              ? 'Please log in to access this contest.'\n              : contestError.message || 'Failed to load contest details.'\n            }\n          </p>\n          {contestError.message === 'Authentication required' ? (\n            <Button onClick={() => setLocation('/login')}>\n              Go to Login\n            </Button>\n          ) : (\n            <Button onClick={() => window.location.reload()}>\n              Try Again\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  if (!contest) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Contest not found</h3>\n          <p className=\"text-gray-600\">The contest you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation('/contests')} className=\"mt-4\">\n            Back to Contests\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const timeUntilStart = getTimeUntilStart();\n  const isEnrolled = enrollmentStatus?.enrolled;\n\n  const requestFullscreen = async () => {\n    try {\n      const elem: any = document.documentElement;\n      if (elem.requestFullscreen) await elem.requestFullscreen();\n      else if (elem.webkitRequestFullscreen) await elem.webkitRequestFullscreen();\n      else if (elem.msRequestFullscreen) await elem.msRequestFullscreen();\n    } catch (_) {\n      // ignore; browser may block\n    }\n    document.body.classList.add('contest-fullscreen');\n  };\n\n  const handleConfirmStart = async () => {\n    setShowStartDialog(false);\n    await requestFullscreen();\n    setLocation(`/contests/${contestId}/problems`);\n  };\n \n  return (\n    <div className=\"p-6\">\n      <Dialog open={showStartDialog} onOpenChange={setShowStartDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Before you start</DialogTitle>\n            <DialogDescription>\n              Please read the following carefully:\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-3 text-sm text-gray-700 dark:text-gray-200\">\n            <div>• By clicking the <span className=\"font-semibold\">Start</span> button now, you will be taken to <span className=\"font-semibold\">full screen</span>.</div>\n            <div>• Pressing <span className=\"font-mono\">Ctrl + C</span> or <span className=\"font-mono\">Ctrl + V</span> will trigger <span className=\"font-semibold\">plagiarism detection</span> for your code.</div>\n            <div>• Using any other window or browser extensions during the contest will result in <span className=\"font-semibold text-red-600\">disqualification</span>, and the contest will be ended immediately.</div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setShowStartDialog(false)}>Cancel</Button>\n            <Button onClick={handleConfirmStart}>Start</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      {/* Header */}\n      <div className=\"mb-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation('/contests')}\n          className=\"mb-4\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Contests\n        </Button>\n        \n        <div className=\"flex items-start justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n              {contest.title}\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400 text-lg\">\n              {contest.description}\n            </p>\n          </div>\n          \n          <div className=\"flex flex-col items-end space-y-2\">\n            {isEnrolled ? (\n              <Badge className=\"bg-green-100 text-green-800\">\n                <CheckCircle className=\"h-4 w-4 mr-1\" />\n                Enrolled\n              </Badge>\n            ) : (\n              <Button\n                onClick={handleEnroll}\n                disabled={isEnrolling}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {isEnrolling ? 'Enrolling...' : 'Enroll Now'}\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Content */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Contest Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Contest Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"flex items-center\">\n                  <Calendar className=\"h-5 w-5 mr-3 text-gray-500\" />\n                  <div>\n                    <p className=\"font-medium\">Start Time</p>\n                    <p className=\"text-sm text-gray-600\">{formatDateTime(contest.startTime)}</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <Clock className=\"h-5 w-5 mr-3 text-gray-500\" />\n                  <div>\n                    <p className=\"font-medium\">Duration</p>\n                    <p className=\"text-sm text-gray-600\">{contest.duration} minutes</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <Users className=\"h-5 w-5 mr-3 text-gray-500\" />\n                  <div>\n                    <p className=\"font-medium\">Participants</p>\n                    <p className=\"text-sm text-gray-600\">{contest.participants?.length || 0} enrolled</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <Trophy className=\"h-5 w-5 mr-3 text-gray-500\" />\n                  <div>\n                    <p className=\"font-medium\">Problems</p>\n                    <p className=\"text-sm text-gray-600\">{contest.problems?.length || 0} problems</p>\n                  </div>\n                </div>\n              </div>\n              \n              {timeUntilStart && (\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <div className=\"flex items-center\">\n                    <Clock className=\"h-5 w-5 mr-2 text-blue-600\" />\n                    <p className=\"text-blue-800\">\n                      Contest starts in <span className=\"font-semibold\">{timeUntilStart}</span>\n                    </p>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Contest Rules */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Contest Rules</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                  <p className=\"text-sm text-gray-700\">\n                    You can only submit solutions during the contest period.\n                  </p>\n                </div>\n                <div className=\"flex items-start\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                  <p className=\"text-sm text-gray-700\">\n                    Each problem has a time limit and memory limit that must be respected.\n                  </p>\n                </div>\n                <div className=\"flex items-start\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                  <p className=\"text-sm text-gray-700\">\n                    You can submit multiple times for each problem, but only the best score counts.\n                  </p>\n                </div>\n                <div className=\"flex items-start\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                  <p className=\"text-sm text-gray-700\">\n                    The leaderboard is updated in real-time based on your submissions.\n                  </p>\n                </div>\n                <div className=\"flex items-start\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0\"></div>\n                  <p className=\"text-sm text-gray-700\">\n                    Plagiarism is strictly prohibited and will result in disqualification.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {isEnrolled ? (\n                enrollmentStatus?.isDisqualified ? (\n                  <div className=\"text-center space-y-2\">\n                    <div className=\"text-red-600 font-medium\">Disqualified</div>\n                    <p className=\"text-sm text-gray-600\">\n                      You have been disqualified from this contest due to rule violations.\n                    </p>\n                    {enrollmentStatus?.disqualificationReason && (\n                      <p className=\"text-xs text-red-500\">\n                        Reason: {enrollmentStatus.disqualificationReason}\n                      </p>\n                    )}\n                    <Button\n                      onClick={() => setLocation(`/contests/${contestId}/leaderboard`)}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                    >\n                      View Results\n                    </Button>\n                  </div>\n                ) : enrollmentStatus?.contestEndMethod === 'manually_ended' ? (\n                  <div className=\"text-center space-y-2\">\n                    <div className=\"text-red-600 font-medium\">Contest Ended</div>\n                    <p className=\"text-sm text-gray-600\">\n                      Your contest participation has ended. You can view your results in the leaderboard.\n                    </p>\n                    <Button\n                      onClick={() => setLocation(`/contests/${contestId}/leaderboard`)}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                    >\n                      View Results\n                    </Button>\n                  </div>\n                ) : (\n                  <Button\n                    onClick={() => setShowStartDialog(true)}\n                    className=\"w-full\"\n                    disabled={new Date() < new Date(contest.startTime)}\n                  >\n                    {new Date() < new Date(contest.startTime) ? 'Contest Not Started' : 'Start Contest'}\n                  </Button>\n                )\n              ) : (\n                <Button\n                  onClick={handleEnroll}\n                  disabled={isEnrolling}\n                  className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                >\n                  {isEnrolling ? 'Enrolling...' : 'Enroll in Contest'}\n                </Button>\n              )}\n              \n            </CardContent>\n          </Card>\n\n          {/* Contest Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Contest Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Status:</span>\n                  <Badge variant=\"secondary\">Upcoming</Badge>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Your Status:</span>\n                  <Badge variant={isEnrolled ? \"default\" : \"outline\"}>\n                    {isEnrolled ? 'Enrolled' : 'Not Enrolled'}\n                  </Badge>\n                </div>\n                {isEnrolled && enrollmentStatus?.isDisqualified && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Status:</span>\n                    <Badge variant=\"destructive\">\n                      Disqualified\n                    </Badge>\n                  </div>\n                )}\n                {isEnrolled && enrollmentStatus?.contestEndMethod && !enrollmentStatus?.isDisqualified && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Contest End:</span>\n                    <Badge variant={enrollmentStatus.contestEndMethod === 'manually_ended' ? \"destructive\" : \"secondary\"}>\n                      {enrollmentStatus.contestEndMethod === 'manually_ended' ? 'Ended' : 'Time Expired'}\n                    </Badge>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Problems:</span>\n                  <span className=\"text-sm font-medium\">{contest.problems?.length || 0}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Duration:</span>\n                  <span className=\"text-sm font-medium\">{contest.duration} min</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n} ","size_bytes":19884},"client/src/components/layout/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Code, Bell, Moon, Sun, Settings, LogOut, User } from \"lucide-react\";\nimport lightLogo from \"../../assests/light_logo.png\";\nimport lightName from \"../../assests/light_name.png\";\nimport darkLogo from \"../../assests/dark_logo.png\";\nimport darkName from \"../../assests/dark_name.png\";\n\nexport default function Navbar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const [isDark, setIsDark] = useState(false);\n\n  const toggleTheme = () => {\n    setIsDark(!isDark);\n    document.documentElement.classList.toggle('dark');\n  };\n\n  const navItems = [\n    { path: \"/\", label: \"Dashboard\" },\n    { path: \"/problems\", label: \"Problems\" },\n    { path: \"/contests\", label: \"Contests\" },\n    { path: \"/leaderboard\", label: \"Leaderboard\" },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <nav className=\"bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-700 sticky top-0 z-50 shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo and Brand */}\n          <div className=\"flex items-center space-x-8\">\n            <Link href=\"/\" className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2\">\n                <img src={lightLogo} alt=\"CodeArena logo\" className=\"h-10 w-auto dark:hidden\" />\n                <img src={darkLogo} alt=\"CodeArena logo\" className=\"h-10 w-auto hidden dark:block\" />\n                <img src={lightName} alt=\"CodeArena\" className=\"h-8 w-auto dark:hidden\" />\n                <img src={darkName} alt=\"CodeArena\" className=\"h-9 w-auto hidden dark:block\" />\n              </div>\n            </Link>\n            \n            {/* Navigation Links */}\n            <div className=\"hidden md:flex space-x-8\">\n              {navItems.map((item) => (\n                <Link key={item.path} href={item.path}>\n                  <a className={`pb-4 -mb-px border-b-2 transition-colors ${\n                    isActive(item.path)\n                      ? \"text-arena-green border-arena-green font-medium\"\n                      : \"text-slate-600 dark:text-slate-400 border-transparent hover:text-slate-900 dark:hover:text-slate-100\"\n                  }`}>\n                    {item.label}\n                  </a>\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          {/* User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Notifications */}\n            {/* <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n              <Bell className=\"w-5 h-5\" />\n              <Badge className=\"absolute -top-1 -right-1 w-5 h-5 p-0 text-xs bg-red-500 text-white\">\n                3\n              </Badge>\n            </Button> */}\n\n            {/* Theme Toggle */}\n            {/* <Button variant=\"ghost\" size=\"sm\" onClick={toggleTheme}>\n              {isDark ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n            </Button> */}\n\n            {/* User Profile Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-3 h-auto p-2\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarImage src={user?.profileImageUrl} alt={`${user?.firstName} ${user?.lastName}`} />\n                    <AvatarFallback>\n                      {user?.firstName?.[0] || 'U'}{user?.lastName?.[0] || ''}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"text-sm font-medium text-slate-900 dark:text-slate-100 hidden sm:block\">\n                    {user?.firstName || 'User'}\n                  </span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <div className=\"px-3 py-2\">\n                  <p className=\"text-sm font-medium text-slate-900 dark:text-slate-100\">\n                    {user?.firstName} {user?.lastName}\n                  </p>\n                  <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n                    {user?.email}\n                  </p>\n                </div>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem \n                  className=\"text-red-600 dark:text-red-400\"\n                  onClick={() => window.location.href = '/api/logout'}\n                >\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  Sign Out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5625},"client/src/components/dashboard/leaderboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { UserAvatar } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\nimport { config } from \"@/config\";\n\ninterface LeaderboardUser {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n}\n\ninterface LeaderboardEntry {\n  user: LeaderboardUser;\n  problemsSolved: number;\n  totalScore: number;\n}\n\nexport function Leaderboard() {\n  const { data: leaderboard, isLoading } = useQuery<LeaderboardEntry[]>({\n    queryKey: [\"leaderboard\"],\n    queryFn: async () => {\n      const res = await fetch(`${config.apiUrl}/api/leaderboard`, {\n        credentials: 'include',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!res.ok) throw new Error(await res.text());\n      return res.json();\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Top Performers</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full\"></div>\n                <div className=\"w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded-full\"></div>\n                <div className=\"flex-1\">\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-24 mb-1\"></div>\n                  <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-16\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getRankBadgeColor = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return \"bg-yellow-400 text-white\";\n      case 2:\n        return \"bg-gray-400 text-white\";\n      case 3:\n        return \"bg-orange-400 text-white\";\n      default:\n        return \"bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-gray-200 dark:border-gray-800\">\n        <CardTitle>Top Performers</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-3\">\n          {leaderboard && leaderboard.slice(0, 3).map((entry: LeaderboardEntry, index: number) => (\n            <div key={entry.user.id} className=\"flex items-center space-x-3\">\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${getRankBadgeColor(index + 1)}`}>\n                {index + 1}\n              </div>\n              <UserAvatar user={entry.user} size=\"sm\" />\n              <div className=\"flex-1\">\n                <p className=\"font-medium text-gray-900 dark:text-white\">\n                  {entry.user.firstName} {entry.user.lastName}\n                </p>\n                <p className=\"text-xs text-gray-500\">\n                  {entry.problemsSolved} problems • {Math.round(entry.totalScore)} points\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"mt-4 text-center\">\n          <Button variant=\"ghost\" asChild>\n            <Link href=\"/leaderboard\" className=\"text-green-500 hover:text-green-600\">\n              View Full Leaderboard\n            </Link>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3583},"client/src/pages/MaintenancePage.tsx":{"content":"import React from 'react';\nimport { AlertTriangle, Clock, Wrench } from 'lucide-react';\n\ninterface MaintenancePageProps {\n  maintenanceInfo?: {\n    from: string;\n    to: string;\n    estimatedEnd: string;\n  };\n}\n\nexport default function MaintenancePage({ maintenanceInfo }: MaintenancePageProps) {\n  const formatTime = (timeString: string) => {\n    const [hours, minutes] = timeString.split(':');\n    const hour = parseInt(hours);\n    const ampm = hour >= 12 ? 'PM' : 'AM';\n    const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n    return `${displayHour}:${minutes} ${ampm}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-emerald-50 dark:from-slate-900 dark:via-slate-800 dark:to-emerald-900/20 flex items-center justify-center p-4\">\n      <div className=\"max-w-2xl w-full text-center space-y-8\">\n        {/* Logo and Title */}\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-center\">\n            {/* <div className=\"p-4 bg-red-100 dark:bg-red-900/20 rounded-full\">\n              <Wrench className=\"h-16 w-16 text-red-600 dark:text-red-400\" />\n            </div> */}\n          </div>\n          <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white\">\n            Under Maintenance\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-400\">\n            We're upgrading a few things and will be back soon\n          </p>\n        </div>\n\n        {/* Maintenance Message */}\n        <div className=\"bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-800 rounded-lg p-6\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <AlertTriangle className=\"h-6 w-6 text-amber-600 dark:text-amber-400\" />\n            <h2 className=\"text-lg font-semibold text-amber-800 dark:text-amber-200\">\n              Scheduled Maintenance\n            </h2>\n          </div>\n          \n          {maintenanceInfo ? (\n            <div className=\"space-y-2\">\n              <p className=\"text-amber-700 dark:text-amber-300\">\n                We are upgrading a few things and will be back between{' '}\n                <span className=\"font-semibold\">{formatTime(maintenanceInfo.from)}</span> and{' '}\n                <span className=\"font-semibold\">{formatTime(maintenanceInfo.to)}</span>.\n              </p>\n              <p className=\"text-sm text-amber-600 dark:text-amber-400\">\n                Estimated completion: {formatTime(maintenanceInfo.estimatedEnd)}\n              </p>\n            </div>\n          ) : (\n            <p className=\"text-amber-700 dark:text-amber-300\">\n              We are currently performing scheduled maintenance to improve your experience. \n              Please check back in a few hours.\n            </p>\n          )}\n        </div>\n\n        {/* Status Info */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Clock className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n              <h3 className=\"font-semibold text-blue-800 dark:text-blue-200\">What's happening?</h3>\n            </div>\n            <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n              We're performing system upgrades and optimizations to enhance performance and security.\n            </p>\n          </div>\n\n          <div className=\"bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Wrench className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n              <h3 className=\"font-semibold text-green-800 dark:text-green-200\">What to expect?</h3>\n            </div>\n            <p className=\"text-sm text-green-700 dark:text-green-300\">\n              Once maintenance is complete, you'll have access to improved features and better performance.\n            </p>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500 dark:text-gray-400\">\n          <p>Thank you for your patience during this maintenance window.</p>\n          <p className=\"mt-1\">For urgent matters, please contact support.</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4401},"client/src/components/ui/use-toast.ts":{"content":"// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n  variant?: \"info\" | \"error\" | \"warning\" | \"success\"\n  duration?: number\n  className?: string\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\n// Convenience functions for different toast types\nconst toastInfo = (title: string, description?: string, duration = 5000) => {\n  return toast({\n    title,\n    description,\n    variant: \"info\",\n    duration,\n  })\n}\n\nconst toastError = (title: string, description?: string, duration = 5000) => {\n  return toast({\n    title,\n    description,\n    variant: \"error\",\n    duration,\n  })\n}\n\nconst toastWarning = (title: string, description?: string, duration = 5000) => {\n  return toast({\n    title,\n    description,\n    variant: \"warning\",\n    duration,\n  })\n}\n\nconst toastSuccess = (title: string, description?: string, duration = 5000) => {\n  return toast({\n    title,\n    description,\n    variant: \"success\",\n    duration,\n  })\n}\n\nexport { useToast, toast, toastInfo, toastError, toastWarning, toastSuccess } ","size_bytes":4801},"client/src/pages/ContestEnrollmentPage.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, Calendar, Clock, Trophy, Users, CheckCircle } from 'lucide-react';\nimport { useToast, toastSuccess, toastError, toastInfo } from '@/components/ui/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface Contest {\n  id: number;\n  title: string;\n  description: string;\n  startTime: string;\n  endTime: string;\n  duration: number;\n  problems: Problem[];\n  participants?: Participant[];\n}\n\ninterface Problem {\n  id: number;\n  title: string;\n  difficulty: string;\n  points: number;\n}\n\ninterface Participant {\n  id: string;\n  userId: string;\n  contestId: string;\n  registrationTime: string;\n  status: 'registered' | 'active' | 'completed';\n}\n\nexport default function ContestEnrollmentPage() {\n  const { contestId } = useParams<{ contestId: string }>();\n  const { toast } = useToast();\n\n  const { user, isAuthenticated } = useAuth();\n  const [hasTriedAutoEnroll, setHasTriedAutoEnroll] = useState(false);\n\n  // Fetch contest data (accessible to both authenticated and unauthenticated users)\n  const { data: contest, isLoading: contestLoading, error: contestError } = useQuery({\n    queryKey: ['contest', contestId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/contests/${contestId}`, {\n        headers: {\n          ...(token ? { 'Authorization': `Bearer ${token}` } : {})\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('Contest not found');\n        }\n        throw new Error('Failed to fetch contest');\n      }\n      return response.json() as Promise<Contest>;\n    },\n    enabled: !!contestId\n  });\n\n  // Check if user is already enrolled\n  const { data: userParticipation } = useQuery({\n    queryKey: ['user-contest-participation', contestId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n      \n      const response = await fetch(`/api/contests/${contestId}/participants/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) return null;\n      return response.json();\n    },\n    enabled: !!contestId && isAuthenticated,\n    retry: false\n  });\n\n  const isAlreadyEnrolled = !!userParticipation;\n\n  // Handle enrollment button click\n  const handleEnrollClick = () => {\n    if (!isAuthenticated) {\n      // Redirect to login if not authenticated\n      console.log('[DEBUG] User not authenticated, redirecting to login');\n      window.location.href = `/login?returnTo=/contest-enrollment/${contestId}`;\n      return;\n    }\n    \n    // If authenticated, proceed with enrollment\n    enrollMutation.mutate();\n  };\n\n  // Contest enrollment mutation (only for authenticated users)\n  const enrollMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem('token');\n      \n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ userId: 'self' }) // Backend will use req.user.id\n      });\n      \n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Please log in to enroll in this contest');\n        }\n        if (response.status === 409) {\n          // User already enrolled\n          return { alreadyEnrolled: true };\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to enroll in contest');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data?.alreadyEnrolled) {\n        toastInfo('Already Enrolled', `You are already enrolled in ${contest?.title}`);\n      } else {\n        toastSuccess('Enrollment Successful!', `You have been enrolled in ${contest?.title}`);\n      }\n      // Redirect to contests page or contest detail page\n      window.location.href = `/contests/${contestId}`;\n    },\n    onError: (error: Error) => {\n      if (error.message.includes('log in') || error.message.includes('Authentication required')) {\n        // Redirect to login page with return URL\n        window.location.href = `/login?returnTo=/contest-enrollment/${contestId}`;\n      } else {\n        toastError('Enrollment Failed', error.message);\n      }\n    }\n  });\n\n  // Check if user is already enrolled and redirect them to contest page\n  useEffect(() => {\n    if (isAuthenticated && user && contestId && isAlreadyEnrolled && !hasTriedAutoEnroll) {\n      console.log('[DEBUG] User already enrolled, redirecting to contest page...');\n      setHasTriedAutoEnroll(true);\n      window.location.href = `/contests/${contestId}`;\n    }\n  }, [isAuthenticated, user, contestId, isAlreadyEnrolled, hasTriedAutoEnroll]);\n\n  // Show loading states\n  if (contestLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>Loading contest information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show enrollment loading only when user clicks \"Enroll in Contest\" button\n  if (enrollMutation.isPending) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>Enrolling you in the contest...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (contestError || !contest) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Contest Not Found</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The contest you're looking for doesn't exist or has been removed.\n          </p>\n          <Button onClick={() => window.location.href = '/contests'}>\n            Browse Contests\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const isContestActive = new Date() >= new Date(contest.startTime) && new Date() <= new Date(contest.endTime);\n  const isContestUpcoming = new Date() < new Date(contest.startTime);\n  const isContestEnded = new Date() > new Date(contest.endTime);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <Card className=\"mb-6\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-2 mb-2\">\n              <Trophy className=\"h-8 w-8 text-yellow-500\" />\n              <CardTitle className=\"text-3xl font-bold\">{contest.title}</CardTitle>\n            </div>\n            <div className=\"flex items-center justify-center space-x-4 text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-1\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>{new Date(contest.startTime).toLocaleDateString()}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Clock className=\"h-4 w-4\" />\n                <span>{contest.duration} minutes</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Users className=\"h-4 w-4\" />\n                <span>{contest.participants?.length || 0} participants</span>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {/* Contest Status */}\n              <div className=\"text-center\">\n                {isContestUpcoming && (\n                  <Badge className=\"bg-blue-100 text-blue-800 text-sm px-3 py-1\">\n                    Upcoming Contest\n                  </Badge>\n                )}\n                {isContestActive && (\n                  <Badge className=\"bg-green-100 text-green-800 text-sm px-3 py-1\">\n                    Contest Active\n                  </Badge>\n                )}\n                {isContestEnded && (\n                  <Badge className=\"bg-gray-100 text-gray-800 text-sm px-3 py-1\">\n                    Contest Ended\n                  </Badge>\n                )}\n              </div>\n\n              {/* Contest Description */}\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">About This Contest</h3>\n                <p className=\"text-muted-foreground\">{contest.description}</p>\n              </div>\n\n              {/* Contest Problems */}\n              {/* <div>\n                <h3 className=\"text-lg font-semibold mb-4\">Contest Problems ({contest.problems.length})</h3>\n                <div className=\"grid gap-3\">\n                  {contest.problems.map((problem, index) => (\n                    <div key={problem.id} className=\"flex items-center justify-between p-3 bg-white rounded-lg border\">\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"text-sm font-medium text-gray-500\">#{index + 1}</span>\n                        <span className=\"font-medium\">{problem.title}</span>\n                        <Badge \n                          variant={problem.difficulty === 'easy' ? 'default' : problem.difficulty === 'medium' ? 'secondary' : 'destructive'}\n                        >\n                          {problem.difficulty}\n                        </Badge>\n                      </div>\n                      <span className=\"text-sm text-muted-foreground\">{problem.points} points</span>\n                    </div>\n                  ))}\n                </div>\n              </div> */}\n\n              {/* Contest Schedule */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"p-4 bg-white rounded-lg border\">\n                  <h4 className=\"font-semibold mb-2\">Start Time</h4>\n                  <p className=\"text-muted-foreground\">\n                    {new Date(contest.startTime).toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"p-4 bg-white rounded-lg border\">\n                  <h4 className=\"font-semibold mb-2\">End Time</h4>\n                  <p className=\"text-muted-foreground\">\n                    {new Date(contest.endTime).toLocaleString()}\n                  </p>\n                </div>\n              </div>\n\n              {/* Enrollment Section */}\n              <div className=\"text-center space-y-4\">\n                {isAlreadyEnrolled ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-center space-x-2 text-green-600\">\n                      <CheckCircle className=\"h-5 w-5\" />\n                      <span className=\"font-semibold\">You are enrolled in this contest!</span>\n                    </div>\n                    <Button \n                      onClick={() => window.location.href = `/contests/${contestId}`}\n                      className=\"w-full md:w-auto\"\n                    >\n                      Go to Contest\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {!isAuthenticated && (\n                      <p className=\"text-muted-foreground\">\n                        Please log in to enroll in this contest\n                      </p>\n                    )}\n                    <Button \n                      onClick={handleEnrollClick}\n                      className=\"w-full md:w-auto\"\n                      disabled={isContestEnded}\n                    >\n                      {isContestEnded ? 'Contest Ended' : 'Enroll in Contest'}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n} ","size_bytes":12314},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"server/seed-data.js":{"content":"// Script to seed the database with sample course data\nimport { connectToMongoDB } from './db.ts';\n\nasync function seedDatabase() {\n  try {\n    console.log('Connecting to database...');\n    const db = await connectToMongoDB();\n    \n    // Clear existing data\n    await db.collection('courses').deleteMany({});\n    await db.collection('coursemodules').deleteMany({});\n    \n    console.log('Adding sample courses...');\n    \n    // Insert sample courses\n    const courses = [\n      {\n        id: 1,\n        title: \"Introduction to JavaScript\",\n        description: \"Learn the fundamentals of JavaScript programming\",\n        level: \"beginner\",\n        tags: [\"javascript\", \"programming\", \"web\"],\n        isPublic: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 2,\n        title: \"React Development\",\n        description: \"Build modern web applications with React\",\n        level: \"intermediate\",\n        tags: [\"react\", \"javascript\", \"frontend\"],\n        isPublic: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 3,\n        title: \"Node.js Backend\",\n        description: \"Server-side development with Node.js\",\n        level: \"intermediate\",\n        tags: [\"nodejs\", \"backend\", \"api\"],\n        isPublic: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n    \n    await db.collection('courses').insertMany(courses);\n    \n    // Insert sample modules for each course\n    const modules = [\n      // JavaScript course modules\n      {\n        id: 1,\n        courseId: 1,\n        title: \"Variables and Data Types\",\n        content: \"Learn about JavaScript variables, numbers, strings, and booleans.\",\n        order: 1,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 2,\n        courseId: 1,\n        title: \"Functions and Scope\",\n        content: \"Understanding JavaScript functions, parameters, and variable scope.\",\n        order: 2,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // React course modules\n      {\n        id: 3,\n        courseId: 2,\n        title: \"Components and JSX\",\n        content: \"Introduction to React components and JSX syntax.\",\n        order: 1,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 4,\n        courseId: 2,\n        title: \"State and Props\",\n        content: \"Managing component state and passing data with props.\",\n        order: 2,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      // Node.js course modules\n      {\n        id: 5,\n        courseId: 3,\n        title: \"Setting up Express\",\n        content: \"Creating your first Express.js server.\",\n        order: 1,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n    \n    await db.collection('coursemodules').insertMany(modules);\n    \n    console.log('Database seeded successfully!');\n    console.log(`Added ${courses.length} courses and ${modules.length} modules`);\n    \n  } catch (error) {\n    console.error('Error seeding database:', error);\n  }\n}\n\nseedDatabase();","size_bytes":3145},"server/services/adminActivityLogger.ts":{"content":"import type { AuthRequest } from '../middleware/auth';\nimport { VersionHistory } from '../models/VersionHistory';\n\ninterface LogParams {\n  action: string;\n  entityType:\n    | 'problem'\n    | 'problemSet'\n    | 'course'\n    | 'courseModule'\n    | 'user'\n    | 'contest'\n    | 'enrollment'\n    | 'announcement'\n    | 'other';\n  entityId?: string;\n  description?: string;\n  metadata?: Record<string, any>;\n}\n\nexport async function logAdminAction(req: AuthRequest, params: LogParams): Promise<void> {\n  try {\n    const adminId = req.user?.id;\n    if (!adminId) return;\n\n    const adminName = [req.user?.firstName, req.user?.lastName].filter(Boolean).join(' ').trim() || req.user?.email || 'Admin';\n\n    await VersionHistory.create({\n      action: params.action,\n      description: params.description,\n      entityType: params.entityType,\n      entityId: params.entityId,\n      metadata: params.metadata,\n      adminId,\n      adminName,\n    } as any);\n  } catch (error) {\n    console.error('[VersionHistory] Failed to log admin action:', params, error);\n  }\n} ","size_bytes":1055},"client/src/pages/admin/ManageCourseEnrollments.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useParams, useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Users,\n  UserPlus,\n  Search,\n  Trash2,\n  BookOpen,\n  Calendar,\n  ArrowLeft,\n  CheckCircle,\n  XCircle\n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  role: string;\n}\n\ninterface Enrollment {\n  id: number;\n  courseId: number;\n  userId: string;\n  enrolledAt: string;\n  enrolledBy?: string;\n  progress: number;\n}\n\ninterface Course {\n  id: number;\n  title: string;\n  description?: string;\n  isPublic: boolean;\n}\n\nexport default function ManageCourseEnrollments() {\n  const { courseId } = useParams<{ courseId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedUser, setSelectedUser] = useState<string>('');\n\n  // Fetch course data\n  const { data: course, isLoading: courseLoading } = useQuery<Course>({\n    queryKey: ['/api/courses', courseId],\n    enabled: !!courseId\n  });\n\n  // Fetch all users\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/admin/users']\n  });\n\n  // Fetch course enrollments - FORCE FRESH DATA TO DEBUG DUPLICATION\n  const { data: enrollments = [], isLoading: enrollmentsLoading, refetch: refetchEnrollments } = useQuery<Enrollment[]>({\n    queryKey: [`/api/courses/${courseId}/enrollments`], // Force unique key\n    enabled: !!courseId,\n    staleTime: 0, // No caching to ensure fresh data\n    gcTime: 0, // No cache retention (new React Query v5 syntax)\n    refetchOnMount: true,\n    refetchOnWindowFocus: true, // Force refetch when returning to page\n    refetchInterval: 5000, // Refetch every 5 seconds to keep data fresh\n    retry: false\n  });\n\n  // CRITICAL DEBUG: Log exact enrollment data\n  console.log('=== ENROLLMENT DEBUG ===');\n  console.log('Enrollments length:', enrollments.length);\n  console.log('Enrollments data:', enrollments);\n  console.log('Enrollment IDs:', enrollments.map(e => e.id));\n  console.log('========================');\n\n  // Filter users for enrollment (exclude already enrolled users)\n  const enrolledUserIds = enrollments.map((e: Enrollment) => e.userId);\n  const availableUsers = users.filter((user: User) => \n    !enrolledUserIds.includes(user.id) && user.role !== 'admin'\n  );\n\n  // Filter users based on search\n  const filteredUsers = availableUsers.filter((user: User) =>\n    user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (user.name && user.name.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  // Enroll user mutation\n  const enrollMutation = useMutation({\n    mutationFn: async ({ userId }: { userId: string }) => {\n      return apiRequest('POST', `/api/courses/${courseId}/enroll`, { userId });\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Student Enrolled\",\n        description: \"Student has been successfully enrolled in the course.\",\n      });\n      // Force complete cache refresh\n      queryClient.invalidateQueries({ queryKey: [`/api/courses/${courseId}/enrollments`] });\n      queryClient.removeQueries({ queryKey: [`/api/courses/${courseId}/enrollments`] });\n      await refetchEnrollments();\n      setSelectedUser('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Enrollment Failed\",\n        description: error.message || \"Failed to enroll student in course.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Remove enrollment mutation\n  const removeEnrollmentMutation = useMutation({\n    mutationFn: async ({ userId }: { userId: string }) => {\n      return apiRequest('DELETE', `/api/courses/${courseId}/enrollments/${userId}`);\n    },\n    onSuccess: async () => {\n      toast({\n        title: \"Enrollment Removed\",\n        description: \"Student has been removed from the course.\",\n      });\n      // Force complete cache refresh\n      queryClient.invalidateQueries({ queryKey: [`/api/courses/${courseId}/enrollments`] });\n      queryClient.removeQueries({ queryKey: [`/api/courses/${courseId}/enrollments`] });\n      await refetchEnrollments();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Remove Failed\",\n        description: error.message || \"Failed to remove student from course.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleEnrollUser = () => {\n    if (selectedUser) {\n      enrollMutation.mutate({ userId: selectedUser });\n    }\n  };\n\n  const handleRemoveEnrollment = (userId: string) => {\n    removeEnrollmentMutation.mutate({ userId });\n  };\n\n  if (courseLoading) {\n    return (\n      <div className=\"container mx-auto py-8 px-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"container mx-auto py-8 px-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <XCircle className=\"h-12 w-12 mx-auto mb-4 text-destructive\" />\n              <h1 className=\"text-xl font-bold mb-2\">Course Not Found</h1>\n              <p className=\"text-muted-foreground mb-4\">\n                The course you're trying to manage doesn't exist.\n              </p>\n              <Button onClick={() => setLocation('/admin/courses')}>\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Courses\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation('/admin/courses')}\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Courses\n            </Button>\n          </div>\n          <h1 className=\"text-3xl font-bold\">Manage Course Enrollments</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Enroll students in \"{course?.title || 'Unknown Course'}\"\n          </p>\n        </div>\n        <Badge variant={course?.isPublic ? \"default\" : \"secondary\"}>\n          {course?.isPublic ? 'Public Course' : 'Private Course'}\n        </Badge>\n      </div>\n\n      {/* Course Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            <span>{course?.title || 'Course Details'}</span>\n          </CardTitle>\n          {course?.description && (\n            <CardDescription>{course.description}</CardDescription>\n          )}\n        </CardHeader>\n      </Card>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Enroll New Student */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <UserPlus className=\"h-5 w-5\" />\n              <span>Enroll New Student</span>\n            </CardTitle>\n            <CardDescription>\n              Add a student to this course\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Search Students</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by name or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Select Student</label>\n              <Select value={selectedUser} onValueChange={setSelectedUser}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a student to enroll\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {filteredUsers.length === 0 ? (\n                    <SelectItem value=\"none\" disabled>\n                      {searchTerm ? 'No students found' : 'No students available for enrollment'}\n                    </SelectItem>\n                  ) : (\n                    filteredUsers.map((user: User) => (\n                      <SelectItem key={user.id} value={user.id}>\n                        {user.name || user.email} ({user.email})\n                      </SelectItem>\n                    ))\n                  )}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              onClick={handleEnrollUser}\n              disabled={!selectedUser || enrollMutation.isPending}\n              className=\"w-full\"\n            >\n              {enrollMutation.isPending ? 'Enrolling...' : 'Enroll Student'}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Current Enrollments */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5\" />\n              <span>Current Enrollments ({enrollments.length})</span>\n            </CardTitle>\n            <CardDescription>\n              Students currently enrolled in this course\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {enrollmentsLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"h-10 w-10 bg-gray-200 rounded-full\"></div>\n                      <div className=\"space-y-1\">\n                        <div className=\"h-4 bg-gray-200 rounded w-32\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-24\"></div>\n                      </div>\n                    </div>\n                    <div className=\"h-8 w-20 bg-gray-200 rounded\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : enrollments.length === 0 ? (\n              <div className=\"text-center py-6\">\n                <Users className=\"h-8 w-8 mx-auto mb-3 text-muted-foreground\" />\n                <p className=\"text-muted-foreground\">No students enrolled yet</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                {enrollments.map((enrollment: Enrollment) => {\n                  const user = users.find((u: User) => u.id === enrollment.userId);\n                  return (\n                    <div key={`enrollment-${enrollment.id}-${enrollment.userId}`} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <Users className=\"h-5 w-5 text-primary\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">\n                            {user?.name || user?.email || 'Unknown User'}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Enrolled {new Date(enrollment.enrolledAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant=\"outline\">{enrollment.progress}% Complete</Badge>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleRemoveEnrollment(enrollment.userId)}\n                          disabled={removeEnrollmentMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13138},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { \n  User, \n  Bell, \n  Palette, \n  Code, \n  Lock, \n  Globe,\n  Monitor,\n  Moon,\n  Sun,\n  ArrowLeft\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  const [notifications, setNotifications] = useState({\n    email: true,\n    push: false,\n    contests: true,\n    assignments: true,\n    announcements: true,\n  });\n\n  const [codeSettings, setCodeSettings] = useState({\n    language: \"javascript\",\n    theme: \"vs-dark\",\n    fontSize: \"14\",\n    tabSize: \"2\",\n    wordWrap: true,\n    autoComplete: true,\n  });\n\n  const [privacy, setPrivacy] = useState({\n    profileVisible: true,\n    showEmail: false,\n    showStats: true,\n    allowMessages: true,\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (settings: any) => {\n      const res = await fetch(\"/api/user/settings\", {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(settings),\n      });\n      if (!res.ok) throw new Error(await res.text());\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Settings updated successfully\" });\n    },\n    onError: (error) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const handleSaveSettings = (type: string, settings: any) => {\n    updateSettingsMutation.mutate({ type, settings });\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-4\">\n      <Button\n        variant=\"ghost\"\n        className=\"mb-4 flex items-center gap-2 hover:bg-gray-100 dark:hover:bg-gray-800\"\n        onClick={() => window.history.back()}\n      >\n        <ArrowLeft className=\"h-4 w-4\" />\n        Back\n      </Button>\n\n      <div>\n        <h1 className=\"text-3xl font-bold\">Settings</h1>\n        <p className=\"text-muted-foreground\">Manage your account preferences and settings</p>\n      </div>\n\n      <Tabs defaultValue=\"account\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"account\">Account</TabsTrigger>\n          {/* <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"appearance\">Appearance</TabsTrigger>\n          <TabsTrigger value=\"editor\">Code Editor</TabsTrigger> */}\n          <TabsTrigger value=\"privacy\">Privacy</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"account\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                Account Information\n              </CardTitle>\n              <CardDescription>\n                Update your account details and preferences\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input id=\"firstName\" defaultValue={user.firstName || \"\"} />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input id=\"lastName\" defaultValue={user.lastName || \"\"} />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input id=\"email\" type=\"email\" defaultValue={user.email || \"\"} />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"bio\">Bio</Label>\n                <Input id=\"bio\" placeholder=\"Tell us about yourself...\" />\n              </div>\n\n              <Separator />\n              \n              <div className=\"space-y-2\">\n                <Label>Password</Label>\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Change your account password\n                  </p>\n                  <Button\n                    variant=\"link\"\n                    className=\"text-sm text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300 p-0 h-auto\"\n                    onClick={() => setLocation('/forgot-password?from=settings')}\n                  >\n                    Change password?\n                  </Button>\n                </div>\n              </div>\n              \n              {/* <div className=\"space-y-2\">\n                <Label>Account Type</Label>\n                <div className=\"text-sm text-muted-foreground\">\n                  Current role: <span className=\"font-medium capitalize\">{user.role || 'Student'}</span>\n                </div>\n              </div> */}\n\n              <Button onClick={() => handleSaveSettings('account', {})}>\n                Save Changes\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n{/*Notifications settings*/}\n        {/* <TabsContent value=\"notifications\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"w-5 h-5\" />\n                Notification Preferences\n              </CardTitle>\n              <CardDescription>\n                Choose what notifications you want to receive\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Email Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Receive notifications via email\n                    </p>\n                  </div>\n                  <Switch \n                    checked={notifications.email}\n                    onCheckedChange={(checked) => \n                      setNotifications(prev => ({ ...prev, email: checked }))\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Push Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Receive push notifications in browser\n                    </p>\n                  </div>\n                  <Switch \n                    checked={notifications.push}\n                    onCheckedChange={(checked) => \n                      setNotifications(prev => ({ ...prev, push: checked }))\n                    }\n                  />\n                </div>\n\n                <Separator />\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Contest Updates</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Notifications about upcoming contests\n                    </p>\n                  </div>\n                  <Switch \n                    checked={notifications.contests}\n                    onCheckedChange={(checked) => \n                      setNotifications(prev => ({ ...prev, contests: checked }))\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Assignment Reminders</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Reminders about assignment deadlines\n                    </p>\n                  </div>\n                  <Switch \n                    checked={notifications.assignments}\n                    onCheckedChange={(checked) => \n                      setNotifications(prev => ({ ...prev, assignments: checked }))\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Announcements</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Important announcements from instructors\n                    </p>\n                  </div>\n                  <Switch \n                    checked={notifications.announcements}\n                    onCheckedChange={(checked) => \n                      setNotifications(prev => ({ ...prev, announcements: checked }))\n                    }\n                  />\n                </div>\n              </div>\n\n              <Button onClick={() => handleSaveSettings('notifications', notifications)}>\n                Save Notification Settings\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent> */}\n\n{/*Theme settings*/}\n        {/* <TabsContent value=\"appearance\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Palette className=\"w-5 h-5\" />\n                Appearance\n              </CardTitle>\n              <CardDescription>\n                Customize the look and feel of the platform\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Theme</Label>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    Choose your preferred color theme\n                  </p>\n                  <div className=\"grid grid-cols-3 gap-3\">\n                    <div\n                      className={`border rounded-lg p-3 cursor-pointer ${\n                        theme === 'light' ? 'border-primary' : ''\n                      }`}\n                      onClick={() => setTheme('light')}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <Sun className=\"w-4 h-4\" />\n                        <span className=\"text-sm\">Light</span>\n                      </div>\n                    </div>\n                    <div\n                      className={`border rounded-lg p-3 cursor-pointer ${\n                        theme === 'dark' ? 'border-primary' : ''\n                      }`}\n                      onClick={() => setTheme('dark')}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <Moon className=\"w-4 h-4\" />\n                        <span className=\"text-sm\">Dark</span>\n                      </div>\n                    </div>\n                    <div\n                      className={`border rounded-lg p-3 cursor-pointer ${\n                        theme === 'system' ? 'border-primary' : ''\n                      }`}\n                      onClick={() => setTheme('system')}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <Monitor className=\"w-4 h-4\" />\n                        <span className=\"text-sm\">System</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-2\">\n                  <Label>Language</Label>\n                  <Select defaultValue=\"en\">\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"en\">English</SelectItem>\n                      <SelectItem value=\"es\">Spanish</SelectItem>\n                      <SelectItem value=\"fr\">French</SelectItem>\n                      <SelectItem value=\"de\">German</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Timezone</Label>\n                  <Select defaultValue=\"utc\">\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"utc\">UTC</SelectItem>\n                      <SelectItem value=\"est\">EST</SelectItem>\n                      <SelectItem value=\"pst\">PST</SelectItem>\n                      <SelectItem value=\"cet\">CET</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Button onClick={() => handleSaveSettings('appearance', { theme })}>\n                Save Appearance Settings\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent> */}\n\n{/*Code editor settings*/}\n        {/* <TabsContent value=\"editor\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Code className=\"w-5 h-5\" />\n                Code Editor Settings\n              </CardTitle>\n              <CardDescription>\n                Customize your coding environment\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label>Default Language</Label>\n                  <Select \n                    value={codeSettings.language}\n                    onValueChange={(value) => \n                      setCodeSettings(prev => ({ ...prev, language: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                      <SelectItem value=\"python\">Python</SelectItem>\n                      <SelectItem value=\"java\">Java</SelectItem>\n                      <SelectItem value=\"cpp\">C++</SelectItem>\n                      <SelectItem value=\"c\">C</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Editor Theme</Label>\n                  <Select \n                    value={codeSettings.theme}\n                    onValueChange={(value) => \n                      setCodeSettings(prev => ({ ...prev, theme: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"vs-dark\">Dark</SelectItem>\n                      <SelectItem value=\"light\">Light</SelectItem>\n                      <SelectItem value=\"hc-black\">High Contrast</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Font Size</Label>\n                  <Select \n                    value={codeSettings.fontSize}\n                    onValueChange={(value) => \n                      setCodeSettings(prev => ({ ...prev, fontSize: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"12\">12px</SelectItem>\n                      <SelectItem value=\"14\">14px</SelectItem>\n                      <SelectItem value=\"16\">16px</SelectItem>\n                      <SelectItem value=\"18\">18px</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Tab Size</Label>\n                  <Select \n                    value={codeSettings.tabSize}\n                    onValueChange={(value) => \n                      setCodeSettings(prev => ({ ...prev, tabSize: value }))\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"2\">2 spaces</SelectItem>\n                      <SelectItem value=\"4\">4 spaces</SelectItem>\n                      <SelectItem value=\"8\">8 spaces</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Word Wrap</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Wrap long lines in the editor\n                    </p>\n                  </div>\n                  <Switch \n                    checked={codeSettings.wordWrap}\n                    onCheckedChange={(checked) => \n                      setCodeSettings(prev => ({ ...prev, wordWrap: checked }))\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Auto Complete</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Enable code completion suggestions\n                    </p>\n                  </div>\n                  <Switch \n                    checked={codeSettings.autoComplete}\n                    onCheckedChange={(checked) => \n                      setCodeSettings(prev => ({ ...prev, autoComplete: checked }))\n                    }\n                  />\n                </div>\n              </div>\n\n              <Button onClick={() => handleSaveSettings('editor', codeSettings)}>\n                Save Editor Settings\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent> */}\n\n        <TabsContent value=\"privacy\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Lock className=\"w-5 h-5\" />\n                Privacy Settings\n              </CardTitle>\n              <CardDescription>\n                Control your privacy and data sharing preferences\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Public Profile</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Make your profile visible to other users\n                    </p>\n                  </div>\n                  <Switch \n                    checked={privacy.profileVisible}\n                    onCheckedChange={(checked) => \n                      setPrivacy(prev => ({ ...prev, profileVisible: checked }))\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Show Email</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Display your email address on your profile\n                    </p>\n                  </div>\n                  <Switch \n                    checked={privacy.showEmail}\n                    onCheckedChange={(checked) => \n                      setPrivacy(prev => ({ ...prev, showEmail: checked }))\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Show Statistics</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Display your coding statistics publicly\n                    </p>\n                  </div>\n                  <Switch \n                    checked={privacy.showStats}\n                    onCheckedChange={(checked) => \n                      setPrivacy(prev => ({ ...prev, showStats: checked }))\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Allow Messages</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Allow other users to send you messages\n                    </p>\n                  </div>\n                  <Switch \n                    checked={privacy.allowMessages}\n                    onCheckedChange={(checked) => \n                      setPrivacy(prev => ({ ...prev, allowMessages: checked }))\n                    }\n                  />\n                </div>\n              </div> */}\n\n              {/* <Separator /> */}\n\n              <div className=\"space-y-4\">\n                <div>\n                  {/* <Label className=\"text-base\">Data Management</Label>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Manage your personal data and account\n                  </p> */}\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"destructive\">Delete Account</Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* <Button onClick={() => handleSaveSettings('privacy', privacy)}>\n                Save Privacy Settings\n              </Button> */}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":22700},"execution-system/workers/worker.js":{"content":"const Queue = require('bull');\nconst { spawn } = require('child_process');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst crypto = require('crypto');\nconst { promisify } = require('util');\nconst exec = promisify(require('child_process').exec);\n\n// Configure queue\nconst codeExecutionQueue = new Queue('code-execution', process.env.REDIS_URL);\n\n// Language configurations\nconst SUPPORTED_LANGUAGES = ['python', 'javascript', 'typescript', 'java', 'cpp', 'c'];\n\n// Execution timeout (15 seconds)\nconst EXECUTION_TIMEOUT = 15000;\n\n// Create temp directory if it doesn't exist\nconst TEMP_DIR = path.join(__dirname, '..', 'temp');\nfs.mkdir(TEMP_DIR, { recursive: true }).catch(console.error);\n\n/**\n * Clean up temporary files\n */\nasync function cleanup(files) {\n    for (const file of files) {\n        try {\n            await fs.unlink(file);\n        } catch (error) {\n            console.error(`Failed to delete ${file}:`, error);\n        }\n    }\n}\n\n/**\n * Execute code in a Docker container\n */\nasync function executeInDocker(code, language, input) {\n    // Validate language\n    if (!SUPPORTED_LANGUAGES.includes(language)) {\n        throw new Error(`Unsupported language: ${language}`);\n    }\n\n    // Generate unique filenames\n    const tempId = crypto.randomBytes(8).toString('hex');\n    const codeFile = `code_${tempId}${getFileExtension(language)}`;\n    const inputFile = input ? `input_${tempId}.txt` : null;\n    const codePath = path.join(TEMP_DIR, codeFile);\n    const inputPath = inputFile ? path.join(TEMP_DIR, inputFile) : null;\n\n    try {\n        // Write code and input files\n        await fs.writeFile(codePath, code);\n        if (input && inputPath) {\n            await fs.writeFile(inputPath, input);\n        }\n\n        // Build Docker command\n        const dockerImage = `codearena-${language}:latest`;\n        const dockerArgs = [\n            'run',\n            '--rm',                                    // Remove container after execution\n            '--network=none',                          // No network access\n            '--memory=128m',                          // Memory limit\n            '--memory-swap=128m',                     // Swap limit\n            '--cpus=0.5',                             // CPU limit\n            '--pids-limit=64',                        // Process limit\n            '--ulimit', 'nofile=64:64',               // File descriptor limit\n            '--ulimit', 'nproc=32:32',                // Process limit\n            '--ulimit', 'fsize=1000000:1000000',      // File size limit (1MB)\n            '--user', '1000:1000',                    // Non-root user\n            '--read-only',                            // Read-only filesystem\n            '--security-opt=no-new-privileges',        // Prevent privilege escalation\n            '--cap-drop=ALL',                         // Drop all capabilities\n            '--tmpfs', '/tmp:exec,size=10m,mode=777', // Writable temp directory\n            '-v', `${TEMP_DIR}:/tmp:ro`,              // Mount code files\n            dockerImage\n        ];\n\n        // Add code file and input redirection\n        if (inputFile) {\n            dockerArgs.push('sh', '-c', `./execute.sh /tmp/${codeFile} < /tmp/${inputFile}`);\n        } else {\n            dockerArgs.push('./execute.sh', `/tmp/${codeFile}`);\n        }\n\n        // Execute Docker command\n    const startTime = Date.now();\n        const { stdout, stderr } = await new Promise((resolve, reject) => {\n            let output = '';\n            let error = '';\n            \n            const docker = spawn('docker', dockerArgs, {\n                stdio: ['pipe', 'pipe', 'pipe']\n            });\n\n            docker.stdout.on('data', (data) => {\n                output += data.toString();\n            });\n\n            docker.stderr.on('data', (data) => {\n                error += data.toString();\n            });\n\n            docker.on('close', (code) => {\n                resolve({ stdout: output, stderr: error, code });\n            });\n\n            docker.on('error', reject);\n\n            // Set timeout\n            const timeout = setTimeout(() => {\n                docker.kill();\n                reject(new Error('Execution timeout'));\n            }, EXECUTION_TIMEOUT);\n\n            docker.on('close', () => clearTimeout(timeout));\n        });\n\n        const endTime = Date.now();\n\n        // Parse execution stats from stderr\n        const statsMatch = stderr.match(/__EXECUTION_STATS__:(\\{.*\\})/);\n        const stats = statsMatch ? JSON.parse(statsMatch[1]) : {\n            runtime_ms: endTime - startTime,\n            memory_bytes: 0,\n            success: false\n        };\n\n        return {\n            output: stdout.trim(),\n            error: stderr.trim(),\n            ...stats\n      };\n\n    } finally {\n        // Clean up temporary files\n        const filesToClean = [codePath];\n        if (inputPath) filesToClean.push(inputPath);\n        await cleanup(filesToClean);\n    }\n}\n\n/**\n * Get file extension for language\n */\nfunction getFileExtension(language) {\n    const extensions = {\n        python: '.py',\n        javascript: '.js',\n        typescript: '.ts',\n        java: '.java',\n        cpp: '.cpp',\n        c: '.c'\n    };\n    return extensions[language] || '.txt';\n}\n\n/**\n * Process jobs from the queue\n */\ncodeExecutionQueue.process(async (job) => {\n    const { code, language, input } = job.data;\n\n    try {\n        console.log(`[WORKER] Processing ${language} code execution request`);\n        const result = await executeInDocker(code, language, input);\n        console.log(`[WORKER] Execution completed successfully`);\n        return result;\n    } catch (error) {\n        console.error(`[WORKER] Execution failed:`, error);\n        throw error;\n    }\n});\n\n// Handle queue events\ncodeExecutionQueue.on('completed', (job, result) => {\n    console.log(`[QUEUE] Job ${job.id} completed successfully`);\n});\n\ncodeExecutionQueue.on('failed', (job, error) => {\n    console.error(`[QUEUE] Job ${job.id} failed:`, error);\n});\n\nconsole.log('[WORKER] Code execution worker started'); ","size_bytes":6064},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Code, Trophy, Users, Zap, ClipboardList,Star, ArrowRight, CheckCircle, Play, TrendingUp, Globe, Shield, Clock } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { ThemeToggle } from \"@/components/ui/theme-toggle\";\nimport { MaintenanceMessage } from \"@/components/MaintenanceMessage\";\nimport lightLogo from \"../assests/light_logo.png\";\nimport lightName from \"../assests/light_name.png\";\nimport darkLogo from \"../assests/dark_logo.png\";\nimport darkName from \"../assests/dark_name.png\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-emerald-50 dark:from-slate-900 dark:via-slate-800 dark:to-emerald-900/20\">\n      {/* Maintenance Message Banner */}\n      <MaintenanceMessage />\n      \n      {/* Header */}\n      <header className=\"sticky top-0 z-50 backdrop-blur-md bg-white/80 dark:bg-slate-900/80 border-b border-slate-200 dark:border-slate-700\">\n        <div className=\"max-w-7xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2\">\n                <img src={lightLogo} alt=\"CodeArena logo\" className=\"h-12 w-auto dark:hidden\" />\n                <img src={darkLogo} alt=\"CodeArena logo\" className=\"h-12 w-auto hidden dark:block\" />\n                <img src={lightName} alt=\"CodeArena\" className=\"h-10 w-auto dark:hidden\" />\n                <img src={darkName} alt=\"CodeArena\" className=\"h-11 w-auto hidden dark:block\" />\n              </div>\n            </div>\n            {/* <div className=\"hidden md:flex items-center space-x-8\">\n              <Link href=\"/\" className=\"text-slate-700 dark:text-slate-300 hover:text-emerald-600 transition-colors font-medium\">Home</Link>\n              <Link href=\"/problems\" className=\"text-slate-700 dark:text-slate-300 hover:text-emerald-600 transition-colors font-medium\">Problems</Link>\n              <Link href=\"/courses\" className=\"text-slate-700 dark:text-slate-300 hover:text-emerald-600 transition-colors font-medium\">Courses</Link>\n              <Link href=\"/contests\" className=\"text-slate-700 dark:text-slate-300 hover:text-emerald-600 transition-colors font-medium\">Contests</Link>\n            </div> */}\n            <div className=\"flex items-center gap-4\">\n              {/* <ThemeToggle />  */}\n              <Button asChild size=\"lg\" className=\"bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-0.5\">\n                <Link href=\"/login\">Get Started</Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative py-24 px-4 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-emerald-50 via-blue-50 to-indigo-50 dark:from-emerald-900/20 dark:via-blue-900/20 dark:to-indigo-900/20\"></div>\n        <div className=\"absolute top-0 left-0 w-72 h-72 bg-emerald-300/30 dark:bg-emerald-600/20 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-0 right-0 w-72 h-72 bg-blue-300/30 dark:bg-blue-600/20 rounded-full blur-3xl\"></div>\n\n        <div className=\"relative max-w-6xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16 items-center\">\n            <div className=\"space-y-8\">\n              {/* <div className=\"inline-flex items-center space-x-2 bg-emerald-100 dark:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300 px-4 py-2 rounded-full text-sm font-medium\">\n                <Star className=\"h-4 w-4\" />\n                <span>Trusted by 50K+ Developers Worldwide</span>\n              </div> */}\n\n              <h1 className=\"text-6xl font-bold text-slate-900 dark:text-white leading-tight\">\n                Master Coding Through{\" \"}\n                <span className=\"bg-gradient-to-r from-emerald-500 via-blue-500 to-indigo-500 bg-clip-text text-transparent\">\n                  Competition\n                </span>\n              </h1>\n\n              <p className=\"text-xl text-slate-600 dark:text-slate-300 leading-relaxed max-w-lg\">\n                Join thousands of developers improving their skills through challenging problems,\n                live contests, and comprehensive courses on CodeArena.\n              </p>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button asChild size=\"lg\" className=\"bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white text-lg px-8 py-6 shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1\">\n                  <Link href=\"/login\">Start Coding Now</Link>\n                </Button>\n                <Button asChild variant=\"outline\" size=\"lg\" className=\"text-lg px-8 py-6 border-2 hover:bg-slate-50 dark:hover:bg-slate-800 transition-all duration-300\">\n                  <Link href=\"/problems\">View Problems</Link>\n                </Button>\n              </div>\n\n              <div className=\"flex items-center space-x-8 pt-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex -space-x-2\">\n                    {[\"👨‍💻\", \"👩‍💻\", \"👨‍🔬\", \"👩‍🔬\"].map((avatar, i) => (\n                      <div key={i} className=\"w-8 h-8 bg-slate-200 dark:bg-slate-700 rounded-full flex items-center justify-center text-sm border-2 border-white dark:border-slate-800\">\n                        {avatar}\n                      </div>\n                    ))}\n                  </div>\n                  <span className=\"text-sm text-slate-600 dark:text-slate-400\">Join 50K+ developers</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"bg-white dark:bg-slate-800 rounded-3xl p-8 shadow-2xl border border-slate-200 dark:border-slate-700 transform rotate-3 hover:rotate-0 transition-transform duration-500\">\n                <div className=\"flex items-center space-x-2 mb-6\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                </div>\n                <div className=\"space-y-4\">\n                  <div className=\"bg-slate-100 dark:bg-slate-700 rounded-lg p-4\">\n                    <div className=\"text-slate-600 dark:text-slate-400 text-sm mb-2\">// Solve this problem</div>\n                    <div className=\"text-slate-800 dark:text-slate-200 font-mono\">function twoSum(nums, target) {'{'}</div>\n                    <div className=\"text-slate-800 dark:text-slate-200 font-mono pl-4\">// Your solution here</div>\n                    <div className=\"text-slate-800 dark:text-slate-200 font-mono\">{'}'}</div>\n                  </div>\n                  <div className=\"bg-emerald-100 dark:bg-emerald-900/30 rounded-lg p-3\">\n                    <div className=\"text-emerald-700 dark:text-emerald-300 text-sm\">✅ Test cases passed!</div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"absolute -top-4 -right-4 bg-gradient-to-r from-emerald-500 to-blue-500 text-white px-4 py-2 rounded-full text-sm font-medium shadow-lg\">\n                Live Coding\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 px-4 bg-white dark:bg-slate-900\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            {[\n              { number: \"10K+\", label: \"Problems Solved\", icon: CheckCircle, bgColor: \"bg-emerald-100 dark:bg-emerald-900/30\", iconColor: \"text-emerald-600 dark:text-emerald-400\" },\n              { number: \"500+\", label: \"Live Contests\", icon: Trophy, bgColor: \"bg-amber-100 dark:bg-amber-900/30\", iconColor: \"text-amber-600 dark:text-amber-400\" },\n              { number: \"50K+\", label: \"Active Users\", icon: Users, bgColor: \"bg-blue-100 dark:bg-blue-900/30\", iconColor: \"text-blue-600 dark:text-blue-400\" },\n              { number: \"99.9%\", label: \"Uptime\", icon: Shield, bgColor: \"bg-green-100 dark:bg-green-900/30\", iconColor: \"text-green-600 dark:text-green-400\" }\n            ].map((stat, index) => (\n              <div key={index} className=\"text-center group\">\n                <div className={`w-16 h-16 ${stat.bgColor} rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300`}>\n                  <stat.icon className={`h-8 w-8 ${stat.iconColor}`} />\n                </div>\n                <div className=\"text-3xl font-bold text-slate-900 dark:text-white mb-2\">{stat.number}</div>\n                <div className=\"text-slate-600 dark:text-slate-400\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features */}\n      <section className=\"py-24 px-4 bg-gradient-to-br from-slate-50 to-emerald-50 dark:from-slate-800 dark:to-emerald-900/20\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-slate-900 dark:text-white mb-6\">\n              Why Choose CodeArena?\n            </h2>\n            <p className=\"text-xl text-slate-600 dark:text-slate-300 max-w-3xl mx-auto\">\n              Experience the most comprehensive coding platform designed to accelerate your programming journey\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {[\n              {\n                icon: Code,\n                title: \"Practice Problems\",\n                description: \"Solve thousands of problems across different difficulty levels and topics.\",\n                bgColor: \"bg-blue-100 dark:bg-blue-900/30\",\n                iconColor: \"text-blue-600 dark:text-blue-400\",\n                features: [\"10K+ Problems\", \"Multiple Languages\", \"Difficulty Levels\"]\n              },\n              {\n                icon: Trophy,\n                title: \"Live Contests\",\n                description: \"Participate in weekly contests and compete with developers worldwide.\",\n                bgColor: \"bg-amber-100 dark:bg-amber-900/30\",\n                iconColor: \"text-amber-600 dark:text-amber-400\",\n                features: [\"Weekly Contests\", \"Real-time Ranking\", \"Global Leaderboard\"]\n              },\n              {\n                icon: ClipboardList,\n                title: \"Assignments\",\n                description: \"Learn by solving problems, submitting work, and tracking progress.\",\n                bgColor: \"bg-purple-100 dark:bg-purple-900/30\",\n                iconColor: \"text-purple-600 dark:text-purple-400\",\n                features: [\"Problem Solving\", \"Submission Tracking\", \"Progress Monitoring\"]\n              },              \n              {\n                icon: Zap,\n                title: \"Real-time Execution\",\n                description: \"Test your code instantly with our powerful online judge system.\",\n                bgColor: \"bg-emerald-100 dark:bg-emerald-900/30\",\n                iconColor: \"text-emerald-600 dark:text-emerald-400\",\n                features: [\"Instant Results\", \"Multiple Languages\", \"Performance Metrics\"]\n              }\n            ].map((feature, index) => (\n              <Card key={index} className=\"group hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 border-0 bg-white dark:bg-slate-800 shadow-lg\">\n                <CardContent className=\"p-8\">\n                  <div className={`w-16 h-16 ${feature.bgColor} rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300`}>\n                    <feature.icon className={`${feature.iconColor} h-8 w-8`} />\n                  </div>\n                  <h3 className=\"font-bold text-xl text-slate-900 dark:text-white mb-4 text-center\">\n                    {feature.title}\n                  </h3>\n                  <p className=\"text-slate-600 dark:text-slate-400 text-center mb-6 leading-relaxed\">\n                    {feature.description}\n                  </p>\n                  <ul className=\"space-y-2\">\n                    {feature.features.map((item, i) => (\n                      <li key={i} className=\"flex items-center text-sm text-slate-600 dark:text-slate-400\">\n                        <CheckCircle className=\"h-4 w-4 text-emerald-500 mr-2 flex-shrink-0\" />\n                        {item}\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Main CTA Section - Using Hero Section Theme */}\n      <section className=\"relative py-20 px-4 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-emerald-50 via-blue-50 to-indigo-50 dark:from-emerald-900/20 dark:via-blue-900/20 dark:to-indigo-900/20\"></div>\n        <div className=\"absolute top-0 left-0 w-72 h-72 bg-emerald-300/30 dark:bg-emerald-600/20 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-0 right-0 w-72 h-72 bg-blue-300/30 dark:bg-blue-600/20 rounded-full blur-3xl\"></div>\n\n        <div className=\"relative max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-6xl font-bold text-slate-900 dark:text-white mb-8 leading-tight\">\n            Ready to Level Up Your{\" \"}\n            <span className=\"bg-gradient-to-r from-emerald-500 via-blue-500 to-indigo-500 bg-clip-text text-transparent\">\n              Coding Skills?\n            </span>\n          </h2>\n          <p className=\"text-xl text-slate-600 dark:text-slate-300 mb-12 max-w-3xl mx-auto leading-relaxed\">\n            Join CodeArena today and start your journey to becoming a better programmer.\n            Compete, learn, and grow with developers worldwide.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center mb-12\">\n            <Button asChild size=\"lg\" className=\"bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white text-lg px-10 py-6 shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1\">\n              <Link href=\"/register\">Sign Up Free</Link>\n            </Button>\n            <Button asChild size=\"lg\" variant=\"outline\" className=\"text-lg px-10 py-6 border-2 hover:bg-slate-50 dark:hover:bg-slate-800 transition-all duration-300\">\n              <Link href=\"/problems\">Explore Problems</Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer - Using Features Section Theme */}\n      <footer className=\"py-20 px-4 bg-gradient-to-br from-slate-50 to-emerald-50 dark:from-slate-800 dark:to-emerald-900/20\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-12 mb-12\">\n            {/* Column 1 - Branding */}\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 rounded-lg flex items-center justify-center\">\n                  <img\n                    src={lightLogo}\n                    alt=\"Logo\"\n                    className=\"h-20 object-contain\" // Increased height here\n                  />\n                </div>\n\n\n                <span className=\"text-2xl font-bold text-slate-900 dark:text-white\">CodeArena</span>\n              </div>\n              <p className=\"text-slate-600 dark:text-slate-300 text-sm leading-relaxed max-w-xs\">\n                The ultimate platform for competitive programming and skill development.\n              </p>\n            </div>\n\n            {/* Column 2 - Platform */}\n            <div>\n              <h4 className=\"font-semibold text-slate-900 dark:text-white mb-6 text-lg\">Platform</h4>\n              <ul className=\"space-y-4 text-sm\">\n                <li><Link href=\"/problems\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">Problems</Link></li>\n                <li><Link href=\"/contests\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">Contests</Link></li>\n                <li><Link href=\"/courses\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">Courses</Link></li>\n                <li><Link href=\"/leaderboard\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">Leaderboard</Link></li>\n              </ul>\n            </div>\n\n            {/* Column 3 - Support */}\n            <div>\n              <h4 className=\"font-semibold text-slate-900 dark:text-white mb-6 text-lg\">Support</h4>\n              <ul className=\"space-y-4 text-sm\">\n                <li><Link href=\"/help\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">Help Center</Link></li>\n                <li><Link href=\"/docs\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">Documentation</Link></li>\n                <li><Link href=\"/contact\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">Contact Us</Link></li>\n                <li><Link href=\"/status\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">System Status</Link></li>\n              </ul>\n            </div>\n\n            {/* Column 4 - Company */}\n            <div>\n              <h4 className=\"font-semibold text-slate-900 dark:text-white mb-6 text-lg\">Company</h4>\n              <ul className=\"space-y-4 text-sm\">\n                <li><Link href=\"/about\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">About</Link></li>\n                <li><Link href=\"/careers\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">Careers</Link></li>\n                <li><Link href=\"/privacy\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">Privacy</Link></li>\n                <li><Link href=\"/terms\" className=\"text-slate-600 dark:text-slate-300 hover:text-emerald-600 dark:hover:text-emerald-400 transition-colors duration-200\">Terms</Link></li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-slate-200 dark:border-slate-700 pt-8 text-center\">\n            <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n              © 2025 CodeArena.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":19424},"server/scripts/migrate-contest-times.ts":{"content":"import mongoose from 'mongoose';\nimport { Contest } from '../models/Contest';\n\nasync function migrateContestTimes() {\n  try {\n    console.log('🚀 Starting contest time fields migration...');\n    \n    // Connect to MongoDB\n    const mongoUri = process.env.MONGODB_URL || \"mongodb+srv://CodeArena:raghavmail@codearena.vl1ishe.mongodb.net/?retryWrites=true&w=majority&appName=CodeArena\";\n    await mongoose.connect(mongoUri);\n    console.log('✅ Connected to MongoDB');\n    \n    // Find all contests that don't have startTime or endTime\n    const contests = await Contest.find({\n      $or: [\n        { startTime: { $exists: false } },\n        { endTime: { $exists: false } }\n      ]\n    }).lean();\n    \n    console.log(`📊 Found ${contests.length} contests that need time fields`);\n    \n    let updatedCount = 0;\n    \n    for (const contest of contests) {\n      try {\n        // Set default times based on creation date\n        const createdAt = new Date(contest.createdAt);\n        const defaultStartTime = new Date(createdAt.getTime() + 24 * 60 * 60 * 1000); // 1 day after creation\n        const defaultEndTime = new Date(defaultStartTime.getTime() + 120 * 60 * 1000); // 2 hours duration\n        \n        const updateData: any = {};\n        \n        if (!contest.startTime) {\n          updateData.startTime = defaultStartTime;\n          console.log(`⏰ Adding startTime to contest ${contest.id}: ${defaultStartTime.toISOString()}`);\n        }\n        \n        if (!contest.endTime) {\n          updateData.endTime = defaultEndTime;\n          console.log(`⏰ Adding endTime to contest ${contest.id}: ${defaultEndTime.toISOString()}`);\n        }\n        \n        if (!contest.duration) {\n          updateData.duration = 120; // 2 hours default\n          console.log(`⏰ Adding duration to contest ${contest.id}: 120 minutes`);\n        }\n        \n        if (!contest.timeZone) {\n          updateData.timeZone = 'UTC';\n          console.log(`⏰ Adding timeZone to contest ${contest.id}: UTC`);\n        }\n        \n        if (Object.keys(updateData).length > 0) {\n          updateData.updatedAt = new Date();\n          \n          await Contest.updateOne(\n            { id: contest.id },\n            { $set: updateData }\n          );\n          \n          updatedCount++;\n          console.log(`✅ Updated contest ${contest.id}`);\n        }\n        \n      } catch (error) {\n        console.error(`❌ Failed to update contest ${contest.id}:`, error);\n      }\n    }\n    \n    console.log(`🎉 Migration completed! Updated ${updatedCount} contests`);\n    \n  } catch (error) {\n    console.error('❌ Migration failed:', error);\n  } finally {\n    await mongoose.disconnect();\n    console.log('🔌 Disconnected from MongoDB');\n  }\n}\n\n// Run migration if called directly\nif (require.main === module) {\n  migrateContestTimes()\n    .then(() => {\n      console.log('✅ Migration script completed');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('❌ Migration script failed:', error);\n      process.exit(1);\n    });\n}\n\nexport { migrateContestTimes }; ","size_bytes":3076},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1847},"client/src/pages/contests.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Search, Calendar, Clock, Users, Trophy, Play, CheckCircle, Star, Award } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocation } from 'wouter';\n\ninterface Contest {\n  id: string;\n  title: string;\n  description: string;\n  startTime: string;\n  endTime: string;\n  duration: number;\n  problems: any[];\n  participants?: any[];\n  status: 'upcoming' | 'active' | 'ended';\n  isEnrolled?: boolean;\n  participantCount?: number;\n  userProgress?: {\n    problemsSolved: number;\n    rank: number;\n  };\n  contestEndMethod?: 'time_expired' | 'manually_ended';\n}\n\nexport default function ContestsPage() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'all' | 'upcoming' | 'active' | 'ended'>('all');\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const userId = localStorage.getItem('userId') || 'me';\n\n  // Fetch available contests\n  const { data: contests, isLoading } = useQuery<Contest[]>({\n    queryKey: ['/api/contests'],\n    queryFn: async () => {\n      const response = await fetch('/api/contests', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch contests');\n      return response.json();\n    },\n  });\n\n  // Fetch enrollment status for each contest\n  const { data: enrollmentStatuses } = useQuery({\n    queryKey: ['/api/contests/enrollment-statuses'],\n    queryFn: async () => {\n      if (!contests || contests.length === 0) return {};\n      \n      const statusPromises = contests.map(async (contest) => {\n        try {\n          const response = await fetch(`/api/contests/${contest.id}/participants/me`, {\n            headers: {\n              'Authorization': `Bearer ${localStorage.getItem('token')}`,\n            },\n          });\n          \n          if (response.ok) {\n            const data = await response.json();\n            return { contestId: contest.id, status: data };\n          } else {\n            return { contestId: contest.id, status: null };\n          }\n        } catch (error) {\n          return { contestId: contest.id, status: null };\n        }\n      });\n      \n      const results = await Promise.all(statusPromises);\n      return results.reduce((acc, { contestId, status }) => {\n        acc[contestId] = status;\n        return acc;\n      }, {} as Record<string, any>);\n    },\n    enabled: !!contests && contests.length > 0,\n    staleTime: 30000, // Cache for 30 seconds\n  });\n\n  // Determine contest status\n  const getContestStatus = (contest: Contest): 'upcoming' | 'active' | 'ended' => {\n    const now = new Date();\n    const startTime = new Date(contest.startTime);\n    const endTime = new Date(contest.endTime);\n\n    // Add debugging\n    console.log(`[CONTEST-STATUS] Contest: ${contest.title}`);\n    console.log(`[CONTEST-STATUS] Now: ${now.toISOString()}`);\n    console.log(`[CONTEST-STATUS] Start: ${startTime.toISOString()}`);\n    console.log(`[CONTEST-STATUS] End: ${endTime.toISOString()}`);\n    console.log(`[CONTEST-STATUS] Contest end method: ${contest.contestEndMethod}`);\n\n    // Check if contest has been manually ended or time expired\n    // BUT only if the contest has actually ended based on time\n    // This prevents rescheduled contests from showing as ended\n    if (contest.contestEndMethod === 'manually_ended' || contest.contestEndMethod === 'time_expired') {\n      // Only consider the contest ended if it's actually past the end time\n      if (now > endTime) {\n        console.log(`[CONTEST-STATUS] Contest ended: ${contest.contestEndMethod} and past end time`);\n        return 'ended';\n      } else {\n        console.log(`[CONTEST-STATUS] Contest was ended but rescheduled - ignoring end method`);\n      }\n    }\n\n    // Check if contest has actually ended based on current time\n    if (now > endTime) {\n      console.log(`[CONTEST-STATUS] Contest has ended based on time`);\n      return 'ended';\n    }\n\n    if (now < startTime) return 'upcoming';\n    if (now >= startTime && now <= endTime) return 'active';\n    \n    // Fallback: if we reach here, the contest should be ended\n    console.log(`[CONTEST-STATUS] Fallback: marking contest as ended`);\n    return 'ended';\n  };\n\n  // Filter contests based on search and status\n  const filteredContests = contests?.filter(contest => {\n    // Add debugging for contest data\n    console.log(`[CONTEST-DATA] Contest: ${contest.title}`);\n    console.log(`[CONTEST-DATA] Start time: ${contest.startTime}`);\n    console.log(`[CONTEST-DATA] End time: ${contest.endTime}`);\n    console.log(`[CONTEST-DATA] Raw start: ${typeof contest.startTime} - ${contest.startTime}`);\n    console.log(`[CONTEST-DATA] Raw end: ${typeof contest.endTime} - ${contest.endTime}`);\n    \n    const matchesSearch = contest.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         contest.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || getContestStatus(contest) === statusFilter;\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const getStatusBadge = (status: 'upcoming' | 'active' | 'ended') => {\n    switch (status) {\n      case 'upcoming':\n        return <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">Upcoming</Badge>;\n      case 'active':\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Active</Badge>;\n      case 'ended':\n        return <Badge variant=\"outline\" className=\"bg-gray-100 text-gray-800\">Ended</Badge>;\n    }\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const handleContestClick = (contest: Contest) => {\n    const status = getContestStatus(contest);\n    const hasEnded = contest.contestEndMethod === 'manually_ended' || contest.contestEndMethod === 'time_expired';\n    const endedByUser = localStorage.getItem(`contest:${contest.id}:endedBy:${userId}`) === 'true';\n    \n    // Get enrollment status to check if user has participated\n    const enrollmentStatus = enrollmentStatuses?.[contest.id];\n    const hasParticipated = enrollmentStatus && (\n      enrollmentStatus.submissions?.length > 0 || \n      enrollmentStatus.contestEndMethod || \n      enrollmentStatus.isDisqualified\n    );\n    \n    if (hasEnded || status === 'ended' || endedByUser) {\n      // If user has participated, show results; otherwise, contest is over\n      if (hasParticipated) {\n        setLocation(`/contests/${contest.id}/results`);\n      } else {\n        // Contest has ended and user hasn't participated - show a message\n        toast({\n          title: 'Contest Ended',\n          description: 'This contest has ended. You can no longer participate.',\n          variant: 'destructive',\n        });\n        return;\n      }\n    } else if (status === 'upcoming') {\n      setLocation(`/contests/${contest.id}/details`);\n    } else {\n      setLocation(`/contests/${contest.id}/problems`);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading contests...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          Coding Contests\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Discover and participate in exciting coding challenges\n        </p>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Search contests...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          {(['all', 'upcoming', 'active', 'ended'] as const).map((status) => (\n            <Button\n              key={status}\n              variant={statusFilter === status ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setStatusFilter(status)}\n            >\n              {status.charAt(0).toUpperCase() + status.slice(1)}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Contests Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredContests\n          .filter((contest) => {\n            const status = getContestStatus(contest);\n            const localUserId = localStorage.getItem('userId');\n            const isEnrolled = (contest as any).isEnrolled ?? contest.participants?.some((p: any) => p.userId === localUserId) ?? false;\n            \n            // Show all contests but prioritize enrolled ones\n            // For active contests, show enrolled users prominently\n            // For upcoming contests, show all (user can enroll)\n            // For ended contests, show all (user can view results)\n            return true;\n          })\n          .sort((a, b) => {\n            // Sort by: enrolled first, then by status (active > upcoming > ended), then by start time\n            const aStatus = getContestStatus(a);\n            const bStatus = getContestStatus(b);\n            const aEnrolled = (a as any).isEnrolled ?? a.participants?.some((p: any) => p.userId === localStorage.getItem('userId')) ?? false;\n            const bEnrolled = (b as any).isEnrolled ?? b.participants?.some((p: any) => p.userId === localStorage.getItem('userId')) ?? false;\n            \n            // Enrolled contests first\n            if (aEnrolled && !bEnrolled) return -1;\n            if (!aEnrolled && bEnrolled) return 1;\n            \n            // Then by status priority\n            const statusPriority = { 'active': 3, 'upcoming': 2, 'ended': 1 };\n            const aPriority = statusPriority[aStatus] || 0;\n            const bPriority = statusPriority[bStatus] || 0;\n            \n            if (aPriority !== bPriority) return bPriority - aPriority;\n            \n            // Finally by start time (newest first)\n            return new Date(b.startTime).getTime() - new Date(a.startTime).getTime();\n          })\n          .map((contest) => {\n          const status = getContestStatus(contest);\n          const localUserId = localStorage.getItem('userId');\n          const isEnrolled = (contest as any).isEnrolled ?? contest.participants?.some((p: any) => p.userId === localUserId) ?? false;\n          const participantCount = contest.participantCount ?? contest.participants?.length ?? 0;\n          const endedByUser = localStorage.getItem(`contest:${contest.id}:endedBy:${localUserId || 'me'}`) === 'true';\n          \n          // Get enrollment status from the database\n          const enrollmentStatus = enrollmentStatuses?.[contest.id];\n          const hasParticipated = enrollmentStatus && (\n            enrollmentStatus.submissions?.length > 0 || \n            enrollmentStatus.contestEndMethod || \n            enrollmentStatus.isDisqualified\n          );\n\n          return (\n            <Card key={contest.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg mb-2\">{contest.title}</CardTitle>\n                    {getStatusBadge(status)}\n                  </div>\n                  {isEnrolled && (\n                    <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800\">\n                      Enrolled\n                    </Badge>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <CardDescription className=\"mb-4 line-clamp-2\">\n                  {contest.description}\n                </CardDescription>\n                \n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    {formatDateTime(contest.startTime)}\n                  </div>\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <Clock className=\"h-4 w-4 mr-2\" />\n                    {contest.duration} minutes\n                  </div>\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    {participantCount} participants\n                  </div>\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <Trophy className=\"h-4 w-4 mr-2\" />\n                    {contest.problems?.length || 0} problems\n                  </div>\n                  \n                  {/* User Progress for Enrolled Contests */}\n                  {isEnrolled && contest.userProgress && (\n                    <>\n                      {contest.userProgress.problemsSolved > 0 && (\n                        <div className=\"flex items-center text-sm text-green-600 font-medium\">\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          {contest.userProgress.problemsSolved} problems solved\n                        </div>\n                      )}\n                      {contest.userProgress.rank && contest.userProgress.rank > 0 && (\n                        <div className=\"flex items-center text-sm text-purple-600 font-medium\">\n                          <Award className=\"h-4 w-4 mr-2\" />\n                          Rank #{contest.userProgress.rank}\n                        </div>\n                      )}\n                    </>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={() => handleContestClick(contest)}\n                    className=\"flex-1\"\n                    variant={isEnrolled ? \"default\" : \"outline\"}\n                    disabled={(() => {\n                      // Disable button for ended contests where user hasn't participated\n                      if (status === 'ended' || endedByUser) {\n                        return !hasParticipated;\n                      }\n                      return false;\n                    })()}\n                  >\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    {(() => {\n                      // For ended contests (time expired or manually ended)\n                      if (status === 'ended' || endedByUser) {\n                        // If user has participated, show results; otherwise, contest is over\n                        return hasParticipated ? 'View Results' : 'Contest Ended';\n                      }\n                      \n                      // For upcoming contests\n                      if (status === 'upcoming') {\n                        return isEnrolled ? 'View Details' : 'Join Contest';\n                      }\n                      \n                      // For active contests\n                      if (status === 'active') {\n                        if (!isEnrolled) return 'Start Contest';\n                        return hasParticipated ? 'Resume Contest' : 'Start Contest';\n                      }\n                      \n                      // Fallback\n                      return 'View Results';\n                    })()}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {filteredContests.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Trophy className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No contests found</h3>\n          <p className=\"text-gray-600\">\n            {searchTerm || statusFilter !== 'all' \n              ? 'Try adjusting your search or filters'\n              : 'No contests are available at the moment'}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":16657},"client/src/components/Navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/ui/theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Bell, Moon, Sun, Code, User, LogOut } from \"lucide-react\";\nimport lightLogo from \"../assests/light_logo.png\";\nimport lightName from \"../assests/light_name.png\";\nimport darkLogo from \"../assests/dark_logo.png\";\nimport darkName from \"../assests/dark_name.png\";\n\nexport function Navigation() {\n  const [location] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  // const { theme, toggleTheme } = useTheme();\n\n  const navLinks = [\n    { path: \"/\", label: \"Dashboard\", active: location === \"/\" },\n    { path: \"/problems\", label: \"Problems\", active: location === \"/problems\" },\n    { path: \"/contests\", label: \"Contests\", active: location === \"/contests\" },\n    { path: \"/leaderboard\", label: \"Leaderboard\", active: location === \"/leaderboard\" },\n  ];\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <nav className=\"bg-background border-b border-border sticky top-0 z-50 shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo and Brand */}\n          <div className=\"flex items-center space-x-8\">\n            <Link href=\"/\" className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2\">\n                <img src={lightLogo} alt=\"CodeArena logo\" className=\"h-10 w-auto dark:hidden\" />\n                <img src={darkLogo} alt=\"CodeArena logo\" className=\"h-10 w-auto hidden dark:block\" />\n                <img src={lightName} alt=\"CodeArena\" className=\"h-8 w-auto dark:hidden\" />\n                <img src={darkName} alt=\"CodeArena\" className=\"h-9 w-auto hidden dark:block\" />\n              </div>\n            </Link>\n            \n            {/* Navigation Links */}\n            <div className=\"hidden md:flex space-x-8\">\n              {navLinks.map((link) => (\n                <Link\n                  key={link.path}\n                  href={link.path}\n                  className={`font-medium pb-4 -mb-px transition-colors ${\n                    link.active\n                      ? \"text-primary border-b-2 border-primary\"\n                      : \"text-muted-foreground hover:text-foreground\"\n                  }`}\n                >\n                  {link.label}\n                </Link>\n              ))}\n              {user?.role === \"admin\" && (\n                <Link\n                  href=\"/admin\"\n                  className={`font-medium pb-4 -mb-px transition-colors ${\n                    location === \"/admin\"\n                      ? \"text-primary border-b-2 border-primary\"\n                      : \"text-muted-foreground hover:text-foreground\"\n                  }`}\n                >\n                  Admin\n                </Link>\n              )}\n            </div>\n          </div>\n\n          {/* User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            {/* <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              <Bell className=\"h-5 w-5\" />\n            </Button> */}\n            \n            {/* <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button> */}\n\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-3 p-2\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user?.profileImageUrl || undefined} alt={user?.firstName || \"User\"} />\n                    <AvatarFallback>\n                      {user?.firstName?.[0]}{user?.lastName?.[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"text-sm font-medium hidden sm:block\">\n                    {user?.firstName} {user?.lastName}\n                  </span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <DropdownMenuItem asChild>\n                  <Link href=\"/profile\" className=\"flex items-center w-full\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    Profile\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/settings\" className=\"flex items-center w-full\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    Settings\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => window.location.href = \"/api/logout\"}>\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Log out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5459},"client/src/pages/ProblemSetDetail.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { authenticatedFetch } from \"@/lib/utils\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, Clock, BookOpen, CheckCircle, XCircle, Play, Edit3, Circle } from \"lucide-react\";\n\ninterface Problem {\n  id: number;\n  title: string;\n  description: string;\n  difficulty: string;\n  tags?: string[];\n  timeLimit?: number;\n  memoryLimit?: number;\n  instanceId?: string;\n  isCustomized?: boolean;\n}\n\ninterface ProblemInstance {\n  id?: string; // Unique instance ID\n  originalProblemId: number; // Reference to base problem\n  title?: string;\n  description?: string;\n  difficulty?: string;\n  constraints?: string;\n  inputFormat?: string;\n  outputFormat?: string;\n  timeLimit?: number;\n  memoryLimit?: number;\n  hints?: string[];\n  notes?: string;\n  isCustomized?: boolean;\n  order?: number;\n  lastModified?: string;\n  modifiedBy?: string;\n  customTestCases?: any[];\n  customExamples?: any[];\n  customStarterCode?: any;\n}\n\ninterface ProblemSet {\n  id: string; // Use string ID to match server\n  title: string;\n  description?: string;\n  difficulty: string;\n  category?: string;\n  tags?: string[];\n  problemIds?: string[]; // Use string problem IDs to match server\n  problemInstances?: ProblemInstance[];\n  problems?: any[]; // Raw problems array from database\n  isPublic: boolean;\n  estimatedTime?: number;\n  totalProblems: number;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Submission {\n  id: number;\n  problemId: number;\n  userId: string;\n  status: string;\n  submittedAt: string;\n  problemInstanceId?: string; // Added for instance-specific submissions\n}\n\nexport default function ProblemSetDetail() {\n  const [match, params] = useRoute(\"/problem-sets/:id\");\n  const problemSetId = params?.id;\n  const { user } = useAuth();\n  \n  console.log('ProblemSetDetail - problemSetId:', problemSetId);\n  console.log('ProblemSetDetail - user role:', user?.role);\n\n  const { data: problemSet, isLoading: loadingSet, error } = useQuery<ProblemSet>({\n    queryKey: [`/api/problem-sets/${problemSetId}`],\n    queryFn: async () => {\n      if (!problemSetId) {\n        throw new Error('Problem Set ID is required');\n      }\n      // Use admin endpoint for authenticated users to get full data including problem instances\n      const endpoint = user?.role === 'admin' \n        ? `/api/admin/problem-sets/${problemSetId}`\n        : `/api/problem-sets/${problemSetId}`;\n      \n      console.log('Fetching problem set from:', endpoint);\n      const response = await authenticatedFetch(endpoint);\n      if (!response.ok) {\n        throw new Error('Failed to fetch problem set');\n      }\n      const data = await response.json();\n      console.log('Problem set response:', data);\n      return data as Promise<ProblemSet>;\n    },\n    enabled: !!problemSetId,\n    retry: (failureCount, error: any) => {\n      // Don't retry on enrollment errors\n      if (error?.status === 403) return false;\n      return failureCount < 3;\n    }\n  });\n\n  const { data: allProblems } = useQuery<Problem[]>({\n    queryKey: [\"/api/problems\"],\n  });\n\n  const { data: submissions } = useQuery<Submission[]>({\n    queryKey: [\"/api/submissions\"],\n    enabled: !!user,\n  });\n\n  // Handle enrollment errors\n  if (error && (error as any)?.status === 403) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Access Denied</h1>\n          <p className=\"text-gray-600 mt-2 mb-4\">\n            You must be enrolled in this problem set to access it.\n          </p>\n          <div className=\"flex gap-4 justify-center\">\n            <Link href=\"/problems\">\n              <Button variant=\"outline\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Problem Sets\n              </Button>\n            </Link>\n            <Link href={`/enroll-problem-set/${problemSetId}`}>\n              <Button>\n                <BookOpen className=\"w-4 h-4 mr-2\" />\n                Enroll Now\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!problemSetId || (!loadingSet && !problemSet)) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Problem set not found</h1>\n          <Link href=\"/problems\">\n            <Button className=\"mt-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Problem Sets\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (loadingSet) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Get problems in this set - using both new problemInstances and legacy problemIds for compatibility\n  const setProblems: Problem[] = [];\n  \n  console.log('ProblemSet data:', problemSet);\n  console.log('All problems:', allProblems);\n  \n  if (problemSet?.problemInstances && problemSet.problemInstances.length > 0) {\n    console.log('Using problem instances:', problemSet.problemInstances);\n    // New system: use problem instances with their customizations\n    for (const instance of problemSet.problemInstances) {\n      if (instance.originalProblemId === null || instance.originalProblemId === undefined) {\n        // Handle instances that are completely custom (no original problem)\n        if (instance.title) { // Only add if it has a title\n          setProblems.push({\n            id: 0, // Use 0 for custom problems to avoid conflicts\n            instanceId: instance.id,\n            title: instance.title,\n            description: instance.description || '',\n            difficulty: instance.difficulty || 'medium',\n            timeLimit: instance.timeLimit,\n            memoryLimit: instance.memoryLimit,\n            isCustomized: true,\n            tags: []\n          });\n        }\n      } else {\n        // Handle instances based on original problems\n        const originalProblem = allProblems?.find(p => p.id === instance.originalProblemId);\n        if (originalProblem) {\n          // Merge original problem with instance customizations\n          setProblems.push({\n            ...originalProblem,\n            id: instance.originalProblemId, // Keep original ID for submissions tracking\n            instanceId: instance.id, // Store instance ID for reference\n            title: instance.title || originalProblem.title,\n            description: instance.description || originalProblem.description,\n            difficulty: instance.difficulty || originalProblem.difficulty,\n            timeLimit: instance.timeLimit || originalProblem.timeLimit,\n            memoryLimit: instance.memoryLimit || originalProblem.memoryLimit,\n            isCustomized: instance.isCustomized || false\n          });\n        }\n      }\n    }\n  } else if (problemSet?.problems && problemSet.problems.length > 0) {\n    console.log('Using problems array:', problemSet.problems);\n    // Handle raw problems array from database\n    for (const problem of problemSet.problems) {\n      setProblems.push({\n        id: parseInt(problem.selectedProblemId || problem.id) || 0,\n        instanceId: problem.id,\n        title: problem.title,\n        description: problem.description,\n        difficulty: problem.difficulty,\n        timeLimit: problem.timeLimit,\n        memoryLimit: problem.memoryLimit,\n        isCustomized: problem.status === 'customized',\n        tags: problem.tags || []\n      });\n    }\n  } else if (problemSet?.problemIds && problemSet.problemIds.length > 0) {\n    console.log('Using problem IDs:', problemSet.problemIds);\n    // Legacy system: use problemIds - convert to numbers for comparison\n    const legacyProblems = allProblems?.filter(problem => \n      problemSet.problemIds!.includes(String(problem.id))\n    ) || [];\n    setProblems.push(...legacyProblems.map(p => ({ ...p, isCustomized: false })));\n  }\n  \n  console.log('Final set problems:', setProblems);\n  console.log('Debug info:', {\n    problemInstancesLength: problemSet?.problemInstances?.length || 0,\n    problemsLength: problemSet?.problems?.length || 0,\n    problemIdsLength: problemSet?.problemIds?.length || 0,\n    totalProblems: problemSet?.totalProblems || 0,\n    setProblemsLength: setProblems.length\n  });\n\n\n\n  // Get user's submissions for these problems\n  const userSubmissions = submissions?.filter(sub => \n    setProblems.some(problem => problem.id === sub.problemId)\n  ) || [];\n\n  // Calculate progress using instance-specific tracking\n  const solvedProblems = new Set();\n  \n  setProblems.forEach(problem => {\n    const problemSubmissions = userSubmissions.filter(sub => sub.problemId === problem.id);\n    \n    // If this problem has an instance ID, check for instance-specific submissions\n    if (problem.instanceId) {\n      const instanceSubmissions = problemSubmissions.filter(sub => \n        sub.problemInstanceId === problem.instanceId\n      );\n      if (instanceSubmissions.some(sub => sub.status === 'accepted')) {\n        solvedProblems.add(`${problem.id}-${problem.instanceId}`);\n      }\n    } else {\n      // For legacy problems without instance IDs, use global tracking\n      if (problemSubmissions.some(sub => sub.status === 'accepted')) {\n        solvedProblems.add(problem.id);\n      }\n    }\n  });\n  \n  const progress = setProblems.length > 0 ? (solvedProblems.size / setProblems.length) * 100 : 0;\n  \n  console.log('Final calculation:', {\n    setProblemsLength: setProblems.length,\n    solvedProblemsSize: solvedProblems.size,\n    progress,\n    problemSetTotalProblems: problemSet?.totalProblems,\n    problemSetProblemIds: problemSet?.problemIds,\n    problemSetProblemInstances: problemSet?.problemInstances?.length\n  });\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case 'easy': return 'bg-green-100 text-green-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'hard': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getProblemStatus = (problem: Problem) => {\n    const problemSubmissions = userSubmissions.filter(sub => sub.problemId === problem.id);\n    \n    // If this problem has an instance ID, check for instance-specific submissions\n    if (problem.instanceId) {\n      const instanceSubmissions = problemSubmissions.filter(sub => \n        sub.problemInstanceId === problem.instanceId\n      );\n      if (instanceSubmissions.some(sub => sub.status === 'accepted')) return 'solved';\n      if (instanceSubmissions.length > 0) return 'attempted';\n      return 'not-attempted';\n    } else {\n      // For legacy problems without instance IDs, use global tracking\n      if (problemSubmissions.some(sub => sub.status === 'accepted')) return 'solved';\n      if (problemSubmissions.length > 0) return 'attempted';\n      return 'not-attempted';\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <Link href=\"/assignments\">\n            <Button variant=\"outline\" size=\"icon\">\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold\">{problemSet?.title}</h1>\n            {problemSet?.description && (\n              <p className=\"text-muted-foreground mt-1\">{problemSet.description}</p>\n            )}\n          </div>\n        </div>\n\n        {/* Set Info */}\n        <div className=\"flex flex-wrap gap-4 items-center\">\n          <Badge className={getDifficultyColor(problemSet?.difficulty || '')}>\n            {(problemSet?.difficulty?.charAt(0) || '').toUpperCase() + (problemSet?.difficulty?.slice(1) || '')}\n          </Badge>\n          {problemSet?.category && (\n            <Badge variant=\"outline\">{problemSet.category}</Badge>\n          )}\n          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n            <BookOpen className=\"w-4 h-4\" />\n            <span>{setProblems.length} problems</span>\n          </div>\n          {problemSet?.estimatedTime && (\n            <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n              <Clock className=\"w-4 h-4\" />\n              <span>{problemSet.estimatedTime} minutes</span>\n            </div>\n          )}\n        </div>\n\n        {/* Progress */}\n        {user && setProblems.length > 0 && (\n          <div className=\"mt-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <span className=\"text-sm font-medium\">Progress: {Math.round(progress)}%</span>\n              <span className=\"text-sm text-muted-foreground\">\n                ({solvedProblems?.size || 0}/{setProblems?.length || 0} solved)\n              </span>\n            </div>\n            <Progress value={progress} className=\"h-2\" />\n          </div>\n        )}\n      </div>\n\n      {/* Tags */}\n      {problemSet?.tags && problemSet.tags.length > 0 && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-sm font-medium mb-2\">Tags</h3>\n          <div className=\"flex gap-2 flex-wrap\">\n            {problemSet.tags.map((tag) => (\n              <Badge key={tag} variant=\"secondary\">{tag}</Badge>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Problems List */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-semibold\">Problems ({setProblems.length})</h2>\n        {setProblems.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <BookOpen className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No problems in this set</h3>\n              <p className=\"text-muted-foreground\">\n                This problem set doesn't contain any problems yet.\n              </p>\n              {problemSet && (\n                <div className=\"mt-4 text-xs text-muted-foreground\">\n                  <p>Debug info:</p>\n                  <p>Problem IDs: {JSON.stringify(problemSet.problemIds)}</p>\n                  <p>Problem Instances: {JSON.stringify(problemSet.problemInstances?.length || 0)}</p>\n                  <p>Total Problems: {problemSet.totalProblems}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-3\">\n            {setProblems.map((problem, index) => {\n              const status = getProblemStatus(problem);\n              // Create unique key using both problem ID and instance ID (if available)\n              const uniqueKey = problem.instanceId ? `${problem.id}-${problem.instanceId}` : `${problem.id}-${index}`;\n              return (\n                <Card key={uniqueKey} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex-shrink-0\">\n                          {status === 'solved' ? (\n                            <CheckCircle className=\"w-6 h-6 text-green-500\" />\n                          ) : status === 'attempted' ? (\n                            <Clock className=\"w-6 h-6 text-yellow-500\" />\n                          ) : (\n                            <Circle className=\"w-6 h-6 text-gray-400\" />\n                          )}\n                        </div>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <h3 className=\"font-medium\">{problem.title}</h3>\n                          </div>\n                          <div className=\"flex items-center gap-4 mt-1\">\n                            <Badge className={getDifficultyColor(problem.difficulty)} variant=\"outline\">\n                              {problem.difficulty.charAt(0).toUpperCase() + problem.difficulty.slice(1)}\n                            </Badge>\n                            {problem.tags && problem.tags.length > 0 && (\n                              <div className=\"flex gap-1\">\n                                {problem.tags.slice(0, 2).map((tag, tagIndex) => (\n                                  <Badge key={`${uniqueKey}-tag-${tagIndex}`} variant=\"secondary\" className=\"text-xs\">\n                                    {tag}\n                                  </Badge>\n                                ))}\n                                {problem.tags.length > 2 && (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    +{problem.tags.length - 2}\n                                  </Badge>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <Link href={`/problems/${problem.id}?problemSet=${problemSetId}${problem.instanceId ? `&instanceId=${problem.instanceId}` : ''}`}>\n                        <Button>\n                          <Play className=\"w-4 h-4 mr-2\" />\n                          {status === 'solved' ? 'Solve Again' : 'Solve'}\n                        </Button>\n                      </Link>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":18295},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/services/otpService.ts":{"content":"import crypto from 'crypto';\nimport { User } from '../models/User';\n\ninterface OTPData {\n  email: string;\n  otp: string;\n  expiresAt: Date;\n  attempts: number;\n}\n\ninterface EmailVerificationOTPData {\n  email: string;\n  otp: string;\n  expiresAt: Date;\n  attempts: number;\n  userData: {\n    firstName: string;\n    lastName: string;\n    password: string;\n    role: string;\n  };\n}\n\n// In-memory storage for OTPs (in production, use Redis or database)\nconst otpStore = new Map<string, OTPData>();\nconst emailVerificationOTPStore = new Map<string, EmailVerificationOTPData>();\n\nexport class OTPService {\n  private static instance: OTPService;\n  \n  public static getInstance(): OTPService {\n    if (!OTPService.instance) {\n      OTPService.instance = new OTPService();\n    }\n    return OTPService.instance;\n  }\n\n  // Generate a 6-digit OTP - ALWAYS random\n  generateOTP(): string {\n    const otp = Math.floor(100000 + Math.random() * 900000).toString();\n    console.log(`🔐 Generated OTP: ${otp}`);\n    return otp;\n  }\n\n  // Store OTP with expiration (10 minutes)\n  storeOTP(email: string, otp: string): void {\n    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n    otpStore.set(email, {\n      email,\n      otp,\n      expiresAt,\n      attempts: 0\n    });\n  }\n\n  // Store email verification OTP for new user registration\n  storeEmailVerificationOTP(email: string, otp: string, userData: {\n    firstName: string;\n    lastName: string;\n    password: string;\n    role: string;\n  }): void {\n    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n    emailVerificationOTPStore.set(email, {\n      email,\n      otp,\n      expiresAt,\n      attempts: 0,\n      userData\n    });\n    console.log(`🔐 Stored email verification OTP for ${email}: ${otp}`);\n  }\n\n  // Validate OTP\n  validateOTP(email: string, otp: string): { valid: boolean; message: string } {\n    const otpData = otpStore.get(email);\n    \n    if (!otpData) {\n      return { valid: false, message: 'OTP not found or expired' };\n    }\n\n    if (otpData.expiresAt < new Date()) {\n      otpStore.delete(email);\n      return { valid: false, message: 'OTP has expired' };\n    }\n\n    if (otpData.attempts >= 3) {\n      otpStore.delete(email);\n      return { valid: false, message: 'Too many attempts. Please request a new OTP' };\n    }\n\n    if (otpData.otp !== otp) {\n      otpData.attempts++;\n      return { valid: false, message: 'Invalid OTP' };\n    }\n\n    // OTP is valid, remove it from store\n    otpStore.delete(email);\n    return { valid: true, message: 'OTP validated successfully' };\n  }\n\n  // Validate email verification OTP for new user registration\n  validateEmailVerificationOTP(email: string, otp: string): { \n    valid: boolean; \n    message: string; \n    userData?: any;\n  } {\n    const otpData = emailVerificationOTPStore.get(email);\n    \n    if (!otpData) {\n      return { valid: false, message: 'Verification code not found or expired' };\n    }\n\n    if (otpData.expiresAt < new Date()) {\n      emailVerificationOTPStore.delete(email);\n      return { valid: false, message: 'Verification code has expired' };\n    }\n\n    if (otpData.attempts >= 3) {\n      emailVerificationOTPStore.delete(email);\n      return { valid: false, message: 'Too many attempts. Please request a new verification code' };\n    }\n\n    if (otpData.otp !== otp) {\n      otpData.attempts++;\n      return { valid: false, message: 'Invalid verification code' };\n    }\n\n    // OTP is valid, remove it from store and return user data\n    const userData = otpData.userData;\n    emailVerificationOTPStore.delete(email);\n    return { \n      valid: true, \n      message: 'Email verified successfully',\n      userData\n    };\n  }\n\n  // Check if OTP exists and is not expired\n  hasValidOTP(email: string): boolean {\n    const otpData = otpStore.get(email);\n    return otpData ? otpData.expiresAt > new Date() : false;\n  }\n\n  // Check if email verification OTP exists and is not expired\n  hasValidEmailVerificationOTP(email: string): boolean {\n    const otpData = emailVerificationOTPStore.get(email);\n    return otpData ? otpData.expiresAt > new Date() : false;\n  }\n\n  // Clean expired OTPs\n  cleanupExpiredOTPs(): void {\n    const now = new Date();\n    for (const [email, otpData] of otpStore.entries()) {\n      if (otpData.expiresAt < now) {\n        otpStore.delete(email);\n      }\n    }\n    \n    for (const [email, otpData] of emailVerificationOTPStore.entries()) {\n      if (otpData.expiresAt < now) {\n        emailVerificationOTPStore.delete(email);\n      }\n    }\n  }\n}\n\nexport const otpService = OTPService.getInstance();\n\n// Clean up expired OTPs every 5 minutes\nsetInterval(() => {\n  otpService.cleanupExpiredOTPs();\n}, 5 * 60 * 1000); ","size_bytes":4706},"client/src/pages/UserAssignmentAnalytics.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useRoute } from 'wouter';\nimport { Link } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  ArrowLeft, \n  Target, \n  Clock, \n  TrendingUp, \n  CheckCircle, \n  XCircle, \n  AlertCircle,\n  Trophy,\n  BookOpen,\n  Lightbulb,\n  Users,\n  Activity,\n  Calendar,\n  Zap,\n  HardDrive\n} from 'lucide-react';\nimport { config } from '@/config';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';\n\ninterface UserAssignmentAnalyticsData {\n  userId: string;\n  userName: string;\n  assignmentId: number;\n  assignmentTitle: string;\n  overallPerformance: {\n    bestScore: number;\n    totalAttempts: number;\n    averageScore: number;\n    improvementTrend: number;\n    timeEfficiency: number;\n    consistencyScore: number;\n  };\n  questionPerformance: Array<{\n    questionId: string;\n    questionType: string;\n    bestScore: number;\n    attempts: number;\n    timeSpent: number;\n    isCorrect: boolean;\n    learningGaps: string[];\n  }>;\n  learningProgress: {\n    outcomesAchieved: number;\n    totalOutcomes: number;\n    confidenceLevel: number;\n    timeToMastery: number;\n    areasForImprovement: string[];\n  };\n  engagementMetrics: {\n    totalTimeSpent: number;\n    completionRate: number;\n    revisits: number;\n    lastActivity: Date;\n    engagementScore: number;\n  };\n  comparativePosition: {\n    classRank: number;\n    percentile: number;\n    performanceCategory: string;\n    relativeToClass: number;\n  };\n  recommendations: Array<{\n    type: 'practice' | 'review' | 'challenge' | 'support';\n    title: string;\n    description: string;\n    priority: 'high' | 'medium' | 'low';\n    resources?: string[];\n  }>;\n}\n\nexport function UserAssignmentAnalytics() {\n  const [match, params] = useRoute('/admin/assignments/:assignmentId/users/:userId/analytics');\n  const { assignmentId, userId } = params || {};\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const { data: analytics, isLoading, error } = useQuery({\n    queryKey: ['user-assignment-analytics', assignmentId, userId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const res = await fetch(`${config.apiUrl}/api/analytics/assignments/${assignmentId}/users/${userId}/analytics`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!res.ok) {\n        throw new Error('Failed to fetch user assignment analytics');\n      }\n      return res.json() as Promise<UserAssignmentAnalyticsData>;\n    },\n    enabled: !!assignmentId && !!userId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  if (error || !analytics) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Failed to load user analytics</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            {error instanceof Error ? error.message : 'Unknown error occurred'}\n          </p>\n          <Link href=\"/admin/assignments\">\n            <Button className=\"mt-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Assignments\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const performanceData = [\n    { metric: 'Best Score', value: analytics.overallPerformance.bestScore, max: 100 },\n    { metric: 'Time Efficiency', value: analytics.overallPerformance.timeEfficiency, max: 10 },\n    { metric: 'Consistency', value: analytics.overallPerformance.consistencyScore, max: 100 },\n    { metric: 'Engagement', value: analytics.engagementMetrics.engagementScore, max: 100 },\n  ];\n\n  const questionPerformanceData = analytics.questionPerformance.map(q => ({\n    question: `Q${q.questionId}`,\n    score: q.bestScore,\n    attempts: q.attempts,\n    timeSpent: q.timeSpent,\n  }));\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'text-red-600';\n      case 'medium': return 'text-orange-600';\n      case 'low': return 'text-green-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'practice': return <BookOpen className=\"h-4 w-4\" />;\n      case 'review': return <AlertCircle className=\"h-4 w-4\" />;\n      case 'challenge': return <Trophy className=\"h-4 w-4\" />;\n      case 'support': return <Lightbulb className=\"h-4 w-4\" />;\n      default: return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <Link href={`/admin/assignments/${assignmentId}/analytics`}>\n            <Button variant=\"outline\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Assignment Analytics\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold\">{analytics.userName}</h1>\n          <p className=\"text-muted-foreground\">\n            Performance Analysis for {analytics.assignmentTitle}\n          </p>\n        </div>\n        <div className=\"text-right\">\n          <Badge \n            variant={\n              analytics.comparativePosition.performanceCategory === 'excellent' ? 'default' :\n              analytics.comparativePosition.performanceCategory === 'good' ? 'secondary' :\n              analytics.comparativePosition.performanceCategory === 'average' ? 'outline' : 'destructive'\n            }\n            className=\"text-lg px-4 py-2\"\n          >\n            {analytics.comparativePosition.performanceCategory.toUpperCase()}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Best Score</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.overallPerformance.bestScore}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.overallPerformance.totalAttempts} attempts\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Class Rank</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">#{analytics.comparativePosition.classRank}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.comparativePosition.percentile}th percentile\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Time Spent</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.engagementMetrics.totalTimeSpent}m</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.engagementMetrics.revisits} revisits\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Engagement</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.engagementMetrics.engagementScore}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.engagementMetrics.completionRate}% completion\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n          <TabsTrigger value=\"learning\">Learning</TabsTrigger>\n          <TabsTrigger value=\"engagement\">Engagement</TabsTrigger>\n          <TabsTrigger value=\"recommendations\">Recommendations</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Performance Radar Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance Profile</CardTitle>\n                <CardDescription>Multi-dimensional performance assessment</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RadarChart data={performanceData}>\n                      <PolarGrid />\n                      <PolarAngleAxis dataKey=\"metric\" />\n                      <PolarRadiusAxis angle={90} domain={[0, 100]} />\n                      <Radar name=\"Performance\" dataKey=\"value\" stroke=\"#3b82f6\" fill=\"#3b82f6\" fillOpacity={0.3} />\n                      <Tooltip />\n                    </RadarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Comparative Analysis */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Comparative Analysis</CardTitle>\n                <CardDescription>How you compare to the class</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Class Rank</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-2xl font-bold\">#{analytics.comparativePosition.classRank}</span>\n                      <Badge variant=\"outline\">{analytics.comparativePosition.percentile}th percentile</Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <span>Performance vs Class</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`text-lg font-bold ${analytics.comparativePosition.relativeToClass >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {analytics.comparativePosition.relativeToClass >= 0 ? '+' : ''}{analytics.comparativePosition.relativeToClass}%\n                      </span>\n                      {analytics.comparativePosition.relativeToClass >= 0 ? (\n                        <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                      ) : (\n                        <TrendingUp className=\"h-5 w-5 text-red-600 rotate-180\" />\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span>Improvement Trend</span>\n                      <span className={`font-bold ${analytics.overallPerformance.improvementTrend >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        {analytics.overallPerformance.improvementTrend >= 0 ? '+' : ''}{analytics.overallPerformance.improvementTrend}%\n                      </span>\n                    </div>\n                    <Progress \n                      value={Math.min(100, Math.max(0, analytics.overallPerformance.improvementTrend + 50))} \n                      className=\"h-2\" \n                    />\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span>Time Efficiency</span>\n                      <span className=\"font-bold\">{analytics.overallPerformance.timeEfficiency.toFixed(1)}</span>\n                    </div>\n                    <Progress value={Math.min(100, analytics.overallPerformance.timeEfficiency * 10)} className=\"h-2\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Questions Tab */}\n        <TabsContent value=\"questions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Question Performance</CardTitle>\n              <CardDescription>Detailed breakdown of each question</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Question Performance Chart */}\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={questionPerformanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"question\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"score\" fill=\"#3b82f6\" name=\"Score (%)\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n\n                {/* Question Details Table */}\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Question</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Best Score</TableHead>\n                      <TableHead>Attempts</TableHead>\n                      <TableHead>Time Spent</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Learning Gaps</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {analytics.questionPerformance.map((question, index) => (\n                      <TableRow key={index}>\n                        <TableCell className=\"font-medium\">Q{question.questionId}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{question.questionType}</Badge>\n                        </TableCell>\n                        <TableCell>{question.bestScore}%</TableCell>\n                        <TableCell>{question.attempts}</TableCell>\n                        <TableCell>{question.timeSpent}m</TableCell>\n                        <TableCell>\n                          {question.isCorrect ? (\n                            <Badge variant=\"default\" className=\"bg-green-600\">\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Correct\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"destructive\">\n                              <XCircle className=\"w-3 h-3 mr-1\" />\n                              Incorrect\n                            </Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"max-w-xs\">\n                            {question.learningGaps.slice(0, 2).map((gap, i) => (\n                              <div key={i} className=\"text-xs text-muted-foreground truncate\">\n                                {gap}\n                              </div>\n                            ))}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Learning Tab */}\n        <TabsContent value=\"learning\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Learning Progress</CardTitle>\n              <CardDescription>Assessment of learning outcomes achievement</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Learning Outcomes Summary */}\n                <div className=\"grid gap-4 md:grid-cols-3\">\n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <div className=\"text-3xl font-bold text-blue-600\">\n                      {analytics.learningProgress.outcomesAchieved}/{analytics.learningProgress.totalOutcomes}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Outcomes Achieved</div>\n                    <Progress \n                      value={(analytics.learningProgress.outcomesAchieved / analytics.learningProgress.totalOutcomes) * 100} \n                      className=\"mt-2\" \n                    />\n                  </div>\n                  \n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <div className=\"text-3xl font-bold text-green-600\">\n                      {analytics.learningProgress.confidenceLevel}%\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Confidence Level</div>\n                    <Progress value={analytics.learningProgress.confidenceLevel} className=\"mt-2\" />\n                  </div>\n                  \n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <div className=\"text-3xl font-bold text-orange-600\">\n                      {analytics.learningProgress.timeToMastery}m\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Time to Mastery</div>\n                  </div>\n                </div>\n\n                {/* Areas for Improvement */}\n                {analytics.learningProgress.areasForImprovement.length > 0 && (\n                  <div className=\"border rounded-lg p-4\">\n                    <h3 className=\"text-lg font-semibold mb-3\">Areas for Improvement</h3>\n                    <div className=\"space-y-2\">\n                      {analytics.learningProgress.areasForImprovement.map((area, index) => (\n                        <div key={index} className=\"flex items-center space-x-2\">\n                          <AlertCircle className=\"h-4 w-4 text-orange-600\" />\n                          <span className=\"text-sm\">{area}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Engagement Tab */}\n        <TabsContent value=\"engagement\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Engagement Metrics</CardTitle>\n              <CardDescription>Analysis of student engagement and activity patterns</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Total Time Spent</span>\n                    <span className=\"font-bold\">{analytics.engagementMetrics.totalTimeSpent} minutes</span>\n                  </div>\n                  <Progress value={Math.min(100, analytics.engagementMetrics.totalTimeSpent / 10)} className=\"h-2\" />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span>Completion Rate</span>\n                    <span className=\"font-bold\">{analytics.engagementMetrics.completionRate}%</span>\n                  </div>\n                  <Progress value={analytics.engagementMetrics.completionRate} className=\"h-2\" />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span>Engagement Score</span>\n                    <span className=\"font-bold\">{analytics.engagementMetrics.engagementScore}%</span>\n                  </div>\n                  <Progress value={analytics.engagementMetrics.engagementScore} className=\"h-2\" />\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {analytics.engagementMetrics.revisits}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Assignment Revisits</div>\n                  </div>\n                  \n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <div className=\"text-sm text-muted-foreground\">Last Activity</div>\n                    <div className=\"text-lg font-semibold\">\n                      {new Date(analytics.engagementMetrics.lastActivity).toLocaleDateString()}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Recommendations Tab */}\n        <TabsContent value=\"recommendations\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Personalized Recommendations</CardTitle>\n              <CardDescription>AI-powered suggestions for improvement</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {analytics.recommendations.map((recommendation, index) => (\n                  <div key={index} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"flex-shrink-0 mt-1\">\n                        {getTypeIcon(recommendation.type)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"font-semibold\">{recommendation.title}</h3>\n                          <Badge \n                            variant=\"outline\" \n                            className={getPriorityColor(recommendation.priority)}\n                          >\n                            {recommendation.priority} priority\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          {recommendation.description}\n                        </p>\n                        {recommendation.resources && recommendation.resources.length > 0 && (\n                          <div className=\"space-y-1\">\n                            <div className=\"text-xs font-medium text-muted-foreground\">Suggested Resources:</div>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {recommendation.resources.map((resource, i) => (\n                                <Badge key={i} variant=\"secondary\" className=\"text-xs\">\n                                  {resource}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default UserAssignmentAnalytics; ","size_bytes":24501},"server/routes/modules.ts":{"content":"import { Router } from 'express';\nimport { protect, requireAdmin } from '../middleware/auth';\nimport { getModuleById, createModule, updateModule, deleteModule, executeModule } from '../controllers/modulesController';\n\nconst router = Router();\n\nrouter.get('/:id', getModuleById as any);\nrouter.post('/courses/:id', protect as any, requireAdmin as any, createModule as any);\nrouter.put('/:id', protect as any, requireAdmin as any, updateModule as any);\nrouter.delete('/:id', protect as any, requireAdmin as any, deleteModule as any);\nrouter.post('/execute', protect as any, executeModule as any);\n\nexport default router; ","size_bytes":619},"Documentations/GMAIL_API_MIGRATION_SUMMARY.md":{"content":"# 🔄 SMTP to Gmail API Migration Summary\n\n## 📋 What Changed\n\n### ❌ Removed (SMTP)\n- `nodemailer` dependency (still installed but not used)\n- SMTP configuration files and environment variables\n- SMTP-based email service implementation\n- SMTP connection testing and fallback mechanisms\n\n### ✅ Added (Gmail API)\n- `googleapis` dependency for Gmail API integration\n- New Gmail API configuration (`server/config/gmail.ts`)\n- Gmail API service (`server/services/gmailService.ts`)\n- Replaced email service with Gmail API service (`server/services/gmailService.ts`)\n- Gmail API setup and testing scripts\n\n## 🔧 Configuration Changes\n\n### Old SMTP Variables (No Longer Used)\n```bash\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=your-email@gmail.com\nSMTP_PASS=your-app-password\n```\n\n### New Gmail API Variables (Required)\n```bash\nGMAIL_CLIENT_ID=your-gmail-client-id\nGMAIL_CLIENT_SECRET=your-gmail-client-secret\nGMAIL_REFRESH_TOKEN=your-gmail-refresh-token\nGMAIL_USER_EMAIL=your-email@gmail.com\n```\n\n## 📁 New Files Created\n\n1. **`server/config/gmail.ts`** - Gmail API configuration\n2. **`server/services/gmailService.ts`** - Gmail API service implementation\n3. **`server/setup-gmail-api.ps1`** - Windows setup script\n4. **`server/generate-refresh-token.js`** - Refresh token generator\n5. **`server/test-gmail-api.js`** - Gmail API testing script\n6. **`Documentations/GMAIL_API_SETUP.md`** - Comprehensive setup guide\n7. **`Documentations/GMAIL_API_MIGRATION_SUMMARY.md`** - This file\n\n## 📁 Files Modified\n\n1. **`server/services/gmailService.ts`** - Handles all email functionality via Gmail API\n2. **`RAILWAY_DEPLOYMENT.md`** - Updated for Gmail API configuration\n\n## 🔄 Migration Steps\n\n### 1. Set Up Gmail API\n```bash\ncd server\nnode generate-refresh-token.js\n```\n\n### 2. Configure Environment Variables\n```bash\n# Run as Administrator\n.\\setup-gmail-api.ps1\n```\n\n### 3. Test Integration\n```bash\nnode test-gmail-api.js\n```\n\n### 4. Restart Server\n```bash\nnpm run dev\n```\n\n## ✅ Benefits of Migration\n\n### Reliability\n- **No More SMTP Issues**: Eliminates SMTP connection problems\n- **Better Uptime**: Gmail API is more stable than SMTP\n- **Automatic Retry**: Built-in retry mechanisms\n\n### Security\n- **OAuth 2.0**: More secure than app passwords\n- **Scoped Access**: Minimal required permissions\n- **Token Rotation**: Easy credential management\n\n### Monitoring\n- **Google Cloud Console**: Detailed API usage analytics\n- **Quota Management**: Built-in rate limiting\n- **Error Tracking**: Better error reporting\n\n## 🚨 Important Notes\n\n### Backward Compatibility\n- **API Interface**: Same method signatures maintained\n- **Email Templates**: All HTML templates preserved\n- **Error Handling**: Comprehensive error handling maintained\n\n### Rollback Plan\nIf you need to revert to SMTP:\n1. Restore original SMTP-based email service\n2. Set SMTP environment variables\n3. Restart server\n\n### Dependencies\n- `googleapis` package is now required\n- `nodemailer` is still installed but not used\n- All existing functionality continues to work\n\n## 🧪 Testing\n\n### Test Commands\n```bash\n# Test Gmail API connection\nnode test-gmail-api.js\n\n# Test email sending\n$env:TEST_EMAIL=\"your-email@gmail.com\"\nnode test-gmail-api.js\n\n# Test from application\n# Try password reset functionality\n```\n\n### Expected Logs\n```\n📧 Gmail API Service initialized successfully\n📧 Using email: your-email@gmail.com\n✅ Gmail API connection verified successfully\n✅ OTP email sent successfully via Gmail API\n```\n\n## 🎯 Next Steps\n\n1. **Complete Setup**: Follow Gmail API setup guide\n2. **Test Integration**: Verify emails are sending correctly\n3. **Update Deployment**: Configure Railway with new variables\n4. **Monitor Usage**: Check Google Cloud Console\n5. **Document Changes**: Update team documentation\n\n## 📚 Documentation\n\n- **Setup Guide**: `Documentations/GMAIL_API_SETUP.md`\n- **Railway Deployment**: `RAILWAY_DEPLOYMENT.md`\n- **API Reference**: [Gmail API Documentation](https://developers.google.com/gmail/api)\n\n## 🆘 Support\n\n### Common Issues\n1. **Invalid Credentials**: Check Client ID, Secret, and Refresh Token\n2. **Permission Denied**: Verify Gmail API is enabled and scopes are correct\n3. **Quota Exceeded**: Check daily sending limits in Google Cloud Console\n\n### Debug Steps\n1. Run `node test-gmail-api.js`\n2. Check environment variables\n3. Review Google Cloud Console setup\n4. Check application logs\n\n---\n\n**Migration Status**: ✅ Complete  \n**Last Updated**: $(Get-Date -Format \"yyyy-MM-dd\")  \n**Version**: 2.0.0 (Gmail API) ","size_bytes":4535},"server/models/ProblemSet.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface IProblemInstance {\n  _id?: mongoose.Types.ObjectId;\n  problemId: number;\n  title?: string;\n  description?: string;\n  difficulty?: 'easy' | 'medium' | 'hard';\n  customTestCases?: any[];\n  customExamples?: any[];\n  customStarterCode?: any;\n  timeLimit?: number;\n  memoryLimit?: number;\n  hints?: string[];\n  constraints?: string;\n  inputFormat?: string;\n  outputFormat?: string;\n  notes?: string;\n  order: number;\n  isCustomized: boolean;\n  lastModified: Date;\n  modifiedBy?: string;\n}\n\nexport interface IProblemSet {\n  id: string;\n  title: string;\n  description?: string;\n  difficulty: string;\n  category?: string;\n  tags?: string[];\n  problemIds: string[];\n  problemInstances?: IProblemInstance[];\n  isPublic: boolean;\n  estimatedTime?: number;\n  totalProblems: number;\n  createdBy: string;\n  participants?: string[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface IProblemSetDocument extends Omit<IProblemSet, 'id'>, Document {\n  _id: mongoose.Types.ObjectId;\n  id: string;\n}\n\nconst problemInstanceSchema = new mongoose.Schema({\n \n  problemId: {\n    type: Number,\n    required: true,\n  },\n  title: {\n    type: String,\n    trim: true,\n  },\n  description: {\n    type: String,\n    trim: true,\n  },\n  difficulty: {\n    type: String,\n    enum: ['easy', 'medium', 'hard'],\n  },\n  customTestCases: [{\n    type: mongoose.Schema.Types.Mixed,\n  }],\n  customExamples: [{\n    type: mongoose.Schema.Types.Mixed,\n  }],\n  customStarterCode: {\n    type: mongoose.Schema.Types.Mixed,\n  },\n  timeLimit: {\n    type: Number,\n    min: [100, 'Time limit must be at least 100ms'],\n  },\n  memoryLimit: {\n    type: Number,\n    min: [16, 'Memory limit must be at least 16MB'],\n  },\n  hints: [{\n    type: String,\n    trim: true,\n  }],\n  constraints: {\n    type: String,\n    trim: true,\n  },\n  inputFormat: {\n    type: String,\n    trim: true,\n  },\n  outputFormat: {\n    type: String,\n    trim: true,\n  },\n  notes: {\n    type: String,\n    trim: true,\n  },\n  order: {\n    type: Number,\n    required: true,\n    min: [1, 'Order must be at least 1'],\n  },\n  isCustomized: {\n    type: Boolean,\n    default: false,\n  },\n  lastModified: {\n    type: Date,\n    default: Date.now,\n  },\n  modifiedBy: {\n    type: String,\n  },\n});\n\nconst problemSetSchema = new mongoose.Schema<IProblemSetDocument>({\n  id: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  title: {\n    type: String,\n    required: [true, 'Problem set title is required'],\n    trim: true,\n  },\n  description: {\n    type: String,\n    trim: true,\n  },\n  difficulty: {\n    type: String,\n    required: [true, 'Problem set difficulty is required'],\n    trim: true,\n  },\n  category: {\n    type: String,\n    trim: true,\n  },\n  tags: [{\n    type: String,\n    trim: true,\n  }],\n  problemIds: [{\n    type: String,\n    required: true,\n  }],\n  problemInstances: [problemInstanceSchema],\n  isPublic: {\n    type: Boolean,\n    default: true,\n  },\n  // Feature flag: allow direct enrollment via QR/link\n  allowDirectEnrollment: {\n    type: Boolean,\n    default: false,\n  },\n  estimatedTime: {\n    type: Number,\n    min: [1, 'Estimated time must be at least 1 minute'],\n  },\n  totalProblems: {\n    type: Number,\n    default: 0,\n    min: [0, 'Total problems cannot be negative'],\n  },\n  createdBy: {\n    type: String,\n    required: true,\n  },\n  participants: [{\n    type: String,\n    index: true,\n    default: undefined,\n  }],\n}, {\n  timestamps: true,\n});\n\n// Indexes for efficient queries\n// problemSetSchema.index({ id: 1 });\nproblemSetSchema.index({ createdBy: 1 });\nproblemSetSchema.index({ isPublic: 1 });\nproblemSetSchema.index({ difficulty: 1 });\nproblemSetSchema.index({ category: 1 });\n\n// Virtual for problem set complexity\nproblemSetSchema.virtual('complexity').get(function() {\n  if (!this.problemInstances || this.problemInstances.length === 0) {\n    return this.difficulty;\n  }\n  \n  const difficulties = this.problemInstances.map(p => p.difficulty).filter(Boolean);\n  if (difficulties.length === 0) return this.difficulty;\n  \n  const difficultyCounts = difficulties.reduce((acc, diff) => {\n    if (diff) {\n      acc[diff] = (acc[diff] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>);\n  \n  const maxCount = Math.max(...Object.values(difficultyCounts));\n  const dominantDifficulty = Object.keys(difficultyCounts).find(diff => \n    difficultyCounts[diff as keyof typeof difficultyCounts] === maxCount\n  );\n  \n  return dominantDifficulty || this.difficulty;\n});\n\n// Method to add problem instance\nproblemSetSchema.methods.addProblemInstance = async function(problemInstance: IProblemInstance) {\n  this.problemInstances.push(problemInstance);\n  this.totalProblems = this.problemInstances.length;\n  return await this.save();\n};\n\n// Method to remove problem instance by problemId\nproblemSetSchema.methods.removeProblemInstance = async function(problemId: number) {\n  this.problemInstances = this.problemInstances.filter((p: IProblemInstance) => p.problemId !== problemId);\n  this.totalProblems = this.problemInstances.length;\n  return await this.save();\n};\n\n// Method to remove problem instance by subdocument _id\nproblemSetSchema.methods.removeProblemInstanceBySubId = async function(instanceId: string | mongoose.Types.ObjectId) {\n  const idStr = instanceId.toString();\n  this.problemInstances = this.problemInstances.filter((p: IProblemInstance) => p._id?.toString() !== idStr);\n  this.totalProblems = this.problemInstances.length;\n  return await this.save();\n};\n\n// Method to reorder problem instances\nproblemSetSchema.methods.reorderProblems = async function(newOrder: number[]) {\n  const reorderedInstances = newOrder.map((problemId, index) => {\n    const instance = this.problemInstances.find((p: IProblemInstance) => p.problemId === problemId);\n    if (instance) {\n      instance.order = index + 1;\n      return instance;\n    }\n    return null;\n  }).filter(Boolean);\n  \n  this.problemInstances = reorderedInstances;\n  return await this.save();\n};\n\n// Static method to find problem sets by difficulty\nproblemSetSchema.statics.findByDifficulty = function(difficulty: string) {\n  return this.find({ difficulty, isPublic: true });\n};\n\n// Static method to find problem sets by category\nproblemSetSchema.statics.findByCategory = function(category: string) {\n  return this.find({ category, isPublic: true });\n};\n\n// Static method to get problem set statistics\nproblemSetSchema.statics.getStats = async function() {\n  const stats = await this.aggregate([\n    {\n      $group: {\n        _id: '$difficulty',\n        count: { $sum: 1 },\n        avgProblems: { $avg: '$totalProblems' },\n        publicCount: {\n          $sum: { $cond: ['$isPublic', 1, 0] }\n        }\n      }\n    }\n  ]);\n  return stats;\n};\n\nexport const ProblemSet = mongoose.model<IProblemSetDocument>('ProblemSet', problemSetSchema); ","size_bytes":6815},"client/src/pages/ProblemSets.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Clock, BookOpen, User, Plus, BarChart3, Lock, CheckCircle } from \"lucide-react\";\n\ninterface ProblemSet {\n  id: string;\n  title: string;\n  description?: string;\n  difficulty: string;\n  category?: string;\n  tags?: string[];\n  problemIds: string[];\n  isPublic: boolean;\n  estimatedTime?: number;\n  totalProblems: number;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  isEnrolled?: boolean;\n  isCompleted?: boolean;\n}\n\nexport default function ProblemSets() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [difficultyFilter, setDifficultyFilter] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const { user } = useAuth();\n\n  const { data: problemSets, isLoading } = useQuery<ProblemSet[]>({\n    queryKey: user ? [\"/api/problem-sets-with-enrollment\"] : [\"/api/problem-sets\"],\n    staleTime: 30000,\n  });\n\n  const filteredProblemSets = problemSets?.filter((problemSet) => {\n    const matchesSearch = problemSet.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         problemSet.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDifficulty = difficultyFilter === \"all\" || problemSet.difficulty === difficultyFilter;\n    const matchesCategory = categoryFilter === \"all\" || problemSet.category === categoryFilter;\n    return matchesSearch && matchesDifficulty && matchesCategory;\n  }) || [];\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case 'easy': return 'bg-green-100 text-green-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'hard': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const categories = Array.from(new Set(problemSets?.map(set => set.category).filter((cat): cat is string => Boolean(cat)))) || [];\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Problem Sets</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Curated collections of programming challenges\n          </p>\n        </div>\n        {user?.role === 'admin' && (\n          <Link href=\"/admin/problem-sets/\">\n            <Button>\n              <User className=\"w-4 h-4 mr-2\" />\n              Manage Assignments\n            </Button>\n          </Link>\n        )}\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search problem sets...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <Select value={difficultyFilter} onValueChange={setDifficultyFilter}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Difficulty\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Difficulties</SelectItem>\n            <SelectItem value=\"easy\">Easy</SelectItem>\n            <SelectItem value=\"medium\">Medium</SelectItem>\n            <SelectItem value=\"hard\">Hard</SelectItem>\n          </SelectContent>\n        </Select>\n        <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Category\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Categories</SelectItem>\n            {categories.map((category) => (\n              <SelectItem key={category} value={category}>{category}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Problem Sets Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredProblemSets.map((problemSet) => (\n            <Card key={problemSet.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg mb-2 flex items-center gap-2\">\n                      {problemSet.title}\n                      {!problemSet.isEnrolled && user?.role !== 'admin' && (\n                        <Lock className=\"w-4 h-4 text-muted-foreground\" />\n                      )}\n                      {problemSet.isCompleted && (\n                        <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                      )}\n                    </CardTitle>\n                    <CardDescription className=\"line-clamp-2\">\n                      {problemSet.description}\n                    </CardDescription>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {/* Difficulty and Category */}\n                  <div className=\"flex gap-2 flex-wrap\">\n                    <Badge className={getDifficultyColor(problemSet.difficulty)}>\n                      {problemSet.difficulty.charAt(0).toUpperCase() + problemSet.difficulty.slice(1)}\n                    </Badge>\n                    {problemSet.category && (\n                      <Badge variant=\"outline\">{problemSet.category}</Badge>\n                    )}\n                  </div>\n\n                  {/* Stats */}\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      <BookOpen className=\"w-4 h-4\" />\n                      <span>{problemSet.totalProblems} problems</span>\n                    </div>\n                    {problemSet.estimatedTime && (\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"w-4 h-4\" />\n                        <span>{problemSet.estimatedTime}min</span>\n                      </div>\n                    )}\n                    {problemSet.isCompleted && (\n                      <div className=\"flex items-center gap-1 text-green-600\">\n                        <CheckCircle className=\"w-4 h-4\" />\n                        <span>Completed</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Tags */}\n                  {problemSet.tags && problemSet.tags.length > 0 && (\n                    <div className=\"flex gap-1 flex-wrap\">\n                      {problemSet.tags.slice(0, 3).map((tag) => (\n                        <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                      {problemSet.tags.length > 3 && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          +{problemSet.tags.length - 3}\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Action Buttons */}\n                  <div className=\"flex gap-2 pt-2\">\n                    {problemSet.isEnrolled || user?.role === 'admin' ? (\n                      <Link href={`/problem-sets/${problemSet.id}`} className=\"flex-1\">\n                        <Button className=\"w-full\" variant={problemSet.isCompleted ? \"secondary\" : \"default\"}>\n                          {problemSet.isCompleted ? (\n                            <>\n                              <CheckCircle className=\"w-4 h-4 mr-2\" />\n                              Completed\n                            </>\n                          ) : (\n                            \"Start Solving\"\n                          )}\n                        </Button>\n                      </Link>\n                    ) : (\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full\" \n                        disabled\n                        title=\"This assignment requires enrollment. Please contact your instructor for access.\"\n                      >\n                        <Lock className=\"w-4 h-4 mr-2\" />\n                        Locked\n                      </Button>\n                    )}\n                    {/* {user?.role === 'admin' && (\n                      <Link href={`/admin/problem-sets`}>\n                        <Button variant=\"outline\" size=\"icon\" title=\"Manage users and enrollments\">\n                          <User className=\"w-4 h-4\" />\n                        </Button>\n                      </Link>\n                    )} */}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {!isLoading && filteredProblemSets.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <BookOpen className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No problem sets found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchTerm || difficultyFilter !== \"all\" || categoryFilter !== \"all\"\n                ? \"Try adjusting your search criteria\"\n                : \"No problem sets have been created yet\"}\n            </p>\n            \n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":10732},"client/src/lib/apiClient.ts":{"content":"import { config } from '@/config';\n\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n\nexport interface ApiResponse<T> {\n  ok: boolean;\n  status: number;\n  data?: T;\n  error?: string;\n}\n\nfunction getAuthHeader(): Record<string, string> {\n  const token = localStorage.getItem('token');\n  return token ? { Authorization: `Bearer ${token}` } : {};\n}\n\nasync function request<T>(method: HttpMethod, path: string, body?: unknown): Promise<ApiResponse<T>> {\n  const url = path.startsWith('http') ? path : `${config.apiUrl}${path}`;\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    ...getAuthHeader(),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: method === 'GET' ? undefined : body ? JSON.stringify(body) : undefined,\n    credentials: 'include',\n  });\n\n  let data: any = undefined;\n  try {\n    const text = await res.text();\n    data = text ? JSON.parse(text) : undefined;\n  } catch {\n    // non-JSON\n  }\n\n  if (!res.ok) {\n    const message = (data && (data.message || data.error)) || `${res.status} ${res.statusText}`;\n    return { ok: false, status: res.status, error: message };\n  }\n\n  return { ok: true, status: res.status, data } as ApiResponse<T>;\n}\n\nexport const apiClient = {\n  get: <T>(path: string) => request<T>('GET', path),\n  post: <T>(path: string, body?: unknown) => request<T>('POST', path, body),\n  put: <T>(path: string, body?: unknown) => request<T>('PUT', path, body),\n  patch: <T>(path: string, body?: unknown) => request<T>('PATCH', path, body),\n  delete: <T>(path: string) => request<T>('DELETE', path),\n}; ","size_bytes":1634},"Documentations/DOCKER_CONNECTION_GUIDE.md":{"content":"# 🐳 Docker Connection Guide for CodeArena Execution System\n\n## 🎯 **Overview**\n\nThis guide explains how to connect to Docker from within containers to enable the CodeArena execution system to spawn language-specific containers for code execution.\n\n---\n\n## 📋 **Available Docker Connection Methods**\n\n### **1. Docker Socket Mounting (Recommended for Development)**\n\n**How it works:** Mount the host Docker socket into the container\n\n**Advantages:**\n- ✅ Simple setup\n- ✅ Direct access to Docker daemon\n- ✅ No additional containers needed\n- ✅ Fast performance\n\n**Disadvantages:**\n- ⚠️ Security risk (container has full Docker access)\n- ⚠️ Host dependency\n- ⚠️ Not portable across different Docker setups\n\n### **2. Docker-in-Docker (DinD)**\n\n**How it works:** Run a separate Docker daemon inside the container\n\n**Advantages:**\n- ✅ Isolated Docker environment\n- ✅ No host Docker socket access\n- ✅ Better security isolation\n\n**Disadvantages:**\n- ⚠️ More complex setup\n- ⚠️ Higher resource usage\n- ⚠️ Potential networking issues\n\n### **3. Remote Docker API**\n\n**How it works:** Connect to Docker daemon via TCP API\n\n**Advantages:**\n- ✅ Works across network\n- ✅ Can connect to remote Docker hosts\n- ✅ API-based access\n\n**Disadvantages:**\n- ⚠️ Network latency\n- ⚠️ Security configuration needed\n- ⚠️ Firewall considerations\n\n---\n\n## 🔧 **Implementation Examples**\n\n### **Method 1: Docker Socket Mounting (Current Implementation)**\n\n#### **Dockerfile for Worker**\n```dockerfile\n# Dockerfile.worker\nFROM node:18-alpine\n\n# Install Docker CLI\nRUN apk add --no-cache docker-cli curl bash tini\n\nWORKDIR /app\nCOPY queue/package*.json ./\nRUN npm ci --only=production\n\nCOPY queue/src ./src\n\n# Create user with Docker access\nRUN addgroup -g 1001 -S worker && \\\n    adduser -S worker -u 1001 -G worker && \\\n    adduser worker docker\n\nUSER worker\nEXPOSE 3002\nENTRYPOINT [\"/sbin/tini\", \"--\"]\nCMD [\"node\", \"src/worker.js\"]\n```\n\n#### **Docker Compose Configuration**\n```yaml\nversion: '3.8'\nservices:\n  worker:\n    build:\n      dockerfile: Dockerfile.worker\n    volumes:\n      # Mount Docker socket\n      - /var/run/docker.sock:/var/run/docker.sock:rw\n    environment:\n      - DOCKER_HOST=unix:///var/run/docker.sock\n    privileged: true  # Required for Docker operations\n```\n\n#### **Kubernetes Configuration**\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: execution-worker\nspec:\n  template:\n    spec:\n      containers:\n      - name: worker\n        image: codearena/execution-worker\n        volumeMounts:\n        - name: docker-sock\n          mountPath: /var/run/docker.sock\n        securityContext:\n          privileged: true\n          runAsUser: 0  # Root required for Docker socket access\n      volumes:\n      - name: docker-sock\n        hostPath:\n          path: /var/run/docker.sock\n          type: Socket\n```\n\n---\n\n### **Method 2: Docker-in-Docker (DinD)**\n\n#### **Dockerfile for DinD Worker**\n```dockerfile\n# Dockerfile.worker-dind\nFROM docker:20.10-dind\n\n# Install Node.js\nRUN apk add --no-cache nodejs npm curl bash tini\n\nWORKDIR /app\nCOPY queue/package*.json ./\nRUN npm ci --only=production\n\nCOPY queue/src ./src\n\n# Start Docker daemon and app\nCOPY start-dind.sh /start-dind.sh\nRUN chmod +x /start-dind.sh\n\nEXPOSE 3002\nENTRYPOINT [\"/sbin/tini\", \"--\"]\nCMD [\"/start-dind.sh\"]\n```\n\n#### **Start Script for DinD**\n```bash\n#!/bin/bash\n# start-dind.sh\n\n# Start Docker daemon in background\ndockerd &\n\n# Wait for Docker to be ready\necho \"Waiting for Docker daemon...\"\nwhile ! docker info >/dev/null 2>&1; do\n    sleep 1\ndone\n\necho \"Docker daemon ready, starting worker...\"\n# Start the worker application\nexec node src/worker.js\n```\n\n#### **Docker Compose for DinD**\n```yaml\nversion: '3.8'\nservices:\n  worker-dind:\n    build:\n      dockerfile: Dockerfile.worker-dind\n    privileged: true  # Required for DinD\n    environment:\n      - DOCKER_TLS_CERTDIR=\"\"  # Disable TLS for simplicity\n    volumes:\n      - worker_docker:/var/lib/docker\n\nvolumes:\n  worker_docker:\n```\n\n---\n\n### **Method 3: Remote Docker API**\n\n#### **Dockerfile for Remote API**\n```dockerfile\n# Dockerfile.worker-remote\nFROM node:18-alpine\n\nRUN apk add --no-cache curl bash tini\n\nWORKDIR /app\nCOPY queue/package*.json ./\nRUN npm ci --only=production\n\n# Install dockerode for remote API access\nRUN npm install dockerode\n\nCOPY queue/src ./src\n\nUSER 1001\nEXPOSE 3002\nENTRYPOINT [\"/sbin/tini\", \"--\"]\nCMD [\"node\", \"src/worker.js\"]\n```\n\n#### **Worker Configuration for Remote API**\n```javascript\n// In worker.js\nconst Docker = require('dockerode');\n\n// Connect to remote Docker daemon\nconst docker = new Docker({\n  host: process.env.DOCKER_HOST || 'localhost',\n  port: process.env.DOCKER_PORT || 2376,\n  protocol: 'http'\n});\n\n// Or with TLS\nconst dockerTLS = new Docker({\n  host: 'remote-docker-host',\n  port: 2376,\n  ca: fs.readFileSync('ca.pem'),\n  cert: fs.readFileSync('cert.pem'),\n  key: fs.readFileSync('key.pem')\n});\n```\n\n---\n\n## 🛡️ **Security Considerations**\n\n### **Docker Socket Mounting Risks**\n```yaml\n# ❌ INSECURE - Full Docker access\nvolumes:\n  - /var/run/docker.sock:/var/run/docker.sock:rw\n\n# ✅ BETTER - Read-only socket (if possible)\nvolumes:\n  - /var/run/docker.sock:/var/run/docker.sock:ro\n\n# ✅ BEST - Use specific capabilities\nsecurity_opt:\n  - apparmor:unconfined\ncap_add:\n  - SYS_ADMIN\ncap_drop:\n  - ALL\n```\n\n### **Kubernetes Security Context**\n```yaml\nsecurityContext:\n  # Limit privileges\n  allowPrivilegeEscalation: false\n  readOnlyRootFilesystem: true\n  runAsNonRoot: false  # Required for Docker socket\n  runAsUser: 0\n  capabilities:\n    add:\n      - SYS_ADMIN\n    drop:\n      - ALL\n```\n\n### **Network Security**\n```yaml\n# Limit network access\nnetworkPolicy:\n  podSelector:\n    matchLabels:\n      app: execution-worker\n  policyTypes:\n  - Ingress\n  - Egress\n  egress:\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 6379  # Redis only\n```\n\n---\n\n## 🚀 **Quick Setup Instructions**\n\n### **For Local Development**\n\n**1. Using Docker Compose (Recommended)**\n```bash\n# Navigate to execution system\ncd execution-system\n\n# Start with Docker socket mounting\ndocker-compose up -d\n\n# Verify worker can access Docker\ndocker-compose exec worker docker ps\n```\n\n**2. Manual Docker Run**\n```bash\n# Build worker image\ndocker build -f Dockerfile.worker -t execution-worker .\n\n# Run with Docker socket\ndocker run -d \\\n  --name execution-worker \\\n  -v /var/run/docker.sock:/var/run/docker.sock:rw \\\n  --privileged \\\n  execution-worker\n```\n\n### **For Kubernetes Production**\n\n**1. Apply Worker Deployment**\n```bash\n# Deploy with proper RBAC and security context\nkubectl apply -f k8s/worker.yaml\n\n# Check pods\nkubectl get pods -n codearena-execution\n\n# Check worker logs\nkubectl logs -f deployment/execution-worker -n codearena-execution\n```\n\n**2. Verify Docker Connectivity**\n```bash\n# Test Docker access from worker pod\nkubectl exec -it deployment/execution-worker -n codearena-execution -- docker ps\n\n# Should show running containers or empty list\n```\n\n---\n\n## 🔍 **Testing Docker Connection**\n\n### **Test Script**\n```bash\n#!/bin/bash\n# test-docker-connection.sh\n\necho \"🐳 Testing Docker connection from worker...\"\n\n# Test 1: Docker version\necho \"1. Testing Docker version...\"\ndocker --version\n\n# Test 2: Docker daemon connection\necho \"2. Testing Docker daemon connection...\"\ndocker info\n\n# Test 3: Pull test image\necho \"3. Testing image pull...\"\ndocker pull hello-world\n\n# Test 4: Run test container\necho \"4. Testing container execution...\"\ndocker run --rm hello-world\n\n# Test 5: List containers\necho \"5. Testing container listing...\"\ndocker ps -a\n\necho \"✅ Docker connection test complete!\"\n```\n\n### **Worker Health Check**\n```javascript\n// In worker.js - Add health check endpoint\napp.get('/health', async (req, res) => {\n  try {\n    // Test Docker connection\n    await docker.ping();\n    \n    // Test Redis connection\n    await queue.isReady();\n    \n    res.json({\n      status: 'healthy',\n      docker: 'connected',\n      redis: 'connected',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n```\n\n---\n\n## 📊 **Monitoring Docker Connection**\n\n### **Metrics to Track**\n```javascript\n// Docker connection metrics\nconst dockerMetrics = {\n  containersRunning: await docker.listContainers().length,\n  imagesCount: await docker.listImages().length,\n  dockerVersion: await docker.version(),\n  dockerInfo: await docker.info()\n};\n```\n\n### **Health Monitoring**\n```bash\n# Monitor Docker daemon health\nwatch -n 5 'docker system df'\n\n# Monitor container resource usage\nwatch -n 5 'docker stats --no-stream'\n\n# Monitor worker logs for Docker errors\nkubectl logs -f deployment/execution-worker -n codearena-execution | grep -i docker\n```\n\n---\n\n## 🎯 **Troubleshooting Common Issues**\n\n### **1. Permission Denied Errors**\n```bash\n# Add user to docker group\nusermod -aG docker worker\n\n# Or run as root (less secure)\nUSER root\n```\n\n### **2. Socket Not Found**\n```bash\n# Verify Docker socket exists\nls -la /var/run/docker.sock\n\n# Check Docker daemon is running\nsystemctl status docker\n```\n\n### **3. Kubernetes Pod Security Issues**\n```yaml\n# Add security context\nsecurityContext:\n  privileged: true\n  runAsUser: 0\n```\n\n### **4. Network Connectivity Issues**\n```bash\n# Test from inside container\ndocker exec -it worker-container ping docker-daemon-host\n\n# Check firewall rules\niptables -L\n```\n\n---\n\n## ✅ **Verification Checklist**\n\n- [ ] **Docker CLI installed** in worker container\n- [ ] **Docker socket mounted** correctly\n- [ ] **Privileged mode enabled** (if required)\n- [ ] **User permissions** configured for Docker access\n- [ ] **Health checks** verify Docker connectivity\n- [ ] **Security context** properly configured for Kubernetes\n- [ ] **Network policies** allow required connections\n- [ ] **Monitoring** tracks Docker daemon health\n- [ ] **Error handling** manages Docker failures gracefully\n\n---\n\n## 🎉 **Success Verification**\n\n**Your Docker connection is working when:**\n\n```bash\n# From within worker container\ndocker ps                    # Shows containers\ndocker pull alpine          # Can pull images  \ndocker run --rm alpine echo \"test\"  # Can run containers\ncurl http://localhost:3002/health    # Health check passes\n```\n\n**Expected health check response:**\n```json\n{\n  \"status\": \"healthy\",\n  \"docker\": \"connected\",\n  \"redis\": \"connected\",\n  \"timestamp\": \"2024-01-15T10:30:00.000Z\"\n}\n```\n\n---\n\nThis setup enables your CodeArena execution system to securely spawn and manage Docker containers for code execution while maintaining proper isolation and security! 🚀 ","size_bytes":10691},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/routes/courses.ts":{"content":"import { Router } from 'express';\nimport { protect, requireAdmin } from '../middleware/auth';\nimport {\n  listCourses,\n  createCourse,\n  getCourse,\n  getCourseModules,\n  updateCourse,\n  deleteCourse,\n  enrollInCourse,\n  deleteEnrollment,\n  getEnrollments,\n  getCourseQrCode,\n  getCourseProgress,\n  getUserEnrollments,\n  getUserCourses,\n} from '../controllers/coursesController';\nimport { createModule } from '../controllers/modulesController';\n\nconst router = Router();\n\n// User-specific routes (must come before /:id routes)\nrouter.get('/me/enrollments', protect as any, getUserEnrollments as any);\nrouter.get('/me/courses', protect as any, getUserCourses as any);\n\n// General course routes\nrouter.get('/', protect as any, listCourses as any);\nrouter.post('/', protect as any, requireAdmin as any, createCourse as any);\nrouter.get('/:id', getCourse as any);\nrouter.get('/:id/modules', protect as any, getCourseModules as any);\n// Create a new module for a course (expected by client)\nrouter.post('/:id/modules', protect as any, requireAdmin as any, createModule as any);\nrouter.put('/:id', protect as any, requireAdmin as any, updateCourse as any);\nrouter.delete('/:id', protect as any, requireAdmin as any, deleteCourse as any);\nrouter.post('/:id/enroll', protect as any, enrollInCourse as any);\nrouter.delete('/:id/enrollments/:userId', protect as any, requireAdmin as any, deleteEnrollment as any);\nrouter.get('/:id/enrollments', protect as any, requireAdmin as any, getEnrollments as any);\nrouter.get('/:id/qr-code', protect as any, requireAdmin as any, getCourseQrCode as any);\nrouter.get('/:id/progress', protect as any, getCourseProgress as any);\n\n// Module completion route\nrouter.post('/:courseId/modules/:moduleId/complete', protect as any, async (req: any, res: any) => {\n  try {\n    const courseId = parseInt(req.params.courseId);\n    const moduleId = parseInt(req.params.moduleId);\n    const userId = req.user.id;\n    const { timeSpent, notes } = req.body;\n    \n    console.log(`[DEBUG] Module completion request - User: ${userId}, Course: ${courseId}, Module: ${moduleId}`);\n    \n    // Check if user can access this course\n    const isAdmin = req.user.role === 'admin';\n    const { storage } = await import('../storage');\n    const canAccess = await storage.canUserAccessCourse(courseId, userId, isAdmin);\n    if (!canAccess) {\n      return res.status(403).json({ message: \"Access denied: You must be enrolled in this course to complete modules\" });\n    }\n    \n    // Use storage layer method which has the correct progress calculation\n    await storage.markModuleComplete(userId, moduleId, courseId, timeSpent, notes);\n    \n    res.json({ success: true, message: 'Module marked as complete' });\n  } catch (error) {\n    console.error('Error marking module as complete:', error);\n    res.status(500).json({ message: 'Failed to mark module as complete' });\n  }\n});\n\nexport default router; ","size_bytes":2902},"test_files/test-docker-execution.js":{"content":"import axios from 'axios';\n\nconst BASE_URL = 'http://localhost:3000'; // CodeArena server\nconst DOCKER_API_URL = 'http://localhost:3001'; // Docker execution API\n\nasync function testDockerExecution() {\n  console.log('🧪 Testing Docker Code Execution Integration');\n  console.log('============================================\\n');\n\n  // Test 1: Check if Docker API is running\n  console.log('1. Testing Docker API availability...');\n  try {\n    const healthResponse = await axios.get(`${DOCKER_API_URL}/health`, { timeout: 5000 });\n    console.log('✅ Docker API is running');\n    console.log(`   Status: ${healthResponse.data.status}`);\n    console.log(`   Languages: ${healthResponse.data.languages.join(', ')}`);\n  } catch (error) {\n    console.log('❌ Docker API is not running');\n    console.log(`   Error: ${error.message}`);\n    return;\n  }\n\n  // Test 2: Test direct Docker API execution\n  console.log('\\n2. Testing direct Docker API execution...');\n  try {\n    const testCode = {\n      code: \"print('Hello from Docker API!')\",\n      language: 'python'\n    };\n\n    const directResponse = await axios.post(`${DOCKER_API_URL}/api/execute`, testCode, {\n      headers: { 'Content-Type': 'application/json' },\n      timeout: 30000\n    });\n\n    console.log('✅ Direct Docker API execution successful');\n    console.log(`   Output: ${directResponse.data.output}`);\n    console.log(`   Runtime: ${directResponse.data.runtime}ms`);\n  } catch (error) {\n    console.log('❌ Direct Docker API execution failed');\n    console.log(`   Error: ${error.response?.data || error.message}`);\n  }\n\n  // Test 3: Test CodeArena server execution\n  console.log('\\n3. Testing CodeArena server execution...');\n  try {\n    const testCode = {\n      code: \"print('Hello from CodeArena!')\",\n      language: 'python'\n    };\n\n    const serverResponse = await axios.post(`${BASE_URL}/api/execute`, testCode, {\n      headers: { \n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer dummy-token' // May need auth\n      },\n      timeout: 30000\n    });\n\n    console.log('✅ CodeArena server execution successful');\n    console.log(`   Output: ${serverResponse.data.output}`);\n    console.log(`   Runtime: ${serverResponse.data.runtime}ms`);\n  } catch (error) {\n    console.log('❌ CodeArena server execution failed');\n    console.log(`   Status: ${error.response?.status}`);\n    console.log(`   Error: ${error.response?.data?.message || error.message}`);\n  }\n\n  // Test 4: Test problem run endpoint\n  console.log('\\n4. Testing problem run endpoint...');\n  try {\n    const testCode = {\n      problemId: 1,\n      code: \"print('Hello from Problem Run!')\",\n      language: 'python'\n    };\n\n    const problemResponse = await axios.post(`${BASE_URL}/api/problems/run`, testCode, {\n      headers: { \n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer dummy-token' // May need auth\n      },\n      timeout: 30000\n    });\n\n    console.log('✅ Problem run endpoint successful');\n    console.log(`   Status: ${problemResponse.data.status}`);\n    console.log(`   Output: ${problemResponse.data.output}`);\n  } catch (error) {\n    console.log('❌ Problem run endpoint failed');\n    console.log(`   Status: ${error.response?.status}`);\n    console.log(`   Error: ${error.response?.data?.message || error.message}`);\n  }\n\n  console.log('\\n============================================');\n  console.log('🔍 Test Summary:');\n  console.log('   If all tests pass, Docker execution is working!');\n  console.log('   If tests fail, check the server logs for details.');\n  console.log('============================================');\n}\n\n// Run the test\ntestDockerExecution().catch(console.error); ","size_bytes":3700},"execution-system/queue/src/logger.js":{"content":"const winston = require('winston');\nconst config = require('./config');\n\n// Custom format for console output\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({\n    format: 'YYYY-MM-DD HH:mm:ss'\n  }),\n  winston.format.errors({ stack: true }),\n  winston.format.printf(({ level, message, timestamp, stack }) => {\n    return `${timestamp} [${level.toUpperCase()}]: ${stack || message}`;\n  })\n);\n\n// JSON format for file output\nconst jsonFormat = winston.format.combine(\n  winston.format.timestamp(),\n  winston.format.errors({ stack: true }),\n  winston.format.json()\n);\n\n// Create transports array\nconst transports = [\n  new winston.transports.Console({\n    format: config.logging.format === 'json' ? jsonFormat : consoleFormat,\n    level: config.logging.level\n  })\n];\n\n// Add file transport if configured\nif (config.logging.file) {\n  transports.push(\n    new winston.transports.File({\n      filename: config.logging.file,\n      format: jsonFormat,\n      level: config.logging.level,\n      maxsize: config.logging.maxSize,\n      maxFiles: config.logging.maxFiles,\n      tailable: true\n    })\n  );\n}\n\n// Create logger instance\nconst logger = winston.createLogger({\n  level: config.logging.level,\n  format: jsonFormat,\n  transports,\n  exitOnError: false,\n  silent: process.env.NODE_ENV === 'test'\n});\n\n// Add request ID to logs\nlogger.addRequestId = (requestId) => {\n  return logger.child({ requestId });\n};\n\nmodule.exports = logger; ","size_bytes":1451},"client/src/config.ts":{"content":"// Environment configuration with proper fallbacks\nconst getApiUrl = (): string => {\n  // First try environment variable\n  if (import.meta.env.VITE_API_URL) {\n    // --- ADDED LOG ---\n    console.log(\"✅ API URL loaded from .env file\");\n    return import.meta.env.VITE_API_URL;\n  }\n  \n  // Fallback for browser environment\n  if (typeof window !== 'undefined') {\n    const apiPort = import.meta.env.VITE_API_PORT || '3001';\n    // --- ADDED LOG ---\n    console.warn(\"⚠️ API URL not found in .env, falling back to dynamic URL.\");\n    return `${window.location.protocol}//${window.location.hostname}:${apiPort}`;\n  }\n  \n  // Default fallback for SSR or build time\n  return 'http://localhost:3001';\n};\n\nconst getFrontendUrl = (): string => {\n  // First try environment variable\n  if (import.meta.env.VITE_FRONTEND_URL) {\n    // --- ADDED LOG ---\n    console.log(\"✅ Frontend URL loaded from .env file\");\n    return import.meta.env.VITE_FRONTEND_URL;\n  }\n  \n  // Fallback for browser environment\n  if (typeof window !== 'undefined') {\n    // --- ADDED LOG ---\n    console.warn(\"⚠️ Frontend URL not found in .env, falling back to window.location.origin.\");\n    return window.location.origin;\n  }\n  \n  // Default fallback\n  return 'http://localhost:5000';\n};\n\nconst getExecutionApiUrl = (): string => {\n  // First try environment variable\n  if (import.meta.env.VITE_EXECUTION_API_URL) {\n    // --- ADDED LOG ---\n    console.log(\"✅ Execution API URL loaded from .env file\");\n    return import.meta.env.VITE_EXECUTION_API_URL;\n  }\n  \n  // Fallback for browser environment\n  if (typeof window !== 'undefined') {\n    // --- ADDED LOG ---\n    console.warn(\"⚠️ Execution API URL not found in .env, falling back to dynamic URL.\");\n    return `${window.location.protocol}//${window.location.hostname}:3000`;\n  }\n  \n  // Default fallback\n  return 'http://localhost:3000';\n};\n\n\n// Main configuration object\nexport const config = {\n  apiUrl: getApiUrl(),\n  frontendUrl: getFrontendUrl(),\n  executionApiUrl: getExecutionApiUrl(),\n  env: import.meta.env.MODE || 'development',\n  isDevelopment: import.meta.env.MODE === 'development',\n  isProduction: import.meta.env.MODE === 'production',\n  \n  // Feature flags\n  features: {\n    contests: import.meta.env.VITE_ENABLE_CONTESTS !== 'false',\n    courses: import.meta.env.VITE_ENABLE_COURSES !== 'false',\n    analytics: import.meta.env.VITE_ENABLE_ANALYTICS !== 'false',\n  },\n  \n  // Debug settings\n  debug: {\n    enabled: import.meta.env.VITE_DEBUG_MODE === 'true',\n    logLevel: import.meta.env.VITE_LOG_LEVEL || 'info',\n  },\n  \n  // Google OAuth\n  google: {\n    clientId: import.meta.env.VITE_GOOGLE_CLIENT_ID || '',\n  },\n} as const;\n\n// API endpoints\nexport const endpoints = {\n  // Authentication\n  register: `${config.apiUrl}/api/auth/register`,\n  login: `${config.apiUrl}/api/auth/login`,\n  logout: `${config.apiUrl}/api/auth/logout`,\n  googleAuth: `${config.apiUrl}/api/auth/google`,\n  user: `${config.apiUrl}/api/auth/user`,\n  verifyEmail: `${config.apiUrl}/api/auth/verify-email`,\n  resendVerification: `${config.apiUrl}/api/auth/resend-verification`,\n  refreshToken: `${config.apiUrl}/api/auth/refresh`,\n  \n  // Core features\n  problems: `${config.apiUrl}/api/problems`,\n  submissions: `${config.apiUrl}/api/submissions`,\n  contests: `${config.apiUrl}/api/contests`,\n  courses: `${config.apiUrl}/api/courses`,\n  \n  // User features\n  profile: `${config.apiUrl}/api/profile`,\n  settings: `${config.apiUrl}/api/settings`,\n  leaderboard: `${config.apiUrl}/api/leaderboard`,\n  \n  // Admin features\n  admin: `${config.apiUrl}/api/admin`,\n  analytics: `${config.apiUrl}/api/analytics`,\n  \n  // System\n  health: `${config.apiUrl}/health`,\n  \n  // Execution system\n  executeCode: `${config.executionApiUrl}/api/problems/run`,\n  executionHealth: `${config.executionApiUrl}/health`,\n} as const;\n\n// API configuration\nexport const apiConfig = {\n  timeout: parseInt(import.meta.env.VITE_API_TIMEOUT || '10000'),\n  retries: parseInt(import.meta.env.VITE_API_RETRIES || '3'),\n  retryDelay: parseInt(import.meta.env.VITE_API_RETRY_DELAY || '1000'),\n} as const;\n\n// Validation helper\nexport const validateConfig = () => {\n  const errors: string[] = [];\n  \n  if (!config.apiUrl) {\n    errors.push('API URL is not configured');\n  }\n  \n  if (!config.frontendUrl) {\n    errors.push('Frontend URL is not configured');\n  }\n  \n  if (config.features.contests && !endpoints.contests) {\n    errors.push('Contests feature is enabled but contests endpoint is not configured');\n  }\n  \n  if (errors.length > 0) {\n    console.error('Configuration errors:', errors);\n    return false;\n  }\n  \n  return true;\n};\n\n// This block is already set up to log your config!\nif (config.debug.enabled) {\n  console.log('🔧 Client Configuration Summary:', {\n    apiUrl: config.apiUrl,\n    frontendUrl: config.frontendUrl,\n    executionApiUrl: config.executionApiUrl,\n    environment: config.env,\n    features: config.features,\n    debug: config.debug,\n  });\n  \n  // Validate configuration in development\n  validateConfig();\n}\n\n// Export types for TypeScript\nexport type Config = typeof config;\nexport type Endpoints = typeof endpoints;\nexport type ApiConfig = typeof apiConfig;","size_bytes":5185},"Documentations/GMAIL_API_SETUP.md":{"content":"# 🚀 Gmail API Integration Setup Guide\n\nThis guide will help you set up Gmail API integration to replace the previous SMTP email functionality in CodeArena.\n\n## ✅ What's New\n\n- **Gmail API Integration**: Modern, reliable email sending via Google's Gmail API\n- **No More SMTP**: Eliminates SMTP configuration issues and limitations\n- **Better Reliability**: Gmail API is more stable than SMTP connections\n- **Rate Limiting**: Built-in rate limiting and quota management\n- **Security**: OAuth 2.0 authentication instead of app passwords\n\n## 🔧 Prerequisites\n\n1. **Google Account**: A Gmail account you want to use for sending emails\n2. **Google Cloud Project**: Access to Google Cloud Console\n3. **Administrator Access**: To run the setup script on Windows\n\n## 📋 Step-by-Step Setup\n\n### Step 1: Create Google Cloud Project\n\n1. Go to [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a new project or select an existing one\n3. Note your **Project ID** for later use\n\n### Step 2: Enable Gmail API\n\n1. In your Google Cloud project, go to **APIs & Services** → **Library**\n2. Search for \"Gmail API\"\n3. Click on **Gmail API** and click **Enable**\n\n### Step 3: Create OAuth 2.0 Credentials\n\n1. Go to **APIs & Services** → **Credentials**\n2. Click **Create Credentials** → **OAuth 2.0 Client IDs**\n3. Choose **Desktop application** as the application type\n4. Give it a name (e.g., \"CodeArena Email Service\")\n5. Click **Create**\n6. Download the JSON file with your credentials\n\n### Step 4: Generate Refresh Token\n\n1. **Option A: Use the provided script (Recommended)**\n   ```bash\n   cd server\n   node generate-refresh-token.js\n   ```\n\n2. **Option B: Manual generation**\n   - Use the [Google OAuth 2.0 Playground](https://developers.google.com/oauthplayground/)\n   - Set your OAuth 2.0 credentials\n   - Select Gmail API v1 scope: `https://www.googleapis.com/auth/gmail.send`\n   - Exchange authorization code for refresh token\n\n### Step 5: Set Environment Variables\n\nRun the setup script as Administrator:\n\n```powershell\n# Right-click PowerShell and \"Run as Administrator\"\ncd server\n.\\setup-gmail-api.ps1\n```\n\nOr manually set these environment variables:\n\n```bash\nGMAIL_CLIENT_ID=your-client-id\nGMAIL_CLIENT_SECRET=your-client-secret\nGMAIL_REFRESH_TOKEN=your-refresh-token\nGMAIL_USER_EMAIL=your-email@gmail.com\n```\n\n## 🧪 Testing the Integration\n\n### Test Connection\n\n```bash\ncd server\nnode test-gmail-api.js\n```\n\n### Test Email Sending\n\n```bash\ncd server\n# Set test email address\n$env:TEST_EMAIL=\"your-test-email@gmail.com\"\nnode test-gmail-api.js\n```\n\n### Test from Application\n\n1. Restart your CodeArena server\n2. Try the password reset functionality\n3. Check server logs for Gmail API status\n\n## 📧 Environment Variables\n\n| Variable | Description | Example |\n|----------|-------------|---------|\n| `GMAIL_CLIENT_ID` | OAuth 2.0 Client ID from Google Cloud | `123456789-abcdef.apps.googleusercontent.com` |\n| `GMAIL_CLIENT_SECRET` | OAuth 2.0 Client Secret | `GOCSPX-abcdefghijklmnop` |\n| `GMAIL_REFRESH_TOKEN` | OAuth 2.0 Refresh Token | `1//04abcdefghijklmnop` |\n| `GMAIL_USER_EMAIL` | Gmail address for sending emails | `team.codeareena@gmail.com` |\n\n## 🔒 Security Considerations\n\n- **Never commit credentials** to version control\n- **Use environment variables** for all sensitive data\n- **Rotate refresh tokens** periodically\n- **Monitor API usage** in Google Cloud Console\n- **Set up alerts** for quota limits\n\n## 🚨 Troubleshooting\n\n### Common Issues\n\n#### 1. \"Invalid Credentials\" Error\n- Verify your Client ID and Client Secret\n- Ensure the refresh token is valid and not expired\n- Check that the Gmail API is enabled in your project\n\n#### 2. \"Insufficient Permission\" Error\n- Verify the OAuth scope includes `https://www.googleapis.com/auth/gmail.send`\n- Check that the user account has permission to send emails\n- Ensure the OAuth consent screen is configured properly\n\n#### 3. \"Quota Exceeded\" Error\n- Check your Gmail API quota in Google Cloud Console\n- Gmail API has daily sending limits (typically 100 emails/day for free tier)\n- Consider upgrading to a paid Google Workspace account for higher limits\n\n#### 4. \"Rate Limit Exceeded\" Error\n- Gmail API has rate limits (typically 250 requests/second)\n- Implement exponential backoff in your application\n- Monitor your API usage patterns\n\n### Debug Steps\n\n1. **Check Environment Variables**\n   ```bash\n   echo $env:GMAIL_CLIENT_ID\n   echo $env:GMAIL_CLIENT_SECRET\n   echo $env:GMAIL_REFRESH_TOKEN\n   echo $env:GMAIL_USER_EMAIL\n   ```\n\n2. **Test API Connection**\n   ```bash\n   node test-gmail-api.js\n   ```\n\n3. **Check Server Logs**\n   Look for Gmail API initialization and error messages\n\n4. **Verify Google Cloud Setup**\n   - Check API is enabled\n   - Verify OAuth consent screen\n   - Confirm credential configuration\n\n## 📊 Monitoring and Analytics\n\n### Google Cloud Console\n- **APIs & Services** → **Dashboard**: View API usage\n- **APIs & Services** → **Quotas**: Monitor quota limits\n- **IAM & Admin** → **IAM**: Check permissions\n\n### Application Logs\nThe application logs detailed information about:\n- Gmail API initialization\n- Email sending attempts\n- Success/failure status\n- Error details and recovery attempts\n\n## 🔄 Migration from SMTP\n\n### What Changed\n- **Service**: `gmailService.ts` now handles all email functionality via Gmail API\n- **Configuration**: Gmail API credentials instead of SMTP settings\n- **Authentication**: OAuth 2.0 instead of username/password\n\n### What Remains the Same\n- **Email templates**: Beautiful HTML emails are preserved\n- **API interface**: Same method signatures for sending emails\n- **Error handling**: Comprehensive error handling and fallbacks\n- **Logging**: Detailed logging for debugging and monitoring\n\n### Rollback Plan\nIf you need to revert to SMTP:\n1. Restore the original SMTP-based email service\n2. Set SMTP environment variables\n3. Restart the server\n\n## 🎯 Next Steps\n\n1. **Complete Setup**: Follow all steps above\n2. **Test Integration**: Verify emails are sending correctly\n3. **Monitor Usage**: Check Google Cloud Console for API usage\n4. **Update Documentation**: Update any deployment guides\n5. **Train Team**: Ensure team members understand the new system\n\n## 📚 Additional Resources\n\n- [Gmail API Documentation](https://developers.google.com/gmail/api)\n- [Google Cloud Console](https://console.cloud.google.com/)\n- [OAuth 2.0 Playground](https://developers.google.com/oauthplayground/)\n- [Gmail API Quotas](https://developers.google.com/gmail/api/reference/quota)\n\n## 🆘 Support\n\nIf you encounter issues:\n1. Check this troubleshooting guide\n2. Review Google Cloud Console logs\n3. Check application logs for detailed error messages\n4. Verify all environment variables are set correctly\n5. Ensure you have proper permissions in Google Cloud\n\n---\n\n**Note**: This integration replaces the previous SMTP-based email system. All existing email functionality (password reset, verification, etc.) will continue to work with the new Gmail API backend. ","size_bytes":7017},"client/src/pages/auth/LoginPage.tsx":{"content":"import { LoginForm } from \"@/components/auth/LoginForm\";\nimport { ThemeToggle } from \"@/components/ui/theme-toggle\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport AuthSplitLayout from \"@/components/auth/AuthSplitLayout\";\nimport lightLogo from \"../../assests/light_logo.png\";\nimport lightName from \"../../assests/light_name.png\";\nimport darkLogo from \"../../assests/dark_logo.png\";\nimport darkName from \"../../assests/dark_name.png\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n\n  // COMPLETELY DISABLE LoginPage redirects - let LoginForm handle ALL redirects\n  // This prevents conflicts between LoginPage and LoginForm\n  console.log('[DEBUG] LoginPage rendered, auth state:', isAuthenticated);\n\n  return (\n    <div className=\"min-h-screen \">\n      <AuthSplitLayout title=\"Welcome Back!\">\n        <LoginForm plain />\n      </AuthSplitLayout>\n    </div>\n  );\n} ","size_bytes":985},"server/models/MaintenanceConfig.ts":{"content":"import mongoose, { Document, Schema } from 'mongoose';\n\nexport interface IMaintenanceConfig extends Document {\n  isMaintenanceMode: boolean;\n  maintenanceFrom: string;\n  maintenanceTo: string;\n  isMaintenanceActive: boolean;\n  isPreMaintenanceWarning: boolean;\n  lastUpdated: Date;\n  updatedBy: string; // Admin user ID who made the change\n}\n\nconst MaintenanceConfigSchema = new Schema<IMaintenanceConfig>({\n  isMaintenanceMode: {\n    type: Boolean,\n    default: false,\n    required: true\n  },\n  maintenanceFrom: {\n    type: String,\n    default: '',\n    required: false\n  },\n  maintenanceTo: {\n    type: String,\n    default: '',\n    required: false\n  },\n  isMaintenanceActive: {\n    type: Boolean,\n    default: false,\n    required: true\n  },\n  isPreMaintenanceWarning: {\n    type: Boolean,\n    default: false,\n    required: true\n  },\n  lastUpdated: {\n    type: Date,\n    default: Date.now,\n    required: true\n  },\n  updatedBy: {\n    type: String,\n    required: true\n  }\n}, {\n  timestamps: true\n});\n\n// Ensure only one maintenance config document exists\nMaintenanceConfigSchema.index({}, { unique: true });\n\nexport const MaintenanceConfig = mongoose.model<IMaintenanceConfig>('MaintenanceConfig', MaintenanceConfigSchema);\n","size_bytes":1222},"client/src/contexts/MaintenanceModeContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface MaintenanceModeContextType {\n  isMaintenanceMode: boolean;\n  maintenanceFrom: string;\n  maintenanceTo: string;\n  timeUntilMaintenance: number | null; // minutes until maintenance starts\n  timeUntilMaintenanceEnd: number | null; // minutes until maintenance ends\n  isMaintenanceActive: boolean;\n  isPreMaintenanceWarning: boolean;\n  lastUpdated: string | null;\n  toggleMaintenanceMode: () => void;\n  setMaintenanceMode: (enabled: boolean) => void;\n  setMaintenanceTimes: (from: string, to: string) => void;\n}\n\nconst MaintenanceModeContext = createContext<MaintenanceModeContextType | undefined>(undefined);\n\ninterface MaintenanceModeProviderProps {\n  children: ReactNode;\n}\n\nexport function MaintenanceModeProvider({ children }: MaintenanceModeProviderProps) {\n  const [isMaintenanceMode, setIsMaintenanceMode] = useState(false);\n  const [maintenanceFrom, setMaintenanceFrom] = useState('');\n  const [maintenanceTo, setMaintenanceTo] = useState('');\n  const [timeUntilMaintenance, setTimeUntilMaintenance] = useState<number | null>(null);\n  const [timeUntilMaintenanceEnd, setTimeUntilMaintenanceEnd] = useState<number | null>(null);\n  const [isMaintenanceActive, setIsMaintenanceActive] = useState(false);\n  const [isPreMaintenanceWarning, setIsPreMaintenanceWarning] = useState(false);\n  const [lastUpdated, setLastUpdated] = useState<string | null>(null);\n\n  // Fetch maintenance status from server every 5 seconds\n  const { data: serverStatus } = useQuery({\n    queryKey: ['/api/admin/maintenance/status'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/maintenance/status');\n      if (!response.ok) {\n        throw new Error('Failed to fetch maintenance status');\n      }\n      return response.json();\n    },\n    refetchInterval: 2000, // Poll every 2 seconds for faster response\n    retry: false,\n    refetchOnWindowFocus: true,\n    refetchOnMount: true\n  });\n\n  // Update local state when server status changes\n  useEffect(() => {\n    if (serverStatus) {\n      console.log('=== MAINTENANCE CONTEXT UPDATE ===');\n      console.log('Server Status Update:', serverStatus);\n      console.log('Current local state before update:', {\n        isMaintenanceMode,\n        maintenanceFrom,\n        maintenanceTo,\n        isMaintenanceActive,\n        isPreMaintenanceWarning\n      });\n      \n      const newMaintenanceMode = serverStatus.isMaintenanceMode;\n      const newMaintenanceFrom = serverStatus.maintenanceFrom || '';\n      const newMaintenanceTo = serverStatus.maintenanceTo || '';\n      \n      console.log('Updating to:', {\n        isMaintenanceMode: newMaintenanceMode,\n        maintenanceFrom: newMaintenanceFrom,\n        maintenanceTo: newMaintenanceTo,\n        isMaintenanceActive: serverStatus.isMaintenanceActive,\n        isPreMaintenanceWarning: serverStatus.isPreMaintenanceWarning\n      });\n      \n      setIsMaintenanceMode(newMaintenanceMode);\n      setMaintenanceFrom(newMaintenanceFrom);\n      setMaintenanceTo(newMaintenanceTo);\n      setIsMaintenanceActive(serverStatus.isMaintenanceActive);\n      setIsPreMaintenanceWarning(serverStatus.isPreMaintenanceWarning);\n      setLastUpdated(serverStatus.lastUpdated);\n      \n      console.log('=== CONTEXT UPDATE COMPLETE ===');\n    }\n  }, [serverStatus]);\n\n  // Ensure maintenance is not active when maintenance mode is off\n  useEffect(() => {\n    if (!isMaintenanceMode) {\n      setIsMaintenanceActive(false);\n      setIsPreMaintenanceWarning(false);\n    }\n  }, [isMaintenanceMode]);\n\n  // Calculate time until maintenance\n  useEffect(() => {\n    if (!isMaintenanceMode || !maintenanceFrom || !maintenanceTo) {\n      setTimeUntilMaintenance(null);\n      setTimeUntilMaintenanceEnd(null);\n      return;\n    }\n\n    const updateTimes = () => {\n      const now = new Date();\n      const fromTime = new Date(`${now.toDateString()} ${maintenanceFrom}`);\n      const toTime = new Date(`${now.toDateString()} ${maintenanceTo}`);\n      \n      // If maintenance times are for tomorrow\n      if (fromTime <= now) {\n        fromTime.setDate(fromTime.getDate() + 1);\n        toTime.setDate(toTime.getDate() + 1);\n      }\n\n      const minutesUntilStart = Math.floor((fromTime.getTime() - now.getTime()) / (1000 * 60));\n      const minutesUntilEnd = Math.floor((toTime.getTime() - now.getTime()) / (1000 * 60));\n\n      setTimeUntilMaintenance(minutesUntilStart);\n      setTimeUntilMaintenanceEnd(minutesUntilEnd);\n    };\n\n    updateTimes();\n    const interval = setInterval(updateTimes, 60000); // Update every minute\n\n    return () => clearInterval(interval);\n  }, [isMaintenanceMode, maintenanceFrom, maintenanceTo]);\n\n  const toggleMaintenanceMode = () => {\n    setIsMaintenanceMode(prev => !prev);\n  };\n\n  const setMaintenanceMode = (enabled: boolean) => {\n    setIsMaintenanceMode(enabled);\n  };\n\n  const setMaintenanceTimes = (from: string, to: string) => {\n    setMaintenanceFrom(from);\n    setMaintenanceTo(to);\n  };\n\n  return (\n    <MaintenanceModeContext.Provider\n      value={{\n        isMaintenanceMode,\n        maintenanceFrom,\n        maintenanceTo,\n        timeUntilMaintenance,\n        timeUntilMaintenanceEnd,\n        isMaintenanceActive,\n        isPreMaintenanceWarning,\n        lastUpdated,\n        toggleMaintenanceMode,\n        setMaintenanceMode,\n        setMaintenanceTimes,\n      }}\n    >\n      {children}\n    </MaintenanceModeContext.Provider>\n  );\n}\n\nexport function useMaintenanceMode() {\n  const context = useContext(MaintenanceModeContext);\n  if (context === undefined) {\n    throw new Error('useMaintenanceMode must be used within a MaintenanceModeProvider');\n  }\n  return context;\n}","size_bytes":5742},"server/models/ModuleProgress.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface IModuleProgress {\n  id: number;\n  moduleId: number;\n  userId: string;\n  courseId: number;\n  isCompleted: boolean;\n  timeSpent: number;\n  completedAt?: Date;\n  notes?: string;\n  bookmarked: boolean;\n}\n\ninterface IModuleProgressDocument extends Omit<IModuleProgress, 'id'>, Document {\n  _id: mongoose.Types.ObjectId;\n  id: number;\n}\n\nconst moduleProgressSchema = new mongoose.Schema<IModuleProgressDocument>({\n  id: {\n    type: Number,\n    required: true,\n    unique: true,\n  },\n  moduleId: {\n    type: Number,\n    required: [true, 'Module ID is required'],\n    index: true,\n  },\n  userId: {\n    type: String,\n    required: [true, 'User ID is required'],\n    index: true,\n  },\n  courseId: {\n    type: Number,\n    required: [true, 'Course ID is required'],\n    index: true,\n  },\n  isCompleted: {\n    type: Boolean,\n    default: false,\n  },\n  timeSpent: {\n    type: Number,\n    default: 0,\n    min: [0, 'Time spent cannot be negative'],\n  },\n  completedAt: {\n    type: Date,\n  },\n  notes: {\n    type: String,\n    trim: true,\n  },\n  bookmarked: {\n    type: Boolean,\n    default: false,\n  },\n}, {\n  timestamps: true,\n});\n\n// Compound index for unique module progress per user\nmoduleProgressSchema.index({ moduleId: 1, userId: 1 }, { unique: true });\nmoduleProgressSchema.index({ courseId: 1, userId: 1 });\nmoduleProgressSchema.index({ id: 1 });\n\n// Virtual for time spent in minutes\nmoduleProgressSchema.virtual('timeSpentMinutes').get(function() {\n  return Math.round(this.timeSpent / 60);\n});\n\n// Method to mark as completed\nmoduleProgressSchema.methods.markCompleted = async function(timeSpent?: number) {\n  this.isCompleted = true;\n  this.completedAt = new Date();\n  if (timeSpent !== undefined) {\n    this.timeSpent = timeSpent;\n  }\n  return await this.save();\n};\n\n// Method to update time spent\nmoduleProgressSchema.methods.updateTimeSpent = async function(timeSpent: number) {\n  this.timeSpent = Math.max(0, timeSpent);\n  return await this.save();\n};\n\n// Method to toggle bookmark\nmoduleProgressSchema.methods.toggleBookmark = async function() {\n  this.bookmarked = !this.bookmarked;\n  return await this.save();\n};\n\n// Method to add notes\nmoduleProgressSchema.methods.addNotes = async function(notes: string) {\n  this.notes = notes;\n  return await this.save();\n};\n\n// Static method to find progress by user and course\nmoduleProgressSchema.statics.findByUserAndCourse = function(userId: string, courseId: number) {\n  return this.find({ userId, courseId }).sort({ moduleId: 1 });\n};\n\n// Static method to find completed modules for user\nmoduleProgressSchema.statics.findCompletedByUser = function(userId: string, courseId?: number) {\n  const query: any = { userId, isCompleted: true };\n  if (courseId) query.courseId = courseId;\n  return this.find(query);\n};\n\n// Static method to get course completion percentage\nmoduleProgressSchema.statics.getCourseCompletion = async function(userId: string, courseId: number) {\n  const [completed, total] = await Promise.all([\n    this.countDocuments({ userId, courseId, isCompleted: true }),\n    this.countDocuments({ userId, courseId })\n  ]);\n  \n  return total > 0 ? Math.round((completed / total) * 100) : 0;\n};\n\n// Static method to get user's total time spent on course\nmoduleProgressSchema.statics.getTotalTimeSpent = async function(userId: string, courseId: number) {\n  const result = await this.aggregate([\n    { $match: { userId, courseId } },\n    { $group: { _id: null, totalTime: { $sum: '$timeSpent' } } }\n  ]);\n  \n  return result.length > 0 ? result[0].totalTime : 0;\n};\n\nexport const ModuleProgress = mongoose.model<IModuleProgressDocument>('ModuleProgress', moduleProgressSchema); ","size_bytes":3695},"client/src/pages/AssignmentSubmissions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { config } from \"@/config\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Filter, Download } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface AssignmentSubmissionRow {\n  id: number;\n  assignmentId: number;\n  userId: string;\n  userEmail?: string;\n  problemId: string;\n  problemTitle: string;\n  problemDifficulty?: string;\n  totalScore: number;\n  maxScore: number;\n  status: string;\n  updatedAt?: string;\n  createdAt?: string;\n  // Additional fields from actual submission data\n  code?: string;\n  language?: string;\n  runtime?: number;\n  memory?: number;\n  feedback?: string;\n  testResults?: any[];\n}\n\ninterface Problem {\n  id: string;\n  title: string;\n  difficulty: string;\n}\n\nexport default function AssignmentSubmissions() {\n  const [match, params] = useRoute(\"/admin/assignments/:assignmentId/submissions\");\n  const assignmentId = params?.assignmentId;\n  const [selectedProblem, setSelectedProblem] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"admin-assignment-submissions\", assignmentId],\n    enabled: !!assignmentId,\n    queryFn: async () => {\n      const token = localStorage.getItem(\"token\");\n      const res = await fetch(`${config.apiUrl}/api/assignments/${assignmentId}/submissions`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch submissions\");\n      return (await res.json()) as AssignmentSubmissionRow[];\n    },\n  });\n\n  // Get unique problems for filter\n  const problems = data ? Array.from(new Set(data.map(sub => sub.problemId))).map(problemId => {\n    const submission = data.find(sub => sub.problemId === problemId);\n    return {\n      id: problemId,\n      title: submission?.problemTitle || `Problem ${problemId}`,\n      difficulty: \"medium\" // Default difficulty\n    };\n  }) : [];\n\n  // Filter submissions based on selected filters\n  const filteredData = data?.filter(submission => {\n    const matchesProblem = selectedProblem === \"all\" || submission.problemId === selectedProblem;\n    const matchesStatus = selectedStatus === \"all\" || submission.status === selectedStatus;\n    return matchesProblem && matchesStatus;\n  }) || [];\n\n  const exportSubmissions = () => {\n    if (!filteredData.length) return;\n    \n    const csvContent = [\n      [\"ID\", \"User\", \"Email\", \"Problem\", \"Difficulty\", \"Score\", \"Language\", \"Runtime\", \"Status\", \"Submitted\", \"Feedback\"],\n      ...filteredData.map(sub => [\n        sub.id,\n        sub.userId,\n        sub.userEmail || 'N/A',\n        sub.problemTitle,\n        sub.problemDifficulty || 'N/A',\n        `${sub.totalScore}/${sub.maxScore}`,\n        sub.language || 'N/A',\n        sub.runtime ? `${(sub.runtime / 1000).toFixed(3)}s` : 'N/A',\n        sub.status,\n        sub.updatedAt ? new Date(sub.updatedAt).toLocaleString() : '-',\n        sub.feedback || 'No feedback'\n      ])\n    ].map(row => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `assignment-${assignmentId}-submissions.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <Link href=\"/admin/assignments\">\n            <Button variant=\"outline\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Assignments\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold\">Submissions</h1>\n          <p className=\"text-muted-foreground\">All submissions for assignment {assignmentId}</p>\n        </div>\n        <Button onClick={exportSubmissions} disabled={!filteredData.length}>\n          <Download className=\"w-4 h-4 mr-2\" />\n          Export CSV\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"w-4 h-4\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <label className=\"text-sm font-medium mb-2 block\">Problem</label>\n              <Select value={selectedProblem} onValueChange={setSelectedProblem}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All problems\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All problems</SelectItem>\n                  {problems.map((problem) => (\n                    <SelectItem key={problem.id} value={problem.id}>\n                      {problem.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex-1\">\n              <label className=\"text-sm font-medium mb-2 block\">Status</label>\n              <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All statuses</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"mt-4 text-sm text-muted-foreground\">\n            Showing {filteredData.length} of {data?.length || 0} submissions\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Submission List</CardTitle>\n          <CardDescription>Latest first</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div>Loading...</div>\n          ) : error ? (\n            <div className=\"text-red-600\">{(error as Error).message}</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>ID</TableHead>\n                  <TableHead>User</TableHead>\n                  <TableHead>Problem</TableHead>\n                  <TableHead>Score</TableHead>\n                  <TableHead>Language</TableHead>\n                  <TableHead>Runtime</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Feedback</TableHead>\n                  <TableHead>Submitted</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                                  {filteredData.map((row) => (\n                    <TableRow key={row.id}>\n                      <TableCell>{row.id}</TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{row.userId}</div>\n                          {row.userEmail && (\n                            <div className=\"text-xs text-muted-foreground\">{row.userEmail}</div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{row.problemTitle}</div>\n                          <div className=\"flex gap-1 mt-1\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {row.problemId}\n                            </Badge>\n                            {row.problemDifficulty && (\n                              <Badge \n                                variant={row.problemDifficulty === 'easy' ? 'default' : \n                                        row.problemDifficulty === 'medium' ? 'secondary' : 'destructive'}\n                                className=\"text-xs\"\n                              >\n                                {row.problemDifficulty}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </TableCell>\n                    <TableCell>\n                      {row.totalScore ?? 0} / {row.maxScore ?? 100}\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs\">\n                        {row.language || 'N/A'}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      {row.runtime ? `${(row.runtime / 1000).toFixed(3)}s` : 'N/A'}\n                    </TableCell>\n                    <TableCell>\n                      <span className={`px-2 py-1 rounded text-xs ${\n                        row.status === 'completed' ? 'bg-green-100 text-green-800' : \n                        row.status === 'in_progress' ? 'bg-yellow-100 text-yellow-800' : \n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {row.status}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"max-w-xs truncate\" title={row.feedback}>\n                        {row.feedback || 'No feedback'}\n                      </div>\n                    </TableCell>\n                    <TableCell>{row.updatedAt ? new Date(row.updatedAt).toLocaleString() : '-'}</TableCell>\n                  </TableRow>\n                ))}\n                {(!filteredData || filteredData.length === 0) && (\n                  <TableRow>\n                    <TableCell colSpan={9} className=\"text-center text-muted-foreground\">\n                      {data && data.length > 0 ? 'No submissions match the selected filters' : 'No submissions yet'}\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n","size_bytes":10753},"client/src/components/auth/RegisterForm.tsx":{"content":"import { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from 'wouter';\nimport { config, endpoints } from '@/config';\nimport { Eye, EyeOff } from 'lucide-react';\nimport { Loader2 } from 'lucide-react';\n\ninterface RegisterFormProps {\n  onSuccess?: (token: string) => void;\n  plain?: boolean;\n}\n\nexport function RegisterForm({ onSuccess, plain = false }: RegisterFormProps) {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n  });\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [, setLocation] = useLocation();\n\n  // New state for email verification\n  const [verificationStep, setVerificationStep] = useState(false);\n  const [verificationOTP, setVerificationOTP] = useState('');\n  const [verificationEmail, setVerificationEmail] = useState('');\n  const [verificationLoading, setVerificationLoading] = useState(false);\n\n  // Helper function to check if password contains special characters\n  const hasSpecialChar = (password: string) => {\n    return /[!@#$%^&*()\\-_=+[\\]{};:'\",.<>?/|\\\\]/.test(password);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(endpoints.register, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.message || 'Registration failed');\n      }\n\n      const data = await response.json();\n\n      if (data.requiresVerification) {\n        // Move to verification step\n        setVerificationEmail(data.email);\n        setVerificationStep(true);\n        setIsLoading(false);\n      } else {\n        // Direct registration (fallback)\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        onSuccess?.(data.token);\n        setLocation('/dashboard');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Registration failed');\n      setIsLoading(false);\n    }\n  };\n\n  const handleVerificationSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setVerificationLoading(true);\n\n    try {\n      const response = await fetch(endpoints.verifyEmail, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: verificationEmail,\n          otp: verificationOTP,\n        }),\n      });\n\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.message || 'Email verification failed');\n      }\n\n      const data = await response.json();\n\n      // Registration completed successfully\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      onSuccess?.(data.token);\n      setLocation('/dashboard');\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Email verification failed');\n      setVerificationLoading(false);\n    }\n  };\n\n  const handleResendVerification = async () => {\n    setError('');\n    try {\n      const response = await fetch(endpoints.resendVerification, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: verificationEmail,\n        }),\n      });\n\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.message || 'Failed to resend verification');\n      }\n\n      // Show success message\n      setError('Verification code resent successfully! Please check your email.');\n      setTimeout(() => setError(''), 3000);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to resend verification');\n    }\n  };\n\n  const handleGoogleRegister = () => {\n    window.location.href = endpoints.googleAuth;\n  };\n\n  // If we're in verification step, show the OTP input form\n  if (verificationStep) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n            Verify Your Email\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            We've sent a verification code to <strong>{verificationEmail}</strong>\n          </p>\n        </div>\n\n        {error && (\n          <Alert variant={error.includes('successfully') ? \"default\" : \"destructive\"}>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <form onSubmit={handleVerificationSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"otp\" className=\"text-gray-700 dark:text-gray-300\">\n              Verification Code\n            </Label>\n            <Input\n              id=\"otp\"\n              value={verificationOTP}\n              onChange={(e) => setVerificationOTP(e.target.value)}\n              required\n              placeholder=\"Enter 6-digit code\"\n              className=\"bg-white dark:bg-gray-800 text-center text-lg tracking-widest\"\n              maxLength={6}\n            />\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={verificationLoading || verificationOTP.length !== 6}\n          >\n            {verificationLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Verifying...\n              </>\n            ) : (\n              'Verify Email & Complete Registration'\n            )}\n          </Button>\n\n          <div className=\"text-center space-y-2\">\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              onClick={handleResendVerification}\n              className=\"text-sm\"\n            >\n              Didn't receive the code? Resend\n            </Button>\n\n            <div>\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                onClick={() => setVerificationStep(false)}\n                className=\"text-sm\"\n              >\n                ← Back to registration\n              </Button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  // Original registration form\n  const form = (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"firstName\" className=\"text-gray-700 dark:text-gray-300\">First Name</Label>\n          <Input\n            id=\"firstName\"\n            name=\"firstName\"\n            value={formData.firstName}\n            onChange={handleChange}\n            required\n            placeholder=\"John\"\n            className=\"bg-white dark:bg-gray-800\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"lastName\" className=\"text-gray-700 dark:text-gray-300\">Last Name</Label>\n          <Input\n            id=\"lastName\"\n            name=\"lastName\"\n            value={formData.lastName}\n            onChange={handleChange}\n            required\n            placeholder=\"Doe\"\n            className=\"bg-white dark:bg-gray-800\"\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"email\" className=\"text-gray-700 dark:text-gray-300\">Email</Label>\n        <Input\n          id=\"email\"\n          name=\"email\"\n          type=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          required\n          placeholder=\"john.doe@example.com\"\n          className=\"bg-white dark:bg-gray-800\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"password\" className=\"text-gray-700 dark:text-gray-300\">Password</Label>\n        <div className=\"relative\">\n          <Input\n            id=\"password\"\n            name=\"password\"\n            type={showPassword ? \"text\" : \"password\"}\n            value={formData.password}\n            onChange={handleChange}\n            required\n            placeholder=\"Create a strong password\"\n            minLength={8}\n            className=\"bg-white dark:bg-gray-800 pr-10\"\n          />\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n            onClick={() => setShowPassword(!showPassword)}\n          >\n            {showPassword ? (\n              <EyeOff className=\"h-4 w-4 text-gray-500\" />\n            ) : (\n              <Eye className=\"h-4 w-4 text-gray-500\" />\n            )}\n          </Button>\n          \n          {/* Password constraints tooltip - only show while typing */}\n          {formData.password.length > 0 && (\n            <div className=\"absolute left-full top-0 z-10 w-64 p-4 text-xs text-muted-foreground bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg space-y-1 transform -translate-x-24\">\n              <p className=\"font-medium text-gray-700 dark:text-gray-300\">Password must contain:</p>\n              <ul className=\"list-disc list-inside space-y-1\">\n                <li className={formData.password.length >= 8 ? 'text-green-600' : 'text-red-500'}>\n                  At least 8 characters\n                </li>\n                <li className={/[A-Z]/.test(formData.password) ? 'text-green-600' : 'text-red-500'}>\n                  One uppercase letter (A-Z)\n                </li>\n                <li className={/[a-z]/.test(formData.password) ? 'text-green-600' : 'text-red-500'}>\n                  One lowercase letter (a-z)\n                </li>\n                <li className={/\\d/.test(formData.password) ? 'text-green-600' : 'text-red-500'}>\n                  One digit (0-9)\n                </li>\n                <li className={hasSpecialChar(formData.password) ? 'text-green-600' : 'text-red-500'}>\n                  One special character (!@#$%^&*()-_=+[]{ };:&apos;&quot;,&lt;&gt;?/|)\n                </li>\n              </ul>\n            </div>\n          )}\n        </div>\n      </div>\n      <Button\n        type=\"submit\"\n        className=\"w-full\"\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Creating Account...\n          </>\n        ) : (\n          'Create Account'\n        )}\n      </Button>\n\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <span className=\"w-full border-t\" />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-white dark:bg-gray-900 px-2 text-gray-500\">\n            Or continue with\n          </span>\n        </div>\n      </div>\n\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        onClick={handleGoogleRegister}\n        className=\"w-full\"\n      >\n        <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n          <path\n            d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n            fill=\"#4285F4\"\n          />\n          <path\n            d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n            fill=\"#34A853\"\n          />\n          <path\n            d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n            fill=\"#FBBC05\"\n          />\n          <path\n            d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n            fill=\"#EA4335\"\n          />\n        </svg>\n        Google\n      </Button>\n\n      <div className=\"text-center mt-4\">\n        <span className=\"text-sm text-gray-600 dark:text-gray-400\">Already Signed Up? </span>\n        <Button\n          type=\"button\"\n          variant=\"link\"\n          className=\"text-sm text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300\"\n          onClick={() => setLocation('/login')}\n        >\n          Login\n        </Button>\n      </div>\n    </form>\n  );\n\n  if (plain) return form;\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Create an Account</CardTitle>\n        <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n          Sign up to get started with CodeArena\n        </CardDescription>\n      </CardHeader>\n      <CardContent>{form}</CardContent>\n    </Card>\n  );\n} ","size_bytes":13514},"client/src/pages/problems.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ProblemModal } from \"@/components/problems/problem-modal\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, CheckCircle, BarChart3 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { config } from \"@/config\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Problem } from \"@/types/problem\";\nimport { Link } from \"wouter\";\n\ninterface Submission {\n  id: number;\n  problemId: number;\n  status: string;\n  submittedAt: string;\n}\n\nexport default function Problems() {\n  const [selectedProblem, setSelectedProblem] = useState<Problem | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [difficultyFilter, setDifficultyFilter] = useState(\"all\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { isAuthenticated, user } = useAuth();\n  const { toast } = useToast();\n\n  // Memoize token and fetch options\n  const token = useMemo(() => localStorage.getItem('token'), []);\n  const fetchOptions = useMemo(() => ({\n    credentials: 'include' as const,\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  }), [token]);\n\n  const { data: problems, isLoading } = useQuery<Problem[]>({\n    queryKey: [\"/api/problems\"],\n    retry: false,\n    staleTime: 30000,\n  });\n\n  const { data: submissions } = useQuery<Submission[]>({\n    queryKey: [\"/api/submissions\"],\n    queryFn: async () => {\n      try {\n        if (!isAuthenticated || !token) {\n          return [];\n        }\n        const res = await fetch(`${config.apiUrl}/api/submissions`, fetchOptions);\n        if (!res.ok) {\n          return [];\n        }\n        return res.json();\n      } catch (error) {\n        console.error(\"Error fetching submissions:\", error);\n        return [];\n      }\n    },\n    retry: false,\n    enabled: isAuthenticated && !!token,\n    staleTime: 30000,\n  });\n\n  const filteredProblems = problems?.filter((problem) => {\n    const matchesSearch = problem.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         problem.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDifficulty = difficultyFilter === \"all\" || problem.difficulty === difficultyFilter;\n    return matchesSearch && matchesDifficulty;\n  }) || [];\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case \"easy\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\";\n      case \"hard\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\";\n    }\n  };\n\n  const isProblemSolved = (problemId: number) => {\n    return submissions?.some(s => s.problemId === problemId && s.status === \"accepted\") || false;\n  };\n\n  const handleProblemClick = (problem: Problem) => {\n    setSelectedProblem(problem);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedProblem(null);\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n          Practice Problems\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Choose from our collection of coding challenges to improve your skills.\n        </p>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Filter className=\"h-5 w-5\" />\n            <span>Filter Problems</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search problems...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={difficultyFilter} onValueChange={setDifficultyFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"All Difficulties\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Difficulties</SelectItem>\n                <SelectItem value=\"easy\">Easy</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"hard\">Hard</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Problems List */}\n      {isLoading ? (\n        <div className=\"grid gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-2 flex-1\">\n                    <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/3\"></div>\n                    <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-2/3\"></div>\n                    <div className=\"flex space-x-2\">\n                      <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-16\"></div>\n                      <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-20\"></div>\n                    </div>\n                  </div>\n                  <div className=\"h-10 bg-gray-200 dark:bg-gray-700 rounded w-24\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid gap-4\">\n          {filteredProblems.map((problem) => {\n            const solved = isProblemSolved(problem.id);\n            return (\n              <Card \n                key={problem.id} \n                className=\"hover:shadow-md transition-shadow cursor-pointer\"\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                          {problem.title}\n                        </h3>\n                        {solved && (\n                          <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                        )}\n                      </div>\n                      <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-3 line-clamp-2\">\n                        {problem.description.replace(/<[^>]*>/g, '').substring(0, 150)}...\n                      </p>\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge className={getDifficultyColor(problem.difficulty)}>\n                          {problem.difficulty}\n                        </Badge>\n                        {problem.tags && problem.tags.length > 0 && (\n                          <div className=\"flex space-x-1\">\n                            {problem.tags.slice(0, 3).map((tag: string, index: number) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                {tag}\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      {solved ? (\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => handleProblemClick(problem)}\n                          className=\"flex-1\"\n                        >\n                          Try Again\n                        </Button>\n                      ) : (\n                        <Button\n                          onClick={() => handleProblemClick(problem)}\n                          className=\"flex-1\"\n                        >\n                          Solve Problem\n                        </Button>\n                      )}\n                      {user?.role === 'admin' && (\n                        <Link href={`/admin/problems/${problem.id}/analytics`}>\n                          <Button variant=\"outline\" size=\"icon\" title=\"View Analytics\">\n                            <BarChart3 className=\"w-4 h-4\" />\n                          </Button>\n                        </Link>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      {!isLoading && filteredProblems.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"text-gray-500 dark:text-gray-400\">\n              <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No problems found</h3>\n              <p>Try adjusting your search criteria or filters.</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {selectedProblem && (\n        <ProblemModal\n          problem={selectedProblem}\n          isOpen={isModalOpen}\n          onClose={handleCloseModal}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":10032},"client/src/pages/auth/AuthCallback.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/components/ui/use-toast';\n\nexport default function AuthCallback() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    try {\n      console.log('[DEBUG] Auth callback mounted');\n      const params = new URLSearchParams(window.location.search);\n      const token = params.get('token');\n      const userStr = params.get('user');\n      const error = params.get('error');\n\n      if (error) {\n        console.error('[DEBUG] Auth error:', error);\n        toast({\n          variant: \"destructive\",\n          title: \"Authentication failed\",\n          description: \"Could not sign in with Google. Please try again.\"\n        });\n        setLocation('/login');\n        return;\n      }\n\n      if (!token || !userStr) {\n        console.error('[DEBUG] Missing token or user data');\n        toast({\n          variant: \"destructive\",\n          title: \"Authentication failed\",\n          description: \"Invalid authentication response. Please try again.\"\n        });\n        setLocation('/login');\n        return;\n      }\n\n      try {\n        const user = JSON.parse(decodeURIComponent(userStr));\n        console.log('[DEBUG] Parsed user data:', user);\n        \n        // Store auth data\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        // Show success message\n        toast({\n          title: \"Successfully signed in\",\n          description: `Welcome back${user.firstName ? ', ' + user.firstName : ''}!`\n        });\n\n        // Check for returnTo parameter and redirect accordingly\n        const returnTo = params.get('returnTo');\n        \n        if (returnTo) {\n          console.log('[DEBUG] Redirecting to returnTo URL:', returnTo);\n          window.location.href = returnTo;\n        } else {\n          // Role-based redirection\n          if (user.role === 'admin') {\n            console.log('[DEBUG] Redirecting admin to admin dashboard');\n            setLocation('/admin');\n          } else {\n            console.log('[DEBUG] Redirecting user to dashboard');\n            setLocation('/dashboard');\n          }\n        }\n      } catch (error) {\n        console.error('[DEBUG] Error parsing user data:', error);\n        toast({\n          variant: \"destructive\",\n          title: \"Authentication failed\",\n          description: \"Could not process login response. Please try again.\"\n        });\n        setLocation('/login');\n      }\n    } catch (error) {\n      console.error('[DEBUG] Unexpected error:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"Authentication failed\",\n        description: \"An unexpected error occurred. Please try again.\"\n      });\n      setLocation('/login');\n    }\n  }, [setLocation, toast]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n        <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white mb-2\">\n          Completing sign in...\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Please wait while we redirect you\n        </p>\n      </div>\n    </div>\n  );\n} ","size_bytes":3444},"Documentations/ENROLLMENT_TYPE_QUICK_START.md":{"content":"# Enrollment Type Tracking - Quick Start Guide\n\n## 🚀 What's New\n\nYour CodeArena now tracks how users are enrolled in assignments, courses, and contests!\n\n## 📊 Enrollment Types\n\n- **🔐 Admin**: Users added by administrators via buttons/forms\n- **📱 QR**: Users who enrolled themselves via QR codes or links\n\n## ✅ What's Been Updated\n\n### 1. **Problem Set Enrollments**\n- Admin bulk enrollment: `enrollmentType: 'admin'`\n- Student self-enrollment: `enrollmentType: 'qr'`\n\n### 2. **Course Enrollments**\n- Admin adds student: `enrollmentType: 'admin'`\n- Student scans QR: `enrollmentType: 'qr'`\n\n### 3. **Contest Enrollments**\n- Admin registers user: `enrollmentType: 'admin'`\n- User self-registers: `enrollmentType: 'qr'`\n\n## 🔧 Setup Required\n\n### 1. Restart Server\n```bash\ncd server\nnpm run dev\n```\n\n### 2. Database Migration\n**No manual migration needed!** The system automatically:\n- Adds `enrollmentType` field to new enrollments\n- Sets default value `'qr'` for existing records\n- Maintains backward compatibility\n\n## 🧪 Test the System\n\n### Test Script\n```bash\ncd server\nnode test-enrollment-types.js\n```\n\n### Manual Testing\n1. **Admin Enrollment**: Add a student to a course/problem set via admin interface\n2. **Self Enrollment**: Have a student scan QR code or use enrollment link\n3. **Check Database**: Verify `enrollmentType` field is set correctly\n\n## 📈 Analytics & Insights\n\n### What You Can Now Track\n- **Enrollment Method Distribution**: How many users self-enroll vs admin-added\n- **User Engagement**: Which enrollment methods are most popular\n- **Administrative Efficiency**: Balance of admin vs self-service enrollments\n\n### Sample Queries\n```typescript\n// Count admin enrollments\nconst adminCount = await ProblemSetEnrollment.countDocuments({ \n  enrollmentType: 'admin' \n});\n\n// Count self-enrollments\nconst selfCount = await ProblemSetEnrollment.countDocuments({ \n  enrollmentType: 'qr' \n});\n\n// Get enrollment method distribution\nconst stats = await ProblemSetEnrollment.aggregate([\n  {\n    $group: {\n      _id: '$enrollmentType',\n      count: { $sum: 1 }\n    }\n  }\n]);\n```\n\n## 🎯 Use Cases\n\n### For Administrators\n- **Audit Trail**: Know who enrolled whom and how\n- **Resource Planning**: Understand enrollment method preferences\n- **Performance Metrics**: Track admin vs self-service efficiency\n\n### For Students\n- **Engagement Tracking**: See which enrollment methods they prefer\n- **User Experience**: Understand enrollment journey patterns\n\n### For Analytics\n- **Business Intelligence**: Enrollment method effectiveness\n- **User Behavior**: Self-service vs admin preference analysis\n- **System Optimization**: Resource allocation based on usage patterns\n\n## 🔒 Security Features\n\n- **Role Validation**: Only admins can create admin-type enrollments\n- **Data Integrity**: Enum validation ensures only valid types\n- **Audit Trail**: Complete record of enrollment methods\n\n## 🚨 Troubleshooting\n\n### Common Issues\n1. **Missing Enrollment Type**: Check that new enrollments include the field\n2. **Validation Errors**: Ensure type is 'admin' or 'qr'\n3. **Default Values**: Existing enrollments default to 'qr'\n\n### Debug Steps\n1. Check enrollment creation logs\n2. Verify user role detection\n3. Confirm database field values\n\n## 📚 Full Documentation\n\nSee `ENROLLMENT_TYPE_IMPLEMENTATION.md` for complete technical details.\n\n## 🎯 Next Steps\n\n1. **Test the System**: Run test script and manual tests\n2. **Monitor Data**: Check enrollment type distribution\n3. **Analyze Patterns**: Understand user enrollment preferences\n4. **Optimize Workflows**: Adjust admin vs self-service balance\n\n---\n\n**Note**: This system is fully backward compatible. Existing enrollments continue to work normally with default enrollment type values. ","size_bytes":3771},"client/src/pages/CourseAnalytics.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useRoute } from 'wouter';\nimport { Link } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  ArrowLeft, \n  BookOpen, \n  Users, \n  Target, \n  TrendingUp, \n  Clock, \n  Activity,\n  BarChart3,\n  PieChart,\n  LineChart,\n  Download,\n  Calendar,\n  CheckCircle,\n  AlertCircle,\n  Trophy\n} from 'lucide-react';\nimport { config } from '@/config';\nimport { LineChart as RechartsLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart as RechartsPieChart, Pie, Cell } from 'recharts';\n\ninterface CourseAnalyticsData {\n  courseId: number;\n  courseTitle: string;\n  totalAssignments: number;\n  totalStudents: number;\n  averageCourseScore: number;\n  completionRate: number;\n  assignmentPerformance: Array<{\n    assignmentId: number;\n    assignmentTitle: string;\n    averageScore: number;\n    completionRate: number;\n    difficulty: number;\n  }>;\n  studentPerformance: Array<{\n    userId: string;\n    userName: string;\n    averageScore: number;\n    assignmentsCompleted: number;\n    improvementTrend: number;\n  }>;\n  learningOutcomes: Array<{\n    outcome: string;\n    overallAchievementRate: number;\n    averageConfidence: number;\n    assignmentsCovered: number;\n  }>;\n  engagementMetrics: {\n    averageTimeSpent: number;\n    averageRevisits: number;\n    peakActivityTimes: string[];\n    dropoffPoints: Array<{\n      assignmentId: number;\n      dropoffRate: number;\n    }>;\n  };\n}\n\nconst COLORS = ['#10b981', '#3b82f6', '#f59e0b', '#ef4444', '#8b5cf6'];\n\nexport function CourseAnalytics() {\n  const [match, params] = useRoute('/admin/courses/:courseId/analytics');\n  const courseId = params?.courseId;\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const { data: analytics, isLoading, error } = useQuery({\n    queryKey: ['course-analytics', courseId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const res = await fetch(`${config.apiUrl}/api/analytics/courses/${courseId}/analytics`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!res.ok) {\n        throw new Error('Failed to fetch course analytics');\n      }\n      return res.json() as Promise<CourseAnalyticsData>;\n    },\n    enabled: !!courseId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  if (error || !analytics) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Failed to load course analytics</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            {error instanceof Error ? error.message : 'Unknown error occurred'}\n          </p>\n          <Link href=\"/admin/courses\">\n            <Button className=\"mt-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Courses\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const assignmentPerformanceData = analytics.assignmentPerformance.map(assignment => ({\n    name: assignment.assignmentTitle,\n    averageScore: assignment.averageScore,\n    completionRate: assignment.completionRate,\n    difficulty: assignment.difficulty,\n  }));\n\n  const studentPerformanceData = analytics.studentPerformance\n    .sort((a, b) => b.averageScore - a.averageScore)\n    .slice(0, 10);\n\n  const learningOutcomesData = analytics.learningOutcomes.map(outcome => ({\n    name: outcome.outcome,\n    achievementRate: outcome.overallAchievementRate,\n    confidence: outcome.averageConfidence,\n  }));\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <Link href=\"/admin/courses\">\n            <Button variant=\"outline\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Courses\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold\">{analytics.courseTitle}</h1>\n          <p className=\"text-muted-foreground\">Course Analytics & Performance Overview</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={() => window.print()}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Students</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.totalStudents}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.totalAssignments} assignments\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Course Score</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.averageCourseScore}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.completionRate}% completion rate\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Time Spent</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.engagementMetrics.averageTimeSpent}m</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {analytics.engagementMetrics.averageRevisits} avg revisits\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Learning Outcomes</CardTitle>\n            <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.learningOutcomes.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {Math.round(analytics.learningOutcomes.reduce((sum, o) => sum + o.overallAchievementRate, 0) / analytics.learningOutcomes.length)}% avg achievement\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"assignments\">Assignments</TabsTrigger>\n          <TabsTrigger value=\"students\">Students</TabsTrigger>\n          <TabsTrigger value=\"learning\">Learning</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Assignment Performance Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Assignment Performance Overview</CardTitle>\n                <CardDescription>Average scores across all assignments</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={assignmentPerformanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" height={100} />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"averageScore\" fill=\"#3b82f6\" name=\"Average Score (%)\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Student Performance Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Student Performance Distribution</CardTitle>\n                <CardDescription>Distribution of student scores</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RechartsPieChart>\n                      <Pie\n                        data={[\n                          { name: 'Excellent (90-100%)', value: studentPerformanceData.filter(s => s.averageScore >= 90).length },\n                          { name: 'Good (80-89%)', value: studentPerformanceData.filter(s => s.averageScore >= 80 && s.averageScore < 90).length },\n                          { name: 'Average (70-79%)', value: studentPerformanceData.filter(s => s.averageScore >= 70 && s.averageScore < 80).length },\n                          { name: 'Needs Improvement (<70%)', value: studentPerformanceData.filter(s => s.averageScore < 70).length },\n                        ]}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {COLORS.map((color, index) => (\n                          <Cell key={`cell-${index}`} fill={color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </RechartsPieChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Engagement Insights */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Engagement Insights</CardTitle>\n              <CardDescription>Student engagement patterns and activity analysis</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-6 md:grid-cols-3\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {analytics.engagementMetrics.averageTimeSpent}m\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Average Time Spent</div>\n                </div>\n                \n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {analytics.engagementMetrics.averageRevisits}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Average Revisits</div>\n                </div>\n                \n                <div className=\"text-center p-4 border rounded-lg\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {analytics.engagementMetrics.peakActivityTimes?.length > 0 ? analytics.engagementMetrics.peakActivityTimes[0] : 'N/A'}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Peak Activity Time</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Assignments Tab */}\n        <TabsContent value=\"assignments\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Assignment Performance Analysis</CardTitle>\n              <CardDescription>Detailed breakdown of each assignment's performance</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Assignment Performance Chart */}\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={assignmentPerformanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" height={100} />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"averageScore\" fill=\"#3b82f6\" name=\"Average Score (%)\" />\n                      <Bar dataKey=\"completionRate\" fill=\"#10b981\" name=\"Completion Rate (%)\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n\n                {/* Assignment Details Table */}\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Assignment</TableHead>\n                      <TableHead>Average Score</TableHead>\n                      <TableHead>Completion Rate</TableHead>\n                      <TableHead>Difficulty</TableHead>\n                      <TableHead>Status</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {analytics.assignmentPerformance.map((assignment, index) => (\n                      <TableRow key={index}>\n                        <TableCell className=\"font-medium\">{assignment.assignmentTitle}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{assignment.averageScore}%</span>\n                            <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                              <div \n                                className=\"bg-blue-600 h-2 rounded-full\" \n                                style={{ width: `${assignment.averageScore}%` }}\n                              ></div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{assignment.completionRate}%</span>\n                            <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                              <div \n                                className=\"bg-green-600 h-2 rounded-full\" \n                                style={{ width: `${assignment.completionRate}%` }}\n                              ></div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={assignment.difficulty >= 4 ? 'destructive' : assignment.difficulty >= 3 ? 'secondary' : 'outline'}>\n                            {assignment.difficulty}/5\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={\n                              assignment.averageScore >= 80 ? 'default' :\n                              assignment.averageScore >= 70 ? 'secondary' : 'destructive'\n                            }\n                          >\n                            {assignment.averageScore >= 80 ? 'Excellent' :\n                             assignment.averageScore >= 70 ? 'Good' : 'Needs Attention'}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Students Tab */}\n        <TabsContent value=\"students\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Top Student Performance</CardTitle>\n              <CardDescription>Best performing students in the course</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Student Performance Chart */}\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={studentPerformanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"userName\" angle={-45} textAnchor=\"end\" height={100} />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"averageScore\" fill=\"#3b82f6\" name=\"Average Score (%)\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n\n                {/* Student Details Table */}\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Average Score</TableHead>\n                      <TableHead>Assignments Completed</TableHead>\n                      <TableHead>Improvement Trend</TableHead>\n                      <TableHead>Performance</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {studentPerformanceData.map((student, index) => (\n                      <TableRow key={index}>\n                        <TableCell className=\"font-medium\">{student.userName}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{student.averageScore}%</span>\n                            <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                              <div \n                                className=\"bg-blue-600 h-2 rounded-full\" \n                                style={{ width: `${student.averageScore}%` }}\n                              ></div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">\n                            {student.assignmentsCompleted}/{analytics.totalAssignments}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className={`font-bold ${student.improvementTrend >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                              {student.improvementTrend >= 0 ? '+' : ''}{student.improvementTrend}%\n                            </span>\n                            {student.improvementTrend >= 0 ? (\n                              <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                            ) : (\n                              <TrendingUp className=\"h-4 w-4 text-red-600 rotate-180\" />\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={\n                              student.averageScore >= 90 ? 'default' :\n                              student.averageScore >= 80 ? 'secondary' :\n                              student.averageScore >= 70 ? 'outline' : 'destructive'\n                            }\n                          >\n                            {student.averageScore >= 90 ? 'Excellent' :\n                             student.averageScore >= 80 ? 'Good' :\n                             student.averageScore >= 70 ? 'Average' : 'Needs Improvement'}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Learning Tab */}\n        <TabsContent value=\"learning\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Learning Outcomes Analysis</CardTitle>\n              <CardDescription>Assessment of learning objectives achievement across the course</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Learning Outcomes Chart */}\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={learningOutcomesData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" height={100} />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"achievementRate\" fill=\"#3b82f6\" name=\"Achievement Rate (%)\" />\n                      <Bar dataKey=\"confidence\" fill=\"#10b981\" name=\"Confidence (%)\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n\n                {/* Learning Outcomes Details */}\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  {analytics.learningOutcomes.map((outcome, index) => (\n                    <div key={index} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h3 className=\"font-semibold\">{outcome.outcome}</h3>\n                        <Badge \n                          variant={\n                            outcome.overallAchievementRate >= 80 ? 'default' :\n                            outcome.overallAchievementRate >= 60 ? 'secondary' : 'destructive'\n                          }\n                        >\n                          {outcome.overallAchievementRate.toFixed(1)}% achieved\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span>Achievement Rate</span>\n                            <span>{outcome.overallAchievementRate.toFixed(1)}%</span>\n                          </div>\n                          <Progress value={outcome.overallAchievementRate} className=\"h-2\" />\n                        </div>\n                        \n                        <div>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span>Average Confidence</span>\n                            <span>{outcome.averageConfidence.toFixed(1)}%</span>\n                          </div>\n                          <Progress value={outcome.averageConfidence} className=\"h-2\" />\n                        </div>\n                        \n                        <div className=\"text-sm text-muted-foreground\">\n                          Covered in {outcome.assignmentsCovered} assignment(s)\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default CourseAnalytics; ","size_bytes":24126},"server/services/contestStorage.ts":{"content":"// @ts-nocheck\n\nimport { ObjectId } from 'mongodb';\nimport { Contest as ContestModel } from '../models/Contest';\nimport { ContestParticipant as ContestParticipantModel } from '../models/ContestParticipant';\nimport { ContestSubmission as ContestSubmissionModel } from '../models/ContestSubmission';\nimport { ContestQuestion as ContestQuestionModel } from '../models/ContestQuestion';\nimport { Problem } from '../models/Problem';\nimport type {\n  Contest as ContestType,\n  ContestProblem,\n  ContestParticipant as ContestParticipantType,\n  ContestQuestion as ContestQuestionType,\n  ContestAnalytics,\n  ContestLeaderboardEntry,\n} from '../shared-schema';\n\n// Contest document interfaces for MongoDB\nexport interface ContestDocument extends Omit<ContestType, '_id'> {\n  _id?: ObjectId;\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ContestParticipantDocument extends Omit<ContestParticipantType, '_id'> {\n  _id?: ObjectId;\n  id: string;\n}\n\nexport interface ContestSubmissionDocument {\n  _id?: ObjectId;\n  id: string;\n  contestId: string;\n  problemId: string;\n  userId: string;\n  code: string;\n  language: string;\n  status: string;\n  points?: number;\n  runtime?: number;\n  memory?: number;\n  submissionTime: Date;\n  penalty: number;\n  isContestSubmission: boolean;\n}\n\n// Contest Storage Interface\nexport interface IContestStorage {\n  // Contest Management\n  createContest(contest: Omit<ContestType, 'id' | 'createdAt' | 'updatedAt'>): Promise<ContestDocument>;\n  getContest(contestId: string): Promise<ContestDocument | null>;\n  getAllContests(filters?: { status?: string; type?: string; visibility?: string }): Promise<ContestDocument[]>;\n  updateContest(contestId: string, updates: Partial<ContestType>): Promise<ContestDocument | null>;\n  updateContestEndMethod(contestId: string, endMethod: 'manually_ended' | 'time_expired'): Promise<boolean>;\n  checkAndUpdateContestEndMethod(contestId: string): Promise<'manually_ended' | 'time_expired' | null>;\n  checkAndUpdateAllExpiredContests(): Promise<{ updated: number; total: number }>;\n  deleteContest(contestId: string): Promise<boolean>;\n  \n  // Problem Management within Contests\n  addProblemToContest(contestId: string, problem: ContestProblem): Promise<boolean>;\n  removeProblemFromContest(contestId: string, problemId: string): Promise<boolean>;\n  updateContestProblem(contestId: string, problemId: string, updates: Partial<ContestProblem>): Promise<boolean>;\n  getContestProblems(contestId: string): Promise<ContestProblem[]>;\n  \n  // Participant Management\n  registerParticipant(contestId: string, userId: string): Promise<ContestParticipantDocument>;\n  unregisterParticipant(contestId: string, userId: string): Promise<boolean>;\n  getContestParticipants(contestId: string): Promise<ContestParticipantDocument[]>;\n  getUserContestEnrollments(userId: string): Promise<ContestParticipantDocument[]>;\n  updateParticipantScore(contestId: string, userId: string, score: number, penalty: number): Promise<boolean>;\n  updateParticipantProblemStatus(contestId: string, userId: string, problemId: string, status: string, points: number): Promise<boolean>;\n  updateParticipantContestEndMethod(contestId: string, userId: string, endMethod: 'manually_ended' | 'time_expired'): Promise<boolean>;\n  updateAllParticipantsContestEndMethod(contestId: string, endMethod: 'manually_ended' | 'time_expired' | null): Promise<boolean>;\n  disqualifyParticipant(contestId: string, userId: string, reason?: string): Promise<boolean>;\n  \n  // Submissions & Scoring\n  submitSolution(submission: Omit<ContestSubmissionDocument, 'id' | '_id'>): Promise<ContestSubmissionDocument>;\n  getContestSubmissions(contestId: string, userId?: string): Promise<ContestSubmissionDocument[]>;\n  getParticipantSubmissions(contestId: string, userId: string): Promise<ContestSubmissionDocument[]>;\n  \n  // Leaderboard & Rankings\n  generateLeaderboard(contestId: string): Promise<ContestLeaderboardEntry[]>;\n  updateRankings(contestId: string): Promise<boolean>;\n  \n  // Analytics\n  getContestAnalytics(contestId: string): Promise<ContestAnalytics>;\n  \n  // Q&A System\n  submitQuestion(question: Omit<ContestQuestionType, 'id'>): Promise<ContestQuestionType>;\n  answerQuestion(questionId: string, answer: string, answeredBy: string): Promise<boolean>;\n  getContestQuestions(contestId: string, isPublic?: boolean): Promise<ContestQuestionType[]>;\n  \n  // Announcements\n  addAnnouncement(contestId: string, message: string, priority?: 'low' | 'medium' | 'high'): Promise<boolean>;\n  getAnnouncements(contestId: string): Promise<ContestType['announcements']>;\n}\n\n// MongoDB Implementation\nexport class ContestStorage implements IContestStorage {\n  // Using Mongoose models; no lazy collection init required\n\n  async createContest(contestData: Omit<ContestType, 'id' | 'createdAt' | 'updatedAt'>): Promise<ContestDocument> {\n    const now = new Date();\n    const contest: any = {\n      ...contestData,\n      id: new ObjectId().toString(),\n      createdAt: now,\n      updatedAt: now,\n    };\n    const created = await ContestModel.create(contest);\n    return created.toObject() as any;\n  }\n\n  async getContest(contestId: string): Promise<ContestDocument | null> {\n    const contest = await ContestModel.findOne({ id: contestId }).lean();\n    if (contest) return contest as any;\n    try {\n      const byMongoId = await ContestModel.findById(contestId).lean();\n      return (byMongoId as any) || null;\n    } catch {\n      return null;\n    }\n  }\n\n  async getAllContests(filters?: { status?: string; type?: string; visibility?: string }): Promise<ContestDocument[]> {\n    const query: any = {};\n    \n    if (filters?.status) query.status = filters.status;\n    if (filters?.type) query.type = filters.type;\n    if (filters?.visibility) query.visibility = filters.visibility;\n    const results = await ContestModel.find(query).sort({ createdAt: -1 }).lean();\n    return results.map((contest: any) => ({ ...contest, problems: contest.problems || [] }));\n  }\n\n  async updateContest(contestId: string, updates: Partial<ContestType>): Promise<ContestDocument | null> {\n    const sanitized: Record<string, any> = Object.fromEntries(\n      Object.entries({ ...updates }).filter(([_, v]) => v !== undefined)\n    );\n    const result = await ContestModel.findOneAndUpdate(\n      { id: contestId },\n      { $set: { ...sanitized, updatedAt: new Date() } },\n      { new: true }\n    ).lean();\n    return (result as any) || null;\n  }\n\n  async updateContestEndMethod(contestId: string, endMethod: 'manually_ended' | 'time_expired'): Promise<boolean> {\n    try {\n      // Update contest end method\n      const contestResult = await ContestModel.updateOne(\n        { id: contestId },\n        { $set: { contestEndMethod: endMethod, updatedAt: new Date() } }\n      );\n\n      // Update all participants' contest end method\n      const participantResult = await this.updateAllParticipantsContestEndMethod(contestId, endMethod);\n\n      console.log(`[CONTEST-STORAGE] Updated contest ${contestId} end method to ${endMethod}`);\n      console.log(`[CONTEST-STORAGE] Contest update: ${contestResult.modifiedCount > 0}, Participants update: ${participantResult}`);\n\n      return (contestResult.modifiedCount || 0) > 0;\n    } catch (error) {\n      console.error(`[CONTEST-STORAGE] Error updating contest end method:`, error);\n      return false;\n    }\n  }\n\n  async checkAndUpdateContestEndMethod(contestId: string): Promise<'manually_ended' | 'time_expired' | null> {\n    const contest: any = await ContestModel.findOne({ id: contestId }).lean();\n    if (!contest) {\n      return null;\n    }\n\n    const now = new Date();\n    let newEndMethod: 'manually_ended' | 'time_expired' | null = null;\n\n    if (contest.endTime && now > contest.endTime) {\n      newEndMethod = 'time_expired';\n    } else if (contest.contestEndMethod === 'time_expired') {\n      newEndMethod = 'time_expired';\n    }\n\n    if (newEndMethod) {\n      await this.updateContestEndMethod(contestId, newEndMethod);\n    }\n\n    return newEndMethod;\n  }\n\n  async checkAndUpdateAllExpiredContests(): Promise<{ updated: number; total: number }> {\n    const contests = await ContestModel.find({ endTime: { $lt: new Date() } }).lean();\n    let updatedCount = 0;\n    for (const contest of contests) {\n      const now = new Date();\n      let newEndMethod: 'manually_ended' | 'time_expired' | null = null;\n\n      if (contest.endTime && now > contest.endTime) {\n        newEndMethod = 'time_expired';\n      } else if (contest.contestEndMethod === 'time_expired') {\n        newEndMethod = 'time_expired';\n      }\n\n      if (newEndMethod) {\n        await this.updateContestEndMethod(contest.id, newEndMethod);\n        updatedCount++;\n      }\n    }\n    return { updated: updatedCount, total: contests.length };\n  }\n\n  async deleteContest(contestId: string): Promise<boolean> {\n    const result = await ContestModel.deleteOne({ id: contestId });\n    await ContestParticipantModel.deleteMany({ contestId });\n    await ContestSubmissionModel.deleteMany({ contestId });\n    await ContestQuestionModel.deleteMany({ contestId });\n    return result.deletedCount !== undefined && result.deletedCount > 0;\n  }\n\n  async addProblemToContest(contestId: string, problem: ContestProblem): Promise<boolean> {\n    // Ensure the problem has an ID\n    const problemWithId = {\n      ...problem,\n      id: problem.id || new ObjectId().toString(),\n    };\n    const result = await ContestModel.updateOne(\n      { id: contestId },\n      { $push: { problems: problemWithId }, $set: { updatedAt: new Date() } }\n    );\n    return result.modifiedCount !== undefined && result.modifiedCount > 0;\n  }\n\n  async removeProblemFromContest(contestId: string, problemId: string): Promise<boolean> {\n    let result = await ContestModel.updateOne(\n      { id: contestId },\n      { $pull: { problems: { id: problemId } } as any, $set: { updatedAt: new Date() } }\n    );\n    if ((result.modifiedCount || 0) === 0) {\n      const contest: any = await ContestModel.findOne({ id: contestId }).lean();\n      const problemToRemove = contest?.problems?.find((p: any) => p.id === problemId);\n      if (problemToRemove) {\n        result = await ContestModel.updateOne(\n          { id: contestId },\n          { $pull: { problems: { title: problemToRemove.title } } as any, $set: { updatedAt: new Date() } }\n        );\n      }\n    }\n    return (result.modifiedCount || 0) > 0;\n  }\n\n  async updateContestProblem(contestId: string, problemId: string, updates: Partial<ContestProblem>): Promise<boolean> {\n    try {\n      console.log(`[CONTEST-STORAGE] 🔄 Updating problem ${problemId} in contest ${contestId}`);\n      console.log(`[CONTEST-STORAGE] Updates to apply:`, updates);\n      \n      // First, get the current problem to preserve existing fields\n      const contest = await ContestModel.findOne({ id: contestId }).lean();\n      if (!contest) {\n        console.log(`[CONTEST-STORAGE] ❌ Contest ${contestId} not found`);\n        return false;\n      }\n      \n      const currentProblem = contest.problems?.find(p => p.id === problemId);\n      if (!currentProblem) {\n        console.log(`[CONTEST-STORAGE] ❌ Problem ${problemId} not found in contest`);\n        return false;\n      }\n      \n      console.log(`[CONTEST-STORAGE] Current problem:`, {\n        id: currentProblem.id,\n        title: currentProblem.title,\n        selectedProblemId: currentProblem.selectedProblemId,\n        originalProblemId: currentProblem.originalProblemId\n      });\n      \n      // Merge updates with existing problem data, preserving important fields\n      const updatedProblem = {\n        ...currentProblem,\n        ...updates,\n        // Preserve these critical fields if they exist\n        selectedProblemId: updates.selectedProblemId !== undefined ? updates.selectedProblemId : currentProblem.selectedProblemId,\n        originalProblemId: updates.originalProblemId !== undefined ? updates.originalProblemId : currentProblem.originalProblemId,\n        id: currentProblem.id, // Always preserve the problem ID\n        updatedAt: new Date()\n      };\n      \n      console.log(`[CONTEST-STORAGE] Updated problem:`, {\n        id: updatedProblem.id,\n        title: updatedProblem.title,\n        selectedProblemId: updatedProblem.selectedProblemId,\n        originalProblemId: updatedProblem.originalProblemId\n      });\n      \n      const result = await ContestModel.updateOne(\n        { id: contestId, 'problems.id': problemId },\n        { \n          $set: { \n            'problems.$': updatedProblem,\n            updatedAt: new Date() \n          } \n        }\n      );\n      \n      const success = (result.modifiedCount || 0) > 0;\n      console.log(`[CONTEST-STORAGE] ${success ? '✅' : '❌'} Problem update ${success ? 'succeeded' : 'failed'}`);\n      \n      return success;\n    } catch (error) {\n      console.error(`[CONTEST-STORAGE] ❌ Error updating problem ${problemId} in contest ${contestId}:`, error);\n      return false;\n    }\n  }\n\n  async getContestProblems(contestId: string): Promise<ContestProblem[]> {\n    const contest: any = await ContestModel.findOne({ id: contestId }).lean();\n    return contest?.problems || [];\n  }\n\n  async registerParticipant(contestId: string, userId: string): Promise<ContestParticipantDocument> {\n    console.log('[DEBUG] registerParticipant called:', { contestId, userId });\n    const existingParticipant = await ContestParticipantModel.findOne({ contestId, userId }).lean();\n    if (existingParticipant) {\n      console.log('[DEBUG] Participant already exists:', existingParticipant.id);\n      throw new Error('User is already registered for this contest');\n    }\n\n    const participant: any = {\n      id: new ObjectId().toString(),\n      contestId,\n      userId,\n      registrationTime: new Date(),\n      totalScore: 0,\n      totalPenalty: 0,\n      submissions: [],\n      problemsAttempted: [],\n      problemsSolved: [],\n      isDisqualified: false,\n      enrollmentType: 'qr', // Default to QR for self-enrollment\n    };\n\n    console.log('[DEBUG] Creating new participant:', participant);\n    const created = await ContestParticipantModel.create(participant);\n\n    // Also add the user to the contest's participants array\n    try {\n      await ContestModel.findOneAndUpdate(\n        { id: contestId },\n        { $addToSet: { participants: userId } }\n      );\n    } catch (error) {\n      console.error('[DEBUG] Error updating contest participants array:', error);\n      // Don't fail the entire operation if this update fails\n    }\n\n    return created;\n  }\n\n  // New method for admin enrollment\n  async registerParticipantByAdmin(contestId: string, userId: string): Promise<ContestParticipantDocument> {\n    console.log('[DEBUG] registerParticipantByAdmin called:', { contestId, userId });\n    const existingParticipant = await ContestParticipantModel.findOne({ contestId, userId }).lean();\n    if (existingParticipant) {\n      console.log('[DEBUG] Participant already exists:', existingParticipant.id);\n      throw new Error('User is already registered for this contest');\n    }\n\n    const participant: any = {\n      id: new ObjectId().toString(),\n      contestId,\n      userId,\n      registrationTime: new Date(),\n      totalScore: 0,\n      totalPenalty: 0,\n      submissions: [],\n      problemsAttempted: [],\n      problemsSolved: [],\n      isDisqualified: false,\n      enrollmentType: 'admin', // Set enrollment type as admin\n    };\n\n    console.log('[DEBUG] Creating new participant by admin:', participant);\n    const created = await ContestParticipantModel.create(participant);\n\n    // Also add the user to the contest's participants array\n    try {\n      await ContestModel.findOneAndUpdate(\n        { id: contestId },\n        { $addToSet: { participants: userId } }\n      );\n    } catch (error) {\n      console.error('[DEBUG] Error updating contest participants array:', error);\n      // Don't fail the entire operation if this update fails\n    }\n\n    return created;\n  }\n\n  async unregisterParticipant(contestId: string, userId: string): Promise<boolean> {\n    const result = await ContestParticipantModel.deleteOne({ contestId, userId });\n    \n    // Also remove the user from the contest's participants array\n    if (result.deletedCount > 0) {\n      try {\n        await ContestModel.updateOne(\n          { id: contestId },\n          { \n            $pull: { participants: userId },\n            $set: { updatedAt: new Date() }\n          }\n        );\n        console.log('[DEBUG] Removed user from contest participants array');\n      } catch (error) {\n        console.error('[DEBUG] Error removing user from contest participants array:', error);\n        // Don't fail the unregistration if this update fails\n      }\n    }\n    \n    return (result.deletedCount || 0) > 0;\n  }\n\n  async getContestParticipants(contestId: string): Promise<ContestParticipantDocument[]> {\n    // Query participants (lean for performance)\n    const participants = await ContestParticipantModel.find({ contestId }).lean();\n\n    // If there are no participants, return early\n    if (!participants || participants.length === 0) {\n      return [] as any;\n    }\n\n    // Gather unique user ids to hydrate user details\n    const userIds = Array.from(new Set(participants.map((p: any) => String(p.userId))));\n\n    // Load minimal user profile via Mongoose in one query (SRP: storage handles data shaping)\n    const { User } = await import('../models/User');\n    const users = await User.find({ _id: { $in: userIds } })\n      .select('firstName lastName email')\n      .lean();\n\n    // Build map for quick lookup\n    const byId = new Map(users.map((u: any) => [String(u._id), u]));\n\n    // Return enriched participants adhering to a stable response contract\n    const enriched = participants.map((p: any) => {\n      const user = byId.get(String(p.userId));\n      return {\n        ...p,\n        user: user\n          ? {\n              id: String(user._id),\n              firstName: user.firstName || '',\n              lastName: user.lastName || '',\n              email: user.email || '',\n            }\n          : null,\n      };\n    });\n\n    return enriched as any;\n  }\n\n  async getUser(userId: string): Promise<any> {\n    try {\n      // Use Mongoose User model indirectly to keep dependencies minimal here\n      const { User } = await import('../models/User');\n      try {\n        const byId = await User.findById(userId).lean();\n        if (byId) return byId;\n      } catch {}\n      const byLegacy = await User.findOne({ id: userId }).lean();\n      return byLegacy;\n    } catch (error) {\n      console.error('[DEBUG] Error fetching user:', error);\n      return null;\n    }\n  }\n\n  async getUserContestEnrollments(userId: string): Promise<ContestParticipantDocument[]> {\n    const participants = await ContestParticipantModel.find({ userId }).lean();\n    \n    // For each participant, ensure their rank is up to date\n    for (const participant of participants) {\n      if (!participant.rank) {\n        // If rank is missing, update rankings for this contest\n        await this.updateRankings(participant.contestId);\n      }\n    }\n    \n    // Fetch updated participants with ranks\n    const updatedParticipants = await ContestParticipantModel.find({ userId }).lean();\n    return updatedParticipants as any;\n  }\n\n  async updateParticipantScore(contestId: string, userId: string, score: number, penalty: number): Promise<boolean> {\n    const result = await ContestParticipantModel.updateOne(\n      { contestId, userId },\n      { $set: { totalScore: score, totalPenalty: penalty } }\n    );\n    return (result.modifiedCount || 0) > 0;\n  }\n\n  async updateParticipantProblemStatus(contestId: string, userId: string, problemId: string, status: string, points: number): Promise<boolean> {\n    try {\n      // Get current participant data\n      const participant = await ContestParticipantModel.findOne({ contestId, userId }).lean();\n      if (!participant) {\n        console.log(`[CONTEST-STORAGE] Participant not found for contest ${contestId}, user ${userId}`);\n        return false;\n      }\n\n      // Get all submissions for this user and problem to determine final status\n      const problemSubmissions = await ContestSubmissionModel.find({ \n        contestId, \n        userId, \n        problemId \n      }).sort({ submissionTime: -1 }).lean();\n\n      if (problemSubmissions.length === 0) {\n        console.log(`[CONTEST-STORAGE] No submissions found for problem ${problemId}`);\n        return false;\n      }\n\n      // Find the best submission (highest points)\n      const bestSubmission = problemSubmissions.reduce((best, current) => {\n        return (current.points || 0) > (best.points || 0) ? current : best;\n      });\n\n      const isAccepted = (bestSubmission.status || '').toLowerCase() === 'accepted';\n      const finalPoints = bestSubmission.points || 0;\n\n      // Prepare update operations\n      const updateOps: any = {};\n\n      // Update problemsAttempted - add problem if not already there\n      if (!participant.problemsAttempted?.includes(problemId)) {\n        updateOps.$addToSet = { problemsAttempted: problemId };\n      }\n\n      // Update problemsSolved - add problem if accepted and not already there\n      if (isAccepted && !participant.problemsSolved?.includes(problemId)) {\n        if (!updateOps.$addToSet) updateOps.$addToSet = {};\n        updateOps.$addToSet.problemsSolved = problemId;\n      }\n\n      // Remove from problemsSolved if not accepted but was previously there\n      if (!isAccepted && participant.problemsSolved?.includes(problemId)) {\n        if (!updateOps.$pull) updateOps.$pull = {};\n        updateOps.$pull.problemsSolved = problemId;\n      }\n\n      // Calculate total score across all problems\n      const allProblemSubmissions = await ContestSubmissionModel.find({ contestId, userId }).lean();\n      const problemScores: Record<string, number> = {};\n      \n      // Group submissions by problem and find best score for each\n      for (const sub of allProblemSubmissions) {\n        const currentBest = problemScores[sub.problemId] || 0;\n        if ((sub.points || 0) > currentBest) {\n          problemScores[sub.problemId] = sub.points || 0;\n        }\n      }\n      \n      // Calculate total score\n      const totalScore = Object.values(problemScores).reduce((sum, score) => sum + score, 0);\n\n      // Update total score\n      updateOps.$set = {\n        totalScore,\n        totalPenalty: 0, // Reset penalty for now, can be enhanced later\n        updatedAt: new Date()\n      };\n\n      // If we have operations to perform, update the participant\n      if (Object.keys(updateOps).length > 0) {\n        const result = await ContestParticipantModel.updateOne(\n          { contestId, userId },\n          updateOps\n        );\n\n        console.log(`[CONTEST-STORAGE] Updated participant ${userId} for problem ${problemId}:`, {\n          status: bestSubmission.status,\n          points: finalPoints,\n          isAccepted,\n          totalScore,\n          problemsAttempted: updateOps.$addToSet?.problemsAttempted,\n          problemsSolved: updateOps.$addToSet?.problemsSolved || updateOps.$pull?.problemsSolved\n        });\n\n        return (result.modifiedCount || 0) > 0;\n      }\n\n      return true; // No updates needed\n    } catch (error) {\n      console.error(`[CONTEST-STORAGE] Error updating participant problem status:`, error);\n      return false;\n    }\n  }\n\n  async updateParticipantContestEndMethod(contestId: string, userId: string, endMethod: 'manually_ended' | 'time_expired'): Promise<boolean> {\n    try {\n      const result = await ContestParticipantModel.updateOne(\n        { contestId, userId },\n        { \n          $set: { \n            contestEndMethod: endMethod,\n            updatedAt: new Date()\n          }\n        }\n      );\n\n      console.log(`[CONTEST-STORAGE] Updated contest end method for participant ${userId} in contest ${contestId}: ${endMethod}`);\n      return (result.modifiedCount || 0) > 0;\n    } catch (error) {\n      console.error(`[CONTEST-STORAGE] Error updating participant contest end method:`, error);\n      return false;\n    }\n  }\n\n  async updateAllParticipantsContestEndMethod(contestId: string, endMethod: 'manually_ended' | 'time_expired' | null): Promise<boolean> {\n    try {\n      const result = await ContestParticipantModel.updateMany(\n        { contestId },\n        { \n          $set: { \n            contestEndMethod: endMethod,\n            updatedAt: new Date()\n          }\n        }\n      );\n\n      console.log(`[CONTEST-STORAGE] Updated contest end method for all participants in contest ${contestId}: ${endMethod} (${result.modifiedCount} participants updated)`);\n      return (result.modifiedCount || 0) > 0;\n    } catch (error) {\n      console.error(`[CONTEST-STORAGE] Error updating all participants contest end method:`, error);\n      return false;\n    }\n  }\n\n  async disqualifyParticipant(contestId: string, userId: string, reason?: string): Promise<boolean> {\n    try {\n      const updateData: any = {\n        isDisqualified: true,\n        updatedAt: new Date()\n      };\n      \n      if (reason) {\n        updateData.disqualificationReason = reason;\n      }\n\n      const result = await ContestParticipantModel.updateOne(\n        { contestId, userId },\n        { $set: updateData }\n      );\n\n      console.log(`[CONTEST-STORAGE] Disqualified participant ${userId} in contest ${contestId}${reason ? ` for reason: ${reason}` : ''}`);\n      return (result.modifiedCount || 0) > 0;\n    } catch (error) {\n      console.error(`[CONTEST-STORAGE] Error disqualifying participant:`, error);\n      return false;\n    }\n  }\n\n  async submitSolution(submission: Omit<ContestSubmissionDocument, 'id' | '_id'>): Promise<ContestSubmissionDocument> {\n    const doc: any = { ...submission, id: new ObjectId().toString() };\n    console.log(`[CONTEST-STORAGE] Creating submission: contestId=${doc.contestId}, userId=${doc.userId}, problemId=${doc.problemId}, submissionId=${doc.id}`);\n    \n    const created = await ContestSubmissionModel.create(doc);\n    console.log(`[CONTEST-STORAGE] Submission created successfully: ${doc.id}`);\n    \n    // Add submission ID to participant's submissions array\n    const updateResult = await ContestParticipantModel.updateOne(\n      { contestId: doc.contestId, userId: doc.userId },\n      { $push: { submissions: doc.id } as any }\n    );\n    console.log(`[CONTEST-STORAGE] Updated participant submissions array: modifiedCount=${updateResult.modifiedCount}, matchedCount=${updateResult.matchedCount}`);\n\n    // Update participant's problem-solving status\n    await this.updateParticipantProblemStatus(\n      doc.contestId, \n      doc.userId, \n      doc.problemId, \n      doc.status, \n      doc.points || 0\n    );\n\n    return created.toObject() as any;\n  }\n\n  async getContestSubmissions(contestId: string, userId?: string): Promise<ContestSubmissionDocument[]> {\n    const query: any = { contestId };\n    if (userId) query.userId = userId;\n    const list = await ContestSubmissionModel.find(query).sort({ submissionTime: -1 }).lean();\n    return list as any;\n  }\n\n  async getParticipantSubmissions(contestId: string, userId: string): Promise<ContestSubmissionDocument[]> {\n    const list = await ContestSubmissionModel.find({ contestId, userId }).sort({ submissionTime: -1 }).lean();\n    return list as any;\n  }\n\n  async generateLeaderboard(contestId: string): Promise<ContestLeaderboardEntry[]> {\n    // Load contest for problem points and ids\n    const contest: any = await ContestModel.findOne({ id: contestId }).lean();\n    const problemPoints: Record<string, number> = {};\n    for (const p of contest?.problems || []) {\n      problemPoints[(p as any).id] = (p as any).points || 0;\n    }\n\n    // Fetch all enrolled participants first\n    const participants: any[] = await ContestParticipantModel.find({ contestId }).lean();\n    console.log(`[CONTEST-LEADERBOARD] Found ${participants.length} enrolled participants for contest ${contestId}`);\n\n    // Fetch all submissions for contest\n    const allSubs: any[] = await ContestSubmissionModel.find({ contestId }).sort({ submissionTime: 1 }).lean();\n    console.log(`[CONTEST-LEADERBOARD] Found ${allSubs.length} total submissions for contest ${contestId}`);\n    if (allSubs.length > 0) {\n      console.log(`[CONTEST-LEADERBOARD] Sample submissions:`, allSubs.slice(0, 3).map(s => ({\n        userId: s.userId,\n        problemId: s.problemId,\n        status: s.status,\n        points: s.points,\n        submissionTime: s.submissionTime\n      })));\n    }\n\n    // If no participants are enrolled, return empty array\n    if (participants.length === 0) return [] as any;\n\n    // Initialize all enrolled participants with zero scores\n    interface Aggregate {\n      userId: string;\n      problemScores: Record<string, number>;\n      totalScore: number;\n      totalPenalty: number;\n      problemsSolved: number;\n      submissions: number;\n      lastSubmission: Date | null;\n    }\n    const byUser = new Map<string, Aggregate>();\n\n    // Initialize all enrolled participants\n    for (const participant of participants) {\n      byUser.set(participant.userId, {\n        userId: participant.userId,\n        problemScores: {} as Record<string, number>,\n        totalScore: 0,\n        totalPenalty: 0,\n        problemsSolved: 0,\n        submissions: 0,\n        lastSubmission: null,\n      });\n    }\n\n    // Process submissions to update scores\n    for (const s of allSubs) {\n      const agg = byUser.get(s.userId);\n      if (!agg) {\n        console.log(`[CONTEST-LEADERBOARD] Warning: Submission from unenrolled user ${s.userId}`);\n        continue; // Skip submissions from users not enrolled\n      }\n\n      agg.submissions += 1;\n      console.log(`[CONTEST-LEADERBOARD] User ${s.userId} submission ${agg.submissions}: problem ${s.problemId}, status ${s.status}, points ${s.points}`);\n      if (!agg.lastSubmission || (s.submissionTime && s.submissionTime > agg.lastSubmission)) {\n        agg.lastSubmission = s.submissionTime || null;\n      }\n\n      const pointsForProblem = s.points ?? problemPoints[s.problemId] ?? 0;\n      const currentBest = agg.problemScores[s.problemId] || 0;\n      const isAccepted = (s.status || '').toLowerCase() === 'accepted';\n      const scoreThisAttempt = isAccepted ? pointsForProblem : 0;\n\n      if (scoreThisAttempt > currentBest) {\n        // Update score delta and solved count if threshold crossed from 0 to >0\n        if (currentBest === 0 && scoreThisAttempt > 0) {\n          agg.problemsSolved += 1;\n        }\n        agg.totalScore += scoreThisAttempt - currentBest;\n        agg.problemScores[s.problemId] = scoreThisAttempt;\n      }\n    }\n\n    // Optional: enrich usernames\n    const cache = new Map<string, string>();\n    const getDisplayName = async (userId: string) => {\n      if (cache.has(userId)) return cache.get(userId)!;\n      const u = await this.getUser(userId);\n      const name = [u?.firstName, u?.lastName].filter(Boolean).join(' ').trim() || u?.email || userId;\n      cache.set(userId, name);\n      return name;\n    };\n\n    // Assemble entries with ranks\n    const entriesRaw = Array.from(byUser.values());\n    entriesRaw.sort((a, b) => {\n      if (b.totalScore !== a.totalScore) return b.totalScore - a.totalScore;\n      if (a.totalPenalty !== b.totalPenalty) return a.totalPenalty - b.totalPenalty;\n      const at = a.lastSubmission ? a.lastSubmission.getTime() : 0;\n      const bt = b.lastSubmission ? b.lastSubmission.getTime() : 0;\n      return at - bt;\n    });\n\n    // Create participant map for contestEndMethod lookup\n    const participantMap = new Map(participants.map(p => [p.userId, p]));\n\n    const result: any[] = [];\n    let rank = 1;\n    for (const e of entriesRaw) {\n      const participant = participantMap.get(e.userId);\n      const contestEndMethod = participant?.contestEndMethod || null;\n      \n      result.push({\n        rank: rank++,\n        userId: e.userId,\n        userName: await getDisplayName(e.userId),\n        totalScore: e.totalScore,\n        totalPenalty: e.totalPenalty,\n        problemsSolved: e.problemsSolved,\n        submissions: e.submissions,\n        lastSubmission: e.lastSubmission ? e.lastSubmission.toISOString() : '',\n        problemScores: e.problemScores,\n        contestEndMethod: contestEndMethod,\n      });\n    }\n\n    return result as any;\n  }\n\n  async updateRankings(contestId: string): Promise<boolean> {\n    const leaderboard = await this.generateLeaderboard(contestId);\n    for (const entry of leaderboard) {\n      await ContestParticipantModel.updateOne(\n        { contestId, userId: entry.userId },\n        { $set: { rank: entry.rank } }\n      );\n    }\n    return true;\n  }\n\n  async getContestAnalytics(contestId: string): Promise<ContestAnalytics> {\n    const participantsCount = await ContestParticipantModel.countDocuments({ contestId });\n    const submissionsCount = await ContestSubmissionModel.countDocuments({ contestId });\n    const contest: any = await ContestModel.findOne({ id: contestId }).lean();\n    if (!contest) {\n      throw new Error('Contest not found');\n    }\n    const problemStatistics: any[] = [];\n    for (const problem of contest.problems || []) {\n      const problemSubmissions: any[] = await ContestSubmissionModel.find({ contestId, problemId: (problem as any).id }).lean();\n      const successful = problemSubmissions.filter((s: any) => (s.status || '').toLowerCase() === 'accepted').length;\n      problemStatistics.push({\n        problemId: (problem as any).id,\n        totalAttempts: problemSubmissions.length,\n        successfulSolutions: successful,\n      });\n    }\n    return {\n      contestId,\n      totalParticipants: participantsCount,\n      totalSubmissions: submissionsCount,\n      problemStatistics,\n      averageScore: 0,\n      successRate: 0,\n      recentActivity: [],\n    } as any;\n  }\n\n  async submitQuestion(question: Omit<ContestQuestionType, 'id'>): Promise<ContestQuestionType> {\n    const q: any = { ...question, id: new ObjectId().toString(), isPublic: (question as any).isPublic ?? false };\n    const created = await ContestQuestionModel.create(q);\n    return created.toObject() as any;\n  }\n\n  async answerQuestion(questionId: string, answer: string, answeredBy: string): Promise<boolean> {\n    const result = await ContestQuestionModel.updateOne(\n      { id: questionId },\n      { \n        $set: { \n          answer, \n          answeredBy, \n          answeredAt: new Date(),\n          status: 'answered' \n        } \n      }\n    );\n    return (result.modifiedCount || 0) > 0;\n  }\n\n  async getContestQuestions(contestId: string, isPublic?: boolean): Promise<ContestQuestionType[]> {\n    const query: any = { contestId };\n    if (isPublic !== undefined) query.isPublic = isPublic;\n    const list = await ContestQuestionModel.find(query).sort({ timestamp: -1 }).lean();\n    return list as any;\n  }\n\n  async addAnnouncement(contestId: string, message: string, priority: 'low' | 'medium' | 'high' = 'medium'): Promise<boolean> {\n    const announcement = {\n      id: new ObjectId().toString(),\n      message,\n      timestamp: new Date(),\n      priority,\n      isGlobal: true\n    };\n    const result = await ContestModel.updateOne(\n      { id: contestId },\n      { \n        $push: { announcements: announcement },\n        $set: { updatedAt: new Date() }\n      }\n    );\n    return (result.modifiedCount || 0) > 0;\n  }\n\n  async getAnnouncements(contestId: string): Promise<ContestType['announcements']> {\n    const contest: any = await ContestModel.findOne({ id: contestId }).lean();\n    return contest?.announcements || [];\n  }\n\n  // Method to fetch all problems for selection\n  async getAllProblems(): Promise<any[]> {\n    try {\n      // Using existing Problem model shape; adapt to expected fields\n      const problems = await Problem.find({}).sort({ problemNumber: 1 }).lean();\n      return problems.map((p: any) => ({\n        id: p.problemNumber,\n        title: p.title,\n        description: p.description,\n        difficulty: p.difficulty,\n        points: 100,\n        testCases: p.testCases || [],\n        examples: p.examples || [],\n        starterCode: p.starterCode || {},\n        tags: p.tags || [],\n      }));\n    } catch (error) {\n      console.error('Error fetching problems for contest:', error);\n      return [];\n    }\n  }\n\n  // Method to create contest problem instances from selected problems\n  async createContestProblemInstances(selectedProblems: any[], contestId: string): Promise<any[]> {\n    const problemInstances = selectedProblems.map((problem, index) => ({\n      id: `${contestId}_${problem.id}_${Date.now()}_${index}`,\n      originalProblemId: problem.id,\n      title: problem.title,\n      description: problem.description,\n      difficulty: problem.difficulty,\n      points: problem.points || 100, // Use points from frontend or default to 100\n      order: index,\n      timeLimit: problem.timeLimit,\n      memoryLimit: problem.memoryLimit,\n      constraints: problem.constraints,\n      inputFormat: problem.inputFormat,\n      outputFormat: problem.outputFormat,\n      maxSubmissions: undefined,\n      partialScoring: false,\n      // Copy test cases and examples (like in Assignments/Courses)\n      customTestCases: problem.testCases,\n      customExamples: problem.examples,\n      customStarterCode: problem.starterCode,\n      // Copy all other problem properties\n      tags: problem.tags || [],\n      notes: problem.notes || \"\",\n      examples: problem.examples || [],\n      testCases: problem.testCases || [],\n      starterCode: problem.starterCode || {}\n    }));\n\n    return problemInstances;\n  }\n}\n\nexport const contestStorage = new ContestStorage();","size_bytes":37474},"client/src/pages/contest-problems.tsx":{"content":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { Play, Send, CheckCircle, XCircle, Clock, AlertCircle, ArrowLeft, AlertTriangle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { MonacoEditor } from '@/components/MonacoEditor';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\n\ninterface ContestProblem {\n  id: string;\n  title: string;\n  description: string;\n  difficulty: string;\n  points: number;\n  timeLimit: number;\n  memoryLimit: number;\n  constraints?: string;\n  inputFormat?: string;\n  outputFormat?: string;\n  examples: Array<{\n    input: string;\n    output: string;\n    explanation?: string;\n  }>;\n  testCases: Array<{\n    input: string;\n    expectedOutput: string;\n    explanation?: string;\n    isHidden?: boolean;\n    timeLimit?: number;\n    memoryLimit?: number;\n  }>;\n  starterCode: Record<string, string>;\n  originalProblemId?: string | number;\n}\n\ninterface Contest {\n  id: string;\n  title: string;\n  startTime: string;\n  endTime: string;\n  problems: ContestProblem[];\n}\n\ninterface Submission {\n  id: string;\n  problemId: string;\n  code: string;\n  language: string;\n  status: 'pending' | 'accepted' | 'wrong_answer' | 'time_limit_exceeded' | 'runtime_error' | 'compilation_error';\n  runtime?: number;\n  memory?: number;\n  submittedAt?: string; // client field\n  submissionTime?: string; // server field\n}\n\nexport default function ContestProblemsPage() {\n  // Extend Document interface for fullscreen properties\n  interface ExtendedDocument extends Document {\n    webkitFullscreenElement?: Element | null;\n    msFullscreenElement?: Element | null;\n    webkitExitFullscreen?: () => Promise<void>;\n    msExitFullscreen?: () => Promise<void>;\n  }\n\n  const extendedDocument = document as ExtendedDocument;\n\n  const params = useParams() as any;\n  const contestId = params.contestId as string;\n  const initialProblemParam = params.problemId as string | undefined;\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { isAuthenticated } = useAuth();\n  \n  const [selectedProblem, setSelectedProblem] = useState<ContestProblem | null>(null);\n  const [code, setCode] = useState('');\n  const [language, setLanguage] = useState('javascript');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isRunning, setIsRunning] = useState(false);\n  const [activeTab, setActiveTab] = useState('problem');\n  const [testResults, setTestResults] = useState<any[]>([]);\n  const [showTestResults, setShowTestResults] = useState(false);\n  const [contestProgress, setContestProgress] = useState<any>(null);\n  const [leaderboard, setLeaderboard] = useState<any[]>([]);\n  const [announcements, setAnnouncements] = useState<any[]>([]);\n  const [standings, setStandings] = useState<any>(null);\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const [detailsSubmission, setDetailsSubmission] = useState<Submission | null>(null);\n  const [timeLeftMs, setTimeLeftMs] = useState<number | null>(null);\n  const [autoSubmitted, setAutoSubmitted] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showFullscreenDialog, setShowFullscreenDialog] = useState(false);\n  const [useCustomInput, setUseCustomInput] = useState(false);\n  const [customInput, setCustomInput] = useState(\"\");\n  \n  // Tab switch tracking state\n  const [tabSwitchCount, setTabSwitchCount] = useState(0);\n  const [showTabSwitchDialog, setShowTabSwitchDialog] = useState(false);\n  const [isContestTerminated, setIsContestTerminated] = useState(false);\n  \n  // Contest ending confirmation dialog state\n  const [showEndContestDialog, setShowEndContestDialog] = useState(false);\n  \n  // Refs for tab switching detection\n  const wasVisibleRef = useRef(!document.hidden);\n  const hasFocusRef = useRef(document.hasFocus());\n  const lastSwitchTimeRef = useRef(Date.now());\n\n  // Persist code per-problem locally so we can auto-submit for all\n  useEffect(() => {\n    if (!selectedProblem) return;\n    const key = `contest:${contestId}:problem:${selectedProblem.id}:code`;\n    try {\n      localStorage.setItem(key, code);\n    } catch {}\n  }, [code, selectedProblem, contestId]);\n\n  // Persist language per-problem locally for auto-submission\n  useEffect(() => {\n    if (!selectedProblem) return;\n    const key = `contest:${contestId}:problem:${selectedProblem.id}:language`;\n    try {\n      localStorage.setItem(key, language);\n    } catch {}\n  }, [language, selectedProblem, contestId]);\n\n  // Reset tab switch count when entering a new contest or refreshing page\n  useEffect(() => {\n    // Reset all tab switching state for new contest\n    setTabSwitchCount(0);\n    setShowTabSwitchDialog(false);\n    setIsContestTerminated(false);\n    \n    // Reset refs\n    wasVisibleRef.current = !document.hidden;\n    hasFocusRef.current = document.hasFocus();\n    lastSwitchTimeRef.current = Date.now();\n    \n    // Clear any existing localStorage data for this contest\n    const key = `contest:${contestId}:tabSwitchCount`;\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.log('Failed to clear tab switch count:', error);\n    }\n    \n    console.log(`Tab switch count reset for new contest: ${contestId}`);\n    console.log(`Initial state: isVisible=${!document.hidden}, hasFocus=${document.hasFocus()}`);\n    \n    // Cleanup function to reset tab switch count when leaving contest\n    return () => {\n      // If user navigates away from contest, reset the count\n      const cleanupKey = `contest:${contestId}:tabSwitchCount`;\n      try {\n        localStorage.removeItem(cleanupKey);\n        console.log(`Tab switch count cleaned up for contest: ${contestId}`);\n      } catch (error) {\n        console.log('Failed to cleanup tab switch count:', error);\n      }\n    };\n  }, [contestId]);\n  \n  // Additional reset on page refresh/component mount\n  useEffect(() => {\n    // Ensure tab switch count is reset on page refresh\n    if (contestId) {\n    const key = `contest:${contestId}:tabSwitchCount`;\n    try {\n      localStorage.removeItem(key);\n      console.log(`Tab switch count cleared on page refresh for contest: ${contestId}`);\n    } catch (error) {\n      console.log('Failed to clear tab switch count on refresh:', error);\n    }\n    }\n  }, [contestId]); // Added contestId to dependencies\n\n\n\n  // Check if we're in contest fullscreen mode\n  useEffect(() => {\n    const checkFullscreen = () => {\n      const isInFullscreen = document.body.classList.contains('contest-fullscreen');\n      setIsFullscreen(isInFullscreen);\n    };\n\n    // Check initially\n    checkFullscreen();\n\n    // Set up observer to watch for class changes\n    const observer = new MutationObserver(checkFullscreen);\n    observer.observe(document.body, { attributes: true, attributeFilter: ['class'] });\n\n    // Listen for fullscreen change events\n    const handleFullscreenChange = () => {\n      if (!document.fullscreenElement && !extendedDocument.webkitFullscreenElement && !extendedDocument.msFullscreenElement) {\n        // User manually exited full-screen mode\n        document.body.classList.remove('contest-fullscreen');\n        setIsFullscreen(false);\n      }\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n    document.addEventListener('msfullscreenchange', handleFullscreenChange);\n\n    return () => {\n      observer.disconnect();\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n      document.removeEventListener('webkitfullscreenchange', handleFullscreenChange);\n      document.removeEventListener('msfullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n\n  // Function to auto-submit all problems and terminate contest (for tab switching)\n  // This will be defined after the required functions are declared\n\n  // Function to handle contest ending with confirmation dialog\n  const handleEndContest = () => {\n    setShowEndContestDialog(true);\n  };\n\n  // Function to confirm contest ending and auto-submit code\n  const confirmEndContest = async () => {\n    try {\n      // Call API to manually end the contest in the database\n      const endContestResponse = await fetch(`/api/contests/${contestId}/end`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n\n      if (!endContestResponse.ok) {\n        throw new Error('Failed to end contest');\n      }\n\n      const endContestResult = await endContestResponse.json();\n      console.log('Contest ended successfully:', endContestResult);\n      \n      // Set localStorage flag for backward compatibility (can be removed later)\n      const uid = localStorage.getItem('userId') || 'me';\n      localStorage.setItem(`contest:${contestId}:endedBy:${uid}`, 'true');\n      \n      // Auto-submit only problems that haven't been submitted or aren't accepted\n      const problemsToSubmit: Array<{problem: ContestProblem, code: string, language: string}> = [];\n      \n      if (contest?.problems) {\n        for (const problem of contest.problems) {\n          const codeKey = `contest:${contestId}:problem:${problem.id}:code`;\n          const langKey = `contest:${contestId}:problem:${problem.id}:language`;\n          \n          try {\n            const storedCode = localStorage.getItem(codeKey);\n            const storedLang = localStorage.getItem(langKey) || 'javascript';\n            \n            if (storedCode && storedCode.trim()) {\n              // Check if this problem has already been submitted (regardless of status)\n              const currentStatus = getSubmissionStatus(problem.id);\n              const hasSubmission = currentStatus !== null;\n              \n              // Only submit if:\n              // 1. No submission exists yet, OR\n              // 2. Submission exists but status is not 'accepted' AND we have new/modified code\n              if (!hasSubmission) {\n                problemsToSubmit.push({\n                  problem,\n                  code: storedCode,\n                  language: storedLang\n                });\n                console.log(`Will submit problem ${problem.title} - no previous submission`);\n              } else if (currentStatus !== 'accepted') {\n                // Check if code has changed since last submission\n                const lastSubmission = submissions?.find(s => s.problemId === problem.id);\n                if (lastSubmission && lastSubmission.code !== storedCode) {\n                  problemsToSubmit.push({\n                    problem,\n                    code: storedCode,\n                    language: storedLang\n                  });\n                  console.log(`Will submit problem ${problem.title} - code modified since last submission (status: ${currentStatus})`);\n                } else {\n                  console.log(`Skipping problem ${problem.title} - already submitted with same code (status: ${currentStatus})`);\n                }\n              } else {\n                console.log(`Skipping problem ${problem.title} - already accepted`);\n              }\n            }\n          } catch (error) {\n            console.error(`Failed to retrieve code for problem ${problem.id}:`, error);\n          }\n        }\n      }\n      \n      // Submit only problems that need submission\n      let submittedCount = 0;\n      let skippedCount = 0;\n      \n      if (problemsToSubmit.length > 0) {\n      for (const {problem, code, language} of problemsToSubmit) {\n        try {\n          const response = await fetch(`/api/contests/${contestId}/problems/${problem.id}/submit`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${localStorage.getItem('token')}`,\n            },\n            body: JSON.stringify({\n              code,\n              language,\n              autoSubmitted: true,\n            }),\n          });\n          \n          if (response.ok) {\n            submittedCount++;\n            console.log(`Auto-submitted solution for problem: ${problem.title}`);\n          } else {\n            console.error(`Failed to auto-submit solution for problem: ${problem.title}`);\n          }\n        } catch (error) {\n          console.error(`Error auto-submitting solution for problem ${problem.title}:`, error);\n        }\n        }\n      } else {\n        // Count how many problems were already accepted\n        skippedCount = contest?.problems?.filter(problem => {\n          const status = getSubmissionStatus(problem.id);\n          return status === 'accepted';\n        }).length || 0;\n      }\n      \n      // Show appropriate message\n      if (submittedCount > 0) {\n        toast({\n          title: 'Contest Ended Successfully',\n          description: `${submittedCount} solution(s) submitted, ${skippedCount} already accepted.`,\n          variant: 'default',\n        });\n      } else if (skippedCount > 0) {\n        toast({\n          title: 'Contest Ended',\n          description: `All ${skippedCount} problems already accepted. No new submissions needed.`,\n          variant: 'default',\n        });\n      } else {\n        toast({\n          title: 'Contest Ended',\n          description: 'No solutions to submit. Contest ended successfully.',\n          variant: 'default',\n        });\n      }\n      \n      // Reset tab switch count for this contest (in case user re-enters)\n      const tabSwitchKey = `contest:${contestId}:tabSwitchCount`;\n      try {\n        localStorage.removeItem(tabSwitchKey);\n      } catch (error) {\n        console.log('Failed to clear tab switch count:', error);\n      }\n      \n      // Close dialog and exit contest\n      setShowEndContestDialog(false);\n      exitContestAndRedirect();\n      \n    } catch (error) {\n      console.error('Error ending contest:', error);\n      toast({\n        title: 'Error Ending Contest',\n        description: 'Failed to auto-submit solutions. Contest will still be ended.',\n        variant: 'destructive',\n      });\n      \n      // Still end contest even if auto-submission failed\n      setShowEndContestDialog(false);\n      exitContestAndRedirect();\n    }\n  };\n\n  // Tab switch detection for contest pages - will be defined after terminateContestAndSubmit\n\n  // Always disable right-click during the contest page lifecycle\n  useEffect(() => {\n    const preventContextMenu = (e: MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    };\n\n    document.addEventListener('contextmenu', preventContextMenu, true);\n\n    return () => {\n      document.removeEventListener('contextmenu', preventContextMenu, true);\n    };\n  }, []);\n\n  // Detect full-screen exit and show dialog\n  useEffect(() => {\n    // Enhanced URL detection for contest pages\n    const isContestPage = () => {\n      const currentPath = window.location.pathname;\n      const isContestProblemsListPage = /^\\/contests\\/[^\\/]+\\/problems\\/?$/.test(currentPath);\n      const isSpecificProblemPage = /^\\/contests\\/[^\\/]+\\/problems\\/[^\\/]+\\/?$/.test(currentPath);\n      return isContestProblemsListPage || isSpecificProblemPage;\n    };\n\n    // Automatically add contest-fullscreen class if we're on a contest page\n    const ensureContestClass = () => {\n      const isOnContestPage = isContestPage();\n      if (isOnContestPage && !document.body.classList.contains('contest-fullscreen')) {\n        console.log('Automatically adding contest-fullscreen class for contest page');\n        document.body.classList.add('contest-fullscreen');\n      }\n    };\n\n    // Check and add class immediately\n    ensureContestClass();\n\n    const handleFullscreenChange = () => {\n      const hasContestClass = document.body.classList.contains('contest-fullscreen');\n      const isInFullscreen = document.fullscreenElement || extendedDocument.webkitFullscreenElement || extendedDocument.msFullscreenElement;\n      const isOnContestPage = isContestPage();\n      \n      console.log('Full-screen change detected:', {\n        hasContestClass,\n        isInFullscreen,\n        isOnContestPage,\n        currentPath: window.location.pathname\n      });\n      \n      if (hasContestClass && !isInFullscreen && isOnContestPage) {\n        console.log('Full-screen mode exited on contest page, showing dialog...');\n        setShowFullscreenDialog(true);\n        setIsFullscreen(false);\n      } else if (hasContestClass && isInFullscreen && isOnContestPage) {\n        console.log('Full-screen mode entered on contest page, hiding dialog...');\n        setShowFullscreenDialog(false);\n        setIsFullscreen(true);\n      }\n    };\n\n    // Check initial state\n    const hasContestClass = document.body.classList.contains('contest-fullscreen');\n    const isInFullscreen = document.fullscreenElement || extendedDocument.webkitFullscreenElement || extendedDocument.msFullscreenElement;\n    const isOnContestPage = isContestPage();\n    \n    console.log('Initial full-screen check:', {\n      hasContestClass,\n      isInFullscreen,\n      isOnContestPage,\n      currentPath: window.location.pathname\n    });\n    \n    if (hasContestClass && !isInFullscreen && isOnContestPage) {\n      console.log('Initial check: Full-screen not active on contest page, showing dialog...');\n      setShowFullscreenDialog(true);\n      setIsFullscreen(false);\n    }\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n    document.addEventListener('msfullscreenchange', handleFullscreenChange);\n\n    // Also check when URL changes (user navigates between contest pages)\n    const checkFullscreenOnUrlChange = () => {\n      // Ensure contest class is present\n      ensureContestClass();\n      \n      const hasContestClass = document.body.classList.contains('contest-fullscreen');\n      const isInFullscreen = document.fullscreenElement || extendedDocument.webkitFullscreenElement || extendedDocument.msFullscreenElement;\n      const isOnContestPage = isContestPage();\n      \n      console.log('URL change detected, checking full-screen status:', {\n        hasContestClass,\n        isInFullscreen,\n        isOnContestPage,\n        currentPath: window.location.pathname\n      });\n      \n      if (hasContestClass && !isInFullscreen && isOnContestPage) {\n        console.log('URL change: Full-screen not active on contest page, showing dialog...');\n        setShowFullscreenDialog(true);\n        setIsFullscreen(false);\n      }\n    };\n\n    // Check immediately and also on URL changes\n    checkFullscreenOnUrlChange();\n    \n    // Also listen for popstate (back/forward buttons) and hashchange\n    window.addEventListener('popstate', ensureContestClass);\n    window.addEventListener('hashchange', ensureContestClass);\n    \n    // Periodic check every 500ms to catch any missed full-screen exits\n    const periodicCheck = setInterval(() => {\n      // Ensure contest class is present\n      ensureContestClass();\n      \n      const hasContestClass = document.body.classList.contains('contest-fullscreen');\n      const isInFullscreen = document.fullscreenElement || extendedDocument.webkitFullscreenElement || extendedDocument.msFullscreenElement;\n      const isOnContestPage = isContestPage();\n      \n      if (hasContestClass && !isInFullscreen && isOnContestPage && !showFullscreenDialog) {\n        console.log('Periodic check: Full-screen not active on contest page, showing dialog...');\n        setShowFullscreenDialog(true);\n        setIsFullscreen(false);\n      }\n    }, 500);\n    \n    // Listen for focus and visibility changes (alt-tab, browser switching)\n    const handleFocusAndVisibility = () => {\n      // Ensure contest class is present\n      ensureContestClass();\n      \n      const hasContestClass = document.body.classList.contains('contest-fullscreen');\n      const isInFullscreen = document.fullscreenElement || extendedDocument.webkitFullscreenElement || extendedDocument.msFullscreenElement;\n      const isOnContestPage = isContestPage();\n      \n      if (hasContestClass && !isInFullscreen && isOnContestPage && !showFullscreenDialog) {\n        console.log('Focus/Visibility change: Full-screen not active on contest page, showing dialog...');\n        setShowFullscreenDialog(true);\n        setIsFullscreen(false);\n      }\n    };\n    \n    window.addEventListener('focus', handleFocusAndVisibility);\n    document.addEventListener('visibilitychange', handleFocusAndVisibility);\n    \n    // Listen for URL changes (navigation between contest pages)\n    const originalPushState = history.pushState;\n    const originalReplaceState = history.replaceState;\n    \n    history.pushState = function(...args) {\n      originalPushState.apply(history, args);\n      setTimeout(checkFullscreenOnUrlChange, 0);\n    };\n    \n    history.replaceState = function(...args) {\n      originalReplaceState.apply(history, args);\n      setTimeout(checkFullscreenOnUrlChange, 0);\n    };\n\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n      document.removeEventListener('webkitfullscreenchange', handleFullscreenChange);\n      document.removeEventListener('msfullscreenchange', handleFullscreenChange);\n      \n      // Clear periodic check\n      clearInterval(periodicCheck);\n      \n      // Remove focus and visibility listeners\n      window.removeEventListener('focus', handleFocusAndVisibility);\n      document.removeEventListener('visibilitychange', handleFocusAndVisibility);\n      \n      // Remove navigation listeners\n      window.removeEventListener('popstate', ensureContestClass);\n      window.removeEventListener('hashchange', ensureContestClass);\n      \n      // Restore original history methods\n      history.pushState = originalPushState;\n      history.replaceState = originalReplaceState;\n    };\n  }, []);\n\n  // Disable copy-paste globally when in contest fullscreen mode\n  useEffect(() => {\n    if (!isFullscreen) return;\n\n    const preventCopyPaste = (e: KeyboardEvent | ClipboardEvent) => {\n      // Prevent Ctrl+C, Ctrl+V, Ctrl+X and block Escape/F11 in contest mode\n      if (e instanceof KeyboardEvent) {\n        const isCtrlCombo = (e.ctrlKey || e.metaKey) && (e.key === 'c' || e.key === 'v' || e.key === 'x');\n        const isEscape = e.key === 'Escape' || e.key === 'Esc';\n        const isF11 = e.key === 'F11';\n        if (isCtrlCombo || isEscape || isF11) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (isCtrlCombo) {\n            toast({\n              title: 'Copy/Paste Disabled',\n              description: 'Copy and paste operations are disabled during contest mode to prevent plagiarism.',\n              variant: 'destructive'\n            });\n          } else if (isEscape) {\n            toast({\n              title: 'Escape Disabled',\n              description: 'Exiting or closing with Escape is disabled during contest mode.',\n              variant: 'destructive'\n            });\n          } else if (isF11) {\n            // Best-effort block; some browsers may not allow preventing F11\n            toast({\n              title: 'Fullscreen Toggle Disabled',\n              description: 'Toggling fullscreen with F11 is disabled during contest mode.',\n              variant: 'destructive'\n            });\n          }\n\n          return false;\n        }\n      }\n      \n      // Prevent paste events\n      if (e instanceof ClipboardEvent) {\n        e.preventDefault();\n        e.stopPropagation();\n        \n        // Show toast notification\n        toast({\n          title: 'Paste Disabled',\n          description: 'Paste operations are disabled during contest mode to prevent plagiarism.',\n          variant: 'destructive'\n        });\n        \n        return false;\n      }\n    };\n\n    // Add event listeners\n    document.addEventListener('keydown', preventCopyPaste, true);\n    document.addEventListener('copy', preventCopyPaste, true);\n    document.addEventListener('paste', preventCopyPaste, true);\n    document.addEventListener('cut', preventCopyPaste, true);\n\n    // Cleanup\n    return () => {\n      document.removeEventListener('keydown', preventCopyPaste, true);\n      document.removeEventListener('copy', preventCopyPaste, true);\n      document.removeEventListener('paste', preventCopyPaste, true);\n      document.removeEventListener('cut', preventCopyPaste, true);\n    };\n  }, [isFullscreen, toast]);\n\n  // Always disable F12 (DevTools) during the contest page lifecycle\n  useEffect(() => {\n    const preventDevTools = (e: KeyboardEvent) => {\n      if (e.key === 'F12') {\n        e.preventDefault();\n        e.stopPropagation();\n        toast({\n          title: 'Developer Tools Disabled',\n          description: 'Opening DevTools (F12) is disabled during the contest.',\n          variant: 'destructive'\n        });\n        return false;\n      }\n    };\n\n    document.addEventListener('keydown', preventDevTools, true);\n\n    return () => {\n      document.removeEventListener('keydown', preventDevTools, true);\n    };\n  }, [toast]);\n\n  // Cleanup on component unmount\n  useEffect(() => {\n    return () => {\n      // Remove contest-fullscreen class when component unmounts\n      document.body.classList.remove('contest-fullscreen');\n      \n      // Exit full-screen mode if still active\n      if (document.fullscreenElement || extendedDocument.webkitFullscreenElement || extendedDocument.msFullscreenElement) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (extendedDocument.webkitExitFullscreen) {\n          extendedDocument.webkitExitFullscreen();\n        } else if (extendedDocument.msExitFullscreen) {\n          extendedDocument.msExitFullscreen();\n        }\n      }\n    };\n  }, []);\n\n  // Function to enter full-screen mode\n  const enterFullscreen = async () => {\n    try {\n      const elem: any = document.documentElement;\n      if (elem.requestFullscreen) {\n        await elem.requestFullscreen();\n      } else if (elem.webkitRequestFullscreen) {\n        await elem.webkitRequestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        await elem.msRequestFullscreen();\n      }\n      document.body.classList.add('contest-fullscreen');\n      setShowFullscreenDialog(false);\n      setIsFullscreen(true);\n    } catch (err) {\n      console.error('Failed to enter full-screen mode:', err);\n      toast({\n        title: 'Full-Screen Error',\n        description: 'Failed to enter full-screen mode. Please try again.',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  // Function to exit full-screen mode and redirect to contests page\n  const exitContestAndRedirect = () => {\n    // Remove the contest-fullscreen class from body\n    document.body.classList.remove('contest-fullscreen');\n    \n    // Exit full-screen mode if browser supports it\n    if (document.fullscreenElement || extendedDocument.webkitFullscreenElement || extendedDocument.msFullscreenElement) {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (extendedDocument.webkitExitFullscreen) {\n        extendedDocument.webkitExitFullscreen();\n      } else if (extendedDocument.msExitFullscreen) {\n        extendedDocument.msExitFullscreen();\n      }\n    }\n    \n    // Redirect to contests page\n    setLocation('/contests');\n  };\n\n  // When contest time expires, auto-submit code for all problems once\n  useEffect(() => {\n    // contest is declared below; guard until it exists via typeof check on window to avoid TDZ\n    const hasContest = typeof contest !== 'undefined' && contest !== null as any;\n    if (!hasContest || autoSubmitted) return;\n    if (timeLeftMs !== null && timeLeftMs <= 0) {\n      (async () => {\n        try {\n          for (const problem of (contest as any).problems || []) {\n            const key = `contest:${contestId}:problem:${problem.id}:code`;\n            const savedCode = localStorage.getItem(key) || code;\n            if (!savedCode) continue;\n            try {\n              await fetch(`/api/contests/${contestId}/problems/${problem.id}/submit`, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${localStorage.getItem('token')}`,\n                },\n                body: JSON.stringify({ code: savedCode, language })\n              });\n            } catch (e) {\n              console.error('Auto-submit failed for problem', problem.id, e);\n            }\n          }\n          setAutoSubmitted(true);\n          toast({ title: 'Contest Ended', description: 'Your code has been auto-submitted.' });\n          \n          // Reset tab switch count for this contest (in case user re-enters)\n          const tabSwitchKey = `contest:${contestId}:tabSwitchCount`;\n          try {\n            localStorage.removeItem(tabSwitchKey);\n          } catch (error) {\n            console.log('Failed to clear tab switch count:', error);\n          }\n          \n          // Exit full-screen mode and redirect after auto-submit\n          setTimeout(() => {\n            exitContestAndRedirect();\n          }, 2000); // Give user 2 seconds to see the toast\n        } catch (err) {\n          console.error('Auto-submit batch failed', err);\n        }\n      })();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timeLeftMs, autoSubmitted, code, language, contestId]);\n\n  const formatTimeLeft = (ms?: number | null) => {\n    if (!ms && ms !== 0) return '';\n    const totalSeconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    return `${minutes}m ${seconds.toString().padStart(2, '0')}s`;\n  };\n\n  // Fetch contest details\n  const { data: contest, isLoading, error: contestError } = useQuery<Contest>({\n    queryKey: ['/api/contests', contestId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (response.status === 401) {\n        throw new Error('Authentication required');\n      }\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch contest details');\n      }\n      \n      return response.json();\n    },\n    enabled: !!contestId && isAuthenticated,\n    retry: (failureCount, error) => {\n      // Don't retry on authentication errors\n      if (error.message === 'Authentication required') {\n        return false;\n      }\n      return failureCount < 3;\n    },\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n  });\n\n  // Fetch user enrollment status to check if disqualified\n  const { data: enrollmentStatus } = useQuery({\n    queryKey: ['/api/contests', contestId, 'participants', 'me'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}/participants/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        return null; // User not enrolled\n      }\n      \n      return response.json();\n    },\n    enabled: !!contestId && isAuthenticated,\n    retry: false,\n  });\n\n  // Fetch user submissions\n  const { data: submissions, isFetching: isFetchingSubmissions } = useQuery<Submission[]>({\n    queryKey: ['/api/contests', contestId, 'submissions'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}/submissions`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (response.status === 401) {\n        throw new Error('Authentication required');\n      }\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch submissions');\n      }\n      \n      return response.json();\n    },\n    enabled: !!contestId && isAuthenticated,\n    refetchInterval: activeTab === 'submissions' ? 2000 : false,\n    refetchOnWindowFocus: activeTab === 'submissions',\n    refetchOnReconnect: activeTab === 'submissions',\n    refetchOnMount: activeTab === 'submissions',\n    retry: (failureCount, error) => {\n      // Don't retry on authentication errors\n      if (error.message === 'Authentication required') {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  // Track a pending loading state after Submit until the next submissions refetch settles\n  const [submissionsLoadPending, setSubmissionsLoadPending] = useState(false);\n  useEffect(() => {\n    if (submissionsLoadPending && !isFetchingSubmissions) {\n      setSubmissionsLoadPending(false);\n    }\n  }, [isFetchingSubmissions, submissionsLoadPending]);\n\n  // Fetch contest progress\n  const { data: progress } = useQuery({\n    queryKey: ['/api/contests', contestId, 'progress'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}/progress`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch progress');\n      }\n      \n      return response.json();\n    },\n    enabled: !!contestId && isAuthenticated,\n  });\n\n  // Fetch leaderboard\n  const { data: leaderboardData } = useQuery({\n    queryKey: ['/api/contests', contestId, 'leaderboard'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}/leaderboard`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch leaderboard');\n      }\n      \n      return response.json();\n    },\n    enabled: !!contestId && isAuthenticated,\n  });\n\n  // Establish a 1s ticking timer once contest is known\n  useEffect(() => {\n    if (!contest) return;\n    const end = new Date(contest.endTime).getTime();\n    const computeLeft = () => Math.max(0, end - Date.now());\n    setTimeLeftMs(computeLeft());\n    const interval = setInterval(() => setTimeLeftMs(computeLeft()), 1000);\n    return () => clearInterval(interval);\n  }, [contest]);\n\n  // Fetch announcements\n  const { data: announcementsData } = useQuery({\n    queryKey: ['/api/contests', contestId, 'announcements'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/contests/${contestId}/announcements`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch announcements');\n      }\n      \n      return response.json();\n    },\n    enabled: !!contestId && isAuthenticated,\n  });\n\n  // If a specific problemId is present in URL, select it when contest loads\n  useEffect(() => {\n    if (!contest || !initialProblemParam) return;\n    const target = contest.problems.find(p => p.id === initialProblemParam);\n    if (target) {\n      setSelectedProblem(target);\n      const starterCode = target.starterCode || {};\n      setCode(\n        starterCode[language] ||\n        (language === 'c' ? (starterCode['c'] || starterCode['cpp']) : undefined) ||\n        starterCode['cpp'] ||\n        starterCode['javascript'] ||\n        starterCode['python'] ||\n        ''\n      );\n      // Add class to body to support fullscreen view without nav (for safety if route still uses layout)\n      document.body.classList.add('contest-fullscreen');\n      return () => { document.body.classList.remove('contest-fullscreen'); };\n    }\n  }, [contest, initialProblemParam, language]);\n\n  // Update code when problem or language changes\n  useEffect(() => {\n    if (selectedProblem) {\n      console.log('Selected problem data:', {\n        id: selectedProblem.id,\n        title: selectedProblem.title,\n        hasDescription: !!selectedProblem.description,\n        hasExamples: !!selectedProblem.examples,\n        hasStarterCode: !!selectedProblem.starterCode,\n        description: selectedProblem.description?.substring(0, 100) + '...',\n        examplesCount: selectedProblem.examples?.length || 0,\n        starterCodeKeys: selectedProblem.starterCode ? Object.keys(selectedProblem.starterCode) : []\n      });\n      const starterCode = selectedProblem.starterCode || {};\n      setCode(\n        starterCode[language] ||\n        (language === 'c' ? (starterCode['c'] || starterCode['cpp']) : undefined) ||\n        starterCode['cpp'] ||\n        starterCode['javascript'] ||\n        starterCode['python'] ||\n        ''\n      );\n    }\n  }, [selectedProblem, language]);\n\n  // Submit solution mutation\n  const submitMutation = useMutation({\n    mutationFn: async ({ problemId, code, language }: { problemId: string; code: string; language: string }) => {\n      const response = await fetch(`/api/contests/${contestId}/problems/${problemId}/submit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ code, language }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to submit solution');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Solution Submitted',\n        description: 'Your solution has been submitted successfully!',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/contests', contestId, 'submissions'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Submission Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Run code mutation\n  const runCodeMutation = useMutation({\n    mutationFn: async ({ code, language }: { code: string; language: string }) => {\n      const response = await fetch('/api/execute', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ \n          code, \n          language,\n          input: selectedProblem?.examples?.[0]?.input || ''\n        }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to run code');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Code Executed',\n        description: `Output: ${data.output}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Execution Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Custom input execution mutation\n  const customInputExecutionMutation = useMutation({\n    mutationFn: async ({ code, language, customInput }: { code: string; language: string; customInput: string }) => {\n      const response = await fetch('/api/contests/run-custom-input', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ \n          code, \n          language,\n          customInput\n        }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to execute with custom input');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      console.log('🎯 [CONTEST-CUSTOM-INPUT] Execution result:', data);\n      if (data.status === 'error' || data.error) {\n        toast({\n          title: 'Custom Input Execution Failed',\n          description: data.error || 'Execution failed',\n          variant: 'destructive',\n        });\n        \n        // Show error in Test Results tab\n        const errorResult = {\n          input: customInput,\n          output: '',\n          expectedOutput: 'Custom Input Test',\n          passed: false,\n          runtime: data.runtime || 0,\n          memory: data.memory || 0,\n          error: data.error || 'Execution failed',\n          isCustomInput: true\n        } as any;\n        // Clear previous results and show only custom input result\n        setTestResults([errorResult]);\n        setShowTestResults(true);\n        setActiveTab('results');\n      } else {\n        toast({\n          title: 'Custom Input Execution Successful',\n          description: `Output: ${data.output || 'No output'}`,\n        });\n        \n        // Show success result in Test Results tab\n        const successResult = {\n          input: customInput,\n          output: data.output || 'No output',\n          expectedOutput: 'Custom Input Test',\n          passed: true,\n          runtime: data.runtime || 0,\n          memory: data.memory || 0,\n          error: null,\n          isCustomInput: true\n        } as any;\n        // Clear previous results and show only custom input result\n        setTestResults([successResult]);\n        setShowTestResults(true);\n        setActiveTab('results');\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Execution Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleRunCode = async () => {\n    if (!selectedProblem || !code.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please select a problem and write some code first.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsRunning(true);\n    try {\n      console.log(`🚀 [CONTEST-RUN] Running code for problem: ${selectedProblem.title}`);\n      console.log(`📝 [CONTEST-RUN] Language: ${language}`);\n      console.log(`📝 [CONTEST-RUN] Code length: ${code.length} characters`);\n      \n      // Get the first example as test input\n      console.log(`🔍 [CONTEST-RUN] Problem examples:`, selectedProblem.examples);\n      console.log(`🔍 [CONTEST-RUN] First example:`, selectedProblem.examples?.[0]);\n      console.log(`🔍 [CONTEST-RUN] Problem testCases:`, selectedProblem.testCases);\n      \n      // Try to get input from examples first, then testCases\n      let testInput = selectedProblem.examples?.[0]?.input || '';\n      if (!testInput && selectedProblem.testCases?.[0]?.input) {\n        testInput = selectedProblem.testCases[0].input;\n      }\n      \n      console.log(`📥 [CONTEST-RUN] Test input: \"${testInput}\"`);\n      \n      // If no test input, provide a default for testing\n      if (!testInput) {\n        console.log(`⚠️ [CONTEST-RUN] No test input found, using default`);\n        // For reverse string problem, use a simple test case\n        if (selectedProblem.title.toLowerCase().includes('reverse')) {\n          testInput = \"hello\";\n        } else {\n          testInput = \"test\";\n        }\n      }\n      \n      const response = await fetch('/api/contests/execute', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({\n          code,\n          language,\n          input: testInput,\n        }),\n      });\n\n      console.log(`📊 [CONTEST-RUN] Response status: ${response.status}`);\n      const result = await response.json();\n      console.log(`📤 [CONTEST-RUN] Execution result:`, result);\n\n      if (result.error) {\n        console.error(`❌ [CONTEST-RUN] Execution error: ${result.error}`);\n        // Surface the error inside Test Results tab\n        const errorResult = {\n          input: testInput,\n          output: '',\n          expectedOutput: '',\n          passed: false,\n          runtime: result.runtime,\n          memory: result.memory,\n          error: result.error,\n        } as any;\n        setTestResults([errorResult]);\n        setShowTestResults(true);\n        setActiveTab('results');\n      } else {\n        // Try to get expected output from testCases first, then examples\n        let expectedOutput = '';\n        if (selectedProblem.testCases?.[0]?.expectedOutput) {\n          expectedOutput = selectedProblem.testCases[0].expectedOutput;\n        } else if (selectedProblem.examples?.[0]?.output) {\n          expectedOutput = selectedProblem.examples[0].output;\n        }\n        \n        const isCorrect = result.output.trim() === expectedOutput.trim();\n        \n        console.log(`✅ [CONTEST-RUN] Test ${isCorrect ? 'PASSED' : 'FAILED'}`);\n        console.log(`📊 [CONTEST-RUN] Expected: \"${expectedOutput}\", Got: \"${result.output}\"`);\n        \n        // Store test results for display\n        const testResult = {\n          input: testInput,\n          output: result.output,\n          expectedOutput: expectedOutput,\n          passed: isCorrect,\n          runtime: result.runtime,\n          memory: result.memory,\n          error: result.error\n        } as any;\n        \n        setTestResults([testResult]);\n        setShowTestResults(true);\n        setActiveTab('results');\n        \n        toast({\n          title: isCorrect ? 'Test Passed!' : 'Test Failed',\n          description: isCorrect \n            ? `Output matches expected result: ${result.output}`\n            : `Expected: ${expectedOutput}, Got: ${result.output}`,\n          variant: isCorrect ? 'default' : 'destructive',\n        });\n      }\n    } catch (error) {\n      toast({\n        title: 'Execution Error',\n        description: 'Failed to run code. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!selectedProblem || !code.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please select a problem and write some code first.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(`/api/contests/${contestId}/problems/${selectedProblem.id}/submit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({\n          code,\n          language,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to submit solution');\n      }\n\n      const result = await response.json();\n      \n      // Show appropriate toast based on actual test results\n      if (result.allPassed) {\n      toast({\n          title: 'All Test Cases Passed! 🎉',\n          description: `Your solution is correct! ${result.passedCount}/${result.totalTestCases} test cases passed.`,\n          variant: 'default',\n        });\n      } else if (result.passedCount > 0) {\n        toast({\n          title: 'Partial Credit',\n          description: `${result.passedCount}/${result.totalTestCases} test cases passed. Score: ${result.points} points.`,\n          variant: 'destructive',\n        });\n      } else {\n        toast({\n          title: 'Wrong Answer',\n          description: `0/${result.totalTestCases} test cases passed. Please check your solution.`,\n          variant: 'destructive',\n        });\n      }\n\n      // Store test results for display in Test Results tab\n      if (result.testResults && Array.isArray(result.testResults)) {\n        const formattedTestResults = result.testResults.map((testResult: any) => ({\n          passed: testResult.passed,\n          output: testResult.actualOutput || testResult.output || 'No output',\n          expectedOutput: testResult.expectedOutput || 'N/A',\n          input: testResult.input || 'N/A',\n          runtime: testResult.runtime || 0,\n          memory: testResult.memory || 0,\n          error: testResult.error || null,\n          isHidden: testResult.isHidden || false,\n          testCaseNumber: testResult.testCaseNumber || 1\n        }));\n        setTestResults(formattedTestResults);\n        setShowTestResults(true);\n        setActiveTab('results'); // Automatically switch to Test Results tab\n      }\n\n      // If accepted, refresh progress so solved indicator and button update\n      if (result.status === 'accepted') {\n        queryClient.invalidateQueries({ queryKey: ['/api/contests', contestId, 'progress'] });\n      }\n\n      // Show latest submission details automatically\n      setDetailsSubmission(result);\n      setIsDetailsOpen(true);\n      setActiveTab('submissions');\n\n      // Refresh submissions\n      setSubmissionsLoadPending(true);\n      queryClient.invalidateQueries({ queryKey: ['/api/contests', contestId, 'submissions'] });\n    } catch (error) {\n      toast({\n        title: 'Submission Failed',\n        description: error instanceof Error ? error.message : 'Failed to submit solution',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getSubmissionStatus = (problemId: string) => {\n    const problemSubmissions = submissions?.filter(s => s.problemId === problemId) || [];\n    const latestSubmission = problemSubmissions.sort((a, b) => {\n      const bt = new Date((b.submittedAt || b.submissionTime || 0) as any).getTime();\n      const at = new Date((a.submittedAt || a.submissionTime || 0) as any).getTime();\n      return bt - at;\n    })[0];\n    \n    return latestSubmission?.status || null;\n  };\n\n  // Function to auto-submit all problems and terminate contest (for tab switching)\n  const terminateContestAndSubmit = useCallback(async () => {\n    if (isContestTerminated) return; // Prevent multiple calls\n    \n    setIsContestTerminated(true);\n    \n    try {\n      // Mark this contest as ended for the current user so listings reflect the state\n      try {\n        const uid = localStorage.getItem('userId') || 'me';\n        localStorage.setItem(`contest:${contestId}:endedBy:${uid}`, 'true');\n      } catch (e) {\n        console.warn('Failed to set endedBy flag in localStorage:', e);\n      }\n\n      // Get all problems that have been worked on (have code in localStorage)\n      const problemsToSubmit: Array<{problem: ContestProblem, code: string, language: string}> = [];\n      \n      if (contest?.problems) {\n        for (const problem of contest.problems) {\n          const codeKey = `contest:${contestId}:problem:${problem.id}:code`;\n          const langKey = `contest:${contestId}:problem:${problem.id}:language`;\n          \n          try {\n            const storedCode = localStorage.getItem(codeKey);\n            const storedLang = localStorage.getItem(langKey) || 'javascript';\n            \n            if (storedCode && storedCode.trim()) {\n              // Check if this problem has already been submitted (regardless of status)\n              const currentStatus = getSubmissionStatus(problem.id);\n              const hasSubmission = currentStatus !== null;\n              \n              // Only submit if:\n              // 1. No submission exists yet, OR\n              // 2. Submission exists but status is not 'accepted' AND we have new/modified code\n              if (!hasSubmission) {\n                problemsToSubmit.push({\n                  problem,\n                  code: storedCode,\n                  language: storedLang\n                });\n                console.log(`Will auto-submit problem ${problem.title} - no previous submission`);\n              } else if (currentStatus !== 'accepted') {\n                // Check if code has changed since last submission\n                const lastSubmission = submissions?.find(s => s.problemId === problem.id);\n                if (lastSubmission && lastSubmission.code !== storedCode) {\n                  problemsToSubmit.push({\n                    problem,\n                    code: storedCode,\n                    language: storedLang\n                  });\n                  console.log(`Will auto-submit problem ${problem.title} - code modified since last submission (status: ${currentStatus})`);\n                } else {\n                  console.log(`Skipping auto-submission for problem ${problem.title} - already submitted with same code (status: ${currentStatus})`);\n                }\n              } else {\n                console.log(`Skipping auto-submission for problem ${problem.title} - already accepted`);\n              }\n            }\n          } catch (error) {\n            console.error(`Failed to retrieve code for problem ${problem.id}:`, error);\n          }\n        }\n      }\n      \n      // Auto-submit only problems that need submission\n      let submittedCount = 0;\n      let skippedCount = 0;\n      let failedCount = 0;\n      \n      console.log(`[AUTO-SUBMIT] Found ${problemsToSubmit.length} problems to submit`);\n      \n      if (problemsToSubmit.length > 0) {\n        for (const {problem, code, language} of problemsToSubmit) {\n          try {\n            console.log(`[AUTO-SUBMIT] Submitting problem: ${problem.title} (${problem.id})`);\n            console.log(`[AUTO-SUBMIT] Code length: ${code.length} characters`);\n            console.log(`[AUTO-SUBMIT] Language: ${language}`);\n            \n            const response = await fetch(`/api/contests/${contestId}/problems/${problem.id}/auto-submit`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('token')}`,\n              },\n              body: JSON.stringify({\n                code,\n                language,\n              }),\n            });\n            \n            if (response.ok) {\n              const result = await response.json();\n              submittedCount++;\n              console.log(`[AUTO-SUBMIT] Successfully submitted solution for problem: ${problem.title}`, result);\n            } else {\n              const errorText = await response.text();\n              failedCount++;\n              console.error(`[AUTO-SUBMIT] Failed to auto-submit solution for problem: ${problem.title}`, {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorText\n              });\n            }\n          } catch (error) {\n            failedCount++;\n            console.error(`[AUTO-SUBMIT] Error auto-submitting solution for problem ${problem.title}:`, error);\n          }\n        }\n      } else {\n        // Count how many problems were already accepted\n        skippedCount = contest?.problems?.filter(problem => {\n          const status = getSubmissionStatus(problem.id);\n          return status === 'accepted';\n        }).length || 0;\n        console.log(`[AUTO-SUBMIT] No problems to submit. ${skippedCount} problems already accepted.`);\n      }\n      \n      console.log(`[AUTO-SUBMIT] Summary: ${submittedCount} submitted, ${failedCount} failed, ${skippedCount} already accepted`);\n      \n      // Show completion message\n      if (submittedCount > 0) {\n        const message = failedCount > 0 \n          ? `You have been disqualified due to excessive tab switching. ${submittedCount} solution(s) auto-submitted, ${failedCount} failed, ${skippedCount} already accepted.`\n          : `You have been disqualified due to excessive tab switching. ${submittedCount} solution(s) auto-submitted, ${skippedCount} already accepted.`;\n        \n        toast({\n          title: 'Contest Terminated - Disqualified',\n          description: message,\n          variant: 'destructive',\n        });\n      } else if (skippedCount > 0) {\n        toast({\n          title: 'Contest Terminated - Disqualified',\n          description: `You have been disqualified due to excessive tab switching. All ${skippedCount} problems already accepted.`,\n          variant: 'destructive',\n        });\n      } else if (failedCount > 0) {\n        toast({\n          title: 'Contest Terminated - Disqualified',\n          description: `You have been disqualified due to excessive tab switching. Failed to submit ${failedCount} solution(s).`,\n          variant: 'destructive',\n        });\n      } else {\n        toast({\n          title: 'Contest Terminated - Disqualified',\n          description: 'You have been disqualified due to excessive tab switching. No solutions to submit.',\n          variant: 'destructive',\n        });\n      }\n      \n      // Now update the user's contest status in the database (after submissions are complete)\n      try {\n        const endUserResponse = await fetch(`/api/contests/${contestId}/end-user`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          },\n        });\n        \n        if (endUserResponse.ok) {\n          console.log('User contest status updated in database due to tab switching');\n        } else {\n          console.warn('Failed to update user contest status in database:', await endUserResponse.text());\n        }\n      } catch (error) {\n        console.warn('Error updating user contest status in database:', error);\n      }\n      \n      // Reset tab switch count for this contest (in case user re-enters)\n      const tabSwitchKey = `contest:${contestId}:tabSwitchCount`;\n      try {\n        localStorage.removeItem(tabSwitchKey);\n      } catch (error) {\n        console.log('Failed to clear tab switch count:', error);\n      }\n      \n      // Wait a moment then redirect\n      setTimeout(() => {\n        exitContestAndRedirect();\n      }, 3000);\n      \n    } catch (error) {\n      console.error('Error during contest termination:', error);\n      toast({\n        title: 'Contest Termination Error',\n        description: 'Failed to auto-submit solutions. Contest will still be terminated.',\n        variant: 'destructive',\n      });\n      \n      // Still redirect even if auto-submission failed\n      setTimeout(() => {\n        exitContestAndRedirect();\n      }, 2000);\n    }\n  }, [isContestTerminated, contestId, contest, getSubmissionStatus, submissions, toast, exitContestAndRedirect]);\n\n  // Tab switch detection for contest pages\n  useEffect(() => {\n    // Check if we're on a contest page using regex\n    const isContestPage = () => {\n      const currentPath = window.location.pathname;\n      return /^\\/contests\\/[^\\/]+\\/problems(?:\\/[^\\/]+)?$/.test(currentPath);\n    };\n\n    if (!isContestPage() || isContestTerminated) {\n      return; // Only track on contest pages and if contest isn't already terminated\n    }\n\n    // Use the refs defined at component level\n\n    const handleVisibilityChange = () => {\n      const isVisible = !document.hidden;\n      const currentlyHasFocus = document.hasFocus();\n      \n      // Only count as a switch if enough time has passed (prevent rapid firing)\n      const now = Date.now();\n      if (now - lastSwitchTimeRef.current < 500) {\n        return;\n      }\n      \n      // Detect when user comes back to the tab (was hidden/unfocused, now visible/focused)\n      if ((!wasVisibleRef.current || !hasFocusRef.current) && (isVisible && currentlyHasFocus)) {\n        // User returned to contest tab - increment counter and show dialog\n        setTabSwitchCount(prevCount => {\n          const newCount = prevCount + 1;\n          \n          console.log(`Tab switch detected via visibility change. Count: ${newCount}`);\n          console.log(`Previous state: wasVisible=${wasVisibleRef.current}, hadFocus=${hasFocusRef.current}`);\n          console.log(`Current state: isVisible=${isVisible}, hasFocus=${currentlyHasFocus}`);\n          \n          if (newCount >= 3) {\n            // Terminate contest immediately\n            console.log('Contest terminated due to excessive tab switching');\n            terminateContestAndSubmit();\n          } else {\n            // Show warning dialog\n            setShowTabSwitchDialog(true);\n          }\n          \n          return newCount;\n        });\n        \n        lastSwitchTimeRef.current = now;\n      }\n      \n      wasVisibleRef.current = isVisible;\n      hasFocusRef.current = currentlyHasFocus;\n    };\n\n    const handleFocus = () => {\n      const isVisible = !document.hidden;\n      const currentlyHasFocus = true; // Focus event means we have focus\n      \n      // Only count as a switch if enough time has passed\n      const now = Date.now();\n      if (now - lastSwitchTimeRef.current < 500) {\n        return;\n      }\n      \n      // Detect when user comes back to the tab\n      if ((!wasVisibleRef.current || !hasFocusRef.current) && (isVisible && currentlyHasFocus)) {\n        setTabSwitchCount(prevCount => {\n          const newCount = prevCount + 1;\n          \n          console.log(`Tab switch detected via focus. Count: ${newCount}`);\n          console.log(`Previous state: wasVisible=${wasVisibleRef.current}, hadFocus=${hasFocusRef.current}`);\n          console.log(`Current state: isVisible=${isVisible}, hasFocus=${currentlyHasFocus}`);\n          \n          if (newCount >= 3) {\n            console.log('Contest terminated due to excessive tab switching');\n            terminateContestAndSubmit();\n          } else {\n            setShowTabSwitchDialog(true);\n          }\n          \n          return newCount;\n        });\n        \n        lastSwitchTimeRef.current = now;\n      }\n      \n      wasVisibleRef.current = isVisible;\n      hasFocusRef.current = currentlyHasFocus;\n    };\n\n    const handleBlur = () => {\n      hasFocusRef.current = false;\n      console.log('Tab lost focus - user switched away');\n    };\n\n    const handlePageHide = () => {\n      wasVisibleRef.current = false;\n      console.log('Page hidden - user switched away');\n    };\n\n    const handlePageShow = () => {\n      wasVisibleRef.current = true;\n      console.log('Page shown - user returned');\n    };\n\n    // Add event listeners\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    window.addEventListener('focus', handleFocus);\n    window.addEventListener('blur', handleBlur);\n    window.addEventListener('pagehide', handlePageHide);\n    window.addEventListener('pageshow', handlePageShow);\n\n    // Periodic check for tab switching (every 100ms for real-time detection)\n    // This is a backup method in case event listeners miss some switches\n    const periodicCheck = setInterval(() => {\n      const isVisible = !document.hidden;\n      const currentlyHasFocus = document.hasFocus();\n      \n      // Only update refs if they're different from current state\n      // This prevents interference with event-based detection\n      if (wasVisibleRef.current !== isVisible) {\n        wasVisibleRef.current = isVisible;\n      }\n      if (hasFocusRef.current !== currentlyHasFocus) {\n        hasFocusRef.current = currentlyHasFocus;\n      }\n    }, 100);\n\n    // Initial state logging\n    console.log(`Tab switch tracking initialized. Current count: ${tabSwitchCount}`);\n    console.log(`Initial state: isVisible=${!document.hidden}, hasFocus=${document.hasFocus()}`);\n    console.log(`Refs initialized: wasVisible=${wasVisibleRef.current}, hasFocus=${hasFocusRef.current}`);\n    \n\n\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('focus', handleFocus);\n      window.removeEventListener('blur', handleBlur);\n      window.removeEventListener('pagehide', handlePageHide);\n      window.removeEventListener('pageshow', handlePageShow);\n      clearInterval(periodicCheck);\n    };\n  }, [isContestTerminated, terminateContestAndSubmit]); // Added terminateContestAndSubmit to dependencies\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'wrong_answer':\n      case 'time_limit_exceeded':\n      case 'runtime_error':\n      case 'compilation_error':\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-600\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted':\n        return 'text-green-600';\n      case 'wrong_answer':\n      case 'time_limit_exceeded':\n      case 'runtime_error':\n      case 'compilation_error':\n        return 'text-red-600';\n      case 'pending':\n        return 'text-yellow-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading contest problems...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (contestError) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            {contestError.message === 'Authentication required' ? 'Authentication Required' : 'Error Loading Contest'}\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            {contestError.message === 'Authentication required' \n              ? 'Please log in to access this contest.'\n              : contestError.message || 'Failed to load contest details.'\n            }\n          </p>\n          {contestError.message === 'Authentication required' ? (\n            <Button onClick={() => setLocation('/login')}>\n              Go to Login\n            </Button>\n          ) : (\n            <Button onClick={() => window.location.reload()}>\n              Try Again\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  if (!contest) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Contest not found</h3>\n          <p className=\"text-gray-600\">The contest you're looking for doesn't exist.</p>\n          <Button onClick={() => setLocation('/contests')} className=\"mt-4\">\n            Back to Contests\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Check if user is disqualified or contest has ended - redirect to leaderboard immediately\n  useEffect(() => {\n    // Check if user is disqualified\n    if (enrollmentStatus?.isDisqualified) {\n      setLocation(`/contests/${contestId}/leaderboard`);\n      return;\n    }\n    \n    // Check if contest has been manually ended, but only if contest has actually ended by time\n    if (enrollmentStatus?.contestEndMethod === 'manually_ended') {\n      const now = new Date();\n      const endTime = new Date(contest.endTime);\n      if (now > endTime) {\n        setLocation(`/contests/${contestId}/leaderboard`);\n      }\n    }\n  }, [enrollmentStatus?.isDisqualified, enrollmentStatus?.contestEndMethod, contestId, setLocation, contest.endTime]);\n\n  if (enrollmentStatus?.isDisqualified || (enrollmentStatus?.contestEndMethod === 'manually_ended' && new Date() > new Date(contest.endTime))) {\n    // Show loading state while redirecting\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Redirecting to Results...</h3>\n          <p className=\"text-gray-600\">Taking you to the contest leaderboard.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen overflow-hidden flex flex-col\">\n      {!selectedProblem && (\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-xl font-semibold\">{contest.title}</h1>\n              {/* Tab Switch Counter */}\n              <Badge variant={tabSwitchCount >= 2 ? \"destructive\" : tabSwitchCount >= 1 ? \"secondary\" : \"outline\"}>\n                Tab Switches: {tabSwitchCount}/3\n              </Badge>\n            </div>\n            <Button\n              variant=\"destructive\"\n              onClick={handleEndContest}\n            >\n              End Contest\n            </Button>\n          </div>\n        </div>\n      )}\n      {selectedProblem && (\n      <div className=\"bg-white border-b px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n                onClick={() => {\n                  if (selectedProblem) {\n                    setSelectedProblem(null);\n                    setActiveTab('problem');\n                    setLocation(`/contests/${contestId}/problems`);\n                  } else {\n                    if (window.history.length > 1) {\n                      window.history.back();\n                    } else {\n                      setLocation(`/contests/${contestId}/problems`);\n                    }\n                  }\n                }}\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back\n            </Button>\n            <div>\n              <h1 className=\"text-xl font-semibold\">{contest.title}</h1>\n              <p className=\"text-sm text-gray-600\">Contest Problems</p>\n              {/* Tab Switch Counter */}\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <Badge variant={tabSwitchCount >= 2 ? \"destructive\" : tabSwitchCount >= 1 ? \"secondary\" : \"outline\"}>\n                  Tab Switches: {tabSwitchCount}/3\n                </Badge>\n              </div>\n            </div>\n          </div>\n          \n          {/* Full-screen Warning\n          {isFullscreen && (\n            <div className=\"mt-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <AlertTriangle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div>\n                  <h3 className=\"text-sm font-medium text-red-800\">Contest Mode Active</h3>\n                  <p className=\"text-sm text-red-700 mt-1\">\n                    Copy and paste operations are disabled to prevent plagiarism. All keyboard shortcuts (Ctrl+C, Ctrl+V, Ctrl+X) and right-click context menus are disabled.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )} */}\n          \n          {/* Contest Progress */}\n          {progress && (\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"text-center\">\n                <div className=\"text-lg font-semibold text-green-600\">{progress.solvedCount}/{progress.totalProblems}</div>\n                <div className=\"text-xs text-gray-500\">Problems Solved</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-lg font-semibold text-blue-600\">{progress.earnedPoints}/{progress.totalPoints}</div>\n                <div className=\"text-xs text-gray-500\">Points Earned</div>\n              </div>\n              <div className=\"text-center\">\n                  <div className={`text-lg font-semibold ${timeLeftMs !== null && timeLeftMs <= 5 * 60 * 1000 ? 'text-red-600 animate-pulse' : 'text-purple-600'}`}> \n                    {formatTimeLeft(timeLeftMs ?? progress.timeRemaining)}\n                </div>\n                <div className=\"text-xs text-gray-500\">Time Left</div>\n              </div>\n            </div>\n          )}\n          \n          {selectedProblem && (\n          <div className=\"flex items-center space-x-4\">\n            <select\n              value={language}\n              onChange={(e) => setLanguage(e.target.value)}\n              className=\"border rounded px-3 py-1 text-sm\"\n            >\n              <option value=\"javascript\">JavaScript</option>\n              <option value=\"python\">Python</option>\n              <option value=\"java\">Java</option>\n              <option value=\"cpp\">C++</option>\n              <option value=\"c\">C</option>\n            </select>\n            \n\n            \n            {isFullscreen && (\n              <div className=\"flex items-center space-x-2 px-3 py-1 bg-red-50 border border-red-200 rounded text-xs text-red-700\">\n                <AlertTriangle className=\"h-3 w-3\" />\n                <span>Copy/Paste Disabled</span>\n              </div>\n            )}\n            \n            <Button\n              onClick={() => {\n                if (useCustomInput) {\n                  customInputExecutionMutation.mutate({ code, language, customInput });\n                } else {\n                  handleRunCode();\n                }\n              }}\n              disabled={isRunning || customInputExecutionMutation.isPending || (useCustomInput && !customInput.trim())}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <Play className=\"h-4 h-4 mr-2\" />\n              {useCustomInput \n                ? (customInputExecutionMutation.isPending ? 'Executing...' : 'Run with Custom Input')\n                : (isRunning ? 'Running...' : 'Run')\n              }\n            </Button>\n            \n            <Button\n              onClick={handleSubmit}\n              disabled={isSubmitting || !selectedProblem}\n              size=\"sm\"\n            >\n              <Send className=\"h-4 w-4 mr-2\" />\n              {isSubmitting ? 'Submitting...' : 'Submit'}\n            </Button>\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={handleEndContest}\n              >\n                End Contest\n              </Button>\n                      </div>\n                    )}\n                  </div>\n            </div>\n      )}\n\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Main Content: overview list or editor */}\n        <div className=\"flex-1 flex flex-col\">\n          {selectedProblem ? (\n            <>\n              {/* Split layout: left description/results tabs, right editor */}\n              <div className=\"flex-1 grid grid-cols-1 lg:grid-cols-2 gap-0 h-full\">\n                <div className=\"border-r flex flex-col\">\n                  <div className=\"px-6 py-4 border-b flex-shrink-0\">\n                    <Tabs value={activeTab} onValueChange={setActiveTab} className=\"h-full\">\n                    <TabsList>\n                        <TabsTrigger value=\"problem\">Description</TabsTrigger>\n                        <TabsTrigger value=\"results\">Test Results</TabsTrigger>\n                      <TabsTrigger value=\"submissions\">Submissions</TabsTrigger>\n                    </TabsList>\n                      <TabsContent value=\"problem\" className=\"p-6 max-h-[calc(100vh-300px)] overflow-y-auto\">\n                        <div className=\"space-y-4\">\n                      <div>\n                        <h2 className=\"text-2xl font-bold mb-2\">{selectedProblem.title}</h2>\n                        <div className=\"flex items-center space-x-4 mb-4\">\n                          <Badge variant={selectedProblem.difficulty === 'easy' ? 'default' : \n                                         selectedProblem.difficulty === 'medium' ? 'secondary' : 'destructive'}>\n                            {selectedProblem.difficulty}\n                          </Badge>\n                          <Badge variant=\"outline\">{selectedProblem.points} points</Badge>\n                          <span className=\"text-sm text-gray-600\">\n                            Time Limit: {selectedProblem.timeLimit}ms\n                          </span>\n                          <span className=\"text-sm text-gray-600\">\n                            Memory: {selectedProblem.memoryLimit}MB\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <h3 className=\"font-semibold mb-2\">Description</h3>\n                        <div className=\"prose max-w-none\">\n                          <p className=\"whitespace-pre-wrap\">{selectedProblem.description}</p>\n                        </div>\n                      </div>\n                      \n                          {selectedProblem.examples && selectedProblem.examples.length > 0 ? (\n                        <div key=\"examples\">\n                          <h3 className=\"font-semibold mb-2\">Examples</h3>\n                          {selectedProblem.examples.map((example, index) => (\n                            <div key={index} className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <h4 className=\"font-medium text-sm mb-2\">Input:</h4>\n                                  <pre className=\"bg-white p-2 rounded text-sm\">{example.input}</pre>\n                          </div>\n                                <div>\n                                  <h4 className=\"font-medium text-sm mb-2\">Output:</h4>\n                                  <pre className=\"bg-white p-2 rounded text-sm\">{example.output}</pre>\n                                </div>\n                              </div>\n                              {example.explanation && (\n                                <div className=\"mt-3\">\n                                  <h4 className=\"font-medium text-sm mb-2\">Explanation:</h4>\n                                  <p className=\"text-sm text-gray-600\">{example.explanation}</p>\n                        </div>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        selectedProblem.testCases && selectedProblem.testCases.length > 0 ? (\n                          <div key=\"examples-fallback\">\n                            <h3 className=\"font-semibold mb-2\">Examples</h3>\n                            <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <h4 className=\"font-medium text-sm mb-2\">Input:</h4>\n                                  <pre className=\"bg-white p-2 rounded text-sm\">{selectedProblem.testCases[0].input}</pre>\n                                </div>\n                                <div>\n                                  <h4 className=\"font-medium text-sm mb-2\">Output:</h4>\n                                  <pre className=\"bg-white p-2 rounded text-sm\">{selectedProblem.testCases[0].expectedOutput}</pre>\n                                </div>\n                              </div>\n                              {selectedProblem.testCases[0].explanation && (\n                                <div className=\"mt-3\">\n                                  <h4 className=\"font-medium text-sm\">Explanation:</h4>\n                                  <p className=\"text-sm text-gray-600\">{selectedProblem.testCases[0].explanation}</p>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        ) : null\n                      )}\n                      \n                      {selectedProblem.inputFormat && (\n                        <div key=\"input-format\">\n                          <h3 className=\"font-semibold mb-2\">Input Format</h3>\n                          <div className=\"prose max-w-none\">\n                            <p className=\"whitespace-pre-wrap\">{selectedProblem.inputFormat}</p>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {selectedProblem.outputFormat && (\n                        <div key=\"output-format\">\n                          <h3 className=\"font-semibold mb-2\">Output Format</h3>\n                          <div className=\"prose max-w-none\">\n                            <p className=\"whitespace-pre-wrap\">{selectedProblem.outputFormat}</p>\n                          </div>\n                        </div>\n                      )}\n                      \n                          {selectedProblem.constraints && (\n                            <div key=\"constraints\" className=\"-mt-2 pb-20\">\n                              <h3 className=\"font-semibold mb-1\">Constraints</h3>\n                              <div className=\"prose max-w-none\">\n                                <p className=\"whitespace-pre-wrap\">{selectedProblem.constraints}</p>\n                                </div>\n                                </div>\n                              )}\n                          \n                          \n                          \n                         \n                    </div>\n                  </TabsContent>\n                      <TabsContent value=\"results\" className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-semibold\">Test Results</h3>\n                      {testResults.length > 0 ? (\n                        <div className=\"space-y-4\">\n                          {testResults.map((result, index) => (\n                            <div key={index} className={`border rounded-lg p-4 ${\n                              result.passed ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'\n                            }`}>\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <div className=\"flex items-center space-x-2\">\n                                <span className={`font-medium ${\n                                  result.passed ? 'text-green-700' : 'text-red-700'\n                                }`}>\n                                  {result.passed ? '✅ Passed' : '❌ Failed'}\n                                </span>\n                                  {result.isCustomInput && (\n                                    <Badge variant=\"outline\" className=\"text-xs bg-blue-100 text-blue-700 border-blue-300\">\n                                      Custom Input\n                                    </Badge>\n                                  )}\n                                  {result.isHidden && (\n                                    <Badge variant=\"outline\" className=\"text-xs bg-purple-100 text-purple-700 border-purple-300\">\n                                      Hidden Test\n                                    </Badge>\n                                  )}\n                                </div>\n                                <div className=\"text-sm text-gray-600\">\n                                  Runtime: {result.runtime}ms | Memory: {result.memory}MB\n                                </div>\n                              </div>\n                              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                                <div>\n                                  <h4 className=\"font-medium mb-1\">Input:</h4>\n                                  <pre className=\"bg-white p-2 rounded border text-xs overflow-x-auto\">{result.input}</pre>\n                                </div>\n                                <div>\n                                  <h4 className=\"font-medium mb-1\">Expected Output:</h4>\n                                  <pre className=\"bg-white p-2 rounded border text-xs overflow-x-auto\">{result.expectedOutput || 'N/A'}</pre>\n                                </div>\n                                <div>\n                                  <h4 className=\"font-medium mb-1\">Your Output:</h4>\n                                  <pre className=\"bg-white p-2 rounded border text-xs overflow-x-auto\">{result.output}</pre>\n                                </div>\n                              </div>\n                              {result.error && (\n                                <div className=\"mt-2\">\n                                  <h4 className=\"font-medium text-red-700 mb-1\">Error:</h4>\n                                  <pre className=\"bg-red-100 p-2 rounded border text-xs text-red-700 overflow-x-auto\">{result.error}</pre>\n                                </div>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          <p>No test results available. Run your code to see results.</p>\n                        </div>\n                      )}\n                    </div>\n                  </TabsContent>\n                      <TabsContent value=\"submissions\" className=\"p-6\">\n                                <div>\n                          <h3 className=\"font-semibold mb-4\">Your Submissions</h3>\n                          {(submissionsLoadPending || (activeTab === 'submissions' && !submissions && isFetchingSubmissions)) && (\n                            <div className=\"flex items-center justify-center py-8\">\n                              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mr-2\"></div>\n                              <span className=\"text-sm text-gray-600\">Loading latest submissions...</span>\n                                  </div>\n                          )}\n                          {selectedProblem && submissions && submissions.length > 0 ? (\n                            <div className=\"space-y-2\">\n                              {[...submissions]\n                                .filter(s => s.problemId === selectedProblem.id)\n                                .sort((a, b) => {\n                                  const aTime = (a.submittedAt || a.submissionTime) ? new Date(a.submittedAt || (a.submissionTime as string)).getTime() : 0;\n                                  const bTime = (b.submittedAt || b.submissionTime) ? new Date(b.submittedAt || (b.submissionTime as string)).getTime() : 0;\n                                  return bTime - aTime;\n                                })\n                                .map((sub) => (\n                                  <div key={sub.id} className=\"p-3 bg-gray-50 rounded-md flex items-center justify-between\">\n                                    <div className=\"flex items-center space-x-2\">\n                                      {sub.status === 'accepted' ? (\n                                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                                      ) : sub.status === 'wrong_answer' ? (\n                                        <XCircle className=\"h-4 w-4 text-red-600\" />\n                                      ) : (\n                                        <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n                                      )}\n                                      <span className=\"text-sm\">{sub.status.replace('_', ' ')}</span>\n                    </div>\n                                    <div className=\"flex items-center gap-3\">\n                                      <div className=\"text-xs text-gray-500\">\n                                        {new Date(sub.submittedAt || (sub.submissionTime as string)).toLocaleString()}\n                                  </div>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                      onClick={() => {\n                                          setDetailsSubmission(sub);\n                                        setIsDetailsOpen(true);\n                                      }}\n                                    >\n                                      View Details\n                                    </Button>\n                                  </div>\n                              </div>\n                            ))}\n                        </div>\n                          ) : (\n                            <p className=\"text-sm text-gray-500\">No submissions yet</p>\n                      )}\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </div>\n                </div>\n                <div className=\"border-l bg-black/95 flex flex-col h-full\">\n                  <div className=\"flex-1 min-h-0\">\n                <MonacoEditor\n                  value={code}\n                  onChange={setCode}\n                  language={language}\n                  theme=\"vs-dark\"\n                  options={{\n                    minimap: { enabled: false },\n                    fontSize: 14,\n                    lineNumbers: 'on',\n                    roundedSelection: false,\n                    scrollBeyondLastLine: false,\n                    automaticLayout: true,\n                  }}\n                    height=\"100%\"\n                    disableCopyPaste={isFullscreen}\n                />\n                  </div>\n                  \n                  {/* Custom Input Section - Below Code Editor */}\n                  <div className=\"border-t-2 border-blue-500 bg-gray-900 p-4 flex-shrink-0 min-h-[200px]\">\n                    <div className=\"space-y-3\">\n                      <h3 className=\"text-lg font-semibold text-blue-400 mb-2\">Custom Input Testing</h3>\n                      <div className=\"flex items-center space-x-3\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"contest-custom-input-checkbox\"\n                          checked={useCustomInput}\n                          onChange={(e) => setUseCustomInput(e.target.checked)}\n                          className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2\"\n                        />\n                        <label htmlFor=\"contest-custom-input-checkbox\" className=\"text-sm font-medium text-gray-300\">\n                          Use Custom Input\n                        </label>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <div>\n                          <label htmlFor=\"contest-custom-input-field\" className=\"block text-sm font-medium text-gray-300 mb-2\">\n                            Custom Input:\n                          </label>\n                          <textarea\n                            id=\"contest-custom-input-field\"\n                            value={customInput}\n                            onChange={(e) => setCustomInput(e.target.value)}\n                            placeholder=\"Enter your custom input here...\"\n                            className=\"w-full h-20 p-3 border border-gray-600 rounded-md bg-gray-800 text-gray-100 resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                          />\n                        </div>\n                        \n                        {/* Run Button for Custom Input */}\n                        {/* <div className=\"flex justify-end\">\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              console.log('🚀 [CONTEST-CUSTOM-INPUT] Starting custom input execution');\n                              console.log('📝 [CONTEST-CUSTOM-INPUT] Code length:', code.length);\n                              console.log('📥 [CONTEST-CUSTOM-INPUT] Custom input:', customInput);\n                              customInputExecutionMutation.mutate({ code, language, customInput });\n                            }}\n                            disabled={customInputExecutionMutation.isPending || !customInput.trim()}\n                            className=\"flex items-center space-x-2 bg-gray-800 border-gray-600 text-gray-100 hover:bg-gray-700\"\n                            size=\"sm\"\n                          >\n                            <Play className=\"w-4 h-4\" />\n                            <span>{customInputExecutionMutation.isPending ? \"Executing...\" : \"Run with Custom Input\"}</span>\n                          </Button>\n                        </div> */}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            // Overview mode: full-width problems list with Solve buttons\n            <div className=\"flex-1 overflow-y-auto p-6\">\n              <div className=\"mb-4\">\n                <h2 className=\"text-lg font-semibold\">Problems ({contest.problems.length})</h2>\n                <p className=\"text-sm text-gray-500\">Choose a problem to begin solving.</p>\n              </div>\n              <div className=\"space-y-3\">\n                {contest.problems.map((problem, index) => {\n                  const isSolved = Array.isArray((progress as any)?.solvedProblems) && (progress as any).solvedProblems.includes(problem.id);\n                  return (\n                    <div key={problem.id} className=\"bg-white border rounded-lg p-4 flex items-center justify-between\">\n                      <div className=\"min-w-0 pr-4\">\n                        <div className=\"flex items-center gap-3\">\n                          <span className=\"text-sm text-gray-500\">Problem {index + 1}</span>\n                          <h3 className=\"font-medium truncate flex items-center gap-2\">\n                            {problem.title}\n                            {isSolved && <CheckCircle className=\"h-4 w-4 text-green-600 flex-shrink-0\" />}\n                          </h3>\n                        </div>\n                        <div className=\"mt-2 flex items-center gap-2 text-xs text-gray-600 flex-wrap\">\n                          <Badge variant={problem.difficulty === 'easy' ? 'default' : problem.difficulty === 'medium' ? 'secondary' : 'destructive'}>\n                            {problem.difficulty}\n                          </Badge>\n                          <Badge variant=\"outline\">{problem.points} pts</Badge>\n                          {Array.isArray((problem as any).tags) && (problem as any).tags.slice(0,3).map((tag: string) => (\n                            <span key={tag} className=\"px-2 py-0.5 rounded-full bg-gray-100 text-gray-700\">{tag}</span>\n                          ))}\n                        </div>\n                      </div>\n                      <Button\n                        onClick={async () => {\n                          try {\n                            const elem: any = document.documentElement;\n                            if (elem.requestFullscreen) await elem.requestFullscreen();\n                            else if (elem.webkitRequestFullscreen) await elem.webkitRequestFullscreen();\n                            else if (elem.msRequestFullscreen) await elem.msRequestFullscreen();\n                          } catch {}\n                          document.body.classList.add('contest-fullscreen');\n                          setSelectedProblem(problem);\n                          setActiveTab('problem');\n                          setLocation(`/contests/${contestId}/problems/${problem.id}`);\n                          setTimeout(() => {\n                            window.scrollTo({ top: 0, behavior: 'smooth' });\n                          }, 0);\n                        }}\n                        className={`whitespace-nowrap ${isSolved ? 'bg-gray-200 text-gray-700 hover:bg-gray-300 border border-gray-300' : ''}`}\n                        variant={isSolved ? 'outline' : 'default'}\n                      >\n                        {isSolved ? 'Solve Again' : 'Solve'}\n                      </Button>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Submission Details Modal */}\n      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>Submission Details</DialogTitle>\n            <DialogDescription>\n              {detailsSubmission ? 'Submission details' : ''}\n            </DialogDescription>\n            {detailsSubmission && (() => {\n                  const problem = contest?.problems.find(p => p.id === detailsSubmission.problemId);\n                  const total = problem?.testCases?.length || 0;\n                  const passed = detailsSubmission.status === 'accepted' ? total : 0;\n                  const when = detailsSubmission.submittedAt || detailsSubmission.submissionTime;\n                  return (\n                <div className=\"text-sm text-gray-600 px-6 -mt-2\">\n                      Status: <span className={`font-medium ${getStatusColor(detailsSubmission.status)}`}>{detailsSubmission.status.replace('_', ' ').toUpperCase()}</span>\n                      {detailsSubmission.runtime !== undefined && ` • Runtime: ${detailsSubmission.runtime}ms`}\n                      {detailsSubmission.memory !== undefined && ` • Memory: ${detailsSubmission.memory}MB`}\n                      {when && ` • ${new Date(when).toLocaleString()}`}\n                      {` • ${passed}/${total} test cases passed`}\n                    </div>\n                  );\n            })()}\n          </DialogHeader>\n          <div className=\"mt-4\">\n            <MonacoEditor\n              value={detailsSubmission?.code || ''}\n              onChange={() => {}}\n              language={(detailsSubmission?.language === 'c') ? 'cpp' : (detailsSubmission?.language || 'javascript')}\n              theme=\"vs-dark\"\n              options={{ readOnly: true, minimap: { enabled: false } }}\n              height={400 as any}\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Full-Screen Blocking Overlay */}\n      {showFullscreenDialog && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 z-40 flex items-center justify-center\">\n          <div className=\"bg-white rounded-lg p-8 max-w-md mx-4 text-center\">\n            <div className=\"text-6xl mb-4\">⚠️</div>\n            <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Full-Screen Mode Required</h2>\n            <p className=\"text-gray-700 mb-6 text-lg\">\n              You have exited full-screen mode. If this happens again, you will be disqualified from the contest.\n            </p>\n            <Button \n              onClick={enterFullscreen}\n              className=\"bg-red-600 hover:bg-red-700 text-white px-8 py-3 text-xl font-semibold\"\n              size=\"lg\"\n            >\n              Enter Full Screen\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Tab Switch Warning Dialog */}\n      {showTabSwitchDialog && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center\">\n          <div className=\"bg-white rounded-lg p-8 max-w-md mx-4 text-center\">\n            <div className=\"text-6xl mb-4\">🚨</div>\n            <h2 className=\"text-2xl font-bold text-orange-600 mb-4\">Tab Switch Detected</h2>\n            <p className=\"text-gray-700 mb-6 text-lg\">\n              Tab switch detected. Switch count: <span className=\"font-bold text-red-600\">{tabSwitchCount}</span>\n            </p>\n            <p className=\"text-sm text-gray-600 mb-6\">\n              {tabSwitchCount >= 2 ? \n                \"⚠️ Warning: One more tab switch will automatically end your contest and submit your current solutions!\" :\n                \"Avoid switching tabs during the contest. Multiple switches will result in automatic contest termination.\"\n              }\n            </p>\n            <Button \n              onClick={() => setShowTabSwitchDialog(false)}\n              className=\"bg-orange-600 hover:bg-orange-700 text-white px-8 py-3 text-xl font-semibold\"\n              size=\"lg\"\n            >\n              Continue Contest\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* End Contest Confirmation Dialog */}\n      {showEndContestDialog && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center\">\n          <div className=\"bg-white rounded-lg p-8 max-w-md mx-4 text-center\">\n            <div className=\"text-6xl mb-4\">🏁</div>\n            <h2 className=\"text-2xl font-bold text-red-600 mb-4\">End Contest?</h2>\n            <p className=\"text-gray-700 mb-6 text-lg\">\n              Are you sure you want to end this contest? All your current code will be automatically submitted before ending.\n            </p>\n            <div className=\"flex space-x-4 justify-center\">\n              <Button \n                onClick={() => setShowEndContestDialog(false)}\n                variant=\"outline\"\n                className=\"px-6 py-2\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={confirmEndContest}\n                variant=\"destructive\"\n                className=\"px-6 py-2\"\n              >\n                End Contest\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n} ","size_bytes":102448},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"execution-system/k8s/configmap.yaml":{"content":"apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: execution-config\n  namespace: codearena-execution\n  labels:\n    app.kubernetes.io/name: codearena-execution\n    app.kubernetes.io/component: config\ndata:\n  # Redis Configuration\n  REDIS_HOST: \"redis-service\"\n  REDIS_PORT: \"6379\"\n  REDIS_DB: \"0\"\n  \n  # API Configuration\n  API_PORT: \"3001\"\n  CORS_ORIGIN: \"*\"\n  LOG_LEVEL: \"info\"\n  LOG_FORMAT: \"json\"\n  \n  # Worker Configuration\n  WORKER_CONCURRENCY: \"5\"\n  DOCKER_SOCKET_PATH: \"/var/run/docker.sock\"\n  \n  # Execution Limits\n  TIME_LIMIT: \"10\"\n  MEMORY_LIMIT: \"128m\"\n  OUTPUT_LIMIT: \"64k\"\n  COMPILE_TIME_LIMIT: \"30\"\n  MAX_CODE_SIZE: \"65536\"\n  MAX_INPUT_SIZE: \"1024\"\n  \n  # Container Configuration\n  CONTAINER_MEMORY_LIMIT: \"128m\"\n  CONTAINER_CPU_LIMIT: \"0.5\"\n  CONTAINER_PIDS_LIMIT: \"64\"\n  \n  # Docker Images\n  PYTHON_IMAGE: \"codearena/python-executor:latest\"\n  JS_IMAGE: \"codearena/js-executor:latest\"\n  C_IMAGE: \"codearena/c-executor:latest\"\n  CPP_IMAGE: \"codearena/cpp-executor:latest\"\n  JAVA_IMAGE: \"codearena/java-executor:latest\"\n  \n  # Health and Metrics\n  HEALTH_PORT: \"3002\"\n  METRICS_ENABLED: \"true\"\n  METRICS_PORT: \"9090\"\n  METRICS_PATH: \"/metrics\" ","size_bytes":1156},"Documentations/ASSIGNMENT_ANALYTICS_README.md":{"content":"# Assignment Analytics System\n\nA comprehensive analytics system for the CodeArena platform that provides detailed insights into individual assignment performance and overall educational effectiveness.\n\n## 🎯 Overview\n\nThe Assignment Analytics System is designed to provide educators and administrators with deep insights into student performance, learning outcomes, and educational effectiveness. It builds upon the existing CodeArena infrastructure while adding advanced analytics capabilities.\n\n## ✨ Key Features\n\n### 📊 Assignment-Level Analytics\n- **Performance Metrics**: Average scores, pass rates, time spent, attempt counts\n- **Score Distribution**: Breakdown by performance categories (excellent, good, average, needs improvement)\n- **Question Analysis**: Individual question performance, success rates, common mistakes\n- **Time Series Data**: Submission patterns and score trends over time\n- **Comparative Analytics**: Class averages, percentiles, performance gaps\n\n### 👤 User-Level Analytics\n- **Individual Performance**: Best scores, improvement trends, time efficiency\n- **Question Performance**: Detailed breakdown of each question attempt\n- **Learning Progress**: Achievement of learning outcomes, confidence levels\n- **Engagement Metrics**: Time spent, completion rates, revisits\n- **Personalized Recommendations**: AI-powered suggestions for improvement\n\n### 🎓 Course-Level Analytics\n- **Overall Course Performance**: Average scores, completion rates\n- **Assignment Performance**: Comparative analysis across assignments\n- **Student Performance**: Top performers, improvement trends\n- **Learning Outcomes**: Achievement rates across the course\n- **Engagement Patterns**: Activity times, dropoff points\n\n### 📈 Advanced Analytics\n- **Learning Outcomes Tracking**: Assessment of educational objectives\n- **Performance Trends**: Improvement patterns and consistency scores\n- **Comparative Positioning**: Class rankings and percentiles\n- **Engagement Analysis**: Time tracking and activity patterns\n- **Recommendation Engine**: Personalized improvement suggestions\n\n## 🏗️ Architecture\n\n### Backend Components\n\n#### 1. Data Models (`server/models/AssignmentAnalytics.ts`)\n```typescript\ninterface IAssignmentAnalytics {\n  assignmentId: number;\n  userId: string;\n  totalScore: number;\n  percentageScore: number;\n  questionAnalytics: Array<{\n    questionId: string;\n    score: number;\n    timeSpent: number;\n    attempts: number;\n    isCorrect: boolean;\n  }>;\n  learningOutcomes: Array<{\n    outcome: string;\n    achieved: boolean;\n    confidence: number;\n  }>;\n  engagementMetrics: {\n    timeOnAssignment: number;\n    revisits: number;\n    completionRate: number;\n  };\n  performanceTrends: {\n    improvementFromPrevious: number;\n    consistencyScore: number;\n    timeEfficiency: number;\n  };\n  comparativeAnalytics: {\n    classAverage: number;\n    classRank: number;\n    percentile: number;\n  };\n}\n```\n\n#### 2. Analytics Service (`server/services/assignmentAnalyticsService.ts`)\n- **AssignmentAnalyticsService**: Core analytics calculation engine\n- **generateAssignmentAnalytics()**: Comprehensive assignment-level analytics\n- **generateUserAssignmentAnalytics()**: Individual user performance analysis\n- **generateCourseAnalytics()**: Course-wide analytics and insights\n\n#### 3. API Endpoints (`server/routes/assignmentAnalytics.ts`)\n- **GET** `/api/analytics/assignments/:id/analytics` - Assignment analytics\n- **GET** `/api/analytics/assignments/:id/users/:userId/analytics` - User analytics\n- **GET** `/api/analytics/courses/:id/analytics` - Course analytics\n- **POST** `/api/analytics/assignments/:id/analytics` - Create analytics record\n- **GET** `/api/analytics/assignments/:id/stats` - Assignment statistics\n- **GET** `/api/analytics/users/:userId/progress` - User progress tracking\n- **GET** `/api/analytics/export/:type/:id` - Export analytics data\n\n### Frontend Components\n\n#### 1. Assignment Analytics Dashboard (`client/src/pages/AssignmentAnalytics.tsx`)\n- **Overview Tab**: Score distribution, performance trends, comparative metrics\n- **Questions Tab**: Question-level analysis with charts and tables\n- **Learning Tab**: Learning outcomes achievement tracking\n- **Timeline Tab**: Time series data and submission patterns\n- **Comparative Tab**: Class statistics and performance insights\n\n#### 2. User Analytics Dashboard (`client/src/pages/UserAssignmentAnalytics.tsx`)\n- **Overview Tab**: Performance profile radar chart, comparative analysis\n- **Questions Tab**: Individual question performance breakdown\n- **Learning Tab**: Learning progress and areas for improvement\n- **Engagement Tab**: Time tracking and activity metrics\n- **Recommendations Tab**: Personalized improvement suggestions\n\n#### 3. Course Analytics Dashboard (`client/src/pages/CourseAnalytics.tsx`)\n- **Overview Tab**: Course-wide performance metrics and trends\n- **Assignments Tab**: Assignment performance comparison\n- **Students Tab**: Top student performance and rankings\n- **Learning Tab**: Learning outcomes across the course\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 18+ and npm\n- MongoDB database\n- Docker (for code execution)\n\n### Installation\n\n1. **Clone the repository**\n```bash\ngit clone <repository-url>\ncd CodeArena\n```\n\n2. **Install dependencies**\n```bash\n# Backend dependencies\ncd server\nnpm install\n\n# Frontend dependencies\ncd ../client\nnpm install\n```\n\n3. **Set up environment variables**\n```bash\n# server/.env\nMONGODB_URI=mongodb://localhost:27017/codearena\nJWT_SECRET=your-jwt-secret\nPORT=3001\n```\n\n4. **Start the development servers**\n```bash\n# Start backend\ncd server\nnpm run dev\n\n# Start frontend (in new terminal)\ncd client\nnpm run dev\n```\n\n### Database Setup\n\nThe analytics system uses MongoDB with the following collections:\n- `assignmentAnalytics`: Stores detailed analytics records\n- `assignments`: Assignment metadata and configuration\n- `users`: User information and roles\n- `submissions`: Assignment submissions and results\n\n## 📊 API Reference\n\n### Assignment Analytics\n\n#### Get Assignment Analytics\n```http\nGET /api/analytics/assignments/:assignmentId/analytics\nAuthorization: Bearer <token>\n```\n\n**Response:**\n```json\n{\n  \"assignmentId\": 1,\n  \"assignmentTitle\": \"Introduction to Algorithms\",\n  \"totalSubmissions\": 45,\n  \"uniqueStudents\": 30,\n  \"averageScore\": 78.5,\n  \"medianScore\": 82.0,\n  \"standardDeviation\": 12.3,\n  \"passRate\": 85.2,\n  \"scoreDistribution\": {\n    \"excellent\": 8,\n    \"good\": 12,\n    \"average\": 10,\n    \"needsImprovement\": 5\n  },\n  \"questionAnalytics\": [...],\n  \"learningOutcomes\": [...],\n  \"timeSeriesData\": [...],\n  \"comparativeMetrics\": {...}\n}\n```\n\n#### Get User Assignment Analytics\n```http\nGET /api/analytics/assignments/:assignmentId/users/:userId/analytics\nAuthorization: Bearer <token>\n```\n\n**Response:**\n```json\n{\n  \"userId\": \"user123\",\n  \"userName\": \"John Doe\",\n  \"assignmentId\": 1,\n  \"overallPerformance\": {\n    \"bestScore\": 95.0,\n    \"totalAttempts\": 3,\n    \"averageScore\": 87.3,\n    \"improvementTrend\": 12.5,\n    \"timeEfficiency\": 8.7,\n    \"consistencyScore\": 85.0\n  },\n  \"questionPerformance\": [...],\n  \"learningProgress\": {...},\n  \"engagementMetrics\": {...},\n  \"comparativePosition\": {...},\n  \"recommendations\": [...]\n}\n```\n\n#### Get Course Analytics\n```http\nGET /api/analytics/courses/:courseId/analytics\nAuthorization: Bearer <token>\n```\n\n**Response:**\n```json\n{\n  \"courseId\": 1,\n  \"courseTitle\": \"Computer Science Fundamentals\",\n  \"totalAssignments\": 8,\n  \"totalStudents\": 45,\n  \"averageCourseScore\": 76.8,\n  \"completionRate\": 92.3,\n  \"assignmentPerformance\": [...],\n  \"studentPerformance\": [...],\n  \"learningOutcomes\": [...],\n  \"engagementMetrics\": {...}\n}\n```\n\n### Creating Analytics Records\n\n#### Create Assignment Analytics\n```http\nPOST /api/analytics/assignments/:assignmentId/analytics\nAuthorization: Bearer <token>\nContent-Type: application/json\n\n{\n  \"userId\": \"user123\",\n  \"totalScore\": 85,\n  \"maxScore\": 100,\n  \"timeSpent\": 45,\n  \"questionAnalytics\": [\n    {\n      \"questionId\": \"q1\",\n      \"questionType\": \"coding\",\n      \"score\": 20,\n      \"maxScore\": 25,\n      \"timeSpent\": 15,\n      \"attempts\": 2,\n      \"isCorrect\": true\n    }\n  ],\n  \"learningOutcomes\": [\n    {\n      \"outcome\": \"Understand basic algorithms\",\n      \"achieved\": true,\n      \"confidence\": 85\n    }\n  ],\n  \"engagementMetrics\": {\n    \"timeOnAssignment\": 45,\n    \"revisits\": 2,\n    \"completionRate\": 100\n  }\n}\n```\n\n## 📈 Analytics Metrics\n\n### Performance Metrics\n- **Average Score**: Mean score across all submissions\n- **Median Score**: Middle score when sorted\n- **Standard Deviation**: Measure of score variability\n- **Pass Rate**: Percentage of students scoring above threshold\n- **Time Efficiency**: Score per unit time spent\n\n### Engagement Metrics\n- **Time Spent**: Total time on assignment\n- **Revisits**: Number of times user returned to assignment\n- **Completion Rate**: Percentage of questions attempted\n- **Engagement Score**: Composite engagement metric\n\n### Learning Outcomes\n- **Achievement Rate**: Percentage of outcomes achieved\n- **Confidence Level**: Student self-assessment\n- **Time to Mastery**: Time required to achieve outcomes\n- **Areas for Improvement**: Identified learning gaps\n\n### Comparative Analytics\n- **Class Rank**: Student's position in class\n- **Percentile**: Percentage of students scored below\n- **Performance Category**: Excellent/Good/Average/Needs Improvement\n- **Relative Performance**: Percentage above/below class average\n\n## 🎨 Frontend Features\n\n### Interactive Dashboards\n- **Real-time Charts**: Using Recharts library for data visualization\n- **Responsive Design**: Mobile-friendly interface\n- **Tabbed Navigation**: Organized information display\n- **Export Functionality**: PDF and CSV export options\n\n### Data Visualization\n- **Pie Charts**: Score distribution and learning outcomes\n- **Bar Charts**: Question performance and comparative metrics\n- **Line Charts**: Time series data and trends\n- **Radar Charts**: Multi-dimensional performance profiles\n- **Progress Bars**: Achievement and completion rates\n\n### User Experience\n- **Loading States**: Smooth loading animations\n- **Error Handling**: Graceful error messages\n- **Navigation**: Breadcrumb navigation and back buttons\n- **Responsive Tables**: Sortable and filterable data tables\n\n## 🔧 Configuration\n\n### Analytics Settings\n```typescript\n// server/config/analytics.ts\nexport const analyticsConfig = {\n  // Performance thresholds\n  thresholds: {\n    excellent: 90,\n    good: 80,\n    average: 70,\n    pass: 70\n  },\n  \n  // Time tracking\n  timeTracking: {\n    enabled: true,\n    precision: 'minute'\n  },\n  \n  // Learning outcomes\n  learningOutcomes: {\n    confidenceThreshold: 70,\n    achievementThreshold: 80\n  },\n  \n  // Engagement scoring\n  engagement: {\n    timeWeight: 0.4,\n    completionWeight: 0.4,\n    revisitWeight: 0.2\n  }\n};\n```\n\n### Customization Options\n- **Performance Categories**: Adjust score thresholds\n- **Engagement Metrics**: Customize engagement scoring\n- **Learning Outcomes**: Define course-specific outcomes\n- **Export Formats**: Configure export options\n- **Chart Types**: Customize visualization preferences\n\n## 🧪 Testing\n\n### Backend Tests\n```bash\ncd server\nnpm test\n```\n\n### Frontend Tests\n```bash\ncd client\nnpm test\n```\n\n### Analytics Tests\n```bash\n# Test analytics calculations\nnpm run test:analytics\n\n# Test API endpoints\nnpm run test:api\n```\n\n## 📚 Usage Examples\n\n### For Educators\n1. **Monitor Assignment Performance**: View detailed analytics for each assignment\n2. **Identify Struggling Students**: Use comparative analytics to find students needing help\n3. **Track Learning Outcomes**: Monitor achievement of educational objectives\n4. **Optimize Course Content**: Use engagement metrics to improve assignments\n\n### For Administrators\n1. **Course Effectiveness**: Evaluate overall course performance\n2. **Student Progress**: Track individual student improvement\n3. **Resource Allocation**: Identify areas needing additional support\n4. **Reporting**: Generate comprehensive analytics reports\n\n### For Students\n1. **Personal Progress**: View individual performance analytics\n2. **Learning Insights**: Understand strengths and areas for improvement\n3. **Goal Setting**: Use recommendations to set learning goals\n4. **Self-Assessment**: Track confidence and achievement levels\n\n## 🔒 Security & Privacy\n\n### Data Protection\n- **User Authentication**: JWT-based authentication required\n- **Role-Based Access**: Admin-only access to sensitive analytics\n- **Data Encryption**: Sensitive data encrypted in transit and at rest\n- **Audit Logging**: Track access to analytics data\n\n### Privacy Compliance\n- **GDPR Compliance**: User consent and data portability\n- **FERPA Compliance**: Educational records protection\n- **Data Retention**: Configurable data retention policies\n- **Anonymization**: Option to anonymize sensitive data\n\n## 🚀 Deployment\n\n### Production Setup\n1. **Environment Configuration**\n```bash\n# Production environment variables\nNODE_ENV=production\nMONGODB_URI=mongodb://production-db:27017/codearena\nJWT_SECRET=secure-production-secret\n```\n\n2. **Database Optimization**\n```bash\n# Create indexes for analytics queries\ndb.assignmentAnalytics.createIndex({ assignmentId: 1, userId: 1 })\ndb.assignmentAnalytics.createIndex({ userId: 1, submittedAt: -1 })\ndb.assignmentAnalytics.createIndex({ courseId: 1, submittedAt: -1 })\n```\n\n3. **Performance Monitoring**\n- Monitor query performance\n- Set up analytics data archival\n- Configure caching strategies\n- Implement rate limiting\n\n## 🤝 Contributing\n\n### Development Guidelines\n1. **Code Style**: Follow TypeScript and ESLint guidelines\n2. **Testing**: Write unit tests for new features\n3. **Documentation**: Update documentation for API changes\n4. **Performance**: Optimize analytics calculations\n\n### Adding New Analytics\n1. **Define Metrics**: Add new metrics to the data model\n2. **Implement Calculations**: Add calculation logic to the service\n3. **Create API Endpoints**: Add new endpoints for the metrics\n4. **Build UI Components**: Create frontend components to display data\n5. **Write Tests**: Ensure new features are properly tested\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## 🆘 Support\n\nFor support and questions:\n- **Documentation**: Check this README and inline code comments\n- **Issues**: Create GitHub issues for bugs and feature requests\n- **Discussions**: Use GitHub Discussions for general questions\n- **Email**: Contact the development team for urgent issues\n\n## 🔄 Changelog\n\n### Version 1.0.0\n- Initial release of Assignment Analytics System\n- Comprehensive assignment, user, and course analytics\n- Interactive dashboards with data visualization\n- API endpoints for analytics data access\n- Export functionality for reports\n\n---\n\n**Built with ❤️ for the CodeArena platform** ","size_bytes":14856},"client/src/components/UserMaintenanceWrapper.tsx":{"content":"import React from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useMaintenanceMode } from '@/contexts/MaintenanceModeContext';\nimport { MaintenanceModal } from './MaintenanceModal';\n\ninterface UserMaintenanceWrapperProps {\n  children: React.ReactNode;\n}\n\nexport function UserMaintenanceWrapper({ children }: UserMaintenanceWrapperProps) {\n  const { user } = useAuth();\n  const { isMaintenanceMode, isMaintenanceActive } = useMaintenanceMode();\n\n  // Debug logging\n  console.log('UserMaintenanceWrapper Debug:', {\n    userRole: user?.role,\n    isMaintenanceMode,\n    isMaintenanceActive,\n    shouldShow: user?.role !== 'admin' && isMaintenanceMode && isMaintenanceActive\n  });\n\n  // Only show maintenance modal for regular users (non-admin) when maintenance is active\n  const shouldShowMaintenanceModal = \n    user?.role !== 'admin' && \n    isMaintenanceMode && \n    isMaintenanceActive;\n\n  return (\n    <>\n      {children}\n      {shouldShowMaintenanceModal && (\n        <MaintenanceModal isOpen={true} />\n      )}\n    </>\n  );\n}\n","size_bytes":1044},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/admin/AddStudentToProblemSet.tsx":{"content":"import { useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Search, UserPlus, ArrowLeft, Loader2, Users, BookOpen, Plus, Mail } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  role: string;\n  createdAt: string;\n}\n\ninterface ProblemSet {\n  id: string;\n  title: string;\n}\n\nexport default function AddStudentToProblemSet() {\n  const { problemSetId } = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Local state\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedUsers, setSelectedUsers] = useState<Record<string, boolean>>({});\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [newStudentEmail, setNewStudentEmail] = useState('');\n  const [newStudentName, setNewStudentName] = useState('');\n\n  // Fetch problem set details\n  const { data: problemSet } = useQuery({\n    queryKey: ['problem-set', problemSetId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/problem-sets/${problemSetId}`);\n      if (!response.ok) throw new Error('Failed to fetch problem set');\n      return response.json() as Promise<ProblemSet>;\n    }\n  });\n\n  // Fetch all users (students)\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: ['admin-users'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/users');\n      if (!response.ok) throw new Error('Failed to fetch users');\n      return response.json() as Promise<User[]>;\n    }\n  });\n\n  // Fetch existing enrollments\n  const { data: enrollments = [], isLoading: enrollmentsLoading } = useQuery({\n    queryKey: ['problem-set-enrollments', problemSetId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/problem-sets/${problemSetId}/enrollments`);\n      if (!response.ok) throw new Error('Failed to fetch enrollments');\n      return response.json() as Promise<any[]>;\n    }\n  });\n\n  // Create enrollment mutation\n  const enrollMutation = useMutation({\n    mutationFn: async (userIds: string[]) => {\n      const response = await apiRequest('POST', `/api/problem-sets/${problemSetId}/enroll`, { userIds });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to enroll students');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      const selectedCount = Object.keys(selectedUsers).filter(id => selectedUsers[id]).length;\n      toast({\n        title: \"Success\",\n        description: `Successfully enrolled ${selectedCount} student(s) in the problem set.`,\n      });\n      setSelectedUsers({});\n      queryClient.invalidateQueries({ queryKey: ['problem-set-enrollments', problemSetId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to enroll students\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Create student mutation\n  const createStudentMutation = useMutation({\n    mutationFn: async ({ email, name }: { email: string; name?: string }) => {\n      const [firstName, lastName] = name ? name.split(' ') : ['', ''];\n      const response = await apiRequest('POST', '/api/admin/users', {\n        email,\n        firstName: firstName || undefined,\n        lastName: lastName || undefined,\n        role: 'student'\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create student');\n      }\n      return response.json();\n    },\n    onSuccess: (newUser) => {\n      toast({\n        title: \"Success\",\n        description: `Student account created for ${newUser.email}. Default password: student123`,\n      });\n      setNewStudentEmail('');\n      setNewStudentName('');\n      setIsAddDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: ['admin-users'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create student\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const enrolledUserIds = new Set(enrollments.map(e => e.userId));\n  const availableUsers = users.filter(user => \n    user.role === 'student' && !enrolledUserIds.has(user.id)\n  );\n\n  const filteredUsers = availableUsers.filter(user => {\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      user.email?.toLowerCase().includes(searchLower) ||\n      user.firstName?.toLowerCase().includes(searchLower) ||\n      user.lastName?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  const toggleUserSelection = (userId: string) => {\n    console.log('Toggling user:', userId);\n    console.log('Current selected users:', Object.keys(selectedUsers).filter(id => selectedUsers[id]));\n    \n    setSelectedUsers(prev => {\n      const newState = { ...prev };\n      newState[userId] = !prev[userId];\n      console.log('New state for user', userId, ':', newState[userId]);\n      console.log('All selected users:', Object.keys(newState).filter(id => newState[id]));\n      return newState;\n    });\n  };\n\n  const handleEnrollSelected = () => {\n    const selectedUserIds = Object.keys(selectedUsers).filter(id => selectedUsers[id]);\n    if (selectedUserIds.length === 0) return;\n    enrollMutation.mutate(selectedUserIds);\n  };\n\n  const handleCreateStudent = () => {\n    if (!newStudentEmail.trim()) return;\n    createStudentMutation.mutate({\n      email: newStudentEmail.trim(),\n      name: newStudentName.trim() || undefined\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8 space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={() => setLocation(`/admin/problem-sets/${problemSetId}`)}\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold\">Add Students to Problem Set</h1>\n            <p className=\"text-muted-foreground\">\n              {problemSet?.title}\n            </p>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Available Students</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{availableUsers.length}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Students not yet enrolled\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Currently Enrolled</CardTitle>\n              <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{enrollments.length}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Students already enrolled\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Selected</CardTitle>\n              <UserPlus className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{Object.keys(selectedUsers).filter(id => selectedUsers[id]).length}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Ready to enroll\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Add Students</CardTitle>\n            <CardDescription>\n              Search and select students to enroll in this problem set\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Search */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by name or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n              <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Add New Student\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Student</DialogTitle>\n                    <DialogDescription>\n                      Create a new student account and add them to this problem set.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"student@example.com\"\n                        value={newStudentEmail}\n                        onChange={(e) => setNewStudentEmail(e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Full Name (Optional)</Label>\n                      <Input\n                        id=\"name\"\n                        placeholder=\"John Doe\"\n                        value={newStudentName}\n                        onChange={(e) => setNewStudentName(e.target.value)}\n                      />\n                    </div>\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setIsAddDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={handleCreateStudent}\n                        disabled={!newStudentEmail.trim() || createStudentMutation.isPending}\n                      >\n                        {createStudentMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Create Student\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n              <Button\n                onClick={handleEnrollSelected}\n                disabled={Object.keys(selectedUsers).filter(id => selectedUsers[id]).length === 0 || enrollMutation.isPending}\n              >\n                {enrollMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Enroll Selected ({Object.keys(selectedUsers).filter(id => selectedUsers[id]).length})\n              </Button>\n            </div>\n\n            {/* Users Table */}\n            {usersLoading || enrollmentsLoading ? (\n              <div className=\"flex items-center justify-center h-32\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n              </div>\n            ) : (\n              <div className=\"border rounded-md\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-12\">Select</TableHead>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Joined</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredUsers.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={5} className=\"text-center py-8 text-muted-foreground\">\n                          {searchTerm ? 'No students found matching your search' : 'No available students to enroll'}\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      filteredUsers.map((user) => (\n                        <TableRow key={user.id} className=\"cursor-pointer\" onClick={() => toggleUserSelection(user.id)}>\n                          <TableCell>\n                            <input\n                              type=\"checkbox\"\n                              id={`checkbox-${user.id}`}\n                              checked={Boolean(selectedUsers[user.id])}\n                              onChange={(e) => {\n                                e.stopPropagation();\n                                toggleUserSelection(user.id);\n                              }}\n                              className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                            />\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"font-medium\">\n                              {user.firstName && user.lastName \n                                ? `${user.firstName} ${user.lastName}` \n                                : user.email?.split('@')[0]\n                              }\n                            </div>\n                          </TableCell>\n                          <TableCell>{user.email}</TableCell>\n                          <TableCell>\n                            <Badge variant=\"secondary\">\n                              {user.role}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            {new Date(user.createdAt).toLocaleDateString()}\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n} ","size_bytes":15487},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport { MongoStore } from \"connect-mongo\";\nimport { storage } from \"./storage\";\nimport connectSanitizer from \"connect-mongo\";\n\nconst MongoStore = connectSanitizer.default || connectSanitizer;\n\n// REPLIT_DOMAINS is optional for local development\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!,\n    );\n  },\n  { maxAge: 3600 * 1000 },\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const mongoUrl =\n    \"mongodb+srv://bandarin29:meritcurve@meritcurve.73u7fr7.mongodb.net/\";\n\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: MongoStore.create({\n      mongoUrl,\n      dbName: \"meritcurve\",\n      collectionName: \"sessions\",\n      ttl: sessionTtl / 1000, // TTL in seconds\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nasync function verify(\n  issuer: client.IssuerMetadata,\n  tokens: { userinfo?: any },\n): Promise<any> {\n  const user = {\n    id: tokens.userinfo?.sub || \"unknown\",\n    email: tokens.userinfo?.email,\n    firstName: tokens.userinfo?.given_name,\n    lastName: tokens.userinfo?.family_name,\n    profileImageUrl: tokens.userinfo?.picture,\n    role: \"student\",\n  };\n\n  await storage.upsertUser(user);\n  return { user, claims: tokens.userinfo };\n}\n\nexport async function setupAuth(app: Express) {\n  const sessionMiddleware = getSession();\n  app.use(sessionMiddleware);\n\n  const oidcConfig = await getOidcConfig();\n\n  passport.use(\"oidc\", new Strategy({ config: oidcConfig }, verify));\n\n  passport.serializeUser((user, done) => {\n    done(null, user);\n  });\n\n  passport.deserializeUser((user: any, done) => {\n    done(null, user);\n  });\n\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Auth routes\n  app.get(\"/api/login\", passport.authenticate(\"oidc\"));\n\n  app.get(\n    \"/api/callback\",\n    passport.authenticate(\"oidc\", {\n      successRedirect: \"/\",\n      failureRedirect: \"/login?error=auth_failed\",\n    }),\n  );\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n      }\n      req.session.destroy((destroyErr) => {\n        if (destroyErr) {\n          console.error(\"Session destroy error:\", destroyErr);\n        }\n        res.redirect(\"/\");\n      });\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req: any, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};\n","size_bytes":2944},"client/src/components/GlobalMaintenanceEnforcer.tsx":{"content":"import React, { useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useMaintenanceMode } from '@/contexts/MaintenanceModeContext';\nimport { MaintenanceModal } from './MaintenanceModal';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface GlobalMaintenanceEnforcerProps {\n  children: React.ReactNode;\n}\n\nexport function GlobalMaintenanceEnforcer({ children }: GlobalMaintenanceEnforcerProps) {\n  const { user, isAuthenticated } = useAuth();\n  const { isMaintenanceMode, isMaintenanceActive, maintenanceFrom, maintenanceTo } = useMaintenanceMode();\n\n  // Poll server health status every 2 seconds for real-time updates\n  const { data: healthStatus } = useQuery({\n    queryKey: ['/api/health'],\n    queryFn: async () => {\n      const response = await fetch('/api/health');\n      if (!response.ok) {\n        throw new Error('Failed to fetch health status');\n      }\n      const data = await response.json();\n      return data;\n    },\n    refetchInterval: 2000, // Poll every 2 seconds for faster response\n    retry: false,\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    refetchOnReconnect: true\n  });\n\n  // Also poll maintenance status for regular users to get real-time updates\n  const { data: maintenanceStatus } = useQuery({\n    queryKey: ['/api/admin/maintenance/status'],\n    queryFn: async () => {\n      const response = await fetch('/api/admin/maintenance/status');\n      if (!response.ok) {\n        throw new Error('Failed to fetch maintenance status');\n      }\n      return response.json();\n    },\n    refetchInterval: 2000, // Poll every 2 seconds\n    retry: false,\n    refetchOnWindowFocus: true,\n    refetchOnMount: true,\n    refetchOnReconnect: true\n  });\n\n  // Determine if maintenance modal should be shown\n  // ONLY show for regular users (non-admin) when maintenance is active\n  // Priority: isMaintenanceMode must be true AND isMaintenanceActive must be true\n  const shouldShowMaintenanceModal = \n    isAuthenticated && \n    user?.role !== 'admin' && \n    isMaintenanceMode && \n    isMaintenanceActive;\n\n  // Additional check: if user is admin, never show modal\n  const isAdmin = user?.role === 'admin';\n  const finalShouldShowModal = shouldShowMaintenanceModal && !isAdmin;\n\n  // Debug logging\n  console.log('GlobalMaintenanceEnforcer Debug:', {\n    isAuthenticated,\n    userRole: user?.role,\n    isAdmin: user?.role === 'admin',\n    isMaintenanceMode,\n    isMaintenanceActive,\n    maintenanceStatus: maintenanceStatus?.isMaintenanceMode,\n    maintenanceActive: maintenanceStatus?.isMaintenanceActive,\n    healthStatus: healthStatus?.status,\n    healthMaintenance: healthStatus?.maintenance,\n    shouldShowMaintenanceModal,\n    finalShouldShowModal,\n    userObject: user,\n    timestamp: new Date().toISOString(),\n    // Additional debugging\n    contextValues: {\n      isMaintenanceMode,\n      isMaintenanceActive,\n      maintenanceFrom,\n      maintenanceTo\n    }\n  });\n\n  // Prevent any user interaction when maintenance is active\n  useEffect(() => {\n    if (finalShouldShowModal) {\n      // Disable all form submissions\n      const handleSubmit = (e: Event) => {\n        e.preventDefault();\n        e.stopPropagation();\n        return false;\n      };\n\n      // Disable all clicks on interactive elements\n      const handleClick = (e: Event) => {\n        const target = e.target as HTMLElement;\n        if (target.tagName === 'BUTTON' || \n            target.tagName === 'A' || \n            target.tagName === 'INPUT' || \n            target.tagName === 'SELECT' ||\n            target.tagName === 'TEXTAREA' ||\n            target.closest('button') ||\n            target.closest('a') ||\n            target.closest('input') ||\n            target.closest('select') ||\n            target.closest('textarea')) {\n          e.preventDefault();\n          e.stopPropagation();\n          return false;\n        }\n      };\n\n      // Disable keyboard navigation\n      const handleKeyDown = (e: KeyboardEvent) => {\n        if (e.key === 'Tab' || e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          e.stopPropagation();\n          return false;\n        }\n      };\n\n      // Add event listeners\n      document.addEventListener('submit', handleSubmit, true);\n      document.addEventListener('click', handleClick, true);\n      document.addEventListener('keydown', handleKeyDown, true);\n\n      // Cleanup\n      return () => {\n        document.removeEventListener('submit', handleSubmit, true);\n        document.removeEventListener('click', handleClick, true);\n        document.removeEventListener('keydown', handleKeyDown, true);\n      };\n    }\n  }, [shouldShowMaintenanceModal]);\n\n  return (\n    <>\n      {children}\n      {finalShouldShowModal && (\n        <MaintenanceModal isOpen={true} />\n      )}\n    </>\n  );\n}\n","size_bytes":4786},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { \n  LayoutDashboard, \n  Code, \n  Trophy, \n  GraduationCap, \n  ClipboardList,\n  Menu,\n  X\n} from \"lucide-react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  if (!isAuthenticated || !user) return null;\n\n  const { data: userStats } = useQuery({\n    queryKey: [\"/api/users/me/stats\"],\n  });\n\n  const sidebarItems = [\n    { path: \"/dashboard\", icon: LayoutDashboard, label: \"Dashboard\" },\n    { path: \"/problems\", icon: Code, label: \"Practice Problems\" },\n    { path: \"/contests\", icon: Trophy, label: \"Contests\" },\n    { path: \"/courses\", icon: GraduationCap, label: \"Courses\" },\n    { path: \"/assignments\", icon: ClipboardList, label: \"Assignments\" },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/dashboard\" && location === \"/\") return true;\n    return location === path || (path !== \"/dashboard\" && location.startsWith(path));\n  };\n\n  const problemsProgress = userStats ? (userStats.accepted / 120) * 100 : 0;\n\n  // return (\n  //   <>\n  //     Collapsed sidebar trigger\n  //     <div \n  //       className={`fixed left-0 top-16 z-40 transition-all duration-300 ease-in-out hidden lg:block ${\n  //         isExpanded ? 'translate-x-64' : 'translate-x-0'\n  //       }`}\n  //       onMouseEnter={() => setIsExpanded(true)}\n  //     >\n  //       <div className=\"bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-r-lg shadow-lg p-3 hamburger-hover menu-trigger\">\n  //         <Menu className=\"w-5 h-5 text-green-500\" />\n  //       </div>\n  //     </div>\n\n  //     {/* Expanded sidebar */}\n  //     <aside \n  //       className={`fixed left-0 top-16 h-[calc(100vh-4rem)] bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-800 shadow-xl z-30 transition-all duration-300 ease-in-out hidden lg:block ${\n  //         isExpanded ? 'translate-x-0 w-64' : '-translate-x-64 w-64'\n  //       }`}\n  //       onMouseEnter={() => setIsExpanded(true)}\n  //       onMouseLeave={() => setIsExpanded(false)}\n  //     >\n  //       <div className=\"relative h-full\">\n  //         {/* Close button */}\n  //         <button\n  //           onClick={() => setIsExpanded(false)}\n  //           className=\"absolute top-4 right-4 p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200\"\n  //         >\n  //           <X className=\"w-4 h-4 text-gray-500 dark:text-gray-400\" />\n  //         </button>\n\n  //         <div className=\"p-6 overflow-y-auto h-full\">\n  //           <div className={`${isExpanded ? 'sidebar-expanded' : ''}`}>\n  //             <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 opacity-0 animate-[fadeInUp_0.3s_ease-out_0.1s_forwards]\">\n  //               Quick Access\n  //             </h2>\n  //             <nav className=\"space-y-2\">\n  //               {sidebarItems.map((item, index) => (\n  //                 <Link\n  //                   key={item.path}\n  //                   href={item.path}\n  //                   className={`flex items-center space-x-3 px-3 py-2 rounded-lg transition-all duration-200 hover:scale-105 hover:shadow-md group opacity-0 ${\n  //                     isActive(item.path)\n  //                       ? \"text-green-500 bg-green-50 dark:bg-green-900/20 shadow-sm border border-green-200 dark:border-green-800\"\n  //                       : \"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-50 dark:hover:bg-gray-800\"\n  //                   }`}\n  //                   style={{\n  //                     animation: isExpanded ? `fadeInUp 0.3s ease-out ${0.2 + index * 0.1}s forwards` : 'none'\n  //                   }}\n  //                 >\n  //                   <item.icon className={`w-5 h-5 transition-all duration-200 group-hover:scale-110 group-hover:rotate-3 ${\n  //                     isActive(item.path) ? 'text-green-500' : ''\n  //                   }`} />\n  //                   <span className={`transition-all duration-200 ${\n  //                     isActive(item.path) ? \"font-semibold\" : \"\"\n  //                   }`}>\n  //                     {item.label}\n  //                   </span>\n  //                   {isActive(item.path) && (\n  //                     <div className=\"w-1 h-1 bg-green-500 rounded-full animate-pulse\"></div>\n  //                   )}\n  //                 </Link>\n  //               ))}\n  //             </nav>\n\n  //             <div className=\"mt-8 opacity-0\" style={{\n  //               animation: isExpanded ? 'fadeInUp 0.4s ease-out 0.6s forwards' : 'none'\n  //             }}>\n  //               <h3 className=\"text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3 flex items-center\">\n  //                 <span className=\"w-2 h-2 bg-gradient-to-r from-green-400 to-blue-500 rounded-full mr-2\"></span>\n  //                 Progress\n  //               </h3>\n  //               <div className=\"space-y-3\">\n  //                 <div className=\"p-3 bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700 rounded-lg hover:from-gray-100 hover:to-gray-200 dark:hover:from-gray-700 dark:hover:to-gray-600 transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md\">\n  //                   <div className=\"flex justify-between text-sm mb-2\">\n  //                     <span className=\"text-gray-600 dark:text-gray-300\">Problems Solved</span>\n  //                     <span className=\"font-semibold text-gray-900 dark:text-white bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full text-xs\">\n  //                       {userStats?.accepted || 0}/120\n  //                     </span>\n  //                   </div>\n  //                   <Progress value={problemsProgress} className=\"h-3 progress-shimmer\" />\n  //                 </div>\n  //                 <div className=\"p-3 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-lg hover:from-green-100 hover:to-emerald-100 dark:hover:from-green-900/30 dark:hover:to-emerald-900/30 transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md\">\n  //                   <div className=\"flex justify-between text-sm items-center\">\n  //                     <span className=\"text-gray-600 dark:text-gray-300\">Current Streak</span>\n  //                     <span className=\"font-semibold text-green-600 dark:text-green-400 flex items-center bg-green-100 dark:bg-green-900 px-2 py-1 rounded-full\">\n  //                       <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse\"></span>\n  //                       {userStats?.streak || 0} days\n  //                     </span>\n  //                   </div>\n  //                 </div>\n  //               </div>\n  //             </div>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     </aside>\n\n  //     {/* Backdrop for mobile */}\n  //     {isExpanded && (\n  //       <div \n  //         className=\"fixed inset-0 bg-black bg-opacity-50 z-20 lg:hidden\"\n  //         onClick={() => setIsExpanded(false)}\n  //       />\n  //     )}\n\n\n  //   </>\n  // );\n}\n\n\nexport default Sidebar;","size_bytes":7414},"client/build.sh":{"content":"#!/bin/bash\n\n# Clean previous build\necho \"Cleaning previous build...\"\nrm -rf dist\n\n# Install dependencies\necho \"Installing dependencies...\"\nnpm install\n\n# Build the application\necho \"Building application...\"\nnpm run build\n\n# Check if build was successful\nif [ -d \"dist\" ]; then\n    echo \"Build successful! Output directory: dist/\"\n    ls -la dist/\nelse\n    echo \"Build failed!\"\n    exit 1\nfi ","size_bytes":392},"server/models/AssignmentAnalytics.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface IAssignmentAnalytics {\n  id: number;\n  assignmentId: number;\n  userId: string;\n  courseId?: number;\n  moduleId?: number;\n  \n  // Overall assignment performance\n  totalScore: number;\n  maxScore: number;\n  percentageScore: number;\n  attemptNumber: number;\n  timeSpent: number; // in minutes\n  submittedAt: Date;\n  gradedAt?: Date;\n  \n  // Question-level analytics\n  questionAnalytics: Array<{\n    questionId: string;\n    questionType: 'mcq' | 'coding' | 'essay' | 'multiple-choice';\n    score: number;\n    maxScore: number;\n    timeSpent: number; // in minutes\n    attempts: number;\n    isCorrect: boolean;\n    feedback?: string;\n    difficultyRating?: number; // 1-5 scale\n    learningOutcome?: string;\n    conceptTags?: string[];\n  }>;\n  \n  // Learning analytics\n  learningOutcomes: Array<{\n    outcome: string;\n    achieved: boolean;\n    confidence: number; // 0-100\n    timeToMastery?: number; // in minutes\n  }>;\n  \n  // Engagement metrics\n  engagementMetrics: {\n    timeOnAssignment: number; // total time spent\n    timeOnQuestions: number[]; // time per question\n    revisits: number; // number of times user returned to assignment\n    lastActivity: Date;\n    completionRate: number; // percentage of questions attempted\n  };\n  \n  // Performance trends\n  performanceTrends: {\n    improvementFromPrevious: number; // percentage improvement\n    consistencyScore: number; // 0-100, measures consistency across questions\n    timeEfficiency: number; // score/time ratio\n    accuracyRate: number; // correct answers / total attempts\n  };\n  \n  // Comparative analytics\n  comparativeAnalytics: {\n    classAverage: number;\n    classRank: number;\n    percentile: number;\n    performanceCategory: 'excellent' | 'good' | 'average' | 'needs-improvement';\n  };\n  \n  // Metadata\n  metadata: {\n    deviceType?: string;\n    browser?: string;\n    ipAddress?: string;\n    sessionId?: string;\n    userAgent?: string;\n  };\n  \n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface IAssignmentAnalyticsDocument extends Omit<IAssignmentAnalytics, 'id'>, Document {\n  _id: mongoose.Types.ObjectId;\n  id: number;\n}\n\nconst assignmentAnalyticsSchema = new mongoose.Schema<IAssignmentAnalyticsDocument>({\n  id: {\n    type: Number,\n    required: true,\n    unique: true,\n  },\n  assignmentId: {\n    type: Number,\n    required: [true, 'Assignment ID is required'],\n    index: true,\n  },\n  userId: {\n    type: String,\n    required: [true, 'User ID is required'],\n    index: true,\n  },\n  courseId: {\n    type: Number,\n    index: true,\n  },\n  moduleId: {\n    type: Number,\n    index: true,\n  },\n  totalScore: {\n    type: Number,\n    required: true,\n    min: [0, 'Score cannot be negative'],\n  },\n  maxScore: {\n    type: Number,\n    required: true,\n    min: [0, 'Max score cannot be negative'],\n  },\n  percentageScore: {\n    type: Number,\n    required: true,\n    min: [0, 'Percentage cannot be negative'],\n    max: [100, 'Percentage cannot exceed 100'],\n  },\n  attemptNumber: {\n    type: Number,\n    required: true,\n    min: [1, 'Attempt number must be at least 1'],\n  },\n  timeSpent: {\n    type: Number,\n    required: true,\n    min: [0, 'Time spent cannot be negative'],\n  },\n  submittedAt: {\n    type: Date,\n    required: true,\n    default: Date.now,\n  },\n  gradedAt: {\n    type: Date,\n  },\n  questionAnalytics: [{\n    questionId: {\n      type: String,\n      required: true,\n    },\n    questionType: {\n      type: String,\n      enum: ['mcq', 'coding', 'essay', 'multiple-choice'],\n      required: true,\n    },\n    score: {\n      type: Number,\n      required: true,\n      min: [0, 'Score cannot be negative'],\n    },\n    maxScore: {\n      type: Number,\n      required: true,\n      min: [0, 'Max score cannot be negative'],\n    },\n    timeSpent: {\n      type: Number,\n      required: true,\n      min: [0, 'Time spent cannot be negative'],\n    },\n    attempts: {\n      type: Number,\n      required: true,\n      min: [1, 'Attempts must be at least 1'],\n    },\n    isCorrect: {\n      type: Boolean,\n      required: true,\n    },\n    feedback: {\n      type: String,\n      trim: true,\n    },\n    difficultyRating: {\n      type: Number,\n      min: [1, 'Difficulty rating must be at least 1'],\n      max: [5, 'Difficulty rating cannot exceed 5'],\n    },\n    learningOutcome: {\n      type: String,\n      trim: true,\n    },\n    conceptTags: [{\n      type: String,\n      trim: true,\n    }],\n  }],\n  learningOutcomes: [{\n    outcome: {\n      type: String,\n      required: true,\n      trim: true,\n    },\n    achieved: {\n      type: Boolean,\n      required: true,\n    },\n    confidence: {\n      type: Number,\n      required: true,\n      min: [0, 'Confidence cannot be negative'],\n      max: [100, 'Confidence cannot exceed 100'],\n    },\n    timeToMastery: {\n      type: Number,\n      min: [0, 'Time to mastery cannot be negative'],\n    },\n  }],\n  engagementMetrics: {\n    timeOnAssignment: {\n      type: Number,\n      required: true,\n      min: [0, 'Time on assignment cannot be negative'],\n    },\n    timeOnQuestions: [{\n      type: Number,\n      min: [0, 'Time per question cannot be negative'],\n    }],\n    revisits: {\n      type: Number,\n      required: true,\n      min: [0, 'Revisits cannot be negative'],\n      default: 0,\n    },\n    lastActivity: {\n      type: Date,\n      required: true,\n      default: Date.now,\n    },\n    completionRate: {\n      type: Number,\n      required: true,\n      min: [0, 'Completion rate cannot be negative'],\n      max: [100, 'Completion rate cannot exceed 100'],\n    },\n  },\n  performanceTrends: {\n    improvementFromPrevious: {\n      type: Number,\n      default: 0,\n    },\n    consistencyScore: {\n      type: Number,\n      required: true,\n      min: [0, 'Consistency score cannot be negative'],\n      max: [100, 'Consistency score cannot exceed 100'],\n    },\n    timeEfficiency: {\n      type: Number,\n      required: true,\n      min: [0, 'Time efficiency cannot be negative'],\n    },\n    accuracyRate: {\n      type: Number,\n      required: true,\n      min: [0, 'Accuracy rate cannot be negative'],\n      max: [100, 'Accuracy rate cannot exceed 100'],\n    },\n  },\n  comparativeAnalytics: {\n    classAverage: {\n      type: Number,\n      required: true,\n      min: [0, 'Class average cannot be negative'],\n      max: [100, 'Class average cannot exceed 100'],\n    },\n    classRank: {\n      type: Number,\n      required: true,\n      min: [1, 'Class rank must be at least 1'],\n    },\n    percentile: {\n      type: Number,\n      required: true,\n      min: [0, 'Percentile cannot be negative'],\n      max: [100, 'Percentile cannot exceed 100'],\n    },\n    performanceCategory: {\n      type: String,\n      enum: ['excellent', 'good', 'average', 'needs-improvement'],\n      required: true,\n    },\n  },\n  metadata: {\n    deviceType: {\n      type: String,\n      trim: true,\n    },\n    browser: {\n      type: String,\n      trim: true,\n    },\n    ipAddress: {\n      type: String,\n      trim: true,\n    },\n    sessionId: {\n      type: String,\n      trim: true,\n    },\n    userAgent: {\n      type: String,\n      trim: true,\n    },\n  },\n}, {\n  timestamps: true,\n});\n\n// Indexes for efficient queries\nassignmentAnalyticsSchema.index({ assignmentId: 1, userId: 1 });\nassignmentAnalyticsSchema.index({ userId: 1, submittedAt: -1 });\nassignmentAnalyticsSchema.index({ courseId: 1, submittedAt: -1 });\nassignmentAnalyticsSchema.index({ percentageScore: -1 });\nassignmentAnalyticsSchema.index({ 'comparativeAnalytics.performanceCategory': 1 });\n\n// Static methods for analytics queries\nassignmentAnalyticsSchema.statics.findByAssignment = function(assignmentId: number) {\n  return this.find({ assignmentId }).sort({ submittedAt: -1 });\n};\n\nassignmentAnalyticsSchema.statics.findByUser = function(userId: string) {\n  return this.find({ userId }).sort({ submittedAt: -1 });\n};\n\nassignmentAnalyticsSchema.statics.findByCourse = function(courseId: number) {\n  return this.find({ courseId }).sort({ submittedAt: -1 });\n};\n\nassignmentAnalyticsSchema.statics.getAssignmentStats = async function(assignmentId: number) {\n  const stats = await this.aggregate([\n    { $match: { assignmentId } },\n    {\n      $group: {\n        _id: null,\n        totalSubmissions: { $sum: 1 },\n        averageScore: { $avg: '$percentageScore' },\n        averageTimeSpent: { $avg: '$timeSpent' },\n        averageAttempts: { $avg: '$attemptNumber' },\n        minScore: { $min: '$percentageScore' },\n        maxScore: { $max: '$percentageScore' },\n        standardDeviation: { $stdDevPop: '$percentageScore' }\n      }\n    }\n  ]);\n  \n  return stats.length > 0 ? stats[0] : {\n    totalSubmissions: 0,\n    averageScore: 0,\n    averageTimeSpent: 0,\n    averageAttempts: 0,\n    minScore: 0,\n    maxScore: 0,\n    standardDeviation: 0\n  };\n};\n\nassignmentAnalyticsSchema.statics.getUserProgress = async function(userId: string, courseId?: number) {\n  const matchStage = courseId ? { userId, courseId } : { userId };\n  \n  const progress = await this.aggregate([\n    { $match: matchStage },\n    {\n      $group: {\n        _id: '$assignmentId',\n        bestScore: { $max: '$percentageScore' },\n        totalAttempts: { $sum: 1 },\n        averageTimeSpent: { $avg: '$timeSpent' },\n        lastAttempt: { $max: '$submittedAt' },\n        improvement: { $avg: '$performanceTrends.improvementFromPrevious' }\n      }\n    },\n    { $sort: { lastAttempt: -1 } }\n  ]);\n  \n  return progress;\n};\n\nassignmentAnalyticsSchema.statics.getLearningOutcomes = async function(userId: string, courseId?: number) {\n  const matchStage = courseId ? { userId, courseId } : { userId };\n  \n  const outcomes = await this.aggregate([\n    { $match: matchStage },\n    { $unwind: '$learningOutcomes' },\n    {\n      $group: {\n        _id: '$learningOutcomes.outcome',\n        totalAttempts: { $sum: 1 },\n        achievedCount: { $sum: { $cond: ['$learningOutcomes.achieved', 1, 0] } },\n        averageConfidence: { $avg: '$learningOutcomes.confidence' },\n        averageTimeToMastery: { $avg: '$learningOutcomes.timeToMastery' }\n      }\n    }\n  ]);\n  \n  return outcomes.map(outcome => ({\n    ...outcome,\n    achievementRate: outcome.totalAttempts > 0 ? (outcome.achievedCount / outcome.totalAttempts) * 100 : 0\n  }));\n};\n\n// Instance methods\nassignmentAnalyticsSchema.methods.calculatePerformanceCategory = function() {\n  if (this.percentageScore >= 90) return 'excellent';\n  if (this.percentageScore >= 80) return 'good';\n  if (this.percentageScore >= 70) return 'average';\n  return 'needs-improvement';\n};\n\nassignmentAnalyticsSchema.methods.updateComparativeAnalytics = async function(classStats: any) {\n  this.comparativeAnalytics.classAverage = classStats.averageScore;\n  this.comparativeAnalytics.percentile = classStats.percentile;\n  this.comparativeAnalytics.performanceCategory = this.calculatePerformanceCategory();\n  return await this.save();\n};\n\nexport const AssignmentAnalytics = mongoose.model<IAssignmentAnalyticsDocument>('AssignmentAnalytics', assignmentAnalyticsSchema); ","size_bytes":10943},"execution-system/multilang-api/server.js":{"content":"import express from 'express';\nimport cors from 'cors';\nimport { spawn } from 'child_process';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport os from 'os';\n\nconst app = express();\napp.use(cors());\napp.use(express.json({ limit: '100kb' }));\n\nconst SUPPORTED = new Set(['python','javascript','java','cpp','c']);\n\nfunction ext(lang){\n  return { python:'.py', javascript:'.js', java:'.java', cpp:'.cpp', c:'.c' }[lang];\n}\n\nfunction buildRawCommand(lang, filename) {\n  switch (lang) {\n    case 'python':     return `python3 ${filename}`;\n    case 'javascript': return `node ${filename}`;\n    case 'java':       return `cd ${path.dirname(filename)} && javac ${path.basename(filename)} && java Solution`;\n    case 'cpp':        return `cd ${path.dirname(filename)} && g++ -std=c++17 -O2 -o exec ${path.basename(filename)} && ./exec`;\n    case 'c':          return `cd ${path.dirname(filename)} && gcc -O2 -o exec ${path.basename(filename)} && ./exec`;\n    default: throw new Error('Unsupported');\n  }\n}\n\nfunction wrapWithTime(rawCmd) {\n  // Run the whole compound command inside bash so 'cd' is available\n  // time will execute bash as the measured program\n  return { cmd: '/usr/bin/time', args: ['-f', '__STATS__ %M %e', 'bash', '-lc', rawCmd] };\n}\n\nfunction prepareJava(code){\n  // Extract import lines anywhere in the code\n  const importRegex = /^\\s*import\\s+[^;]+;\\s*$/gm;\n  const imports = code.match(importRegex)?.join('\\n') || '';\n  let body = code.replace(importRegex, '').trim();\n\n  // Normalize line endings\n  body = body.replace(/\\r\\n/g, '\\n');\n\n  // Ensure class name is Solution and main is present\n  if (/public\\s+class\\s+\\w+/.test(body)) {\n    body = body.replace(/public\\s+class\\s+\\w+/, 'public class Solution');\n  } else if (/class\\s+\\w+/.test(body) && /static\\s+void\\s+main\\s*\\(/.test(body)) {\n    body = body.replace(/class\\s+\\w+/, 'public class Solution');\n  } else if (/static\\s+void\\s+main\\s*\\(/.test(body)) {\n    // Has a main method but no class definition\n    body = `public class Solution {\\n${body}\\n}`;\n  } else {\n    // No main or class; wrap as a simple main\n    body = `public class Solution {\\n  public static void main(String[] args) {\\n    ${body}\\n  }\\n}`;\n  }\n\n  return `${imports ? imports + '\\n' : ''}${body}\\n`;\n}\n\napp.get('/health', (req,res)=>res.json({status:'ok'}));\n\napp.post('/api/execute', async (req,res) => {\n  try {\n    const { code, language, input = '' } = req.body || {};\n    if (!code || !language) return res.status(400).json({ error: 'code and language required' });\n    if (!SUPPORTED.has(language)) return res.status(400).json({ error: `unsupported language: ${language}` });\n\n    const name = language === 'java' ? 'Solution.java' : `code${ext(language)}`;\n    const dir = await fs.mkdtemp(path.join(os.tmpdir(), 'exec-'));\n    const file = path.join(dir, name);\n    const program = language === 'java' ? prepareJava(code) : code;\n    await fs.writeFile(file, program, 'utf8');\n\n    const rawCmd = buildRawCommand(language, file);\n    const { cmd, args } = wrapWithTime(rawCmd);\n    const child = spawn(cmd, args, { cwd: dir });\n\n    let stdout = '', stderr = '';\n    const start = Date.now();\n\n    if (input) {\n      child.stdin.write(input);\n      if (!input.endsWith('\\n')) child.stdin.write('\\n');\n    }\n    child.stdin.end();\n\n    const timeoutMs = 15000;\n    const t = setTimeout(() => child.kill('SIGKILL'), timeoutMs);\n\n    child.stdout.on('data', d => { stdout += d.toString(); });\n    child.stderr.on('data', d => { stderr += d.toString(); });\n\n    child.on('close', async (code) => {\n      clearTimeout(t);\n      try { await fs.rm(dir, { recursive:true, force:true }); } catch {}\n\n      // Parse GNU time stats from stderr\n      let usedKb = 0; let elapsedSec = null;\n      const lines = stderr.split(/\\r?\\n/);\n      const statLine = lines.find(l => l.startsWith('__STATS__'));\n      if (statLine) {\n        const match = statLine.match(/__STATS__\\s+(\\d+)\\s+([0-9.]+)/);\n        if (match) {\n          usedKb = parseInt(match[1], 10) || 0;\n          elapsedSec = parseFloat(match[2]);\n        }\n        // Remove stats line from program stderr\n        stderr = lines.filter(l => l !== statLine).join('\\n');\n      }\n\n      const runtimeMs = Number.isFinite(elapsedSec) ? Math.round(elapsedSec * 1000) : (Date.now() - start);\n      const memoryMb = usedKb > 0 ? Math.round(usedKb / 1024) : 0;\n\n      if (code !== 0) return res.json({ status:'error', output: stdout.trim(), error: stderr.trim() || 'Runtime Error', runtime: runtimeMs, memory: memoryMb });\n      return res.json({ status:'success', output: stdout.trim(), error: '', runtime: runtimeMs, memory: memoryMb });\n    });\n\n    child.on('error', async (err) => {\n      clearTimeout(t);\n      try { await fs.rm(dir, { recursive:true, force:true }); } catch {}\n      return res.status(500).json({ status:'error', error: `spawn failed: ${err.message}`, output:'', runtime:0, memory:0 });\n    });\n  } catch (e) {\n    return res.status(500).json({ error: e.message });\n  }\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, '3000', () => console.log(`executor listening on ${port}`)); ","size_bytes":5122},"execution-system/quick-docker-setup.sh":{"content":"#!/bin/bash\n\n# 🚀 Quick Docker Setup for CodeArena Execution System\n# This script builds and tests Docker connectivity\n\necho \"🐳 Setting up Docker connectivity for CodeArena execution system...\"\necho \"\"\n\n# Step 1: Build Docker images\necho \"1. Building Docker images...\"\ndocker build -f Dockerfile.api -t codearena/execution-api .\ndocker build -f Dockerfile.worker -t codearena/execution-worker .\n\necho \"✅ Docker images built successfully!\"\n\n# Step 2: Start services\necho \"\"\necho \"2. Starting services with Docker Compose...\"\ndocker-compose up -d\n\necho \"✅ Services started!\"\n\n# Step 3: Wait for services to be ready\necho \"\"\necho \"3. Waiting for services to be ready...\"\nsleep 10\n\n# Step 4: Test Docker connectivity\necho \"\"\necho \"4. Testing Docker connectivity...\"\n\necho \"   Testing worker can access Docker daemon...\"\ndocker-compose exec worker docker --version\n\necho \"   Testing worker can list containers...\"\ndocker-compose exec worker docker ps\n\n# Step 5: Test API endpoints\necho \"\"\necho \"5. Testing API endpoints...\"\n\necho \"   Testing health endpoint...\"\ncurl -s http://localhost:3001/health | jq '.' || echo \"API not ready yet\"\n\necho \"   Testing queue stats...\"\ncurl -s http://localhost:3001/api/stats | jq '.' || echo \"Stats not ready yet\"\n\n# Step 6: Test code execution\necho \"\"\necho \"6. Testing code execution...\"\n\necho \"   Submitting Python test...\"\nRESPONSE=$(curl -s -X POST http://localhost:3001/api/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"code\": \"print(\\\"Docker connectivity test successful!\\\")\", \"language\": \"python\"}')\n\necho \"   Response: $RESPONSE\"\n\nif [[ \"$RESPONSE\" == *\"jobId\"* ]]; then\n    echo \"✅ Code execution working!\"\nelse\n    echo \"⚠️ Code execution may need more time to start\"\nfi\n\necho \"\"\necho \"🎉 Docker setup complete!\"\necho \"\"\necho \"📋 Next steps:\"\necho \"   - Check services: docker-compose ps\"\necho \"   - View logs: docker-compose logs -f\"\necho \"   - Test API: curl http://localhost:3001/health\"\necho \"   - Stop services: docker-compose down\"\necho \"\"\necho \"🔧 Useful commands:\"\necho \"   docker-compose exec worker docker ps    # Check Docker access\"\necho \"   docker-compose exec worker sh           # Enter worker container\"\necho \"   docker-compose logs worker              # View worker logs\" ","size_bytes":2262},"scripts/test-docker-execution.sh":{"content":"#!/bin/bash\n\n# 🐳 Docker Execution System Test Script\n# This script tests all Docker components of the execution system\n\nset -e\n\necho \"🧪 Testing Docker Execution System Components\"\necho \"==============================================\"\necho \"\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Function to print status\nprint_status() {\n    if [ $1 -eq 0 ]; then\n        echo -e \"${GREEN}✅ $2${NC}\"\n    else\n        echo -e \"${RED}❌ $2${NC}\"\n        exit 1\n    fi\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠️  $1${NC}\"\n}\n\n# Step 1: Check Docker\necho \"1. Checking Docker installation...\"\ndocker --version > /dev/null 2>&1\nprint_status $? \"Docker is installed and running\"\n\n# Step 2: Build Docker images\necho \"\"\necho \"2. Building Docker images...\"\ncd execution-system\n\nif [ ! -f \"scripts/build.sh\" ]; then\n    echo \"❌ Build script not found. Make sure you're in the correct directory.\"\n    exit 1\nfi\n\necho \"   Building all execution images...\"\nbash scripts/build.sh > build.log 2>&1\nprint_status $? \"All Docker images built successfully\"\n\n# Step 3: Test individual language containers\necho \"\"\necho \"3. Testing individual language containers...\"\n\necho \"   Testing Python container...\"\nPYTHON_OUTPUT=$(docker run --rm codearena/executor-python:latest python3 -c \"print('Python works')\" 2>/dev/null)\nif [[ \"$PYTHON_OUTPUT\" == *\"Python works\"* ]]; then\n    print_status 0 \"Python container working\"\nelse\n    print_status 1 \"Python container failed\"\nfi\n\necho \"   Testing JavaScript container...\"\nJS_OUTPUT=$(docker run --rm codearena/executor-javascript:latest node -e \"console.log('JavaScript works')\" 2>/dev/null)\nif [[ \"$JS_OUTPUT\" == *\"JavaScript works\"* ]]; then\n    print_status 0 \"JavaScript container working\"\nelse\n    print_status 1 \"JavaScript container failed\"\nfi\n\necho \"   Testing C container...\"\nC_OUTPUT=$(docker run --rm codearena/executor-c:latest /app/execute.sh 'int main(){printf(\"C works\"); return 0;}' '' '64m' '5' 2>/dev/null)\nif [[ \"$C_OUTPUT\" == *\"success\"* ]] && [[ \"$C_OUTPUT\" == *\"C works\"* ]]; then\n    print_status 0 \"C container working\"\nelse\n    print_status 1 \"C container failed\"\nfi\n\necho \"   Testing C++ container...\"\nCPP_OUTPUT=$(docker run --rm codearena/executor-cpp:latest /app/execute.sh '#include<iostream>\nint main(){std::cout<<\"C++ works\"; return 0;}' '' '64m' '5' 2>/dev/null)\nif [[ \"$CPP_OUTPUT\" == *\"success\"* ]] && [[ \"$CPP_OUTPUT\" == *\"C++ works\"* ]]; then\n    print_status 0 \"C++ container working\"\nelse\n    print_status 1 \"C++ container failed\"\nfi\n\necho \"   Testing Java container...\"\nJAVA_OUTPUT=$(docker run --rm codearena/executor-java:latest /app/execute.sh 'public class Main{public static void main(String[] args){System.out.println(\"Java works\");}}' '' '64m' '5' 2>/dev/null)\nif [[ \"$JAVA_OUTPUT\" == *\"success\"* ]] && [[ \"$JAVA_OUTPUT\" == *\"Java works\"* ]]; then\n    print_status 0 \"Java container working\"\nelse\n    print_status 1 \"Java container failed\"\nfi\n\n# Step 4: Test Docker Compose\necho \"\"\necho \"4. Testing Docker Compose setup...\"\n\necho \"   Starting services with docker-compose...\"\ndocker-compose up -d > /dev/null 2>&1\nsleep 10\n\necho \"   Checking service status...\"\nSERVICES_STATUS=$(docker-compose ps --format \"table {{.Service}}\\t{{.Status}}\")\necho \"$SERVICES_STATUS\"\n\n# Check if all services are up\nif docker-compose ps | grep -q \"Up\"; then\n    print_status 0 \"Docker Compose services are running\"\nelse\n    print_status 1 \"Docker Compose services failed to start\"\nfi\n\n# Step 5: Test API endpoints\necho \"\"\necho \"5. Testing API endpoints...\"\n\necho \"   Waiting for services to be ready...\"\nsleep 5\n\necho \"   Testing health endpoint...\"\nHEALTH_RESPONSE=$(curl -s http://localhost:3001/health 2>/dev/null || echo \"FAILED\")\nif [[ \"$HEALTH_RESPONSE\" == *\"healthy\"* ]]; then\n    print_status 0 \"Health endpoint responding\"\nelse\n    print_warning \"Health endpoint not responding (this might be normal if starting up)\"\nfi\n\necho \"   Testing queue stats...\"\nSTATS_RESPONSE=$(curl -s http://localhost:3001/api/stats 2>/dev/null || echo \"FAILED\")\nif [[ \"$STATS_RESPONSE\" == *\"waiting\"* ]]; then\n    print_status 0 \"Queue stats endpoint responding\"\nelse\n    print_warning \"Queue stats endpoint not responding\"\nfi\n\n# Step 6: Test code execution through API\necho \"\"\necho \"6. Testing code execution through API...\"\n\necho \"   Submitting Python code execution...\"\nEXEC_RESPONSE=$(curl -s -X POST http://localhost:3001/api/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"code\": \"print(\\\"API execution works\\\")\", \"language\": \"python\"}' 2>/dev/null || echo \"FAILED\")\n\nif [[ \"$EXEC_RESPONSE\" == *\"jobId\"* ]]; then\n    print_status 0 \"Code execution API working\"\n    \n    # Extract job ID and check status\n    JOB_ID=$(echo \"$EXEC_RESPONSE\" | grep -o '\"jobId\":\"[^\"]*' | cut -d'\"' -f4)\n    if [ ! -z \"$JOB_ID\" ]; then\n        echo \"   Job ID: $JOB_ID\"\n        echo \"   Waiting for job completion...\"\n        \n        # Poll for job completion\n        for i in {1..30}; do\n            JOB_STATUS=$(curl -s http://localhost:3001/api/jobs/$JOB_ID 2>/dev/null || echo \"FAILED\")\n            if [[ \"$JOB_STATUS\" == *\"completed\"* ]]; then\n                print_status 0 \"Job completed successfully\"\n                break\n            elif [[ \"$JOB_STATUS\" == *\"failed\"* ]]; then\n                print_status 1 \"Job failed\"\n                break\n            fi\n            sleep 1\n        done\n    fi\nelse\n    print_warning \"Code execution API not responding properly\"\nfi\n\n# Step 7: Performance test\necho \"\"\necho \"7. Running basic performance test...\"\n\necho \"   Submitting 10 concurrent requests...\"\nfor i in {1..10}; do\n    curl -s -X POST http://localhost:3001/api/execute \\\n      -H \"Content-Type: application/json\" \\\n      -d \"{\\\"code\\\": \\\"print('Performance test $i')\\\", \\\"language\\\": \\\"python\\\"}\" &\ndone\nwait\n\nprint_status 0 \"Performance test completed\"\n\n# Step 8: Cleanup and summary\necho \"\"\necho \"8. Cleanup and summary...\"\n\necho \"   Docker Compose services status:\"\ndocker-compose ps\n\necho \"\"\necho \"🎉 Docker execution system test completed!\"\necho \"\"\necho \"📊 Summary:\"\necho \"   ✅ Docker installation verified\"\necho \"   ✅ All language containers built and tested\"\necho \"   ✅ Docker Compose services running\"\necho \"   ✅ API endpoints responding\"\necho \"   ✅ Code execution working\"\necho \"   ✅ Basic performance test passed\"\necho \"\"\necho \"🔧 To stop services: docker-compose down\"\necho \"📋 To view logs: docker-compose logs -f\"\necho \"🌐 API URL: http://localhost:3001\"\necho \"\"\necho \"Next step: Test Kubernetes deployment with scripts/test-k8s-execution.sh\" ","size_bytes":6590},"client/src/components/ui/enhanced-toast.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X, Info, AlertTriangle, CheckCircle, AlertCircle } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-lg border p-4 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        info: \"border-blue-200 bg-white text-gray-900\",\n        error: \"border-red-200 bg-white text-gray-900\",\n        warning: \"border-yellow-200 bg-white text-gray-900\",\n        success: \"border-green-200 bg-white text-gray-900\",\n      },\n    },\n    defaultVariants: {\n      variant: \"info\",\n    },\n  }\n)\n\nconst progressBarVariants = cva(\n  \"absolute bottom-0 left-0 h-1 transition-all duration-300 ease-out\",\n  {\n    variants: {\n      variant: {\n        info: \"bg-blue-500\",\n        error: \"bg-red-500\",\n        warning: \"bg-yellow-500\",\n        success: \"bg-green-500\",\n      },\n    },\n    defaultVariants: {\n      variant: \"info\",\n    },\n  }\n)\n\nconst iconVariants = cva(\n  \"flex-shrink-0 w-6 h-6 rounded-full flex items-center justify-center text-white font-semibold text-sm\",\n  {\n    variants: {\n      variant: {\n        info: \"bg-blue-500\",\n        error: \"bg-red-500\",\n        warning: \"bg-yellow-500 border-2 border-gray-800 text-gray-800\",\n        success: \"bg-green-500\",\n      },\n    },\n    defaultVariants: {\n      variant: \"info\",\n    },\n  }\n)\n\ninterface EnhancedToastProps extends VariantProps<typeof toastVariants> {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  duration?: number\n  className?: string\n}\n\nconst EnhancedToast = React.forwardRef<HTMLDivElement, EnhancedToastProps>(\n  ({ className, variant = \"info\", title, description, duration = 5000, ...props }, ref) => {\n    const [progress, setProgress] = React.useState(100)\n    const [isVisible, setIsVisible] = React.useState(true)\n\n    React.useEffect(() => {\n      if (!isVisible) return\n\n      const interval = setInterval(() => {\n        setProgress((prev) => {\n          if (prev <= 0) {\n            setIsVisible(false)\n            props.onOpenChange?.(false)\n            return 0\n          }\n          return prev - (100 / (duration / 100))\n        })\n      }, 100)\n\n      return () => clearInterval(interval)\n    }, [duration, isVisible, props])\n\n    const getIcon = () => {\n      switch (variant) {\n        case \"info\":\n          return <Info className=\"w-4 h-4\" />\n        case \"error\":\n          return <AlertCircle className=\"w-4 h-4\" />\n        case \"warning\":\n          return <AlertTriangle className=\"w-4 h-4\" />\n        case \"success\":\n          return <CheckCircle className=\"w-4 h-4\" />\n        default:\n          return <Info className=\"w-4 h-4\" />\n      }\n    }\n\n    if (!isVisible) return null\n\n    return (\n      <div\n        ref={ref}\n        className={cn(toastVariants({ variant }), className)}\n        {...props}\n      >\n        <div className=\"flex items-start space-x-3 flex-1\">\n          {/* Icon */}\n          <div className={cn(iconVariants({ variant }))}>\n            {getIcon()}\n          </div>\n          \n          {/* Content */}\n          <div className=\"flex-1 min-w-0\">\n            {title && (\n              <div className=\"text-sm font-medium text-gray-900 mb-1\">\n                {title}\n              </div>\n            )}\n            {description && (\n              <div className=\"text-sm text-gray-600\">\n                {description}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Close Button */}\n        <button\n          className=\"absolute right-2 top-2 rounded-md p-1 text-gray-400 opacity-0 transition-opacity hover:text-gray-600 focus:opacity-100 focus:outline-none group-hover:opacity-100\"\n          onClick={() => {\n            setIsVisible(false)\n            props.onOpenChange?.(false)\n          }}\n        >\n          <X className=\"h-4 w-4\" />\n        </button>\n\n        {/* Progress Bar */}\n        <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-gray-200\">\n          <div\n            className={cn(progressBarVariants({ variant }))}\n            style={{ width: `${progress}%` }}\n          />\n        </div>\n      </div>\n    )\n  }\n)\n\nEnhancedToast.displayName = \"EnhancedToast\"\n\nexport { EnhancedToast, toastVariants, progressBarVariants, iconVariants }\nexport type { EnhancedToastProps }\n","size_bytes":4929},"server/routes/users.ts":{"content":"import { Router, Request, Response, RequestHandler } from 'express';\nimport { storage } from \"../storage\";\nimport { protect } from \"../middleware/auth\";\nimport { requireAdmin } from '../middleware/auth';\nimport { listUsers, updateUserRole } from '../controllers/adminController';\n\ninterface AuthUser {\n  id: string;\n  role: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n}\n\ninterface AuthenticatedRequest extends Request {\n  user?: AuthUser;\n}\n\nconst router = Router();\n\nrouter.get(\"/me/stats\", protect as unknown as RequestHandler, (async (req: AuthenticatedRequest, res: Response) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: \"Unauthorized\" });\n    }\n\n    const stats = await storage.getUserSubmissionStats(userId);\n    res.json(stats);\n  } catch (error) {\n    console.error(\"Error getting user stats:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n}) as unknown as RequestHandler);\n\n// Expose enrollments under users to satisfy client calls\nrouter.get('/me/enrollments', protect as unknown as RequestHandler, (async (req: AuthenticatedRequest, res: Response) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n    const enrollments = await storage.getCourseEnrollments(undefined as any, userId);\n    res.json(enrollments);\n  } catch (error) {\n    console.error('Error getting user enrollments:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}) as unknown as RequestHandler);\n\n// User courses endpoint\nrouter.get('/me/courses', protect as unknown as RequestHandler, (async (req: AuthenticatedRequest, res: Response) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      return res.status(401).json({ error: 'Unauthorized' });\n    }\n    \n    // Import and call the getUserCourses controller function\n    const { getUserCourses } = await import('../controllers/coursesController');\n    const mockReq = { user: { id: userId, role: req.user?.role || 'user' } } as any;\n    const mockRes = {\n      json: (data: any) => res.json(data),\n      status: (code: number) => ({ json: (data: any) => res.status(code).json(data) })\n    } as any;\n    \n    await getUserCourses(mockReq, mockRes);\n  } catch (error) {\n    console.error('Error getting user courses:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}) as unknown as RequestHandler);\n\n// Problem set enrollments for current user (used by QR/link flow)\nrouter.get('/me/problem-set-enrollments', protect as unknown as RequestHandler, (async (req: AuthenticatedRequest, res: Response) => {\n  try {\n    const userId = req.user?.id;\n    if (!userId) return res.status(401).json({ error: 'Unauthorized' });\n    const { getDb } = await import('../db');\n    const db = getDb();\n    const rows = await db.collection('problemsetenrollments').find({ userId }).sort({ enrolledAt: -1 }).toArray();\n    res.json(rows);\n  } catch (error) {\n    console.error('Error getting problem set enrollments:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n}) as unknown as RequestHandler);\n\n// Admin user endpoints\nrouter.get('/', protect as any, requireAdmin as any, listUsers as any);\nrouter.patch('/:id/role', protect as any, requireAdmin as any, updateUserRole as any);\n\nexport default router; ","size_bytes":3446},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden h-full\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex h-full\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6224},"client/src/pages/Assignments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Clock, BookOpen, FileText, Search, Lock, CheckCircle } from \"lucide-react\";\n\ninterface Assignment {\n  id: number;\n  title: string;\n  description?: string;\n  courseTag: string;\n  deadline?: string;\n  questions: any[];\n  maxAttempts: number;\n  isVisible: boolean;\n  autoGrade: boolean;\n  isEnrolled?: boolean;\n  isCompleted?: boolean;\n  createdBy?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function Assignments() {\n  const [selectedCourse, setSelectedCourse] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n\n  const { data: assignments, isLoading } = useQuery<Assignment[]>({\n    queryKey: user ? [\"/api/problem-sets-with-enrollment\"] : [\"/api/assignments\"],\n    enabled: true, // Always enabled, but will use different endpoints based on user state\n  });\n\n  // Debug logging\n  console.log('[DEBUG] Assignments page:', {\n    user: user ? { id: user.id, email: user.email } : null,\n    queryKey: user ? [\"/api/problem-sets-with-enrollment\"] : [\"/api/assignments\"],\n    assignmentsCount: assignments?.length || 0,\n    assignments: assignments?.map(a => ({ id: a.id, title: a.title, isEnrolled: a.isEnrolled }))\n  });\n\n  const courseTags = Array.from(new Set(assignments?.map(a => a.courseTag) || []));\n\n  const filteredAssignments = assignments?.filter(assignment => {\n    const matchesCourse = selectedCourse === \"all\" || assignment.courseTag === selectedCourse;\n    const matchesSearch = assignment.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         assignment.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesCourse && matchesSearch;\n  }) || [];\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const getDeadlineStatus = (deadline?: string) => {\n    if (!deadline) return null;\n    const now = new Date();\n    const deadlineDate = new Date(deadline);\n    const diffTime = deadlineDate.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays < 0) return { status: \"overdue\", text: \"Overdue\", variant: \"destructive\" as const };\n    if (diffDays === 0) return { status: \"today\", text: \"Due Today\", variant: \"destructive\" as const };\n    if (diffDays <= 3) return { status: \"soon\", text: `Due in ${diffDays} days`, variant: \"secondary\" as const };\n    return { status: \"upcoming\", text: `Due in ${diffDays} days`, variant: \"outline\" as const };\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Loading assignments...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2\">Assignments</h1>\n        <p className=\"text-muted-foreground\">Complete assignments to test your knowledge and skills</p>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"flex items-center gap-2 flex-1\">\n          <Search className=\"h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search assignments...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"max-w-sm\"\n          />\n        </div>\n        <Select value={selectedCourse} onValueChange={setSelectedCourse}>\n          <SelectTrigger className=\"w-full sm:w-48\">\n            <SelectValue placeholder=\"Filter by course\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Courses</SelectItem>\n            {courseTags.map(tag => (\n              <SelectItem key={tag} value={tag}>{tag}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Assignments Grid */}\n      <div className=\"grid gap-6\">\n        {filteredAssignments.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center h-64\">\n              <BookOpen className=\"h-12 w-12 text-muted-foreground mb-4\" />\n              <div className=\"text-muted-foreground mb-2\">No assignments found</div>\n              <p className=\"text-sm text-muted-foreground text-center\">\n                {searchQuery || selectedCourse !== \"all\" \n                  ? \"Try adjusting your search or filter criteria\"\n                  : \"Check back later for new assignments\"\n                }\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredAssignments.map((assignment: Assignment) => {\n            const deadlineStatus = getDeadlineStatus(assignment.deadline);\n            const totalPoints = assignment.questions.reduce((sum, q) => sum + (q.points || 1), 0);\n            \n            return (\n              <Card key={assignment.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <CardTitle className=\"text-xl\">{assignment.title}</CardTitle>\n                        <Badge variant=\"outline\">{assignment.courseTag}</Badge>\n                        {deadlineStatus && (\n                          <Badge variant={deadlineStatus.variant}>\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            {deadlineStatus.text}\n                          </Badge>\n                        )}\n                      </div>\n                      <CardDescription className=\"text-base\">\n                        {assignment.description || \"No description provided\"}\n                      </CardDescription>\n                    </div>\n                    {assignment.isEnrolled ? (\n                      <Button \n                        onClick={() => navigate(`/assignments/${assignment.id}`)}\n                        variant={assignment.isCompleted ? \"secondary\" : \"default\"}\n                      >\n                        {assignment.isCompleted ? (\n                          <>\n                            <CheckCircle className=\"h-4 w-4 mr-2\" />\n                            Completed\n                          </>\n                        ) : (\n                          <>\n                            <FileText className=\"h-4 w-4 mr-2\" />\n                            Start Solving\n                          </>\n                        )}\n                      </Button>\n                    ) : (\n                      <Button \n                        variant=\"outline\" \n                        disabled\n                        title=\"This assignment requires enrollment. Please contact your instructor for access.\"\n                      >\n                        <Lock className=\"h-4 w-4 mr-2\" />\n                        Locked\n                      </Button>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-medium text-muted-foreground\">Questions:</span>\n                      <div className=\"font-medium\">{assignment.questions.length}</div>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-muted-foreground\">Total Points:</span>\n                      <div className=\"font-medium\">{totalPoints}</div>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-muted-foreground\">Max Attempts:</span>\n                      <div className=\"font-medium\">{assignment.maxAttempts}</div>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-muted-foreground\">Created:</span>\n                      <div className=\"font-medium\">{formatDate(assignment.createdAt)}</div>\n                    </div>\n                  </div>\n                  \n                  {assignment.deadline && (\n                    <div className=\"mt-4 p-3 bg-muted/50 rounded-lg\">\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium\">Deadline: </span>\n                        {new Date(assignment.deadline).toLocaleString()}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9268},"Documentations/replit.md":{"content":"# CodeArena - Competitive Programming Platform\n\n## Overview\n\nCodeArena is a comprehensive competitive programming platform built with a modern full-stack architecture. The application provides a complete coding education and competition environment with features for students, instructors, and administrators. It supports problem solving, contests, courses, assignments, and real-time code execution across multiple programming languages.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **Styling**: Tailwind CSS with shadcn/ui component library\n- **State Management**: Zustand for global state, React Query for server state\n- **Routing**: Wouter for lightweight client-side routing\n- **Code Editor**: Monaco Editor for in-browser code editing\n- **Theme Support**: Dark/light mode with theme provider\n\n### Backend Architecture\n- **Runtime**: Node.js 20 with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: MongoDB Atlas with native MongoDB driver\n- **Authentication**: Multiple strategies including JWT tokens, Google OAuth, and Replit OIDC\n- **Session Management**: Express sessions with MongoDB store\n- **Code Execution**: Secure sandboxed execution using child processes\n\n### Data Storage\n- **Primary Database**: MongoDB Atlas cluster\n- **Schema Validation**: Zod schemas for runtime validation\n- **Collections**: Users, problems, submissions, courses, assignments, contests, and more\n- **Session Store**: MongoDB-based session storage for authentication\n\n## Key Components\n\n### Authentication System\n- **Multi-provider Support**: Email/password, Google OAuth, and Replit OIDC\n- **Role-based Access**: Student and admin roles with middleware protection\n- **Token Management**: JWT tokens with secure cookie storage\n- **Session Persistence**: MongoDB-backed sessions for reliability\n\n### Problem Management\n- **CRUD Operations**: Complete problem lifecycle management\n- **Multiple Languages**: Support for Python, JavaScript, C++, Java\n- **Test Cases**: Hidden and visible test cases with custom validation\n- **Code Templates**: Language-specific starter code\n- **Difficulty Levels**: Easy, medium, hard categorization\n\n### Code Execution Engine\n- **Sandboxed Execution**: Secure isolated code execution\n- **Multiple Languages**: Python, JavaScript, C++, Java support\n- **Resource Limits**: Time and memory constraints\n- **Real-time Results**: Immediate feedback on code submissions\n\n### Course System\n- **Modular Content**: Text, video, and interactive code modules\n- **Progress Tracking**: Student enrollment and completion tracking\n- **Assignment Integration**: Course-linked assignments and assessments\n- **Admin Management**: Full CRUD operations for course content\n\n### Contest Platform\n- **Live Competitions**: Real-time contest participation\n- **Leaderboards**: Dynamic ranking and scoring\n- **Time Management**: Contest scheduling and duration controls\n- **Problem Sets**: Curated problem collections for contests\n\n## Data Flow\n\n### Authentication Flow\n1. User initiates login via email/password or OAuth provider\n2. Server validates credentials and generates JWT token\n3. Token stored in secure HTTP-only cookie\n4. Subsequent requests authenticated via middleware\n5. Role-based route protection enforced\n\n### Problem Solving Flow\n1. User selects problem from catalog\n2. Monaco editor loads with starter code\n3. Code submitted to execution engine\n4. Sandboxed execution with test case validation\n5. Results returned with performance metrics\n6. Submission stored in database with status\n\n### Course Progression Flow\n1. Student enrolls in course\n2. Progress tracked through module completion\n3. Interactive code exercises validated\n4. Completion status updated in real-time\n5. Certificates generated upon course completion\n\n## External Dependencies\n\n### Core Technologies\n- **React Ecosystem**: React, React DOM, React Query for frontend\n- **Node.js Stack**: Express, TypeScript, various middleware\n- **MongoDB**: Native driver with connection pooling\n- **Authentication**: Passport.js with multiple strategies\n\n### UI Components\n- **Radix UI**: Accessible component primitives\n- **shadcn/ui**: Pre-built component library\n- **Lucide React**: Icon library\n- **Monaco Editor**: Code editor component\n\n### Development Tools\n- **Build Tools**: Vite, esbuild for production builds\n- **Type Safety**: TypeScript throughout the stack\n- **Validation**: Zod for runtime schema validation\n- **Testing**: Basic setup for unit and integration tests\n\n## Deployment Strategy\n\n### Replit Platform\n- **Primary Target**: Optimized for Replit deployment\n- **Configuration**: .replit file with Node.js 20 environment\n- **Build Process**: npm run build for production assets\n- **Port Configuration**: Default port 5000 with proxy setup\n\n### Environment Configuration\n- **Development**: Hot reload with Vite dev server\n- **Production**: Compiled assets served by Express\n- **Environment Variables**: Comprehensive .env configuration\n- **Database**: MongoDB Atlas connection with fallback options\n\n### Scaling Considerations\n- **Connection Pooling**: MongoDB connection management\n- **Session Storage**: Scalable session persistence\n- **Asset Optimization**: Vite build optimization\n- **Caching Strategy**: Query caching with React Query\n\n## Changelog\n\n```\nChangelog:\n- July 29, 2025. CRITICAL BUG FIX: Fixed progress calculation overflow issue - progress now capped at 100%\n  - Fixed Math.min(100, percentage) in both storage.ts and routes.ts to prevent progress from exceeding 100%\n  - Removed duplicate route endpoints that were causing calculation inconsistencies\n  - Fixed parameter order in markModuleComplete method calls between routes and storage\n  - Enhanced progress calculation to use unique completed module IDs preventing duplicates\n  - Verified individual user progress tracking maintains proper isolation between users\n  - System now correctly calculates progress as (completed modules / total course modules) * 100 capped at 100%\n- July 29, 2025. CRITICAL BUG FIX: Resolved \"Mark as Complete\" cross-user contamination issue\n  - Fixed duplicate completion routes causing conflicting behavior\n  - Implemented proper user-specific database filtering in markModuleComplete method\n  - Added comprehensive debugging and user isolation verification\n  - Ensured all progress tracking operations filter by userId, moduleId, and courseId\n  - Verified with multi-user testing that completion status is now properly isolated per user\n  - System now correctly tracks individual user progress without affecting other enrolled users\n- July 4, 2025. Optimized enrollment verification system for maximum efficiency\n  - Replaced inefficient \"search all problem sets\" approach with targeted problem set enrollment checks\n  - Modified frontend to pass problemSetId context when navigating from problem sets to individual problems\n  - Updated backend to perform direct enrollment verification for specific problem sets only\n  - Reduced database queries from O(n) problem sets to O(1) single enrollment check\n  - Enhanced debugging with clear enrollment verification logs showing problem set context\n  - System now efficiently verifies enrollment only for the relevant problem set\n- July 4, 2025. Fixed critical enrollment access and checkbox interaction bugs\n  - Resolved \"Unknown User\" enrollment issue by fixing user ID handling in database operations\n  - Updated getAllUsers() to return proper id fields from MongoDB _id for frontend compatibility\n  - Fixed enrollment verification to use ObjectId matching instead of string comparison\n  - Replaced problematic HTML checkboxes with custom div-based components to prevent CSS conflicts\n  - Added comprehensive debugging for enrollment verification process\n  - Ensured admin-enrolled students can now properly access problem sets and submit solutions\n- July 4, 2025. Implemented enrollment-based access control for problem sets\n  - Added mandatory enrollment validation for problem set access and submissions\n  - Only enrolled students can view problem sets and submit solutions to problems within them\n  - Admin users bypass enrollment checks for management purposes\n  - Added comprehensive error handling with enrollment prompts for unauthorized access\n  - Updated frontend to display proper access denied messages with enrollment options\n  - Enhanced security by preventing non-enrolled users from testing or submitting code\n- July 4, 2025. Added comprehensive evaluation system for problem set administrators\n  - Implemented \"Evaluations\" button next to delete button on each problem instance\n  - Created detailed modal showing student completion statistics with search and filters\n  - Added backend API to fetch enrollment data and submission analytics\n  - Built summary cards showing completed vs not completed students with completion rates\n  - Included real-time filtering by completion status and student search functionality\n- July 4, 2025. Fixed admin problems CRUD operations and enhanced code execution\n  - Implemented missing updateProblem and deleteProblem methods in storage layer\n  - Fixed edit and delete functionality in admin problems interface\n  - Enhanced null safety checks and error handling in form processing\n  - Improved starterCode field validation with proper defaults\n  - Fixed Python execution to use python3 instead of python\n  - Installed and configured Java support for code execution\n  - Enhanced error handling and debugging for all programming languages\n  - Added proper class name extraction for Java compilation\n- July 4, 2025. Fixed layout issues and improved user experience\n  - Restructured routing to move problem detail and course module viewer outside Layout wrapper for full-screen experience\n  - Removed leftover sidebar space in both problem solving and course sections\n  - Fixed Monaco Editor import errors by removing react-error-boundary dependency\n  - Added simple error handling to Monaco Editor component without external dependencies\n  - Hidden \"Customized\" tags from user interface (now only visible in admin interface)\n  - Added fullscreen functionality to code editors in both problem and course sections\n- June 30, 2025. Implemented isolated problem CRUD operations system\n  - Added problem instance schema for set-specific customizations\n  - Created comprehensive admin interface for managing problem instances\n  - Enabled modifications to problems within specific sets without affecting other sets\n  - Added problem-specific overrides for title, description, difficulty, constraints, etc.\n- June 14, 2025. Initial setup\n```\n\n## User Preferences\n\n```\nPreferred communication style: Simple, everyday language.\n```","size_bytes":10751},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"ENVIRONMENT_SETUP.md":{"content":"# Environment Setup Guide\n\nThis guide will help you properly configure environment variables for the CodeArena project, removing all hardcoded values and ensuring secure deployment.\n\n## 🔒 Security Notice\n\n**CRITICAL**: The previous configuration contained exposed credentials that have been removed:\n- MongoDB connection string with credentials\n- SMTP credentials in plain text\n- Hardcoded session secrets\n\n**If you were using the old configuration, please:**\n1. Change your MongoDB password immediately\n2. Regenerate your SMTP app password\n3. Update any deployed instances with new credentials\n\n## 📁 Project Structure\n\nCodeArena uses environment variables across three main services:\n- **Server** (`server/`): Express.js API backend\n- **Client** (`client/`): React frontend application  \n- **Execution System** (`execution-system/`): Docker-based code execution\n\n## 🚀 Quick Setup\n\n### 1. Copy Environment Files\n\n```bash\n# Server environment\ncp server/.env.example server/.env\n\n# Client environment\ncp client/.env.example client/.env\n\n# Execution system environment\ncp execution-system/.env.example execution-system/.env\n\n# Global development environment (optional)\ncp .env.development .env\n```\n\n### 2. Configure Each Service\n\nEdit each `.env` file with your specific values:\n\n#### Server Configuration (`server/.env`)\n\n```bash\n# Required - Database connection\nMONGODB_URL=mongodb://localhost:27017/codearena\n# For MongoDB Atlas:\n# MONGODB_URL=mongodb+srv://username:password@cluster.mongodb.net/codearena\n\n# Required - Security\nSESSION_SECRET=your-super-secret-session-key-at-least-32-characters-long\n\n# Required - Basic configuration\nPORT=3001\nHOST=0.0.0.0\nFRONTEND_URL=http://localhost:5000\n\n# Optional - Google OAuth\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n\n# Optional - Email notifications\nSMTP_USER=your-email@gmail.com\nSMTP_PASS=your-app-specific-password\n```\n\n#### Client Configuration (`client/.env`)\n\n```bash\n# API connection\nVITE_API_URL=http://localhost:3001\nVITE_FRONTEND_URL=http://localhost:5000\n\n# Optional - Google OAuth (must match server)\nVITE_GOOGLE_CLIENT_ID=your-google-client-id\n\n# Optional - Feature flags\nVITE_ENABLE_CONTESTS=true\nVITE_ENABLE_COURSES=true\n```\n\n#### Execution System (`execution-system/.env`)\n\n```bash\n# Basic configuration\nPORT=3000\nMAIN_API_URL=http://localhost:3001\n\n# File system\nTEMP_DIR=./temp\n\n# Performance\nEXECUTION_TIMEOUT=5000\nMEMORY_LIMIT=128m\nCPU_LIMIT=0.5\n```\n\n## 🔧 Development Setup\n\n### Option 1: Individual Service Configuration (Recommended)\n\nConfigure each service individually using the steps above. This provides the most flexibility.\n\n### Option 2: Global Environment File\n\nUse the global `.env.development` template:\n\n```bash\ncp .env.development .env\n# Edit .env with your values\n```\n\nThis sets defaults that individual services will inherit.\n\n### 3. Generate Secure Secrets\n\n```bash\n# Generate a secure session secret\nnode -e \"console.log(require('crypto').randomBytes(64).toString('hex'))\"\n\n# Generate a JWT secret\nnode -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n```\n\n### 4. Set Up Local Database\n\n#### MongoDB Local Installation\n```bash\n# Install MongoDB locally\n# Ubuntu/Debian:\nsudo apt-get install mongodb\n\n# macOS:\nbrew install mongodb-community\n\n# Windows: Download from MongoDB website\n```\n\n#### Or use MongoDB Atlas (Cloud)\n1. Create account at [MongoDB Atlas](https://www.mongodb.com/cloud/atlas)\n2. Create a cluster\n3. Get connection string\n4. Replace `MONGODB_URL` in `server/.env`\n\n### 5. Install Dependencies\n\n```bash\n# Install server dependencies\ncd server && npm install\n\n# Install client dependencies\ncd ../client && npm install\n\n# Install execution system dependencies\ncd ../execution-system && npm install\n```\n\n## 🌐 Production Deployment\n\n### Environment Variables for Production\n\nNever commit production values to version control. Instead, set them in your deployment platform:\n\n#### Required Production Variables\n\n```bash\n# Server\nNODE_ENV=production\nPORT=3001\nMONGODB_URL=mongodb+srv://username:password@cluster.mongodb.net/codearena\nSESSION_SECRET=your-production-session-secret-64-chars-minimum\nJWT_SECRET=your-production-jwt-secret\nFRONTEND_URL=https://yourdomain.com\nCORS_ORIGIN=https://yourdomain.com\n\n# Client\nVITE_API_URL=https://api.yourdomain.com\nVITE_FRONTEND_URL=https://yourdomain.com\n\n# Execution System\nMAIN_API_URL=https://api.yourdomain.com\nEXECUTION_PORT=3000\nTEMP_DIR=/tmp/codearena\n```\n\n#### Platform-Specific Instructions\n\n**Vercel (Client)**\n```bash\n# Set in Vercel dashboard or CLI\nvercel env add VITE_API_URL\nvercel env add VITE_FRONTEND_URL\n```\n\n**Railway (Server)**\n```bash\n# Set in Railway dashboard or CLI\nrailway variables set MONGODB_URL=your-atlas-url\nrailway variables set SESSION_SECRET=your-secret\n```\n\n**Docker (Execution System)**\n```bash\n# Use environment variables in docker-compose.yml\nversion: '3.8'\nservices:\n  execution-api:\n    environment:\n      - MAIN_API_URL=${MAIN_API_URL}\n      - EXECUTION_PORT=${EXECUTION_PORT}\n```\n\n## 🔍 Validation & Testing\n\n### 1. Check Configuration\n\n```bash\n# Test server configuration\ncd server && npm run dev\n# Should show: \"✅ MongoDB connected successfully\"\n\n# Test client configuration\ncd client && npm run dev\n# Should connect to API without errors\n\n# Test execution system\ncd execution-system && node simple-api.js\n# Should show: \"🚀 CodeArena Execution System\"\n```\n\n### 2. Health Checks\n\nVisit these URLs to verify each service:\n\n- Server: `http://localhost:3001/health`\n- Client: `http://localhost:5000`\n- Execution: `http://localhost:3000/health`\n\n### 3. Integration Test\n\n1. Start all services\n2. Create an account on the frontend\n3. Try running code execution\n4. Check logs for any configuration errors\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n**\"MONGODB_URL environment variable is required\"**\n- Ensure `MONGODB_URL` is set in `server/.env`\n- Check that `.env` file is in the correct location\n- Verify MongoDB is running (local) or connection string is correct (Atlas)\n\n**\"CORS Error\" when client tries to connect to API**\n- Check `FRONTEND_URL` in `server/.env` matches client URL\n- Verify `VITE_API_URL` in `client/.env` points to server\n- Ensure both services are running\n\n**\"Session secret should be at least 32 characters long\"**\n- Generate a longer session secret using crypto\n- Update `SESSION_SECRET` in `server/.env`\n\n**Execution system can't reach main API**\n- Check `MAIN_API_URL` in `execution-system/.env`\n- Ensure server is running on the specified port\n- Verify network connectivity between services\n\n### Environment Variables Not Loading\n\n```bash\n# Check if .env file exists\nls -la server/.env client/.env execution-system/.env\n\n# Verify .env file format (no spaces around =)\ncat server/.env | grep -E '^[A-Z_]+=.+$'\n\n# Test environment loading\nnode -e \"require('dotenv').config(); console.log(process.env.MONGODB_URL)\"\n```\n\n### Service-Specific Debugging\n\n**Server Debug Mode**\n```bash\n# Enable debug logging\necho \"DEBUG_MODE=true\" >> server/.env\necho \"LOG_LEVEL=debug\" >> server/.env\n```\n\n**Client Debug Mode**\n```bash\n# Enable client debugging\necho \"VITE_DEBUG_MODE=true\" >> client/.env\necho \"VITE_LOG_LEVEL=debug\" >> client/.env\n```\n\n**Execution System Debug Mode**\n```bash\n# Enable execution debugging\necho \"DEBUG_MODE=true\" >> execution-system/.env\necho \"VERBOSE_LOGGING=true\" >> execution-system/.env\n```\n\n## 📋 Environment Variables Reference\n\n### Server Variables\n\n| Variable | Required | Default | Description |\n|----------|----------|---------|-------------|\n| `NODE_ENV` | No | development | Environment mode |\n| `PORT` | No | 3001 | Server port |\n| `HOST` | No | 0.0.0.0 | Server host |\n| `MONGODB_URL` | **Yes** | - | Database connection |\n| `SESSION_SECRET` | **Yes** | - | Session encryption key |\n| `FRONTEND_URL` | No | http://localhost:5000 | Client URL for CORS |\n| `CORS_ORIGIN` | No | FRONTEND_URL | Allowed CORS origins |\n| `GOOGLE_CLIENT_ID` | No | - | OAuth client ID |\n| `GOOGLE_CLIENT_SECRET` | No | - | OAuth client secret |\n| `SMTP_USER` | No | - | Email service user |\n| `SMTP_PASS` | No | - | Email service password |\n\n### Client Variables\n\n| Variable | Required | Default | Description |\n|----------|----------|---------|-------------|\n| `VITE_API_URL` | No | Auto-detected | API server URL |\n| `VITE_FRONTEND_URL` | No | Auto-detected | Frontend URL |\n| `VITE_DEBUG_MODE` | No | false | Debug logging |\n| `VITE_GOOGLE_CLIENT_ID` | No | - | OAuth client ID |\n| `VITE_ENABLE_CONTESTS` | No | true | Contest feature |\n| `VITE_ENABLE_COURSES` | No | true | Courses feature |\n\n### Execution System Variables\n\n| Variable | Required | Default | Description |\n|----------|----------|---------|-------------|\n| `PORT` | No | 3000 | Execution API port |\n| `MAIN_API_URL` | No | http://localhost:3001 | Main API URL |\n| `TEMP_DIR` | No | ./temp | Temporary files |\n| `EXECUTION_TIMEOUT` | No | 5000 | Max execution time (ms) |\n| `MEMORY_LIMIT` | No | 128m | Docker memory limit |\n| `CPU_LIMIT` | No | 0.5 | Docker CPU limit |\n| `DEBUG_MODE` | No | false | Debug logging |\n\n## 📚 Additional Resources\n\n- [MongoDB Atlas Setup](https://docs.atlas.mongodb.com/getting-started/)\n- [Google OAuth Setup](https://developers.google.com/identity/protocols/oauth2)\n- [Gmail SMTP Setup](https://support.google.com/mail/answer/7126229)\n- [Docker Installation](https://docs.docker.com/get-docker/)\n- [Node.js Environment Variables](https://nodejs.org/en/learn/command-line/how-to-read-environment-variables-from-nodejs)\n\n---\n\n**Need Help?** If you encounter issues not covered in this guide, please check the project's GitHub Issues or create a new issue with your specific problem and environment details.","size_bytes":9701},"client/src/components/ProblemModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { MonacoEditor } from \"@/components/MonacoEditor\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Play, Send, X, CheckCircle, XCircle } from \"lucide-react\";\nimport type { Problem, Submission } from \"@shared/schema\";\n\ninterface ProblemModalProps {\n  problemId: number | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst LANGUAGES = [\n  { value: \"python\", label: \"Python\", starter: \"def solution():\\n    # Write your code here\\n    pass\" },\n  { value: \"javascript\", label: \"JavaScript\", starter: \"function solution() {\\n    // Write your code here\\n}\" },\n  { value: \"java\", label: \"Java\", starter: \"public class Solution {\\n    public void solution() {\\n        // Write your code here\\n    }\\n}\" },\n  { value: \"cpp\", label: \"C++\", starter: \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    // Write your code here\\n    return 0;\\n}\" },\n  { value: \"c\", label: \"C\", starter: \"#include <stdio.h>\\n\\nint main() {\\n    // Write your code here\\n    return 0;\\n}\" },\n];\n\nexport function ProblemModal({ problemId, isOpen, onClose }: ProblemModalProps) {\n  const [selectedLanguage, setSelectedLanguage] = useState(\"python\");\n  const [code, setCode] = useState(LANGUAGES[0].starter);\n  const [testResults, setTestResults] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: problem, isLoading } = useQuery({\n    queryKey: [\"/api/problems\", problemId],\n    enabled: !!problemId && isOpen,\n  });\n\n  const { data: submissions } = useQuery({\n    queryKey: [\"/api/submissions\", { problemId }],\n    enabled: !!problemId && isOpen,\n  });\n\n  const runCodeMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/problems/run', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(token ? { 'Authorization': `Bearer ${token}` } : {})\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          code: code,\n          language: selectedLanguage,\n          problemId: problem?.id\n        })\n      });\n      \n      const data = await response.json();\n      \n      // Return data for both success and error cases\n      return data;\n    },\n    onSuccess: (results) => {\n      if (results.testResults) {\n        // Test case results\n        const testResults = {\n          passed: results.status === \"success\",\n          testCases: results.testResults,\n          visibleTestsPassed: results.visibleTestsPassed,\n          hiddenTestsPassed: results.hiddenTestsPassed,\n          runtime: results.runtime || 0,\n          memory: results.memory || 0,\n        };\n        setTestResults(testResults);\n\n        // Show test case summary\n        const visibleTests = results.testResults.filter(t => t.input !== '(hidden)');\n        const passedVisible = visibleTests.filter(t => t.passed).length;\n        const totalVisible = visibleTests.length;\n        \n        toast({\n          title: testResults.passed ? \"All Tests Passed!\" : \"Some Tests Failed\",\n          description: `Passed ${passedVisible}/${totalVisible} visible tests.\\n` +\n                      (results.hiddenTestsPassed ? \"Hidden tests passed!\" : \"Hidden tests failed.\") +\n                      `\\nRuntime: ${results.runtime}ms, Memory: ${results.memory}MB`,\n          variant: testResults.passed ? \"default\" : \"destructive\",\n        });\n      } else {\n        // Single execution result\n        const testResults = {\n          passed: results.status === \"success\",\n          output: results.output || \"No output\",\n          error: results.error,\n          runtime: results.runtime || 0,\n          memory: results.memory || 0,\n        };\n        setTestResults(testResults);\n        \n        toast({\n          title: testResults.passed ? \"Code Executed Successfully\" : \"Execution Error\",\n          description: testResults.error \n            ? testResults.error\n            : `Output: ${testResults.output}\\nRuntime: ${testResults.runtime}ms, Memory: ${testResults.memory}MB`,\n          variant: testResults.passed ? \"default\" : \"destructive\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to run code. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const submitCodeMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/submissions\", {\n        problemId,\n        code,\n        language: selectedLanguage,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Submission Successful\",\n        description: \"Your code has been submitted for evaluation.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/submissions\"] });\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (isOpen && problem) {\n      const language = LANGUAGES.find(lang => lang.value === selectedLanguage);\n      if (language && problem.starterCode && problem.starterCode[selectedLanguage]) {\n        setCode(problem.starterCode[selectedLanguage]);\n      } else if (language) {\n        setCode(language.starter);\n      }\n      setTestResults(null);\n    }\n  }, [isOpen, problem, selectedLanguage]);\n\n  const handleLanguageChange = (value: string) => {\n    setSelectedLanguage(value);\n    const language = LANGUAGES.find(lang => lang.value === value);\n    if (language) {\n      if (problem?.starterCode && problem.starterCode[value]) {\n        setCode(problem.starterCode[value]);\n      } else {\n        setCode(language.starter);\n      }\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"easy\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"medium\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"hard\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200\";\n    }\n  };\n\n  if (!isOpen || !problemId) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl w-full max-h-[90vh] overflow-hidden p-0\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto\"></div>\n              <p className=\"mt-2 text-sm text-gray-600 dark:text-gray-300\">Loading problem...</p>\n            </div>\n          </div>\n        ) : !problem ? (\n          <div className=\"flex items-center justify-center h-64\">\n            <p className=\"text-red-600 dark:text-red-400\">Problem not found</p>\n          </div>\n        ) : (\n          <>\n            {/* Header */}\n            <DialogHeader className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <DialogTitle className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                    {problem.title}\n                  </DialogTitle>\n                  <div className=\"flex items-center space-x-4 mt-2\">\n                    <Badge className={getDifficultyColor(problem.difficulty)}>\n                      {problem.difficulty.charAt(0).toUpperCase() + problem.difficulty.slice(1)}\n                    </Badge>\n                    <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                      {problem.tags?.join(\", \")}\n                    </span>\n                  </div>\n                </div>\n                <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </DialogHeader>\n\n            {/* Content */}\n            <div className=\"flex h-[70vh]\">\n              {/* Problem Description */}\n              <div className=\"w-1/2 p-6 overflow-y-auto border-r border-gray-200 dark:border-gray-700\">\n                <div className=\"prose dark:prose-invert max-w-none\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Problem Statement</h3>\n                  <div className=\"text-gray-700 dark:text-gray-300 mb-4 whitespace-pre-wrap\">\n                    {problem.description}\n                  </div>\n                  \n                  {problem.examples && problem.examples.length > 0 && (\n                    <>\n                      <h4 className=\"font-semibold mb-2\">Examples:</h4>\n                      {problem.examples.map((example: any, index: number) => (\n                        <div key={index} className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg font-mono text-sm mb-4\">\n                          <div><strong>Input:</strong> {example.input}</div>\n                          <div><strong>Output:</strong> {example.output}</div>\n                          {example.explanation && (\n                            <div><strong>Explanation:</strong> {example.explanation}</div>\n                          )}\n                        </div>\n                      ))}\n                    </>\n                  )}\n\n                  {problem.constraints && (\n                    <>\n                      <h4 className=\"font-semibold mb-2\">Constraints:</h4>\n                      <div className=\"text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap\">\n                        {problem.constraints}\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              {/* Code Editor */}\n              <div className=\"w-1/2 flex flex-col\">\n                {/* Editor Header */}\n                <div className=\"p-4 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex items-center justify-between\">\n                    <Select value={selectedLanguage} onValueChange={handleLanguageChange}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {LANGUAGES.map((lang) => (\n                          <SelectItem key={lang.value} value={lang.value}>\n                            {lang.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => runCodeMutation.mutate()}\n                        disabled={runCodeMutation.isPending}\n                        className=\"bg-green-600 hover:bg-green-700 text-white border-green-600\"\n                      >\n                        <Play className=\"w-4 h-4 mr-1\" />\n                        {runCodeMutation.isPending ? \"Running...\" : \"Run\"}\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => submitCodeMutation.mutate()}\n                        disabled={submitCodeMutation.isPending}\n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                      >\n                        <Send className=\"w-4 h-4 mr-1\" />\n                        {submitCodeMutation.isPending ? \"Submitting...\" : \"Submit\"}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Monaco Editor */}\n                <div className=\"flex-1\">\n                  <MonacoEditor\n                    value={code}\n                    onChange={setCode}\n                    language={selectedLanguage === \"cpp\" ? \"cpp\" : selectedLanguage}\n                    height=\"100%\"\n                    theme=\"vs-dark\"\n                  />\n                </div>\n\n                {/* Test Results */}\n                {testResults && (\n                  <div className=\"border-t border-gray-200 dark:border-gray-700 p-4 bg-gray-50 dark:bg-gray-800\">\n                    <div className=\"text-sm\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        {testResults.passed ? (\n                          <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                        ) : (\n                          <XCircle className=\"w-4 h-4 text-red-500\" />\n                        )}\n                        <span className=\"font-medium\">\n                          Sample Test: {testResults.passed ? \"Passed\" : \"Failed\"}\n                        </span>\n                      </div>\n                      <div className=\"text-gray-600 dark:text-gray-300 text-xs space-y-1\">\n                        <div>Runtime: {testResults.runtime}ms</div>\n                        <div>Memory: {testResults.memory}KB</div>\n                        {testResults.output && (\n                          <div>Output: {testResults.output}</div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14061},"test_files/debug-db.js":{"content":"import { MongoClient } from 'mongodb';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nasync function debugDatabase() {\n  const client = new MongoClient(process.env.MONGODB_URL);\n  \n  try {\n    await client.connect();\n    const db = client.db();\n    \n    console.log('Connected to MongoDB');\n    \n    // Check problem sets\n    const problemSets = await db.collection('problemSets').find({}).toArray();\n    console.log('Problem sets found:', problemSets.length);\n    \n    for (const set of problemSets) {\n      console.log(`Set: ${set.title} (${set.id})`);\n      console.log(`Problem instances: ${set.problemInstances ? set.problemInstances.length : 0}`);\n      if (set.problemInstances && set.problemInstances.length > 0) {\n        console.log('Instances:', set.problemInstances.map(p => ({ id: p.id, title: p.title })));\n      }\n      console.log('---');\n    }\n    \n  } catch (error) {\n    console.error('Database error:', error);\n  } finally {\n    await client.close();\n  }\n}\n\ndebugDatabase();","size_bytes":994},"client/src/components/courses/CourseDashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { \n  BookOpen, \n  Users, \n  Play, \n  CheckCircle, \n  Clock, \n  Plus,\n  Search,\n  Filter,\n  Grid,\n  List,\n  Star,\n  TrendingUp,\n  Eye,\n  Edit,\n  Trash2,\n  BarChart3,\n  Target,\n  Calendar,\n  Award\n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface Course {\n  id: number;\n  title: string;\n  description?: string;\n  category?: string;\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n  estimatedHours?: number;\n  prerequisites?: string[];\n  learningObjectives?: string[];\n  modules?: any[];\n  enrolledUsers?: string[];\n  isPublic: boolean;\n  createdBy?: string;\n  createdAt: string;\n  updatedAt: string;\n  tags?: string[];\n  rating?: number;\n  enrollmentCount?: number;\n  completionRate?: number;\n  moduleCount?: number;\n}\n\ninterface CourseStats {\n  totalCourses: number;\n  totalEnrollments: number;\n  averageRating: number;\n  completionRate: number;\n  popularCategories: Array<{ category: string; count: number }>;\n  recentActivity: Array<{ action: string; course: string; timestamp: string }>;\n}\n\nexport function CourseDashboard() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Handle student course navigation\n  const handleCourseStart = async (courseId: number) => {\n    try {\n      const response = await apiRequest('GET', `/api/courses/${courseId}/modules`);\n      if (!response.ok) {\n        if (response.status === 403) {\n          // Try enrolling the current user automatically, then retry modules fetch\n          const enrollRes = await apiRequest('POST', `/api/courses/${courseId}/enroll`, { userId: 'self' });\n          if (!enrollRes.ok && enrollRes.status !== 200 && enrollRes.status !== 201 && enrollRes.status !== 409) {\n            toast({\n              title: \"Enrollment failed\",\n              description: \"Could not enroll in this course.\",\n              variant: \"destructive\",\n            });\n            return;\n          }\n          // Retry fetching modules after enrollment\n          const retry = await apiRequest('GET', `/api/courses/${courseId}/modules`);\n          if (!retry.ok) throw new Error('Failed to fetch modules after enrollment');\n          const modules = await retry.json();\n          if (modules && modules.length > 0) {\n            const firstModule = modules[0];\n            setLocation(`/courses/${courseId}/modules/${firstModule.id}`);\n            queryClient.invalidateQueries({ queryKey: ['/api/users/me/enrollments'] });\n            return;\n          }\n          toast({ title: 'No modules found', description: 'This course has no modules yet.', variant: 'destructive' });\n          return;\n        }\n        throw new Error('Failed to fetch modules');\n      }\n      const modules = await response.json();\n      \n      if (modules && modules.length > 0) {\n        const firstModule = modules[0];\n        setLocation(`/courses/${courseId}/modules/${firstModule.id}`);\n      } else {\n        toast({\n          title: \"No modules found\",\n          description: \"This course doesn't have any modules yet.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching modules:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load course content. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [selectedDifficulty, setSelectedDifficulty] = useState('all');\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [sortBy, setSortBy] = useState('newest');\n\n  const { data: courses = [], isLoading: coursesLoading } = useQuery({\n    queryKey: ['/api/users/me/courses'],\n    enabled: !!user,\n  });\n\n  // Coerce to array to avoid runtime errors if API returns a non-array\n  const courseList: Course[] = Array.isArray(courses) ? (courses as Course[]) : [];\n\n  // Fetch current user's enrollments to show real-time progress per course\n  const { data: myEnrollments = [] } = useQuery({\n    queryKey: ['/api/users/me/enrollments'],\n    enabled: !!user,\n  });\n\n  const resetProgressMutation = useMutation({\n    mutationFn: async (courseId: number) => {\n      const res = await apiRequest('POST', `/api/courses/${courseId}/reset-progress`);\n      if (!res.ok) throw new Error('Failed to reset progress');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/enrollments'] });\n      toast({ title: 'Progress reset', description: 'You can start the course again.' });\n    },\n    onError: (e: any) => {\n      toast({ title: 'Failed to reset progress', description: e?.message || 'Try again', variant: 'destructive' });\n    }\n  });\n\n  const getEnrollmentForCourse = (courseId: number) => {\n    return Array.isArray(myEnrollments) ? myEnrollments.find((e: any) => e.courseId === courseId) : undefined;\n  };\n\n  const handleStartAgain = async (courseId: number) => {\n    await resetProgressMutation.mutateAsync(courseId);\n    // After reset, route to the first module\n    await handleCourseStart(courseId);\n  };\n\n  const { data: courseStats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/admin/course-stats'],\n    enabled: user?.role === 'admin',\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (courseId: number) => {\n      return apiRequest('DELETE', `/api/courses/${courseId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Course Deleted\",\n        description: \"Course has been successfully deleted.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/courses'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete course\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const filteredCourses = courseList.filter((course: Course) => {\n    const matchesSearch = course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         course.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || course.category === selectedCategory;\n    const matchesDifficulty = selectedDifficulty === 'all' || course.difficulty === selectedDifficulty;\n    \n    return matchesSearch && matchesCategory && matchesDifficulty;\n  });\n\n  const sortedCourses = [...filteredCourses].sort((a: Course, b: Course) => {\n    switch (sortBy) {\n      case 'newest':\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      case 'oldest':\n        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n      case 'title':\n        return a.title.localeCompare(b.title);\n      case 'popularity':\n        return (b.enrollmentCount || 0) - (a.enrollmentCount || 0);\n      case 'rating':\n        return (b.rating || 0) - (a.rating || 0);\n      default:\n        return 0;\n    }\n  });\n\n  const categories = [...new Set(courseList.map((course: Course) => course.category).filter(Boolean))];\n\n  const getDifficultyColor = (difficulty?: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-green-100 text-green-800';\n      case 'intermediate': return 'bg-yellow-100 text-yellow-800';\n      case 'advanced': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const CourseCard = ({ course }: { course: Course }) => (\n    <Card className=\"group hover:shadow-lg transition-shadow duration-200\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-lg mb-2 group-hover:text-primary transition-colors\">\n              {course.title}\n            </CardTitle>\n            <CardDescription className=\"line-clamp-2 text-sm\">\n              {course.description || 'No description available'}\n            </CardDescription>\n          </div>\n          {user?.role === 'admin' && (\n            <div className=\"flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(`/admin/courses/${course.id}`)}\n              >\n                <Eye className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(`/admin/courses/${course.id}/edit`)}\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => deleteMutation.mutate(course.id)}\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              {course.difficulty && (\n                <Badge className={getDifficultyColor(course.difficulty)}>\n                  {course.difficulty}\n                </Badge>\n              )}\n              {course.category && (\n                <Badge variant=\"outline\">{course.category}</Badge>\n              )}\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n              <span className=\"text-sm\">{course.rating || 4.5}</span>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center\">\n              <BookOpen className=\"h-4 w-4 mr-1\" />\n              {(course.moduleCount ?? course.modules?.length ?? 0)} Modules\n            </div>\n            <div className=\"flex items-center\">\n              <Users className=\"h-4 w-4 mr-1\" />\n              {course.enrollmentCount || 0} Students\n            </div>\n            <div className=\"flex items-center\">\n              <Clock className=\"h-4 w-4 mr-1\" />\n              {(course.estimatedHours ?? 0)}h\n            </div>\n            <div className=\"flex items-center\">\n              <Target className=\"h-4 w-4 mr-1\" />\n              {(() => {\n                const e = getEnrollmentForCourse(course.id);\n                const p = e?.progress ?? 0;\n                return `${p}% Complete`;\n              })()}\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Progress value={(getEnrollmentForCourse(course.id)?.progress ?? 0)} className=\"h-2\" />\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-xs text-muted-foreground\">\n                Created {formatDate(course.createdAt)}\n              </span>\n              {(() => {\n                const e = getEnrollmentForCourse(course.id);\n                const p = e?.progress ?? 0;\n                const hasStarted = p > 0;\n                const isComplete = p >= 100;\n                if (user?.role === 'admin') {\n                  return (\n                    <Button \n                      size=\"sm\" \n                      onClick={() => setLocation(`/admin/courses/${course.id}`)}\n                    >\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      Manage\n                    </Button>\n                  );\n                }\n                if (isComplete) {\n                  return (\n                    <Button size=\"sm\" onClick={() => handleStartAgain(course.id)} disabled={resetProgressMutation.isPending}>\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      {resetProgressMutation.isPending ? 'Resetting...' : 'Start Again'}\n                    </Button>\n                  );\n                } else if (hasStarted) {\n                  return (\n                    <Button size=\"sm\" onClick={() => handleCourseStart(course.id)}>\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      Resume Course\n                    </Button>\n                  );\n                } else {\n                  return (\n                    <Button size=\"sm\" onClick={() => handleCourseStart(course.id)}>\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      Start Course\n                    </Button>\n                  );\n                }\n              })()}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const CourseListItem = ({ course }: { course: Course }) => (\n    <Card className=\"hover:shadow-md transition-shadow duration-200\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1 grid grid-cols-4 gap-4 items-center\">\n            <div>\n              <h3 className=\"font-medium hover:text-primary transition-colors cursor-pointer\">\n                {course.title}\n              </h3>\n              <p className=\"text-sm text-muted-foreground line-clamp-1\">\n                {course.description}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              {course.difficulty && (\n                <Badge className={getDifficultyColor(course.difficulty)}>\n                  {course.difficulty}\n                </Badge>\n              )}\n              {course.category && (\n                <Badge variant=\"outline\">{course.category}</Badge>\n              )}\n            </div>\n            \n            <div className=\"text-sm text-muted-foreground\">\n              <div className=\"flex items-center mb-1\">\n                <Users className=\"h-3 w-3 mr-1\" />\n                {course.enrollmentCount || 0} students\n              </div>\n              <div className=\"flex items-center\">\n                <Star className=\"h-3 w-3 mr-1 fill-yellow-400 text-yellow-400\" />\n                {course.rating || 4.5}\n              </div>\n            </div>\n            \n            <div className=\"text-sm text-muted-foreground\">\n              <div>{formatDate(course.createdAt)}</div>\n              <Progress value={course.completionRate || 0} className=\"h-1 mt-1\" />\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            {user?.role === 'admin' ? (\n              <>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setLocation(`/admin/courses/${course.id}`)}>\n                  <Eye className=\"h-4 w-4\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setLocation(`/admin/courses/${course.id}/edit`)}>\n                  <Edit className=\"h-4 w-4\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => deleteMutation.mutate(course.id)}>\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </>\n            ) : (\n              (() => {\n                const e = getEnrollmentForCourse(course.id);\n                const p = e?.progress ?? 0;\n                const hasStarted = p > 0;\n                const isComplete = p >= 100;\n                \n                if (isComplete) {\n                  return (\n                    <Button size=\"sm\" onClick={() => handleStartAgain(course.id)} disabled={resetProgressMutation.isPending}>\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      {resetProgressMutation.isPending ? 'Resetting...' : 'Start Again'}\n                    </Button>\n                  );\n                } else if (hasStarted) {\n                  return (\n                    <Button size=\"sm\" onClick={() => handleCourseStart(course.id)}>\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      Resume\n                    </Button>\n                  );\n                } else {\n                  return (\n                    <Button size=\"sm\" onClick={() => handleCourseStart(course.id)}>\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      Start\n                    </Button>\n                  );\n                }\n              })()\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"container mx-auto py-8 px-6\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">Course Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            {user?.role === 'admin' \n              ? 'Manage and monitor your courses'\n              : 'View and access your enrolled courses'}\n          </p>\n        </div>\n        {user?.role === 'admin' && (\n          <Button onClick={() => setLocation('/admin/courses/create')}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Course\n          </Button>\n        )}\n      </div>\n\n      {/* Analytics Cards for Admin */}\n      {user?.role === 'admin' && courseStats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <BookOpen className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold\">{courseStats.totalCourses}</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Courses</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <Users className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold\">{courseStats.totalEnrollments}</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Enrollments</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                  <Star className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold\">{courseStats.averageRating.toFixed(1)}</p>\n                  <p className=\"text-sm text-muted-foreground\">Average Rating</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <Award className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold\">{courseStats.completionRate}%</p>\n                  <p className=\"text-sm text-muted-foreground\">Completion Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Tabs defaultValue=\"courses\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"courses\">All Courses</TabsTrigger>\n          {user?.role === 'admin' && (\n            <>\n              <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n              <TabsTrigger value=\"activity\">Recent Activity</TabsTrigger>\n            </>\n          )}\n        </TabsList>\n\n        <TabsContent value=\"courses\" className=\"space-y-6\">\n          {/* Filters and Search */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search courses...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      {categories.map((category) => (\n                        <SelectItem key={category} value={category}>\n                          {category}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={selectedDifficulty} onValueChange={setSelectedDifficulty}>\n                    <SelectTrigger className=\"w-36\">\n                      <SelectValue placeholder=\"Difficulty\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Levels</SelectItem>\n                      <SelectItem value=\"beginner\">Beginner</SelectItem>\n                      <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                      <SelectItem value=\"advanced\">Advanced</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={sortBy} onValueChange={setSortBy}>\n                    <SelectTrigger className=\"w-36\">\n                      <SelectValue placeholder=\"Sort by\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"newest\">Newest</SelectItem>\n                      <SelectItem value=\"oldest\">Oldest</SelectItem>\n                      <SelectItem value=\"title\">Title</SelectItem>\n                      <SelectItem value=\"popularity\">Popularity</SelectItem>\n                      <SelectItem value=\"rating\">Rating</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <div className=\"flex border rounded-md\">\n                    <Button\n                      variant={viewMode === 'grid' ? 'default' : 'ghost'}\n                      size=\"sm\"\n                      onClick={() => setViewMode('grid')}\n                      className=\"rounded-r-none\"\n                    >\n                      <Grid className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant={viewMode === 'list' ? 'default' : 'ghost'}\n                      size=\"sm\"\n                      onClick={() => setViewMode('list')}\n                      className=\"rounded-l-none\"\n                    >\n                      <List className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Courses Display */}\n          {coursesLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-gray-200 rounded\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : sortedCourses.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n              <h3 className=\"text-lg font-medium mb-2\">\n                {user?.role === 'admin' ? 'No courses found' : 'No enrolled courses'}\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchTerm || selectedCategory !== 'all' || selectedDifficulty !== 'all'\n                  ? 'Try adjusting your filters or search terms.'\n                  : user?.role === 'admin' \n                    ? 'Get started by creating your first course.'\n                    : 'You are not enrolled in any courses yet. Contact your administrator to be enrolled in courses.'}\n              </p>\n              {user?.role === 'admin' && (\n                <Button onClick={() => setLocation('/admin/courses/create')}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create First Course\n                </Button>\n              )}\n            </div>\n          ) : viewMode === 'grid' ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {sortedCourses.map((course: Course) => (\n                <CourseCard key={course.id} course={course} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {sortedCourses.map((course: Course) => (\n                <CourseListItem key={course.id} course={course} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        {user?.role === 'admin' && (\n          <>\n            <TabsContent value=\"analytics\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <BarChart3 className=\"h-5 w-5 mr-2\" />\n                      Popular Categories\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {courseStats?.popularCategories?.map((item, index) => (\n                      <div key={index} className=\"flex justify-between items-center py-2\">\n                        <span>{item.category}</span>\n                        <Badge variant=\"secondary\">{item.count}</Badge>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <TrendingUp className=\"h-5 w-5 mr-2\" />\n                      Performance Metrics\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>Overall Completion Rate</span>\n                        <span>{courseStats?.completionRate || 0}%</span>\n                      </div>\n                      <Progress value={courseStats?.completionRate || 0} />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>Average Course Rating</span>\n                        <span>{courseStats?.averageRating?.toFixed(1) || 0}/5</span>\n                      </div>\n                      <Progress value={(courseStats?.averageRating || 0) * 20} />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"activity\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Calendar className=\"h-5 w-5 mr-2\" />\n                    Recent Activity\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {courseStats?.recentActivity?.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {courseStats.recentActivity.map((activity, index) => (\n                        <div key={index} className=\"flex items-center justify-between py-2 border-b last:border-b-0\">\n                          <div>\n                            <p className=\"font-medium\">{activity.action}</p>\n                            <p className=\"text-sm text-muted-foreground\">{activity.course}</p>\n                          </div>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {formatDate(activity.timestamp)}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Calendar className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>No recent activity to display</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </>\n        )}\n      </Tabs>\n    </div>\n  );\n}","size_bytes":30344},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"server/test-connection.js":{"content":"import { MongoClient } from 'mongodb';\n\nconst MONGODB_URL = process.env.MONGODB_URL || \"mongodb+srv://bandarin29:meritcurve@meritcurve.73u7fr7.mongodb.net/?retryWrites=true&w=majority\";\n\nasync function testConnection() {\n  const client = new MongoClient(MONGODB_URL, {\n    serverSelectionTimeoutMS: 30000,\n    connectTimeoutMS: 30000,\n    socketTimeoutMS: 45000,\n  });\n\n  try {\n    console.log('Connection URL:', MONGODB_URL.replace(/:[^:/@]+@/, ':****@')); // Hide password in logs\n    console.log('Attempting to connect to MongoDB...');\n    \n    await client.connect();\n    console.log('Successfully connected to MongoDB!');\n    \n    const admin = client.db().admin();\n    \n    // Test 1: Check server status\n    console.log('\\nTest 1: Checking server status...');\n    const serverStatus = await admin.serverStatus();\n    console.log('Server version:', serverStatus.version);\n    console.log('Server uptime:', serverStatus.uptime, 'seconds');\n    \n    // Test 2: List databases\n    console.log('\\nTest 2: Listing databases...');\n    const dbs = await admin.listDatabases();\n    console.log('Available databases:', dbs.databases.map(db => db.name));\n    \n    // Test 3: Test write operation\n    console.log('\\nTest 3: Testing write operation...');\n    const testDb = client.db('meritcurve');\n    const testCollection = testDb.collection('connection_test');\n    const testDoc = { test: true, timestamp: new Date() };\n    await testCollection.insertOne(testDoc);\n    console.log('Successfully wrote test document');\n    \n    // Test 4: Test read operation\n    console.log('\\nTest 4: Testing read operation...');\n    const foundDoc = await testCollection.findOne({ test: true });\n    console.log('Successfully read test document:', foundDoc);\n    \n    // Cleanup\n    await testCollection.deleteOne({ test: true });\n    console.log('\\nCleanup: Removed test document');\n    \n    await client.close();\n    console.log('\\nConnection closed successfully');\n  } catch (error) {\n    console.error('\\nConnection test failed!');\n    console.error('Error type:', error.constructor.name);\n    console.error('Error message:', error.message);\n    if (error.code) console.error('Error code:', error.code);\n    if (error.stack) console.error('Stack trace:', error.stack);\n    \n    // Additional error details for specific MongoDB errors\n    if (error.name === 'MongoServerSelectionError') {\n      console.error('\\nServer Selection Error Details:');\n      console.error('Topology Description:', error.topology?.description);\n      console.error('Server Descriptions:', error.topology?.servers);\n    }\n    \n    throw error;\n  } finally {\n    if (client) {\n      await client.close();\n    }\n  }\n}\n\ntestConnection().catch(console.error); ","size_bytes":2717},"client/src/pages/ProblemAnalytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, User, CheckCircle, XCircle, Clock, Trophy, Filter } from \"lucide-react\";\nimport { config } from \"@/config\";\n\nexport function ProblemAnalytics() {\n  const [match, params] = useRoute(\"/admin/problems/:problemId/analytics\");\n  const problemId = params?.problemId;\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const { data: analytics, isLoading } = useQuery({\n    queryKey: [\"admin\", \"problem-analytics\", problemId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const res = await fetch(`${config.apiUrl}/api/admin/problems/${problemId}/analytics`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!res.ok) {\n        throw new Error('Failed to fetch problem analytics');\n      }\n      return res.json();\n    },\n    enabled: !!problemId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600\">Problem not found</h1>\n          <Link href=\"/admin\">\n            <Button className=\"mt-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Admin Dashboard\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Filter users based on status\n  const filteredUsers = analytics.userStats?.filter((user: any) => {\n    if (statusFilter === \"all\") return true;\n    if (statusFilter === \"passed\") return user.status === \"passed\";\n    if (statusFilter === \"failed\") return user.status === \"failed\";\n    return true;\n  }) || [];\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <Link href=\"/admin\">\n            <Button variant=\"outline\" className=\"mb-4\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Admin Dashboard\n            </Button>\n          </Link>\n          <h1 className=\"text-3xl font-bold\">{analytics.problemTitle}</h1>\n          <p className=\"text-muted-foreground\">Problem Analytics & Student Performance</p>\n        </div>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Students</CardTitle>\n            <User className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.totalUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">Students who attempted</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Passed</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{analytics.passedUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">Students who solved it</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Failed</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{analytics.failedUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">Students still working</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pass Rate</CardTitle>\n            <Trophy className=\"h-4 w-4 text-yellow-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.passRate}%</div>\n            <p className=\"text-xs text-muted-foreground\">Success percentage</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Attempts</CardTitle>\n            <Clock className=\"h-4 w-4 text-blue-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{analytics.totalSubmissions}</div>\n            <p className=\"text-xs text-muted-foreground\">All submissions</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Student Performance Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Student Performance</span>\n            <div className=\"flex items-center gap-2\">\n              <Filter className=\"h-4 w-4\" />\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Students</SelectItem>\n                  <SelectItem value=\"passed\">Passed Only</SelectItem>\n                  <SelectItem value=\"failed\">Failed Only</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardTitle>\n          <CardDescription>Detailed breakdown of student attempts and results</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Student</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Total Attempts</TableHead>\n                  <TableHead>Passed</TableHead>\n                  <TableHead>Failed</TableHead>\n                  <TableHead>Best Score</TableHead>\n                  <TableHead>Last Attempt</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredUsers.length > 0 ? (\n                  filteredUsers.map((user: any) => (\n                    <TableRow key={user.userId}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{user.userName}</div>\n                          <div className=\"text-sm text-muted-foreground\">{user.userEmail}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={user.status === 'passed' ? 'default' : 'destructive'}>\n                          {user.status === 'passed' ? 'Solved' : 'Working'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{user.totalAttempts}</TableCell>\n                      <TableCell>\n                        <span className=\"text-green-600 font-medium\">{user.passedAttempts}</span>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"text-red-600 font-medium\">{user.failedAttempts}</span>\n                      </TableCell>\n                      <TableCell>{user.bestScore || '-'}</TableCell>\n                      <TableCell className=\"text-sm\">\n                        {new Date(user.lastAttempt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <Link href={`/admin/problems/${problemId}/users/${user.userId}/analytics`}>\n                          <Button size=\"sm\" variant=\"outline\">\n                            View Details\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-4 text-muted-foreground\">\n                      {statusFilter === \"all\" ? \"No student attempts found for this problem\" : \n                       statusFilter === \"passed\" ? \"No students have passed this problem yet\" :\n                       \"No students have failed this problem\"}\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9545},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":800},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/lib/themes.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as Theme | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    } else if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      setTheme(\"dark\");\n    }\n  }, []);\n\n  useEffect(() => {\n    document.documentElement.classList.toggle(\"dark\", theme === \"dark\");\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1192},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"server/controllers/modulesController.ts":{"content":"import { Request, Response } from 'express';\nimport type { AuthRequest } from '../middleware/auth';\nimport { z } from 'zod';\nimport { insertCourseModuleSchema } from '../shared-schema';\nimport { CourseModule } from '../models/CourseModule';\nimport { executionServicePromise } from '../services/executionService';\nimport { storage } from '../storage';\n\nexport async function getModuleById(req: Request, res: Response) {\n  try {\n    const id = parseInt(req.params.id);\n    const module = await storage.getCourseModule(id);\n    if (!module) return res.status(404).json({ message: 'Module not found' });\n    res.json(module);\n  } catch (error) {\n    console.error('Error fetching module:', error);\n    res.status(500).json({ message: 'Failed to fetch module' });\n  }\n}\n\nexport async function createModule(req: AuthRequest, res: Response) {\n  try {\n    const courseId = parseInt(req.params.id);\n    const raw = req.body || {};\n    const sanitized = {\n      ...raw,\n      courseId,\n      order: raw.order !== undefined ? Number(raw.order) : undefined,\n      videoUrl: raw.videoUrl === '' ? undefined : raw.videoUrl,\n      textContent: raw.textContent === '' ? undefined : raw.textContent,\n      codeExample: raw.codeExample === '' ? undefined : raw.codeExample,\n      expectedOutput: raw.expectedOutput === '' ? undefined : raw.expectedOutput,\n      language: raw.language === '' ? undefined : raw.language,\n      title: raw.title === '' ? undefined : raw.title,\n      description: raw.description === '' ? undefined : raw.description,\n    } as any;\n    const validatedData = insertCourseModuleSchema.parse(sanitized);\n    \n    const module = await storage.createCourseModule(validatedData);\n    res.status(201).json(module);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: 'Invalid data', errors: error.errors });\n    }\n    console.error('Error creating module:', error);\n    res.status(500).json({ message: 'Failed to create module' });\n  }\n}\n\nexport async function updateModule(req: AuthRequest, res: Response) {\n  try {\n    const id = parseInt(req.params.id);\n    const raw = req.body || {};\n    const sanitized = {\n      ...raw,\n      order: raw.order !== undefined ? Number(raw.order) : undefined,\n      videoUrl: raw.videoUrl === '' ? undefined : raw.videoUrl,\n      textContent: raw.textContent === '' ? undefined : raw.textContent,\n      codeExample: raw.codeExample === '' ? undefined : raw.codeExample,\n      expectedOutput: raw.expectedOutput === '' ? undefined : raw.expectedOutput,\n      language: raw.language === '' ? undefined : raw.language,\n      title: raw.title === '' ? undefined : raw.title,\n      description: raw.description === '' ? undefined : raw.description,\n    } as any;\n    const validatedData = insertCourseModuleSchema.partial().parse(sanitized);\n    \n    const module = await storage.updateCourseModule(id, validatedData);\n    if (!module) return res.status(404).json({ message: 'Module not found' });\n    res.json(module);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: 'Invalid data', errors: error.errors });\n    }\n    console.error('Error updating module:', error);\n    res.status(500).json({ message: 'Failed to update module' });\n  }\n}\n\nexport async function deleteModule(req: AuthRequest, res: Response) {\n  try {\n    const id = parseInt(req.params.id);\n    \n    const module = await storage.getCourseModule(id);\n    if (!module) return res.status(404).json({ message: 'Module not found' });\n    \n    await storage.deleteCourseModule(id);\n    res.status(204).send();\n  } catch (error) {\n    console.error('Error deleting module:', error);\n    res.status(500).json({ message: 'Failed to delete module' });\n  }\n}\n\nexport async function executeModule(req: Request, res: Response) {\n  try {\n    const { code, language, input } = req.body;\n    \n    if (!code || !language) {\n      return res.status(400).json({ \n        message: 'Code and language are required' \n      });\n    }\n\n    console.log(`[MODULES-CONTROLLER] 🚀 Executing module code:`, {\n      language,\n      codeLength: code.length,\n      hasInput: !!input\n    });\n    \n    const executionService = await executionServicePromise;\n    const result = await executionService.executeCode(code, language, input);\n    \n    console.log(`[MODULES-CONTROLLER] ✅ Module execution completed:`, {\n      success: !result.error,\n      outputLength: result.output?.length || 0,\n      error: result.error\n    });\n\n    res.json({\n      success: !result.error,\n      output: result.output,\n      error: result.error,\n      runtime: result.runtime,\n      memory: result.memory\n    });\n  } catch (error: any) {\n    console.error(`[MODULES-CONTROLLER] ❌ Module execution failed:`, error);\n    res.status(500).json({ \n      message: 'Failed to execute code',\n      error: error.message \n    });\n  }\n}","size_bytes":4890},"server/models/Contest.ts":{"content":"import mongoose, { Document } from 'mongoose';\n\nexport interface IContestProblem {\n  id: string;\n  originalProblemId?: number | string;\n  title?: string;\n  description?: string;\n  difficulty?: string;\n  points?: number;\n  order?: number;\n  timeLimit?: number;\n  memoryLimit?: number;\n  constraints?: string;\n  inputFormat?: string;\n  outputFormat?: string;\n  maxSubmissions?: number;\n  partialScoring?: boolean;\n  customTestCases?: any[];\n  customExamples?: any[];\n  customStarterCode?: any;\n  tags?: string[];\n  notes?: string;\n  examples?: any[];\n  testCases?: any[];\n  starterCode?: any;\n}\n\nexport interface IContestAnnouncement {\n  id: string;\n  message: string;\n  timestamp: Date;\n  priority: 'low' | 'medium' | 'high';\n  isGlobal?: boolean;\n}\n\nexport interface IContest {\n  id: string;\n  title: string;\n  description?: string;\n  status?: string;\n  type?: string;\n  visibility?: string;\n  startTime?: Date;\n  endTime?: Date;\n  duration?: number; // contest duration in minutes\n  timeZone?: string;\n  contestEndMethod?: 'manually_ended' | 'time_expired' | null;\n  allowDirectEnrollment?: boolean; // Feature flag for QR/link enrollment\n  participants?: string[]; // Array of user IDs enrolled in the contest\n  problems: IContestProblem[];\n  announcements: IContestAnnouncement[];\n  createdBy?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface IContestDocument extends Omit<IContest, 'id'>, Document {\n  id: string;\n}\n\nconst contestProblemSchema = new mongoose.Schema<IContestProblem>({\n  id: { type: String, required: true },\n  originalProblemId: { type: mongoose.Schema.Types.Mixed },\n  title: String,\n  description: String,\n  difficulty: String,\n  points: { type: Number, default: 0 },\n  order: Number,\n  timeLimit: Number,\n  memoryLimit: Number,\n  constraints: String,\n  inputFormat: String,\n  outputFormat: String,\n  maxSubmissions: Number,\n  partialScoring: { type: Boolean, default: false },\n  customTestCases: [mongoose.Schema.Types.Mixed],\n  customExamples: [mongoose.Schema.Types.Mixed],\n  customStarterCode: mongoose.Schema.Types.Mixed,\n  tags: [String],\n  notes: String,\n  examples: [mongoose.Schema.Types.Mixed],\n  testCases: [mongoose.Schema.Types.Mixed],\n  starterCode: mongoose.Schema.Types.Mixed,\n}, { _id: false });\n\nconst contestAnnouncementSchema = new mongoose.Schema<IContestAnnouncement>({\n  id: { type: String, required: true },\n  message: { type: String, required: true },\n  timestamp: { type: Date, default: Date.now },\n  priority: { type: String, enum: ['low', 'medium', 'high'], default: 'medium' },\n  isGlobal: { type: Boolean, default: true },\n}, { _id: false });\n\nconst contestSchema = new mongoose.Schema<IContestDocument>({\n  id: { type: String, required: true, unique: true, index: true },\n  title: { type: String, required: true },\n  description: String,\n  status: String,\n  type: String,\n  visibility: String,\n  startTime: Date,\n  endTime: Date,\n  duration: Number, // contest duration in minutes\n  timeZone: { type: String, default: 'UTC' },\n  contestEndMethod: { type: String, enum: ['manually_ended', 'time_expired', null], default: null },\n  // Feature flag for QR/link enrollment\n  allowDirectEnrollment: { type: Boolean, default: false },\n  participants: [String], // Array of user IDs enrolled in the contest\n  problems: { type: [contestProblemSchema], default: [] },\n  announcements: { type: [contestAnnouncementSchema], default: [] },\n  createdBy: String,\n}, { timestamps: true });\n\ncontestSchema.index({ visibility: 1, status: 1, type: 1, createdAt: -1 });\n\nexport const Contest = mongoose.model<IContestDocument>('Contest', contestSchema); ","size_bytes":3600},"client/verify-deploy.sh":{"content":"#!/bin/bash\n\necho \"🔍 Verifying Railway deployment configuration...\"\n\n# Check if railway.toml exists and is clean\nif [ -f \"railway.toml\" ]; then\n    echo \"✅ railway.toml found\"\n    cat railway.toml\nelse\n    echo \"❌ railway.toml not found\"\n    exit 1\nfi\n\necho \"\"\n\n# Check if nixpacks.toml exists and is clean\nif [ -f \"nixpacks.toml\" ]; then\n    echo \"✅ nixpacks.toml found\"\n    cat nixpacks.toml\nelse\n    echo \"❌ nixpacks.toml not found\"\n    exit 1\nfi\n\necho \"\"\n\n# Check if package.json has correct scripts\nif grep -q '\"build\"' package.json && grep -q '\"serve\"' package.json; then\n    echo \"✅ package.json has required scripts\"\nelse\n    echo \"❌ package.json missing required scripts\"\n    exit 1\nfi\n\necho \"\"\n\n# Check if serve package is in dependencies\nif grep -q '\"serve\"' package.json; then\n    echo \"✅ serve package in dependencies\"\nelse\n    echo \"❌ serve package not in dependencies\"\n    exit 1\nfi\n\necho \"\"\n\n# Check for any conflicting configuration files\nconflicts=()\nif [ -f \".nixpacks\" ]; then conflicts+=(\".nixpacks\"); fi\nif [ -d \".railway\" ]; then conflicts+=(\".railway\"); fi\nif [ -f \"vercel.json\" ]; then conflicts+=(\"vercel.json\"); fi\nif [ -f \"Dockerfile\" ]; then conflicts+=(\"Dockerfile\"); fi\n\nif [ ${#conflicts[@]} -eq 0 ]; then\n    echo \"✅ No conflicting configuration files found\"\nelse\n    echo \"❌ Conflicting configuration files found: ${conflicts[*]}\"\n    exit 1\nfi\n\necho \"\"\necho \"🎉 Railway deployment configuration verified!\"\necho \"🚀 Ready to deploy to Railway with Nixpacks!\"\necho \"\"\necho \"📝 Configuration summary:\"\necho \"- Using Nixpacks builder\"\necho \"- Node.js provider only\"\necho \"- Build output: build/\"\necho \"- Serve from: build/\"\necho \"- No conflicting configs\" ","size_bytes":1716},"Documentations/DOCKER_EXECUTION_FIX.md":{"content":"# 🚨 CRITICAL FIX: Docker Execution System Not Working\n\n## 🔍 **Problem Identified**\n\nYour CodeArena is currently using the **old direct execution system** instead of the **new Docker-based queue system**. This is why code compilation and execution in assignments and courses is not using Docker containers.\n\n## 🚀 **IMMEDIATE FIX - Step by Step**\n\n### **Step 1: Start the Docker Execution System**\n\n```powershell\n# Navigate to execution system\ncd E:\\CodeArena\\execution-system\n\n# Add Docker to PATH (if not already done)\n$env:PATH += \";C:\\Program Files\\Docker\\Docker\\resources\\bin\"\n\n# Start the execution system\ndocker compose up -d\n\n# Check if it's running\ndocker compose ps\n```\n\n**Expected Output:**\n```\nNAME                    COMMAND                  SERVICE             STATUS              PORTS\nexecution-api-1         \"/sbin/tini -- node …\"   api                 running             0.0.0.0:3001->3001/tcp\nexecution-worker-1      \"/sbin/tini -- node …\"   worker              running             0.0.0.0:3002->3002/tcp\nexecution-redis-1       \"docker-entrypoint.s…\"   redis               running             0.0.0.0:6379->6379/tcp\n```\n\n### **Step 2: Test the Execution System**\n\n```powershell\n# Test API health\ncurl http://localhost:3001/health\n\n# Test code execution\n$testCode = @{\n    code = \"print('Hello from Docker!')\"\n    language = \"python\"\n} | ConvertTo-Json\n\nInvoke-RestMethod -Uri \"http://localhost:3001/api/execute\" -Method POST -Body $testCode -ContentType \"application/json\"\n```\n\n**Expected Output:**\n```json\n{\n  \"output\": \"Hello from Docker!\\n\",\n  \"runtime\": 45,\n  \"memory\": 12.5,\n  \"error\": null\n}\n```\n\n### **Step 3: Configure CodeArena to Use Docker**\n\n**Option A: Use the Quick Fix Script**\n```powershell\n# Run the quick fix script\ncd E:\\CodeArena\\execution-system\n.\\quick-fix-docker.ps1\n```\n\n**Option B: Manual Configuration**\n```powershell\n# Set environment variables\n$env:EXECUTION_MODE = \"queue\"\n$env:EXECUTION_QUEUE_URL = \"http://localhost:3001\"\n$env:EXECUTION_POLL_INTERVAL = \"1000\"\n$env:EXECUTION_MAX_POLL_TIME = \"60000\"\n$env:EXECUTION_TIMEOUT = \"30000\"\n\n# Start CodeArena server\ncd E:\\CodeArena\nnpm run dev\n```\n\n### **Step 4: Verify the Fix**\n\n1. **Check Server Logs**: You should see:\n   ```\n   [EXEC-SERVICE] Using queue-based execution\n   [EXEC-SERVICE] Using queue-based test case execution\n   ```\n\n2. **Test in Frontend**: \n   - Go to any assignment or course\n   - Click \"Run Code\"\n   - Code should now execute in Docker containers\n\n3. **Check Execution Logs**:\n   ```powershell\n   # View execution system logs\n   docker compose logs -f api\n   docker compose logs -f worker\n   ```\n\n## 🔧 **Troubleshooting**\n\n### **Issue 1: Docker Not Found**\n```powershell\n# Solution: Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop/\n# Then restart your terminal\n```\n\n### **Issue 2: Execution System Won't Start**\n```powershell\n# Check if ports are in use\nnetstat -ano | findstr :3001\nnetstat -ano | findstr :6379\n\n# Kill processes if needed\ntaskkill /PID <PID> /F\n\n# Rebuild containers\ndocker compose down\ndocker compose up -d --build\n```\n\n### **Issue 3: CodeArena Still Uses Direct Execution**\n```powershell\n# Check environment variable\necho $env:EXECUTION_MODE\n\n# If not set, set it manually\n$env:EXECUTION_MODE = \"queue\"\n\n# Restart CodeArena server\n# Stop current server (Ctrl+C)\n# Start again: npm run dev\n```\n\n### **Issue 4: Execution System Unavailable**\n```powershell\n# Check if services are healthy\ndocker compose ps\n\n# Check logs for errors\ndocker compose logs api\ndocker compose logs worker\ndocker compose logs redis\n\n# Restart services\ndocker compose restart\n```\n\n## 📊 **Verification Commands**\n\n### **Check Execution System Status**\n```powershell\n# Health check\ncurl http://localhost:3001/health\n\n# Queue stats\ncurl http://localhost:3001/api/queue/stats\n\n# Supported languages\ncurl http://localhost:3001/api/languages\n```\n\n### **Test All Languages**\n```powershell\n# Python\n$pythonCode = @{ code = \"print('Python works!')\"; language = \"python\" } | ConvertTo-Json\nInvoke-RestMethod -Uri \"http://localhost:3001/api/execute\" -Method POST -Body $pythonCode -ContentType \"application/json\"\n\n# JavaScript\n$jsCode = @{ code = \"console.log('JavaScript works!')\"; language = \"javascript\" } | ConvertTo-Json\nInvoke-RestMethod -Uri \"http://localhost:3001/api/execute\" -Method POST -Body $jsCode -ContentType \"application/json\"\n\n# Java\n$javaCode = @{ code = \"public class Test { public static void main(String[] args) { System.out.println('Java works!'); } }\"; language = \"java\" } | ConvertTo-Json\nInvoke-RestMethod -Uri \"http://localhost:3001/api/execute\" -Method POST -Body $javaCode -ContentType \"application/json\"\n\n# C\n$cCode = @{ code = \"#include <stdio.h>`nint main() { printf('C works!'); return 0; }\"; language = \"c\" } | ConvertTo-Json\nInvoke-RestMethod -Uri \"http://localhost:3001/api/execute\" -Method POST -Body $cCode -ContentType \"application/json\"\n\n# C++\n$cppCode = @{ code = \"#include <iostream>`nint main() { std::cout << 'C++ works!' << std::endl; return 0; }\"; language = \"cpp\" } | ConvertTo-Json\nInvoke-RestMethod -Uri \"http://localhost:3001/api/execute\" -Method POST -Body $cppCode -ContentType \"application/json\"\n```\n\n## 🎯 **Success Indicators**\n\nWhen the fix is working correctly, you should see:\n\n1. **✅ Execution System Running**:\n   ```\n   docker compose ps\n   # All services should show \"running\" status\n   ```\n\n2. **✅ API Health Check**:\n   ```\n   curl http://localhost:3001/health\n   # Should return: {\"status\":\"healthy\",\"timestamp\":\"...\"}\n   ```\n\n3. **✅ CodeArena Server Logs**:\n   ```\n   [EXEC-SERVICE] Using queue-based execution\n   [EXEC-SERVICE] Using queue-based test case execution\n   ```\n\n4. **✅ Frontend Code Execution**:\n   - Code runs in Docker containers\n   - Faster execution times\n   - Better resource isolation\n   - Support for all languages\n\n## 🚀 **Quick Start Scripts**\n\n### **Start Everything (Recommended)**\n```powershell\n# Run the comprehensive start script\n.\\start-with-docker.ps1\n```\n\n### **Stop Everything**\n```powershell\n# Stop execution system\ncd E:\\CodeArena\\execution-system\ndocker compose down\n\n# Stop CodeArena server\n# Ctrl+C in the server terminal\n```\n\n## 📝 **Permanent Configuration**\n\nTo make this permanent, create a `.env` file in the server directory:\n\n```env\n# Execution System Configuration\nEXECUTION_MODE=queue\nEXECUTION_QUEUE_URL=http://localhost:3001\nEXECUTION_POLL_INTERVAL=1000\nEXECUTION_MAX_POLL_TIME=60000\nEXECUTION_TIMEOUT=30000\n```\n\n## 🎉 **Expected Results**\n\nAfter applying this fix:\n\n1. **✅ All code execution uses Docker containers**\n2. **✅ Better performance and isolation**\n3. **✅ Support for all programming languages**\n4. **✅ Scalable execution system**\n5. **✅ Proper resource limits and security**\n\n**Your CodeArena will now use the Docker-based execution system for all assignments and courses!** 🚀 ","size_bytes":6892},"client/src/components/layout/Layout.tsx":{"content":"import { Navigation } from \"./navigation\";\nimport { Sidebar } from \"./sidebar\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const { isAuthenticated } = useAuth();\n\n  if (!isAuthenticated) {\n    return <>{children}</>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Navigation />\n      <div className=\"relative\">\n        <Sidebar />\n        <main className=\"min-h-[calc(100vh-4rem)] pt-2 sm:pt-4 overflow-auto transition-all duration-300 ease-in-out\">\n          <div className=\"w-full max-w-full overflow-hidden\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n} ","size_bytes":749},"server/routes/admin.ts":{"content":"import { Router, Request, Response } from 'express';\nimport { protect, requireAdmin } from '../middleware/auth';\nimport type { AuthRequest } from '../middleware/auth';\nimport { storage } from '../storage';\nimport { connectToMongoDB } from '../db';\nimport { listUsers, updateUserRole, analyticsSummary, createUser, deleteUser } from '../controllers/adminController';\nimport { Submission } from '../models/Submission';\nimport { User } from '../models/User';\nimport { Problem } from '../models/Problem';\nimport mongoose from 'mongoose';\n\nconst router = Router();\n\n// Admin assignments\nrouter.get('/assignments', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    const assignments = await storage.getAssignments();\n    res.json(assignments);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch assignments' });\n  }\n});\n\n// Admin groups\nrouter.get('/groups', protect, requireAdmin, async (_req: AuthRequest, res: Response) => {\n  try {\n    const groups = await storage.getGroups();\n    res.json(groups);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch groups' });\n  }\n});\n\n// Admin announcements\nrouter.get('/announcements', protect, requireAdmin, async (_req: AuthRequest, res: Response) => {\n  try {\n    const announcements = await storage.getAnnouncements();\n    res.json(announcements);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch announcements' });\n  }\n});\n\n// Admin users\nrouter.get('/users', protect, requireAdmin, listUsers as any);\nrouter.post('/users', protect, requireAdmin, createUser as any);\nrouter.delete('/users/:id', protect, requireAdmin, deleteUser as any);\nrouter.patch('/users/:id/role', protect, requireAdmin, updateUserRole as any);\n\n// Admin problems list (used by assignment creation UI)\nrouter.get('/problems', protect, requireAdmin, async (_req: AuthRequest, res: Response) => {\n  try {\n    const problems = await storage.getProblems();\n    res.json(problems || []);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch problems' });\n  }\n});\n\n// Admin submissions\nrouter.get('/submissions', protect, requireAdmin, async (_req: AuthRequest, res: Response) => {\n  try {\n    const submissions = await storage.getAllSubmissions();\n    res.json(submissions);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch submissions' });\n  }\n});\n\n// Submissions stats (two paths for compatibility)\nasync function handleSubmissionStats(_req: AuthRequest, res: Response) {\n  try {\n    const stats = await storage.getSubmissionStats();\n    res.json(stats);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch submission stats' });\n  }\n}\nrouter.get('/submissions/stats', protect, requireAdmin, handleSubmissionStats);\nrouter.get('/submission-stats', protect, requireAdmin, handleSubmissionStats);\n\n// Problem analytics (Mongoose-only, admin)\nrouter.get('/problems/:problemId/analytics', protect, requireAdmin, async (req, res) => {\n  try {\n    const problemId = parseInt(req.params.problemId);\n    if (Number.isNaN(problemId)) return res.status(400).json({ message: 'Invalid problem id' });\n\n    // Load submissions with joined user info\n    const rows: any[] = await Submission.aggregate([\n      { $match: { problemId } },\n      { $sort: { submittedAt: -1 } },\n      { $addFields: { userIdObj: { $toObjectId: '$userId' } } },\n      {\n        $lookup: {\n          from: 'users',\n          localField: 'userIdObj',\n          foreignField: '_id',\n          as: 'user'\n        }\n      },\n      { $unwind: { path: '$user', preserveNullAndEmptyArrays: true } }\n    ]);\n\n    const byUser: Record<string, any> = {};\n    for (const s of rows) {\n      const key = String(s.userIdObj || s.userId);\n      if (!byUser[key]) {\n        byUser[key] = {\n          userId: key,\n          userName: s.user ? `${s.user.firstName || ''} ${s.user.lastName || ''}`.trim() || s.user.email : 'Unknown User',\n          userEmail: s.user?.email || '',\n          totalAttempts: 0,\n          passedAttempts: 0,\n          failedAttempts: 0,\n          bestScore: 0,\n          lastAttempt: null as any,\n          status: 'failed',\n        };\n      }\n      byUser[key].totalAttempts += 1;\n      const isPass = (s.status === 'completed' && s.score === '100%') || s.status === 'accepted';\n      if (isPass) {\n        byUser[key].passedAttempts += 1;\n        byUser[key].status = 'passed';\n      } else {\n        byUser[key].failedAttempts += 1;\n      }\n      const numericScore = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n      if (!Number.isNaN(numericScore) && numericScore > byUser[key].bestScore) {\n        byUser[key].bestScore = numericScore;\n      }\n      if (!byUser[key].lastAttempt || new Date(s.submittedAt) > new Date(byUser[key].lastAttempt)) {\n        byUser[key].lastAttempt = s.submittedAt;\n      }\n    }\n\n    const problem = await Problem.findOne({ id: problemId }).lean();\n    const totalUsers = Object.keys(byUser).length;\n    const passedUsers = Object.values(byUser).filter((u: any) => u.status === 'passed').length;\n    const failedUsers = totalUsers - passedUsers;\n\n    res.json({\n      problemId,\n      problemTitle: (problem as any)?.title || `Problem ${problemId}`,\n      totalUsers,\n      passedUsers,\n      failedUsers,\n      passRate: totalUsers > 0 ? Math.round((passedUsers / totalUsers) * 100) : 0,\n      totalSubmissions: rows.length,\n      userStats: Object.values(byUser),\n    });\n  } catch (error) {\n    console.error('Error fetching problem analytics:', error);\n    res.status(500).json({ message: 'Failed to fetch problem analytics' });\n  }\n});\n\nrouter.get('/problems/:problemId/users/:userId/analytics', protect, requireAdmin, async (req, res) => {\n  try {\n    const problemId = parseInt(req.params.problemId);\n    const userId = req.params.userId;\n    if (Number.isNaN(problemId)) return res.status(400).json({ message: 'Invalid problem id' });\n\n    const userObjectId = mongoose.Types.ObjectId.isValid(userId) ? new mongoose.Types.ObjectId(userId) : undefined;\n    const userDoc = userObjectId ? await User.findById(userObjectId).lean() : await User.findOne({ id: userId }).lean();\n    const submissions = await Submission.find({ problemId, userId }).sort({ submittedAt: 1 }).lean();\n\n    const totalAttempts = submissions.length;\n    const passedAttempts = submissions.filter((s: any) => (s.status === 'completed' && s.score === '100%') || s.status === 'accepted').length;\n    const failedAttempts = totalAttempts - passedAttempts;\n    const bestScore = submissions.reduce((max: number, s: any) => {\n      const v = typeof s.score === 'string' ? parseFloat(s.score) : (s.score || 0);\n      return Number.isFinite(v) && v > max ? v : max;\n    }, 0);\n    const averageRuntime = Math.round((submissions.reduce((sum: number, s: any) => sum + (s.runtime || 0), 0) / Math.max(1, totalAttempts)) || 0);\n    const averageMemory = Math.round((submissions.reduce((sum: number, s: any) => sum + (s.memory || 0), 0) / Math.max(1, totalAttempts)) || 0);\n\n    const attempts = submissions.map((s: any, idx: number) => ({\n      attemptNumber: idx + 1,\n      submittedAt: s.submittedAt,\n      language: s.language,\n      status: (s.status === 'completed' && s.score === '100%') ? 'accepted' : (s.status || 'failed'),\n      runtime: s.runtime,\n      memory: s.memory,\n      score: s.score,\n      testCasesPassed: undefined,\n      totalTestCases: undefined,\n    }));\n\n    const problem = await Problem.findOne({ id: problemId }).lean();\n    res.json({\n      problemId,\n      problemTitle: (problem as any)?.title || `Problem ${problemId}`,\n      userId,\n      userName: userDoc ? `${userDoc.firstName || ''} ${userDoc.lastName || ''}`.trim() || userDoc.email : 'Unknown User',\n      userEmail: userDoc?.email || '',\n      totalAttempts,\n      passedAttempts,\n      failedAttempts,\n      successRate: totalAttempts > 0 ? Math.round((passedAttempts / totalAttempts) * 100) : 0,\n      bestScore,\n      averageRuntime,\n      averageMemory,\n      firstAttempt: submissions[0]?.submittedAt || null,\n      lastAttempt: submissions[submissions.length - 1]?.submittedAt || null,\n      attempts,\n    });\n  } catch (error) {\n    console.error('Error fetching user problem analytics:', error);\n    res.status(500).json({ message: 'Failed to fetch user problem analytics' });\n  }\n});\n\n// Admin contest user submissions\nrouter.get('/contests/:contestId/users/:userId/submissions', protect, requireAdmin, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId, userId } = req.params;\n    \n    // Import contest storage\n    const { contestStorage } = await import('../services/contestStorage');\n    \n    // Get user submissions for the specific contest\n    const submissions = await contestStorage.getParticipantSubmissions(contestId, userId);\n    console.log(`[ADMIN-CONTEST-SUBMISSIONS] Found ${submissions.length} submissions for user ${userId} in contest ${contestId}`);\n    console.log(`[ADMIN-CONTEST-SUBMISSIONS] Raw submissions:`, JSON.stringify(submissions, null, 2));\n    \n    // Get contest details for additional context\n    const contest = await contestStorage.getContest(contestId);\n    if (!contest) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n    console.log(`[ADMIN-CONTEST-SUBMISSIONS] Contest problems:`, contest.problems?.map(p => ({ id: p.id, title: p.title })));\n    \n    // Get user details\n    const user = await storage.getUser(userId);\n    const userInfo = user ? {\n      id: user.id,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      username: (user as any).username || user.email\n    } : null;\n    \n    // Format submissions with problem information - match frontend expectations\n    const formattedSubmissions = submissions.map(submission => ({\n      id: submission.id,\n      problemId: submission.problemId,\n      problemTitle: contest.problems.find(p => p.id === submission.problemId)?.title || 'Unknown Problem',\n      code: submission.code || '',\n      language: submission.language || '',\n      status: submission.status || 'unknown',\n      runtime: submission.runtime || 0,\n      memory: submission.memory || 0,\n      points: submission.points || 0,\n      submissionTime: submission.submissionTime || new Date(),\n      submittedAt: submission.submissionTime || new Date(),\n      penalty: submission.penalty || 0,\n      isContestSubmission: submission.isContestSubmission || false\n    }));\n    \n    const response = {\n      contest: {\n        id: contest.id,\n        title: contest.title,\n        startTime: contest.startTime,\n        endTime: contest.endTime\n      },\n      user: userInfo,\n      submissions: formattedSubmissions,\n      totalSubmissions: submissions.length,\n      acceptedSubmissions: submissions.filter(s => s.status === 'accepted').length,\n      totalPoints: submissions.filter(s => s.status === 'accepted').reduce((sum, s) => sum + (s.points || 0), 0)\n    };\n    \n    console.log(`[ADMIN-CONTEST-SUBMISSIONS] Final response:`, JSON.stringify(response, null, 2));\n    res.json(response);\n  } catch (error) {\n    console.error('Error fetching admin contest user submissions:', error);\n    res.status(500).json({ message: 'Failed to fetch user submissions' });\n  }\n});\n\n// Platform analytics (basic impl using storage)\nrouter.get('/analytics/platform-stats', protect, requireAdmin, async (_req: AuthRequest, res: Response) => {\n  try {\n    const users = await storage.getAllUsers();\n    const analytics = await storage.getAdminAnalytics();\n\n \tconst endDate = new Date();\n \tconst startDate = new Date();\n \tstartDate.setDate(startDate.getDate() - 30);\n\n \tconst timeSeriesData = [] as Array<{ date: string; users: number; problems: number; submissions: number }>;\n \tconst currentUsers = users.length;\n \tconst currentProblems = (analytics as any).problems || 0;\n \tconst currentSubmissions = (analytics as any).submissions || 0;\n\n \tfor (let i = 0; i < 30; i++) {\n \t\tconst d = new Date(startDate);\n \t\td.setDate(startDate.getDate() + i);\n \t\tconst progress = (i + 1) / 30;\n \t\ttimeSeriesData.push({\n \t\t\tdate: d.toISOString().split('T')[0],\n \t\t\tusers: Math.max(1, Math.floor(currentUsers * progress)),\n \t\t\tproblems: Math.max(1, Math.floor(currentProblems * progress)),\n \t\t\tsubmissions: Math.max(1, Math.floor(currentSubmissions * progress)),\n \t\t});\n \t}\n\n \tres.json(timeSeriesData);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch platform statistics' });\n  }\n});\n\n// User distribution analytics\nrouter.get('/analytics/user-distribution', protect, requireAdmin, async (_req: AuthRequest, res: Response) => {\n  try {\n    const users = await storage.getAllUsers();\n    const adminUsers = users.filter((u: any) => u.role === 'admin');\n    const studentUsers = users.filter((u: any) => u.role !== 'admin');\n\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 30);\n\n    const timeSeriesData = [] as Array<{ date: string; students: number; admins: number; total: number }>;\n    const currentStudents = studentUsers.length;\n    const currentAdmins = adminUsers.length;\n\n    for (let i = 0; i < 30; i++) {\n      const d = new Date(startDate);\n      d.setDate(startDate.getDate() + i);\n      const progress = (i + 1) / 30;\n      const students = Math.max(1, Math.floor(currentStudents * progress));\n      const admins = Math.max(1, Math.floor(currentAdmins * progress));\n      timeSeriesData.push({ date: d.toISOString().split('T')[0], students, admins, total: students + admins });\n    }\n\n    res.json(timeSeriesData);\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch user distribution' });\n  }\n});\n\n// Course stats for admin dashboard\nrouter.get('/course-stats', protect, requireAdmin, async (_req: AuthRequest, res: Response) => {\n  try {\n    const stats = await storage.getCourseStats();\n    res.json(stats || {});\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch course stats' });\n  }\n});\n\n// Analytics summary (totals and recent activity)\nrouter.get('/analytics/summary', protect, requireAdmin, analyticsSummary as any);\n\nexport default router; ","size_bytes":14183},"client/src/pages/AssignmentSubmission.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, ArrowRight, Save, Send, Clock, FileText, Code, BarChart3, Play } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Editor from \"@monaco-editor/react\";\n\ninterface MCQOption {\n  id: string;\n  text: string;\n  isCorrect: boolean;\n}\n\ninterface AssignmentQuestion {\n  id: string;\n  type: 'mcq' | 'coding';\n  title: string;\n  description: string;\n  points: number;\n  options?: MCQOption[];\n  problemStatement?: string;\n  inputFormat?: string;\n  outputFormat?: string;\n  timeLimit?: number;\n  memoryLimit?: number;\n}\n\ninterface Assignment {\n  id: number;\n  title: string;\n  description?: string;\n  courseTag: string;\n  deadline?: string;\n  questions: AssignmentQuestion[];\n  maxAttempts: number;\n  isVisible: boolean;\n  autoGrade: boolean;\n}\n\ninterface QuestionSubmission {\n  questionId: string;\n  type: 'mcq' | 'coding';\n  selectedOptionId?: string;\n  code?: string;\n  language?: string;\n  isCorrect?: boolean;\n  score?: number;\n  feedback?: string;\n}\n\ninterface AssignmentSubmission {\n  id?: number;\n  assignmentId: number;\n  userId: string;\n  questionSubmissions: QuestionSubmission[];\n  totalScore: number;\n  maxScore: number;\n  status: 'in_progress' | 'submitted' | 'graded';\n  submittedAt?: string;\n  gradedAt?: string;\n  feedback?: string;\n}\n\nexport default function AssignmentSubmission() {\n  const [, params] = useRoute(\"/assignments/:id\");\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const assignmentId = params?.id ? parseInt(params.id) : null;\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [questionSubmissions, setQuestionSubmissions] = useState<QuestionSubmission[]>([]);\n  const [selectedLanguage, setSelectedLanguage] = useState(\"javascript\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isInitializing, setIsInitializing] = useState(true);\n  const [useCustomInput, setUseCustomInput] = useState(false);\n  const [customInput, setCustomInput] = useState(\"\");\n\n  // Redirect if no valid assignment ID\n  useEffect(() => {\n    if (!assignmentId) {\n      toast({\n        title: \"Error\",\n        description: \"Invalid assignment ID\",\n        variant: \"destructive\",\n      });\n      navigate(\"/assignments\");\n    }\n  }, [assignmentId, navigate]);\n\n  const { data: assignment, isLoading: assignmentLoading, error: assignmentError } = useQuery<Assignment>({\n    queryKey: [\"/api/assignments\", assignmentId],\n    enabled: !!assignmentId,\n    retry: 2,\n    retryDelay: 1000,\n  });\n\n  const { data: existingSubmission, isLoading: submissionLoading } = useQuery<AssignmentSubmission>({\n    queryKey: [\"/api/assignments\", assignmentId, \"submission\"],\n    enabled: !!assignmentId,\n    retry: 2,\n    retryDelay: 1000,\n  });\n\n  // Initialize submissions from existing data or create empty ones\n  useEffect(() => {\n    console.log('[DEBUG] Initialization effect running:', {\n      assignmentLoading,\n      submissionLoading,\n      hasAssignment: !!assignment,\n      hasQuestions: !!assignment?.questions?.length,\n      hasExistingSubmission: !!existingSubmission\n    });\n\n    if (assignmentLoading || submissionLoading) {\n      console.log('[DEBUG] Still loading data...');\n      return;\n    }\n\n    if (!assignment) {\n      console.log('[DEBUG] No assignment available');\n      setIsInitializing(false);\n      return;\n    }\n\n    if (!assignment.questions?.length) {\n      console.log('[DEBUG] Assignment has no questions');\n      setIsInitializing(false);\n      return;\n    }\n\n    const initializeSubmission = async () => {\n      console.log('[DEBUG] Starting submission initialization');\n      try {\n        if (!existingSubmission) {\n          console.log('[DEBUG] Creating new submission');\n          // Create new submission\n          const initialSubmissions = assignment.questions.map(question => ({\n            questionId: question.id,\n            type: question.type,\n            selectedOptionId: \"\",\n            code: question.type === \"coding\" ? getStarterCode(question, selectedLanguage) : \"\",\n            language: selectedLanguage,\n          }));\n          setQuestionSubmissions(initialSubmissions);\n          \n          // Create initial submission in backend\n          await saveSubmissionMutation.mutateAsync({\n            questionSubmissions: initialSubmissions,\n            status: 'in_progress'\n          });\n\n          toast({\n            title: \"Assignment Started\",\n            description: \"Your progress will be saved automatically.\",\n          });\n        } else {\n          console.log('[DEBUG] Using existing submission');\n          // Use existing submission\n          setQuestionSubmissions(existingSubmission.questionSubmissions);\n          // If the submission is already submitted or graded, disable editing\n          if (existingSubmission.status === 'submitted' || existingSubmission.status === 'graded') {\n            setIsSubmitting(true);\n            toast({\n              title: \"Assignment Already Submitted\",\n              description: \"You cannot make changes to this submission.\",\n              variant: \"default\"\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing submission:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to initialize assignment. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        console.log('[DEBUG] Initialization complete');\n        setIsInitializing(false);\n      }\n    };\n\n    initializeSubmission();\n  }, [assignment, existingSubmission, selectedLanguage, assignmentLoading, submissionLoading]);\n\n  const saveSubmissionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(`/api/assignments/${assignmentId}/submission`, \"POST\", data);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/assignments\", assignmentId, \"submission\"] });\n    },\n    onError: (error: any) => {\n      console.error('Error saving submission:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save progress\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const submitAssignmentMutation = useMutation({\n    mutationFn: async () => {\n      if (!assignment) throw new Error(\"Assignment not found\");\n      \n      const evaluatedSubmissions = evaluateSubmissions();\n      const totalScore = evaluatedSubmissions.reduce((sum, sub) => sum + (sub.score || 0), 0);\n      const maxScore = assignment.questions.reduce((sum, q) => sum + q.points, 0);\n      \n      const submissionData = {\n        assignmentId: assignment.id,\n        questionSubmissions: evaluatedSubmissions,\n        totalScore,\n        maxScore,\n        status: 'submitted' as const\n      };\n      \n      const response = await apiRequest(\"POST\", `/api/assignments/${assignment.id}/submit`, submissionData);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to submit assignment\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Assignment Submitted\",\n        description: \"Your assignment has been submitted successfully\",\n      });\n      navigate(\"/assignments\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message || \"Failed to submit assignment\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const customInputExecutionMutation = useMutation({\n    mutationFn: async () => {\n      if (!assignment) throw new Error(\"Assignment not found\");\n      const currentQuestion = assignment.questions[currentQuestionIndex];\n      const currentSubmission = questionSubmissions.find(s => s.questionId === currentQuestion.id);\n      const code = currentSubmission?.code || \"\";\n\n      if (!code.trim()) {\n        throw new Error(\"Please write some code before executing\");\n      }\n\n      if (!customInput.trim()) {\n        throw new Error(\"Please provide custom input\");\n      }\n\n      try {\n        console.log('[FRONTEND] 🚀 Sending custom input execution request for assignment');\n        console.log('[FRONTEND] Language:', selectedLanguage);\n        console.log('[FRONTEND] Custom input:', customInput);\n        \n        const payload = {\n          code: code.trim(),\n          language: selectedLanguage,\n          customInput: customInput.trim()\n        };\n\n        console.log('[FRONTEND] Custom input payload:', JSON.stringify(payload, null, 2));\n        \n        const response = await apiRequest(\"POST\", \"/api/problems/run-custom-input\", payload);\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \"Failed to execute with custom input\");\n        }\n        \n        const data = await response.json();\n        console.log('[FRONTEND] ✅ Received custom input execution response:', data);\n        return data;\n      } catch (error) {\n        console.error('[FRONTEND] ❌ Error executing with custom input:', error);\n        if (error instanceof Error) {\n          throw new Error(error.message);\n        }\n        throw new Error(\"Failed to execute with custom input. Please try again.\");\n      }\n    },\n    onSuccess: (data: any) => {\n      console.log('[FRONTEND] 📝 Processing custom input execution results:', data);\n      \n      // Show results in a toast and could be expanded to show in a modal or dedicated section\n      if (data.status === 'error' || data.error) {\n        toast({\n          title: \"Custom Input Execution Failed\",\n          description: data.error || \"Execution failed\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Custom Input Execution Successful\",\n          description: `Output: ${data.output || \"No output\"}`,\n        });\n      }\n    },\n    onError: (error: Error) => {\n      console.error('[FRONTEND] ❌ Custom input execution mutation error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to execute with custom input. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStarterCode = (question: AssignmentQuestion, language: string) => {\n    const starters: Record<string, string> = {\n      javascript: \"function solution() {\\n  // Your code here\\n  return;\\n}\",\n      python: \"def solution():\\n    # Your code here\\n    pass\",\n      java: \"public class Solution {\\n    public static void main(String[] args) {\\n        // Your code here\\n    }\\n}\",\n      cpp: \"#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    // Your code here\\n    return 0;\\n}\",\n      c: \"#include <stdio.h>\\n\\nint main() {\\n    // Your code here\\n    return 0;\\n}\"\n    };\n    return starters[language as keyof typeof starters] || starters.javascript;\n  };\n\n  const updateQuestionSubmission = (questionId: string, updates: Partial<QuestionSubmission>) => {\n    setQuestionSubmissions(prev => \n      prev.map(submission => \n        submission.questionId === questionId \n          ? { ...submission, ...updates }\n          : submission\n      )\n    );\n  };\n\n  const evaluateSubmissions = () => {\n    return questionSubmissions.map(submission => {\n      if (submission.type === 'mcq' && assignment) {\n        const question = assignment.questions.find(q => q.id === submission.questionId);\n        const selectedOption = question?.options?.find(opt => opt.id === submission.selectedOptionId);\n        const isCorrect = selectedOption?.isCorrect || false;\n        const score = isCorrect ? question?.points || 1 : 0;\n        \n        return {\n          ...submission,\n          isCorrect,\n          score,\n          feedback: isCorrect ? \"Correct!\" : \"Incorrect answer\"\n        };\n      }\n      return submission;\n    });\n  };\n\n  const handleSaveProgress = async () => {\n    if (!assignment) return;\n    \n    try {\n      setIsSubmitting(true);\n      await saveSubmissionMutation.mutateAsync({\n        questionSubmissions,\n        status: 'in_progress'\n      });\n      toast({\n        title: \"Progress Saved\",\n        description: \"Your progress has been saved\",\n      });\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSubmitAssignment = async () => {\n    if (!assignment) return;\n    \n    if (window.confirm(\"Are you sure you want to submit this assignment? You won't be able to make changes after submission.\")) {\n      try {\n        setIsSubmitting(true);\n        await submitAssignmentMutation.mutateAsync();\n      } catch (error) {\n        console.error('Error submitting assignment:', error);\n      } finally {\n        setIsSubmitting(false);\n      }\n    }\n  };\n\n  // Show loading state\n  if (assignmentLoading || submissionLoading || isInitializing) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex flex-col items-center justify-center h-64 gap-4\">\n          <div className=\"text-lg\">Loading assignment...</div>\n          <Progress value={30} className=\"w-64\" />\n          <div className=\"text-sm text-muted-foreground\">Please wait while we prepare your assignment</div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error state\n  if (assignmentError) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex flex-col items-center justify-center h-64 gap-4\">\n          <div className=\"text-lg text-destructive\">Error loading assignment</div>\n          <div className=\"text-sm text-muted-foreground\">{assignmentError.message}</div>\n          <Button onClick={() => navigate(\"/assignments\")}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Assignments\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Show not found state\n  if (!assignment || !assignment.questions?.length) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex flex-col items-center justify-center h-64 gap-4\">\n          <div className=\"text-lg\">Assignment not found or has no questions</div>\n          <div className=\"text-sm text-muted-foreground\">This assignment may have been deleted or is not yet ready.</div>\n          <Button onClick={() => navigate(\"/assignments\")}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Assignments\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // At this point TypeScript knows assignment and questions exist and are non-empty\n  const currentQuestion = assignment.questions[currentQuestionIndex];\n  if (!currentQuestion) {\n    // Handle invalid question index\n    setCurrentQuestionIndex(0);\n    return null;\n  }\n\n  const currentSubmission = questionSubmissions.find(s => s.questionId === currentQuestion.id);\n  const progress = ((currentQuestionIndex + 1) / assignment.questions.length) * 100;\n  const totalQuestions = assignment.questions.length;\n\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < assignment.questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n    }\n  };\n\n  const handlePreviousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n    }\n  };\n\n  // Now we can safely use currentQuestion since we've checked it exists\n  const currentQuestionCard = (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={currentQuestion.type === \"mcq\" ? \"default\" : \"secondary\"}>\n              {currentQuestion.type === \"mcq\" ? (\n                <>\n                  <FileText className=\"h-3 w-3 mr-1\" />\n                  Multiple Choice\n                </>\n              ) : (\n                <>\n                  <Code className=\"h-3 w-3 mr-1\" />\n                  Coding Problem\n                </>\n              )}\n            </Badge>\n            <Badge variant=\"outline\">{currentQuestion.points} points</Badge>\n          </div>\n        </div>\n        <CardTitle>{currentQuestion.title}</CardTitle>\n        <CardDescription>{currentQuestion.description}</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {currentQuestion.type === \"mcq\" && currentQuestion.options && (\n          <RadioGroup\n            value={currentSubmission?.selectedOptionId}\n            onValueChange={(value) => updateQuestionSubmission(currentQuestion.id, { selectedOptionId: value })}\n          >\n            {currentQuestion.options.map((option) => (\n              <div key={option.id} className=\"flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50\">\n                <RadioGroupItem value={option.id} id={option.id} />\n                <Label htmlFor={option.id} className=\"flex-1 cursor-pointer\">\n                  {option.text}\n                </Label>\n              </div>\n            ))}\n          </RadioGroup>\n        )}\n\n        {currentQuestion.type === \"coding\" && (\n          <div className=\"space-y-4\">\n            {currentQuestion.problemStatement && (\n              <div>\n                <h4 className=\"font-medium mb-2\">Problem Statement</h4>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <pre className=\"whitespace-pre-wrap text-sm\">{currentQuestion.problemStatement}</pre>\n                </div>\n              </div>\n            )}\n\n            {(currentQuestion.inputFormat || currentQuestion.outputFormat) && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {currentQuestion.inputFormat && (\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Input Format</h4>\n                    <div className=\"p-3 bg-muted/50 rounded-lg text-sm\">\n                      <pre className=\"whitespace-pre-wrap\">{currentQuestion.inputFormat}</pre>\n                    </div>\n                  </div>\n                )}\n                {currentQuestion.outputFormat && (\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Output Format</h4>\n                    <div className=\"p-3 bg-muted/50 rounded-lg text-sm\">\n                      <pre className=\"whitespace-pre-wrap\">{currentQuestion.outputFormat}</pre>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <Label>Your Solution</Label>\n                <Select \n                  value={selectedLanguage} \n                  onValueChange={(value) => {\n                    setSelectedLanguage(value);\n                    updateQuestionSubmission(currentQuestion.id, { \n                      language: value,\n                      code: getStarterCode(currentQuestion, value)\n                    });\n                  }}\n                >\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"javascript\">JavaScript</SelectItem>\n                    <SelectItem value=\"python\">Python</SelectItem>\n                    <SelectItem value=\"java\">Java</SelectItem>\n                    <SelectItem value=\"cpp\">C++</SelectItem>\n                    <SelectItem value=\"c\">C</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Editor\n                height=\"400px\"\n                language={selectedLanguage === 'c' ? 'cpp' : selectedLanguage}\n                value={currentSubmission?.code || getStarterCode(currentQuestion, selectedLanguage)}\n                onChange={(value) => updateQuestionSubmission(currentQuestion.id, { code: value || \"\" })}\n                theme=\"vs-dark\"\n                options={{\n                  minimap: { enabled: false },\n                  fontSize: 14,\n                  lineNumbers: \"on\",\n                  automaticLayout: true,\n                }}\n              />\n            </div>\n\n            {/* Custom Input Section */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  id={`custom-input-checkbox-${currentQuestion.id}`}\n                  checked={useCustomInput}\n                  onChange={(e) => setUseCustomInput(e.target.checked)}\n                  className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2\"\n                />\n                <label htmlFor={`custom-input-checkbox-${currentQuestion.id}`} className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">\n                  Use Custom Input\n                </label>\n              </div>\n              \n              {useCustomInput && (\n                <div className=\"space-y-3\">\n                  <div>\n                    <label htmlFor={`custom-input-field-${currentQuestion.id}`} className=\"block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2\">\n                      Custom Input:\n                    </label>\n                    <textarea\n                      id={`custom-input-field-${currentQuestion.id}`}\n                      value={customInput}\n                      onChange={(e) => setCustomInput(e.target.value)}\n                      placeholder=\"Enter your custom input here...\"\n                      className=\"w-full h-20 p-3 border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100 resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {(currentQuestion.timeLimit || currentQuestion.memoryLimit) && (\n              <div className=\"flex gap-4 text-sm text-muted-foreground\">\n                {currentQuestion.timeLimit && (\n                  <span>Time Limit: {currentQuestion.timeLimit}ms</span>\n                )}\n                {currentQuestion.memoryLimit && (\n                  <span>Memory Limit: {currentQuestion.memoryLimit}MB</span>\n                )}\n              </div>\n            )}\n\n            {/* Run Button for Custom Input */}\n            {useCustomInput && (\n              <div className=\"flex justify-end\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => customInputExecutionMutation.mutate()}\n                  disabled={customInputExecutionMutation.isPending || !customInput.trim()}\n                  className=\"flex items-center space-x-2\"\n                >\n                  <Play className=\"w-4 h-4\" />\n                  <span>{customInputExecutionMutation.isPending ? \"Executing...\" : \"Run with Custom Input\"}</span>\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"outline\" onClick={() => navigate(\"/assignments\")}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Assignments\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold\">{assignment.title}</h1>\n            <div className=\"flex items-center gap-2 mt-1\">\n              <Badge variant=\"outline\">{assignment.courseTag}</Badge>\n              {assignment.deadline && (\n                <Badge variant=\"secondary\">\n                  <Clock className=\"h-3 w-3 mr-1\" />\n                  Due: {new Date(assignment.deadline).toLocaleDateString()}\n                </Badge>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          {user?.role === 'admin' && (\n            <Button \n              variant=\"outline\" \n              onClick={() => navigate(`/admin/assignments/${assignmentId}/analytics`)}\n            >\n              <BarChart3 className=\"h-4 w-4 mr-2\" />\n              Analytics\n            </Button>\n          )}\n          <Button \n            variant=\"outline\" \n            onClick={handleSaveProgress}\n            disabled={isSubmitting || saveSubmissionMutation.isPending}\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            {saveSubmissionMutation.isPending ? \"Saving...\" : \"Save Progress\"}\n          </Button>\n          <Button \n            onClick={handleSubmitAssignment}\n            disabled={isSubmitting || submitAssignmentMutation.isPending}\n          >\n            <Send className=\"h-4 w-4 mr-2\" />\n            {submitAssignmentMutation.isPending ? \"Submitting...\" : \"Submit Assignment\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Progress */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <span className=\"text-sm font-medium\">\n            Question {currentQuestionIndex + 1} of {totalQuestions}\n          </span>\n          <span className=\"text-sm text-muted-foreground\">\n            {Math.round(progress)}% Complete\n          </span>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      {/* Question Card */}\n      {currentQuestion ? (\n        currentQuestionCard\n      ) : (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center h-64\">\n            <div className=\"text-lg mb-2\">Question not found</div>\n            <Button onClick={() => navigate(\"/assignments\")}>Back to Assignments</Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Navigation */}\n      <div className=\"flex justify-between mt-6\">\n        <Button\n          variant=\"outline\"\n          onClick={handlePreviousQuestion}\n          disabled={isSubmitting || currentQuestionIndex === 0}\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Previous Question\n        </Button>\n\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={handleSaveProgress}\n            disabled={isSubmitting || !currentQuestion || saveSubmissionMutation.isPending}\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            {saveSubmissionMutation.isPending ? \"Saving...\" : \"Save Progress\"}\n          </Button>\n          <Button\n            variant=\"default\"\n            onClick={handleSubmitAssignment}\n            disabled={isSubmitting || submitAssignmentMutation.isPending}\n          >\n            <Send className=\"h-4 w-4 mr-2\" />\n            {submitAssignmentMutation.isPending ? \"Submitting...\" : \"Submit Assignment\"}\n          </Button>\n        </div>\n\n        <Button\n          variant=\"outline\"\n          onClick={handleNextQuestion}\n          disabled={isSubmitting || currentQuestionIndex >= totalQuestions - 1}\n        >\n          Next Question\n          <ArrowRight className=\"h-4 w-4 ml-2\" />\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":28084},"client/src/lib/theme.ts":{"content":"export type Theme = \"light\" | \"dark\";\n\nexport function getTheme(): Theme {\n  if (typeof window === \"undefined\") return \"light\";\n  \n  const stored = localStorage.getItem(\"theme\") as Theme;\n  if (stored && (stored === \"light\" || stored === \"dark\")) {\n    return stored;\n  }\n  \n  return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n}\n\nexport function setTheme(theme: Theme) {\n  if (typeof window === \"undefined\") return;\n  \n  localStorage.setItem(\"theme\", theme);\n  \n  if (theme === \"dark\") {\n    document.documentElement.classList.add(\"dark\");\n  } else {\n    document.documentElement.classList.remove(\"dark\");\n  }\n}\n\nexport function toggleTheme(): Theme {\n  const current = getTheme();\n  const next = current === \"light\" ? \"dark\" : \"light\";\n  setTheme(next);\n  return next;\n}\n","size_bytes":807},"execution-system/docker/cpp/execute.sh":{"content":"#!/bin/bash\n\n# Set strict error handling\nset -euo pipefail\n\n# Constants\nMEMORY_LIMIT=\"128m\"\nTIMEOUT=\"5\"\nCOMPILER=\"g++\"  # Use g++ for both C and C++\nDEFAULT_FILE=\"/tmp/code.cpp\"\n\n# Get source file from arguments or use default\nSOURCE_FILE=\"${1:-$DEFAULT_FILE}\"\n\nif [ ! -f \"$SOURCE_FILE\" ]; then\n    echo \"Error: Source file not found at $SOURCE_FILE\" >&2\n    exit 1\nfi\n\nOUTPUT_FILE=\"${SOURCE_FILE%.*}\"\nSTART_TIME=$(date +%s%N)\nSTART_MEMORY=$(ps -o rss= -p $$)\n\n# Compile with security flags\necho \"Compiling code...\" >&2\nif ! $COMPILER \\\n    -O2 \\\n    -Wall \\\n    -Wextra \\\n    -Werror \\\n    -Wshadow \\\n    -Wformat=2 \\\n    -Wfloat-equal \\\n    -Wconversion \\\n    -Wlogical-op \\\n    -Wshift-overflow=2 \\\n    -Wduplicated-cond \\\n    -Wcast-qual \\\n    -Wcast-align \\\n    -D_FORTIFY_SOURCE=2 \\\n    -fstack-protector \\\n    -fno-plt \\\n    -o \"${OUTPUT_FILE}\" \\\n    \"${SOURCE_FILE}\" 2>&1\nthen\n    echo \"Compilation failed\" >&2\n    exit 1\nfi\n\n# Execute with resource limits\necho \"Executing code...\" >&2\ntimeout \"${TIMEOUT}s\" \\\n    /usr/bin/time -f \"%M\" \\\n    \"${OUTPUT_FILE}\" 2>&1\n\nEXIT_CODE=$?\n\n# Calculate execution stats\nEND_TIME=$(date +%s%N)\nEND_MEMORY=$(ps -o rss= -p $$)\nRUNTIME_MS=$(( (END_TIME - START_TIME) / 1000000 ))\nMEMORY_BYTES=$(( (END_MEMORY - START_MEMORY) * 1024 ))\n\n# Handle different exit codes\ncase $EXIT_CODE in\n    0)\n        # Successful execution\n        echo -e \"\\n__EXECUTION_STATS__:{\\\"runtime_ms\\\":$RUNTIME_MS,\\\"memory_bytes\\\":$MEMORY_BYTES,\\\"success\\\":true}\" >&2\n        ;;\n    124)\n        # Timeout\n        echo \"Error: Code execution timed out\" >&2\n        exit 1\n        ;;\n    137)\n        # Memory limit exceeded\n        echo \"Error: Memory limit exceeded\" >&2\n        exit 1\n        ;;\n    *)\n        # Other error\n        echo \"Error: Execution failed with code $EXIT_CODE\" >&2\n        exit 1\n        ;;\nesac ","size_bytes":1839},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"test_files/debug-users.js":{"content":"import { MongoClient } from 'mongodb';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nasync function debugUsers() {\n  const client = new MongoClient(process.env.DATABASE_URL);\n  try {\n    await client.connect();\n    const db = client.db();\n    \n    console.log('All users:');\n    const users = await db.collection('users').find({}).limit(5).toArray();\n    users.forEach(user => {\n      console.log('User:', {\n        _id: user._id,\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName\n      });\n    });\n    \n    console.log('\\nAll enrollments:');\n    const enrollments = await db.collection('problemSetEnrollments').find({}).toArray();\n    enrollments.forEach(enrollment => {\n      console.log('Enrollment:', {\n        id: enrollment.id,\n        userId: enrollment.userId,\n        problemSetId: enrollment.problemSetId\n      });\n    });\n    \n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    await client.close();\n  }\n}\n\ndebugUsers();","size_bytes":1020},"server/controllers/adminController.ts":{"content":"import { Request, Response } from 'express';\nimport type { AuthRequest } from '../middleware/auth';\nimport { User } from '../models/User';\nimport { Problem } from '../models/Problem';\nimport { Submission } from '../models/Submission';\nimport crypto from 'crypto';\n\nexport async function listUsers(req: AuthRequest, res: Response) {\n  try {\n    const users = await User.find({}).select('-password').lean();\n    res.json(users.map(u => ({\n      id: u._id.toString(),\n      email: u.email,\n      firstName: u.firstName,\n      lastName: u.lastName,\n      role: u.role,\n      createdAt: u.createdAt,\n    })));\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch users' });\n  }\n}\n\nexport async function createUser(req: AuthRequest, res: Response) {\n  try {\n    const { email, firstName, lastName, role, password } = req.body as {\n      email: string;\n      firstName: string;\n      lastName: string;\n      role?: 'student' | 'admin';\n      password?: string;\n    };\n\n    if (!email || !firstName || !lastName) {\n      return res.status(400).json({ message: 'email, firstName, and lastName are required' });\n    }\n\n    const existing = await User.findOne({ email }).lean();\n    if (existing) {\n      return res.status(409).json({ message: 'User with this email already exists' });\n    }\n\n    const newUser = new User({\n      email,\n      firstName,\n      lastName,\n      role: role && ['student', 'admin'].includes(role) ? role : 'student',\n      password: password && password.trim().length >= 6 ? password : crypto.randomBytes(12).toString('hex'),\n    } as any);\n\n    const saved = await newUser.save();\n\n    res.status(201).json({\n      id: saved._id.toString(),\n      email: saved.email,\n      firstName: saved.firstName,\n      lastName: saved.lastName,\n      role: saved.role,\n      createdAt: saved.createdAt,\n    });\n  } catch (error: any) {\n    res.status(500).json({ message: 'Failed to create user', error: error?.message });\n  }\n}\n\nexport async function deleteUser(req: AuthRequest, res: Response) {\n  try {\n    const { id } = req.params;\n    const deleted = await User.findByIdAndDelete(id).lean();\n    if (!deleted) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n    return res.status(200).json({ message: 'User deleted successfully' });\n  } catch (error) {\n    return res.status(500).json({ message: 'Failed to delete user' });\n  }\n}\n\nexport async function updateUserRole(req: AuthRequest, res: Response) {\n  try {\n    const { id } = req.params;\n    const { role } = req.body as { role: 'student' | 'admin' };\n    if (!['student', 'admin'].includes(role)) {\n      return res.status(400).json({ message: 'Invalid role' });\n    }\n    const updated = await User.findByIdAndUpdate(id, { $set: { role } }, { new: true }).select('-password').lean();\n    if (!updated) return res.status(404).json({ message: 'User not found' });\n    res.json({\n      id: updated._id.toString(),\n      email: updated.email,\n      firstName: updated.firstName,\n      lastName: updated.lastName,\n      role: updated.role,\n      createdAt: updated.createdAt,\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to update user role' });\n  }\n}\n\nexport async function analyticsSummary(req: AuthRequest, res: Response) {\n  try {\n    const [totalUsers, totalProblems, totalSubmissions] = await Promise.all([\n      User.countDocuments({}),\n      Problem.countDocuments({}),\n      Submission.countDocuments({}),\n    ]);\n    res.json({\n      totalUsers,\n      totalProblems,\n      totalSubmissions,\n      activeContests: 0,\n      recentActivity: [],\n      submissionStats: { accepted: 0, error: 0, pending: 0 },\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Failed to fetch analytics summary' });\n  }\n} ","size_bytes":3761},"execution-system/queue/src/queue.js":{"content":"const Queue = require('bull');\nconst Redis = require('redis');\nconst config = require('./config');\nconst logger = require('./logger');\n\nclass ExecutionQueue {\n  constructor() {\n    this.queue = null;\n    this.redis = null;\n    this.isConnected = false;\n  }\n\n  async initialize() {\n    try {\n      logger.info('Initializing execution queue...');\n\n      // Create Redis connection\n      this.redis = Redis.createClient({\n        host: config.redis.host,\n        port: config.redis.port,\n        password: config.redis.password,\n        db: config.redis.db,\n        maxRetriesPerRequest: config.redis.maxRetriesPerRequest,\n        retryDelayOnFailover: config.redis.retryDelayOnFailover,\n        lazyConnect: config.redis.lazyConnect,\n        family: config.redis.family,\n        keepAlive: config.redis.keepAlive,\n        connectTimeout: config.redis.connectTimeout,\n        commandTimeout: config.redis.commandTimeout\n      });\n\n      // Connect to Redis\n      await this.redis.connect();\n      logger.info('Connected to Redis');\n\n      // Create Bull queue\n      this.queue = new Queue(\n        config.queue.name,\n        {\n          redis: {\n            host: config.redis.host,\n            port: config.redis.port,\n            password: config.redis.password,\n            db: config.redis.db\n          },\n          prefix: config.queue.prefix,\n          defaultJobOptions: config.queue.defaultJobOptions,\n          settings: config.queue.settings\n        }\n      );\n\n      // Set up queue event listeners\n      this.setupEventListeners();\n\n      this.isConnected = true;\n      logger.info('Execution queue initialized successfully');\n\n    } catch (error) {\n      logger.error('Failed to initialize execution queue:', error);\n      throw error;\n    }\n  }\n\n  setupEventListeners() {\n    this.queue.on('ready', () => {\n      logger.info('Queue is ready');\n    });\n\n    this.queue.on('error', (error) => {\n      logger.error('Queue error:', error);\n    });\n\n    this.queue.on('waiting', (jobId) => {\n      logger.debug(`Job ${jobId} is waiting`);\n    });\n\n    this.queue.on('active', (job, jobPromise) => {\n      logger.info(`Job ${job.id} started processing`);\n    });\n\n    this.queue.on('completed', (job, result) => {\n      logger.info(`Job ${job.id} completed successfully`);\n    });\n\n    this.queue.on('failed', (job, err) => {\n      logger.error(`Job ${job.id} failed:`, err);\n    });\n\n    this.queue.on('stalled', (job) => {\n      logger.warn(`Job ${job.id} stalled`);\n    });\n\n    this.queue.on('progress', (job, progress) => {\n      logger.debug(`Job ${job.id} progress: ${progress}%`);\n    });\n  }\n\n  async addJob(jobData, options = {}) {\n    if (!this.isConnected) {\n      throw new Error('Queue not initialized');\n    }\n\n    try {\n      const job = await this.queue.add(jobData, {\n        ...config.queue.defaultJobOptions,\n        ...options\n      });\n\n      logger.info(`Job ${job.id} added to queue`);\n      return job;\n    } catch (error) {\n      logger.error('Failed to add job to queue:', error);\n      throw error;\n    }\n  }\n\n  async getJob(jobId) {\n    if (!this.isConnected) {\n      throw new Error('Queue not initialized');\n    }\n\n    try {\n      const job = await this.queue.getJob(jobId);\n      return job;\n    } catch (error) {\n      logger.error(`Failed to get job ${jobId}:`, error);\n      throw error;\n    }\n  }\n\n  async getJobStatus(jobId) {\n    if (!this.isConnected) {\n      throw new Error('Queue not initialized');\n    }\n\n    try {\n      const job = await this.getJob(jobId);\n      if (!job) {\n        return null;\n      }\n\n      const state = await job.getState();\n      return {\n        id: job.id,\n        state,\n        progress: job.progress(),\n        data: job.data,\n        result: job.returnvalue,\n        failedReason: job.failedReason,\n        processedOn: job.processedOn,\n        finishedOn: job.finishedOn,\n        attempts: job.attemptsMade,\n        delay: job.delay\n      };\n    } catch (error) {\n      logger.error(`Failed to get job status ${jobId}:`, error);\n      throw error;\n    }\n  }\n\n  async removeJob(jobId) {\n    if (!this.isConnected) {\n      throw new Error('Queue not initialized');\n    }\n\n    try {\n      const job = await this.getJob(jobId);\n      if (job) {\n        await job.remove();\n        logger.info(`Job ${jobId} removed from queue`);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      logger.error(`Failed to remove job ${jobId}:`, error);\n      throw error;\n    }\n  }\n\n  async getQueueStats() {\n    if (!this.isConnected) {\n      throw new Error('Queue not initialized');\n    }\n\n    try {\n      const [waiting, active, completed, failed, delayed] = await Promise.all([\n        this.queue.getWaiting(),\n        this.queue.getActive(),\n        this.queue.getCompleted(),\n        this.queue.getFailed(),\n        this.queue.getDelayed()\n      ]);\n\n      return {\n        waiting: waiting.length,\n        active: active.length,\n        completed: completed.length,\n        failed: failed.length,\n        delayed: delayed.length,\n        total: waiting.length + active.length + completed.length + failed.length + delayed.length\n      };\n    } catch (error) {\n      logger.error('Failed to get queue stats:', error);\n      throw error;\n    }\n  }\n\n  async processJobs(processor, concurrency = config.worker.concurrency) {\n    if (!this.isConnected) {\n      throw new Error('Queue not initialized');\n    }\n\n    try {\n      this.queue.process(concurrency, processor);\n      logger.info(`Started processing jobs with concurrency: ${concurrency}`);\n    } catch (error) {\n      logger.error('Failed to start job processing:', error);\n      throw error;\n    }\n  }\n\n  async pause() {\n    if (!this.isConnected) {\n      throw new Error('Queue not initialized');\n    }\n\n    try {\n      await this.queue.pause();\n      logger.info('Queue paused');\n    } catch (error) {\n      logger.error('Failed to pause queue:', error);\n      throw error;\n    }\n  }\n\n  async resume() {\n    if (!this.isConnected) {\n      throw new Error('Queue not initialized');\n    }\n\n    try {\n      await this.queue.resume();\n      logger.info('Queue resumed');\n    } catch (error) {\n      logger.error('Failed to resume queue:', error);\n      throw error;\n    }\n  }\n\n  async close() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    try {\n      await this.queue.close();\n      if (this.redis) {\n        await this.redis.quit();\n      }\n      this.isConnected = false;\n      logger.info('Queue connection closed');\n    } catch (error) {\n      logger.error('Failed to close queue connection:', error);\n      throw error;\n    }\n  }\n\n  async clean(grace = 5000) {\n    if (!this.isConnected) {\n      throw new Error('Queue not initialized');\n    }\n\n    try {\n      await this.queue.clean(grace, 'completed');\n      await this.queue.clean(grace, 'failed');\n      logger.info('Queue cleaned');\n    } catch (error) {\n      logger.error('Failed to clean queue:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = ExecutionQueue; ","size_bytes":6987},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"test_files/test-execution-integration.js":{"content":"#!/usr/bin/env node\n\n/**\n * Test script to verify CodeArena execution system integration\n * Run this to make sure the integration works properly\n */\n\nimport axios from 'axios';\n\n// Configuration\nconst BASE_URL = process.env.BASE_URL || 'http://localhost:5000';\nconst AUTH_TOKEN = process.env.AUTH_TOKEN || 'your-test-token-here';\n\n// Test cases\nconst testCases = [\n  {\n    name: 'Python Hello World',\n    code: 'print(\"Hello from Python!\")',\n    language: 'python',\n    expectedOutput: 'Hello from Python!'\n  },\n  {\n    name: 'JavaScript Console Log',\n    code: 'console.log(\"Hello from JavaScript!\");',\n    language: 'javascript',\n    expectedOutput: 'Hello from JavaScript!'\n  },\n  {\n    name: 'C++ Hello World',\n    code: '#include <iostream>\\nint main() { std::cout << \"Hello from C++!\" << std::endl; return 0; }',\n    language: 'cpp',\n    expectedOutput: 'Hello from C++!'\n  }\n];\n\nasync function testExecution() {\n  console.log('🧪 Testing CodeArena Execution Integration\\n');\n\n  // Test health endpoint\n  try {\n    console.log('📊 Checking system health...');\n    const healthResponse = await axios.get(`${BASE_URL}/api/health`);\n    console.log('✅ Health check passed');\n    console.log(`   Mode: ${healthResponse.data.services?.execution?.mode || 'unknown'}`);\n    console.log(`   Queue Available: ${healthResponse.data.services?.execution?.queueServiceAvailable || false}\\n`);\n  } catch (error) {\n    console.log('❌ Health check failed:', error.message);\n    console.log('   Make sure your server is running on', BASE_URL, '\\n');\n  }\n\n  // Test execution endpoints\n  for (const testCase of testCases) {\n    try {\n      console.log(`🔧 Testing: ${testCase.name}`);\n      \n      const response = await axios.post(`${BASE_URL}/api/execute`, {\n        code: testCase.code,\n        language: testCase.language\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${AUTH_TOKEN}`\n        },\n        timeout: 30000\n      });\n\n      const result = response.data;\n      \n      if (result.error) {\n        console.log(`❌ ${testCase.name} failed with error:`, result.error);\n      } else if (result.output && result.output.trim().includes(testCase.expectedOutput)) {\n        console.log(`✅ ${testCase.name} passed`);\n        console.log(`   Output: \"${result.output.trim()}\"`);\n        console.log(`   Runtime: ${result.runtime}ms`);\n      } else {\n        console.log(`⚠️  ${testCase.name} unexpected output:`);\n        console.log(`   Expected: \"${testCase.expectedOutput}\"`);\n        console.log(`   Got: \"${result.output || 'no output'}\"`);\n      }\n    } catch (error) {\n      console.log(`❌ ${testCase.name} failed:`, error.message);\n      if (error.response?.status === 401) {\n        console.log('   💡 Tip: Set AUTH_TOKEN environment variable with a valid JWT token');\n      }\n    }\n    console.log('');\n  }\n\n  console.log('🎯 Integration test complete!');\n  console.log('\\n📋 Next steps:');\n  console.log('   1. If all tests passed: Your integration is working! ✅');\n  console.log('   2. To test queue mode: Start execution-system and set EXECUTION_MODE=queue');\n  console.log('   3. Check logs for execution mode: [EXEC-WRAPPER] Using execution service in X mode');\n}\n\n// Run tests\ntestExecution().catch(console.error); ","size_bytes":3313},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nimport { config } from \"../config\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n// Utility function for authenticated fetch calls\nexport async function authenticatedFetch(url: string, options: RequestInit = {}) {\n  const token = localStorage.getItem('token');\n  const isRelativeApi = typeof url === 'string' && url.startsWith('/api/');\n  const fullUrl = isRelativeApi ? `${config.apiUrl}${url}` : url;\n\n  const headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    ...(token ? { 'Authorization': `Bearer ${token}` } : {}),\n    ...options.headers,\n  } as Record<string, string>;\n\n  return fetch(fullUrl, {\n    ...options,\n    headers,\n    credentials: options.credentials || 'include',\n  });\n}\n","size_bytes":851},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { StatsGrid } from \"@/components/dashboard/stats-grid\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { RecentProblems } from \"@/components/dashboard/recent-problems\";\nimport { UpcomingContests } from \"@/components/dashboard/upcoming-contests\";\nimport { Leaderboard } from \"@/components/dashboard/leaderboard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, HelpCircle } from \"lucide-react\";\nimport { MaintenanceMessage } from \"@/components/MaintenanceMessage\";\nimport AdminDashboard from \"./admin-dashboard\";\n\nfunction SubmissionsHeatmap() {\n  const { data } = useQuery({\n    queryKey: ['/api/users/me/stats'],\n    queryFn: async () => {\n      const res = await fetch('/api/users/me/stats', {\n        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\n      });\n      if (!res.ok) return { total: 0, activeDays: 0, maxStreak: 0, byDate: {} };\n      return res.json();\n    }\n  });\n\n  const byDate: Record<string, number> = data?.byDate || {};\n  const total = data?.total || 0;\n  const activeDays = data?.activeDays || 0;\n  const maxStreak = data?.maxStreak || 0;\n\n  // Build last 53 weeks grid (7x53)\n  const today = new Date();\n  const days: { key: string; count: number }[] = [];\n  for (let i = 0; i < 7 * 53; i++) {\n    const d = new Date(today);\n    d.setDate(today.getDate() - (7 * 53 - 1 - i));\n    const key = d.toISOString().slice(0, 10);\n    days.push({ key, count: byDate[key] || 0 });\n  }\n\n  // Colors: light theme -> white bg with light gray boxes; dark theme -> light blue bg and darker greens\n  const emptyClass = 'bg-gray-200 dark:bg-[#163a6b]';\n  const level = (c: number) => (\n    c === 0\n      ? emptyClass\n      : c < 2\n        ? 'bg-green-300 dark:bg-green-700'\n        : c < 4\n          ? 'bg-green-400 dark:bg-green-600'\n          : 'bg-green-600 dark:bg-green-500'\n  );\n\n  return (\n    <div className=\"bg-white dark:bg-[#072a57] border border-gray-200 dark:border-[#87a0c4]/30 rounded-xl p-4\">\n      <div className=\"flex items-baseline justify-between mb-3 text-gray-900 dark:text-white\">\n        <div className=\"text-lg\"><span className=\"font-bold\">{total}</span> submissions in the past one year</div>\n        <div className=\"text-sm text-gray-700 dark:text-blue-100\">Total active days: <span className=\"font-bold\">{activeDays}</span> &nbsp; Max streak: <span className=\"font-bold\">{maxStreak}</span></div>\n      </div>\n      {/* Heatmap grid with small gaps inside months and larger gap at month boundaries */}\n      <div className=\"flex w-full\">\n        {(() => {\n          const cols: JSX.Element[] = [];\n          let prevMonth = -1;\n          for (let col = 0; col < 53; col++) {\n            const weekStart = new Date(today);\n            weekStart.setDate(today.getDate() - (7 * 53 - 1 - col * 7));\n            const month = weekStart.getMonth();\n            const isNewMonth = month !== prevMonth;\n            prevMonth = month;\n            cols.push(\n              <div key={col} className={`flex flex-col gap-1 ${col < 52 ? (isNewMonth ? 'mr-4' : 'mr-1') : ''}`}>\n                {Array.from({ length: 7 }).map((__, row) => {\n                  const idx = col * 7 + row;\n                  const cell = days[idx];\n                  return <div key={row} className={`w-3 h-3 rounded-sm ${level(cell.count)}`} title={`${cell.key}: ${cell.count} submissions`}></div>\n                })}\n              </div>\n            );\n          }\n          return cols;\n        })()}\n      </div>\n      {/* Month labels */}\n      <div className=\"flex w-full mt-2 text-xs text-gray-600 dark:text-blue-100\">\n        {(() => {\n          const labels: JSX.Element[] = [];\n          let prevMonth = -1;\n          for (let col = 0; col < 53; col++) {\n            const weekStart = new Date(today);\n            weekStart.setDate(today.getDate() - (7 * 53 - 1 - col * 7));\n            const month = weekStart.getMonth();\n            const isNewMonth = month !== prevMonth;\n            prevMonth = month;\n            const label = isNewMonth ? weekStart.toLocaleString('default', { month: 'short' }) : '';\n            labels.push(<div key={col} className={`w-3 ${col < 52 ? (isNewMonth ? 'mr-4' : 'mr-1') : ''}`}>{label}</div>);\n          }\n          return labels;\n        })()}\n      </div>\n    </div>\n  );\n}\n\nfunction UserDashboard({ user }: { user: any }) {\n  return (\n    <div>\n      {/* Maintenance Message Banner */}\n      <MaintenanceMessage />\n      \n      <div className=\"p-6\">\n        {/* Header Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n            Welcome back, {user?.firstName || \"student\"}!\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Continue your coding journey and track your progress.\n          </p>\n        </div>\n\n      {/* Stats Grid */}\n      <StatsGrid />\n\n      <div className=\"mb-8\">\n        <SubmissionsHeatmap />\n      </div>\n\n      {/* Two Column Layout */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Recent Activity */}\n        {/* <div className=\"lg:col-span-2\">\n          <RecentProblems />\n        </div> */}\n\n        {/* Sidebar Content */}\n        {/* <div className=\"space-y-6\">\n          <UpcomingContests />\n          <Leaderboard />\n        </div> */}\n      </div>\n\n        {/* Floating Action Buttons */}\n        {/* <div className=\"fixed bottom-6 right-6 space-y-3\">\n          <Button \n            size=\"icon\"\n            className=\"w-12 h-12 bg-green-500 hover:bg-green-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all hover:scale-105\"\n          >\n            <Plus className=\"h-6 w-6\" />\n          </Button>\n          <Button \n            size=\"icon\"\n            className=\"w-12 h-12 bg-blue-500 hover:bg-blue-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all hover:scale-105\"\n          >\n            <HelpCircle className=\"h-6 w-6\" />\n          </Button>\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default function Dashboard() {\n  const [location, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Handle authentication data from URL parameters (Google OAuth callback)\n    const params = new URLSearchParams(window.location.search);\n    const token = params.get('token');\n    const userStr = params.get('user');\n\n    if (token && userStr) {\n      try {\n        const userData = JSON.parse(decodeURIComponent(userStr));\n        // Store auth data\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(userData));\n        \n        // Clean up URL parameters\n        const cleanUrl = window.location.pathname;\n        window.history.replaceState({}, document.title, cleanUrl);\n        \n        // Show success message\n        toast({\n          title: \"Successfully signed in\",\n          description: `Welcome back${userData.firstName ? ', ' + userData.firstName : ''}!`\n        });\n      } catch (error) {\n        console.error('[DEBUG] Error processing auth data:', error);\n      }\n    }\n  }, []); // Run only once on mount\n\n  useEffect(() => {\n    // Redirect if not authenticated\n    if (!isAuthenticated) {\n      setLocation('/login');\n    }\n  }, [isAuthenticated, setLocation]); // Only depend on isAuthenticated and setLocation\n\n  if (!isAuthenticated || !user) {\n    return null;\n  }\n\n  // Render different dashboards based on user role\n  if (user.role === 'admin') {\n    return <AdminDashboard />;\n  }\n\n  return <UserDashboard user={user} />;\n}\n","size_bytes":7771},"client/src/services/authService.ts":{"content":"import { apiClient } from '@/lib/apiClient';\n\nexport interface AuthResponse {\n  token: string;\n  user: any;\n}\n\nexport const authService = {\n  login: (email: string, password: string) =>\n    apiClient.post<AuthResponse>('/api/auth/login', { email, password }),\n  signup: (email: string, password: string) =>\n    apiClient.post<AuthResponse>('/api/auth/signup', { email, password }),\n  me: () => apiClient.get<any>('/api/auth/user'),\n  logout: async () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n}; ","size_bytes":538},"server/nixpacks.toml":{"content":"providers = [\"node\"] ","size_bytes":21},"server/middleware/maintenance.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { User } from '../models/User';\nimport { MaintenanceConfig } from '../models/MaintenanceConfig';\nimport mongoose from 'mongoose';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n\n// Check if database is connected\nfunction isDatabaseConnected(): boolean {\n  return mongoose.connection.readyState === 1;\n}\n\n// Cache for maintenance config to avoid database calls on every request\nlet maintenanceConfigCache: any = {\n  isMaintenanceMode: false,\n  maintenanceFrom: '',\n  maintenanceTo: '',\n  isMaintenanceActive: false,\n  isPreMaintenanceWarning: false,\n  lastUpdated: new Date()\n};\n\n// Cache refresh interval (5 seconds)\nconst CACHE_REFRESH_INTERVAL = 1000; // 1 second for faster updates\nlet lastCacheRefresh = 0;\n\n// Initialize maintenance config from database\nasync function initializeMaintenanceConfig() {\n  try {\n    let config = await MaintenanceConfig.findOne().lean().exec();\n    \n    if (!config) {\n      // Create default config if none exists\n      const newConfig = await MaintenanceConfig.create({\n        isMaintenanceMode: false,\n        maintenanceFrom: '',\n        maintenanceTo: '',\n        isMaintenanceActive: false,\n        isPreMaintenanceWarning: false,\n        updatedBy: 'system'\n      });\n      config = newConfig.toObject();\n    }\n    \n    maintenanceConfigCache = {\n      isMaintenanceMode: config.isMaintenanceMode,\n      maintenanceFrom: config.maintenanceFrom,\n      maintenanceTo: config.maintenanceTo,\n      isMaintenanceActive: config.isMaintenanceActive,\n      isPreMaintenanceWarning: config.isPreMaintenanceWarning,\n      lastUpdated: config.lastUpdated\n    };\n  } catch (error) {\n    console.error('Error initializing maintenance config:', error);\n  }\n}\n\n// Refresh cache from database\nasync function refreshMaintenanceConfig() {\n  const now = Date.now();\n  if (now - lastCacheRefresh < CACHE_REFRESH_INTERVAL) {\n    return; // Don't refresh too frequently\n  }\n  \n  try {\n    if (!isDatabaseConnected() || !MaintenanceConfig) {\n      return;\n    }\n    \n    const config = await MaintenanceConfig.findOne().lean().exec();\n    \n    if (config) {\n      maintenanceConfigCache = {\n        isMaintenanceMode: config.isMaintenanceMode,\n        maintenanceFrom: config.maintenanceFrom,\n        maintenanceTo: config.maintenanceTo,\n        isMaintenanceActive: config.isMaintenanceActive,\n        isPreMaintenanceWarning: config.isPreMaintenanceWarning,\n        lastUpdated: config.lastUpdated\n      };\n      lastCacheRefresh = now;\n    }\n  } catch (error) {\n    console.error('Error refreshing maintenance config:', error);\n  }\n}\n\n// Calculate maintenance status based on current time\nfunction calculateMaintenanceStatus(): { isActive: boolean; isWarning: boolean } {\n  // If maintenance mode is off, return inactive\n  if (!maintenanceConfigCache.isMaintenanceMode) {\n    return { isActive: false, isWarning: false };\n  }\n\n  // If maintenance mode is on but no times set, return inactive\n  if (!maintenanceConfigCache.maintenanceFrom || !maintenanceConfigCache.maintenanceTo) {\n    return { isActive: false, isWarning: false };\n  }\n\n  const now = new Date();\n  const fromTime = new Date(`${now.toDateString()} ${maintenanceConfigCache.maintenanceFrom}`);\n  const toTime = new Date(`${now.toDateString()} ${maintenanceConfigCache.maintenanceTo}`);\n  \n  // If maintenance times are for tomorrow\n  if (fromTime <= now) {\n    fromTime.setDate(fromTime.getDate() + 1);\n    toTime.setDate(toTime.getDate() + 1);\n  }\n\n  const minutesUntilStart = Math.floor((fromTime.getTime() - now.getTime()) / (1000 * 60));\n  const minutesUntilEnd = Math.floor((toTime.getTime() - now.getTime()) / (1000 * 60));\n\n  // Check if we're in pre-maintenance warning period (30 minutes before)\n  const isWarning = minutesUntilStart <= 30 && minutesUntilStart > 0;\n  \n  // Check if we're in active maintenance period\n  // For immediate activation: if maintenance mode is on and times are set, make it active\n  const isActive = (minutesUntilStart <= 0 && minutesUntilEnd > 0) || \n                  (maintenanceConfigCache.isMaintenanceMode && maintenanceConfigCache.maintenanceFrom && maintenanceConfigCache.maintenanceTo);\n\n  return { isActive, isWarning };\n}\n\n// Format time for display\nfunction formatTime(timeString: string): string {\n  if (!timeString) return '';\n  const [hours, minutes] = timeString.split(':');\n  const hour = parseInt(hours);\n  const ampm = hour >= 12 ? 'PM' : 'AM';\n  const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n  return `${displayHour}:${minutes} ${ampm}`;\n}\n\n// Check if user is admin\nasync function isAdminUser(req: Request): Promise<boolean> {\n  try {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return false;\n    }\n\n    const token = authHeader.split(' ')[1];\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const userId = decoded.id || decoded.sub;\n\n    if (!userId) {\n      return false;\n    }\n\n    const user = await User.findById(userId).select('role').lean().exec();\n    return user?.role === 'admin';\n  } catch (error) {\n    return false;\n  }\n}\n\n// Main maintenance middleware\nexport async function maintenanceMiddleware(req: Request, res: Response, next: NextFunction) {\n  // Ensure maintenance config is initialized\n  if (!maintenanceConfigCache.lastUpdated) {\n    console.log('Maintenance config not initialized, initializing now...');\n    try {\n      await initializeMaintenanceConfig();\n    } catch (error) {\n      console.error('Failed to initialize maintenance config in middleware:', error);\n    }\n  }\n  \n  // Refresh cache periodically\n  await refreshMaintenanceConfig();\n  \n  const { isActive, isWarning } = calculateMaintenanceStatus();\n  \n  // Update cache with calculated values\n  maintenanceConfigCache.isMaintenanceActive = isActive;\n  maintenanceConfigCache.isPreMaintenanceWarning = isWarning;\n\n  // If maintenance is active, check if user is admin\n  if (isActive) {\n    // Allow admin routes, health check, maintenance status, and admin users to pass through\n    if (req.path.startsWith('/api/admin') || \n        req.path.startsWith('/admin') || \n        req.path === '/api/health' ||\n        req.path === '/api/admin/maintenance/status') {\n      return next();\n    }\n\n    const isAdmin = await isAdminUser(req);\n    console.log('Maintenance Middleware Debug:', {\n      path: req.path,\n      isAdmin,\n      isActive,\n      userAgent: req.headers['user-agent']\n    });\n    \n    if (isAdmin) {\n      console.log('Admin user bypassing maintenance mode');\n      return next();\n    }\n\n    // Block non-admin users with maintenance message\n    return res.status(503).json({\n      error: 'Service Unavailable',\n      message: 'We are upgrading a few things and will be back between ' + \n               formatTime(maintenanceConfigCache.maintenanceFrom) + ' and ' + \n               formatTime(maintenanceConfigCache.maintenanceTo) + '.',\n      maintenance: {\n        isActive: true,\n        from: maintenanceConfigCache.maintenanceFrom,\n        to: maintenanceConfigCache.maintenanceTo,\n        estimatedEnd: maintenanceConfigCache.maintenanceTo\n      }\n    });\n  }\n\n  // Add warning headers if in warning period\n  if (isWarning) {\n    res.set({\n      'X-Maintenance-Warning': 'true',\n      'X-Maintenance-Start': maintenanceConfigCache.maintenanceFrom,\n      'X-Maintenance-End': maintenanceConfigCache.maintenanceTo\n    });\n  }\n\n  next();\n}\n\n// Setup maintenance API routes\nexport function setupMaintenanceRoutes(app: any) {\n  // Health check endpoint\n  app.get('/api/health', async (req: Request, res: Response) => {\n    await refreshMaintenanceConfig();\n    const { isActive, isWarning } = calculateMaintenanceStatus();\n    \n    // Always return 200 status, but include maintenance information\n    res.json({\n      status: isActive ? 'maintenance' : 'healthy',\n      maintenance: {\n        isActive: isActive,\n        isWarning: isWarning,\n        isMaintenanceMode: maintenanceConfigCache.isMaintenanceMode,\n        from: maintenanceConfigCache.maintenanceFrom,\n        to: maintenanceConfigCache.maintenanceTo\n      },\n      message: isActive ? \n        'We are upgrading a few things and will be back between ' + \n        formatTime(maintenanceConfigCache.maintenanceFrom) + ' and ' + \n        formatTime(maintenanceConfigCache.maintenanceTo) + '.' : \n        'Service is running normally'\n    });\n  });\n\n  // Get maintenance status (admin only)\n  app.get('/api/admin/maintenance/status', async (req: Request, res: Response) => {\n    try {\n      await refreshMaintenanceConfig();\n      const { isActive, isWarning } = calculateMaintenanceStatus();\n      \n      // Ensure we have valid cache data\n      if (!maintenanceConfigCache.lastUpdated) {\n        maintenanceConfigCache = {\n          isMaintenanceMode: false,\n          maintenanceFrom: '',\n          maintenanceTo: '',\n          isMaintenanceActive: false,\n          isPreMaintenanceWarning: false,\n          lastUpdated: new Date()\n        };\n      }\n      \n      const response = {\n        isMaintenanceMode: maintenanceConfigCache.isMaintenanceMode,\n        maintenanceFrom: maintenanceConfigCache.maintenanceFrom,\n        maintenanceTo: maintenanceConfigCache.maintenanceTo,\n        isMaintenanceActive: isActive,\n        isPreMaintenanceWarning: isWarning,\n        lastUpdated: maintenanceConfigCache.lastUpdated\n      };\n      \n      res.json(response);\n    } catch (error) {\n      console.error('Error fetching maintenance status:', error);\n      res.status(500).json({ \n        error: 'Failed to fetch maintenance status',\n        details: error.message\n      });\n    }\n  });\n\n\n  // Update maintenance configuration (admin only)\n  app.post('/api/admin/maintenance/config', async (req: Request, res: Response) => {\n    try {\n      const { isMaintenanceMode, maintenanceFrom, maintenanceTo } = req.body;\n      \n      // Calculate new status\n      const { isActive, isWarning } = calculateMaintenanceStatus();\n      \n      // Update database with proper data types\n      const updateData = {\n        isMaintenanceMode: Boolean(isMaintenanceMode),\n        maintenanceFrom: isMaintenanceMode ? (maintenanceFrom || '') : '',\n        maintenanceTo: isMaintenanceMode ? (maintenanceTo || '') : '',\n        isMaintenanceActive: Boolean(isActive),\n        isPreMaintenanceWarning: Boolean(isWarning),\n        lastUpdated: new Date(),\n        updatedBy: (req as any).user?.id || 'unknown'\n      };\n      \n      const config = await MaintenanceConfig.findOneAndUpdate(\n        {},\n        updateData,\n        { upsert: true, new: true }\n      );\n      \n      // Update cache\n      maintenanceConfigCache = {\n        isMaintenanceMode: config.isMaintenanceMode,\n        maintenanceFrom: config.maintenanceFrom,\n        maintenanceTo: config.maintenanceTo,\n        isMaintenanceActive: isActive,\n        isPreMaintenanceWarning: isWarning,\n        lastUpdated: config.lastUpdated\n      };\n      \n      res.json({\n        success: true,\n        message: 'Maintenance configuration updated successfully',\n        config: {\n          isMaintenanceMode: config.isMaintenanceMode,\n          maintenanceFrom: config.maintenanceFrom,\n          maintenanceTo: config.maintenanceTo,\n          isMaintenanceActive: isActive,\n          isPreMaintenanceWarning: isWarning\n        }\n      });\n    } catch (error) {\n      console.error('Error updating maintenance config:', error);\n      res.status(500).json({ \n        error: 'Failed to update maintenance configuration',\n        details: error.message\n      });\n    }\n  });\n\n  // Initialize maintenance config on startup (after database connection)\n  // This will be called after the database is connected\n}\n\n// Initialize maintenance config after database connection\nexport async function initializeMaintenanceAfterDB() {\n  try {\n    console.log('Initializing maintenance config after database connection...');\n    await initializeMaintenanceConfig();\n    console.log('Maintenance config initialized successfully');\n  } catch (error) {\n    console.error('Error initializing maintenance config after DB connection:', error);\n    \n    // Retry after a delay\n    setTimeout(async () => {\n      try {\n        console.log('Retrying maintenance config initialization...');\n        await initializeMaintenanceConfig();\n        console.log('Maintenance config initialized on retry');\n      } catch (retryError) {\n        console.error('Retry failed for maintenance config initialization:', retryError);\n      }\n    }, 5000); // Retry after 5 seconds\n  }\n}\n\n// Export functions for external use\nexport { maintenanceConfigCache as getMaintenanceConfig, refreshMaintenanceConfig };","size_bytes":12737},"server/models/VersionHistory.ts":{"content":"import mongoose, { Document, Schema } from 'mongoose';\n\nexport type VersionEntityType =\n  | 'problem'\n  | 'problemSet'\n  | 'course'\n  | 'courseModule'\n  | 'user'\n  | 'contest'\n  | 'enrollment'\n  | 'announcement'\n  | 'other';\n\nexport interface IVersionHistory {\n  action: string;\n  description?: string;\n  entityType: VersionEntityType;\n  entityId?: string;\n  metadata?: Record<string, any>;\n  adminId: mongoose.Types.ObjectId;\n  adminName?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface IVersionHistoryDocument extends IVersionHistory, Document {\n  _id: mongoose.Types.ObjectId;\n}\n\nconst VersionHistorySchema = new Schema<IVersionHistoryDocument>(\n  {\n    action: { type: String, required: true, trim: true },\n    description: { type: String, trim: true },\n    entityType: {\n      type: String,\n      enum: ['problem', 'problemSet', 'course', 'courseModule', 'user', 'contest', 'enrollment', 'announcement', 'other'],\n      required: true,\n    },\n    entityId: { type: String },\n    metadata: { type: Schema.Types.Mixed },\n    adminId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n    adminName: { type: String },\n  },\n  { timestamps: true }\n);\n\nVersionHistorySchema.index({ createdAt: -1 });\nVersionHistorySchema.index({ entityType: 1, createdAt: -1 });\nVersionHistorySchema.index({ adminId: 1, createdAt: -1 });\n\nexport const VersionHistory = mongoose.model<IVersionHistoryDocument>('VersionHistory', VersionHistorySchema); ","size_bytes":1456},"execution-system/README.md":{"content":"# 🚀 CodeArena Scalable Multi-Language Code Execution System\n\nA production-ready, cloud-native code execution system built with Docker & Kubernetes, designed to handle **10,000+ concurrent users** safely and efficiently.\n\n## 🎯 **System Overview**\n\nThis system replaces the simple synchronous code execution with a distributed, scalable architecture:\n\n```\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│   Frontend      │───▶│   API Gateway   │───▶│   Redis Queue   │\n│   (React)       │    │   (Express)     │    │   (Bull.js)     │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n                                                        │\n                        ┌─────────────────┐            │\n                        │   Kubernetes    │◀───────────┘\n                        │   Worker Pods   │\n                        │                 │\n                        │  ┌──────────┐   │\n                        │  │  Python  │   │\n                        │  │ Container│   │\n                        │  └──────────┘   │\n                        │  ┌──────────┐   │\n                        │  │    C++   │   │\n                        │  │ Container│   │\n                        │  └──────────┘   │\n                        │  ┌──────────┐   │\n                        │  │   Java   │   │\n                        │  │ Container│   │\n                        │  └──────────┘   │\n                        └─────────────────┘\n```\n\n## 🏗️ **Architecture Components**\n\n### **1. Minimal Docker Images (<3MB)**\n- **🐍 Python**: Alpine-based with secure execution environment\n- **⚡ JavaScript**: Node.js 18 with VM isolation\n- **🔧 C**: GCC compiler with static linking\n- **➕ C++**: G++ with C++17 support\n- **☕ Java**: OpenJDK 11 with heap management\n\n### **2. Distributed Job Queue (Redis + Bull.js)**\n- Asynchronous job processing\n- Priority queues for test cases\n- Automatic retry with exponential backoff\n- Job progress tracking\n- Queue depth monitoring\n\n### **3. Worker Executors**\n- Docker-in-Docker execution\n- Resource limits (CPU, Memory, Time)\n- Network isolation\n- Parallel test case execution\n- Auto-scaling based on queue depth\n\n### **4. Kubernetes Orchestration**\n- Horizontal Pod Autoscaler (HPA)\n- Rolling updates with zero downtime\n- Resource quotas and limits\n- Health checks and monitoring\n- Node affinity for performance\n\n### **5. Monitoring & Logging**\n- Prometheus metrics collection\n- Grafana dashboards\n- Centralized logging\n- Real-time alerting\n- Performance analytics\n\n## 📦 **Deliverables**\n\n### **Docker Images**\n```bash\n# Language execution containers\ncodearena/python-executor:latest     # <3MB\ncodearena/js-executor:latest         # <3MB\ncodearena/c-executor:latest          # <3MB\ncodearena/cpp-executor:latest        # <3MB\ncodearena/java-executor:latest       # <3MB\n\n# System services\ncodearena/execution-api:latest       # API Gateway\ncodearena/execution-worker:latest    # Worker Executor\n```\n\n### **Kubernetes Manifests**\n```bash\nk8s/\n├── namespace.yaml           # Isolated namespace\n├── configmap.yaml          # Configuration\n├── secret.yaml             # Sensitive data\n├── redis.yaml              # Queue backend\n├── api.yaml                # API deployment + HPA\n├── worker.yaml             # Worker deployment + HPA\n└── prometheus.yaml         # Monitoring stack\n```\n\n### **API Endpoints**\n```bash\nPOST /api/execute           # Submit code execution\nGET  /api/jobs/:jobId       # Get job status  \nDELETE /api/jobs/:jobId     # Cancel job\nGET  /api/stats             # Queue statistics\nGET  /api/languages         # Supported languages\nGET  /health                # Health check\n```\n\n### **Scripts & Tools**\n```bash\nscripts/build.sh            # Build all images\nk8s/generated/deploy.sh     # Deploy to Kubernetes\nk8s/generated/uninstall.sh  # Clean uninstall\ndocker-compose.yml          # Local development\n```\n\n## 🚀 **Quick Start**\n\n### **1. Local Development**\n```bash\n# Clone and setup\ngit clone <repository>\ncd execution-system\n\n# Build images\n./scripts/build.sh\n\n# Run locally\ndocker-compose up\n```\n\n### **2. Kubernetes Deployment**\n```bash\n# Build and push images\nDOCKER_REGISTRY=your-registry ./scripts/build.sh\n\n# Deploy to cluster\ncd k8s/generated\n./deploy.sh\n\n# Verify deployment\nkubectl get pods -n codearena-execution\n```\n\n### **3. Test the System**\n```bash\n# Submit a Python job\ncurl -X POST http://localhost:3001/api/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"code\": \"print(\\\"Hello, World!\\\")\",\n    \"language\": \"python\"\n  }'\n\n# Response: {\"jobId\": \"uuid\", \"status\": \"queued\"}\n\n# Check job status\ncurl http://localhost:3001/api/jobs/uuid\n```\n\n## 📊 **Scaling Strategy**\n\n### **Horizontal Scaling**\n- **API Pods**: 3-20 replicas based on CPU/Memory\n- **Worker Pods**: 5-50 replicas based on queue depth\n- **Custom Metrics**: Queue length triggers scaling\n\n### **Resource Limits**\n```yaml\n# Per container limits\nCPU: 0.5 cores\nMemory: 128MB\nTime: 10 seconds\nPIDs: 64 processes\n```\n\n### **Performance Optimizations**\n- **Pre-warmed Containers**: Keep containers ready\n- **Image Caching**: Local registry for faster pulls\n- **Connection Pooling**: Redis connection reuse\n- **Batch Processing**: Multiple test cases per job\n\n### **10,000 Concurrent Users Support**\n```bash\n# Scaling calculations\nUsers: 10,000\nAvg Jobs/User/Hour: 60\nPeak Load: 167 jobs/second\n\n# Required capacity\nAPI Pods: 15 (11 RPS each)\nWorker Pods: 25 (7 jobs/second each)\nRedis: 1 (handles 100K ops/sec)\n```\n\n## 🔒 **Security Features**\n\n### **Container Isolation**\n- Non-root execution\n- No network access\n- Read-only filesystem\n- Resource limits\n- Capability dropping\n\n### **API Security**\n- Rate limiting (100 req/min/IP)\n- Input validation\n- JWT authentication\n- CORS protection\n- Request/Response logging\n\n### **Kubernetes Security**\n- RBAC policies\n- Network policies\n- Pod security standards\n- Secret management\n- Image scanning\n\n## 📈 **Monitoring & Alerting**\n\n### **Metrics Collected**\n- API request rate & latency\n- Queue depth & processing time\n- Container resource usage\n- Error rates & failures\n- Job execution statistics\n\n### **Alerts Configured**\n- High error rate (>5%)\n- High latency (>2s)\n- Queue backlog (>100 jobs)\n- Pod failures\n- Resource exhaustion\n\n### **Dashboards**\n- System overview\n- Performance metrics\n- Error tracking\n- Resource utilization\n- Language usage statistics\n\n## 🧪 **Testing Strategy**\n\n### **Load Testing**\n```bash\n# Simulate 1000 concurrent users\nartillery run load-test.yml\n\n# Results target:\n# - 99th percentile latency: <2s\n# - Error rate: <0.1%\n# - Throughput: 500+ RPS\n```\n\n### **Integration Tests**\n- All language executions\n- Test case validation\n- Error handling\n- Security boundaries\n- Resource limits\n\n## 🔧 **Development & Operations**\n\n### **Code Structure**\n```bash\nexecution-system/\n├── docker/                 # Language containers\n│   ├── python/\n│   ├── javascript/\n│   ├── c/\n│   ├── cpp/\n│   └── java/\n├── queue/                   # API & Queue system\n│   ├── src/\n│   │   ├── config.js\n│   │   ├── queue.js\n│   │   ├── server.js\n│   │   └── logger.js\n│   └── package.json\n├── workers/                 # Worker executors\n│   └── worker.js\n├── k8s/                     # Kubernetes manifests\n├── monitoring/              # Prometheus & Grafana\n└── scripts/                 # Build & deployment\n```\n\n### **Configuration Management**\n- Environment-based config\n- Kubernetes ConfigMaps\n- Secret management\n- Feature flags\n- Runtime tuning\n\n### **Deployment Pipeline**\n1. Code commit triggers build\n2. Docker images built & tested\n3. Security scanning\n4. Push to registry\n5. Deploy to staging\n6. Integration tests\n7. Production deployment\n8. Health verification\n\n## 🎛️ **Configuration Options**\n\n### **Execution Limits**\n```bash\nTIME_LIMIT=10              # seconds\nMEMORY_LIMIT=128m          # megabytes  \nOUTPUT_LIMIT=64k           # kilobytes\nCOMPILE_TIME_LIMIT=30      # seconds\nMAX_CODE_SIZE=65536        # bytes\n```\n\n### **Scaling Parameters**\n```bash\nWORKER_CONCURRENCY=5       # jobs per worker\nAPI_RATE_LIMIT=100        # requests per minute\nQUEUE_MAX_DEPTH=1000      # max pending jobs\nAUTO_SCALE_TARGET_CPU=70  # percent\n```\n\n### **Monitoring Settings**\n```bash\nMETRICS_ENABLED=true\nLOG_LEVEL=info\nPROMETHEUS_RETENTION=30d\nALERT_WEBHOOK_URL=slack://...\n```\n\n## 🚨 **Troubleshooting**\n\n### **Common Issues**\n```bash\n# Check pod status\nkubectl get pods -n codearena-execution\n\n# View logs\nkubectl logs -f deployment/execution-api -n codearena-execution\n\n# Check queue depth\nkubectl port-forward svc/redis-service 6379:6379 -n codearena-execution\nredis-cli LLEN codearena:code-execution\n\n# Monitor metrics\nkubectl port-forward svc/prometheus-service 9090:9090 -n codearena-execution\n```\n\n### **Performance Tuning**\n- Adjust worker concurrency\n- Scale container resources\n- Optimize Docker images\n- Tune Redis settings\n- Configure node affinity\n\n## 📝 **API Integration Example**\n\n### **Replace Current Code Execution**\n\n```typescript\n// OLD: Direct execution\nconst result = await executeCode(code, language, input);\n\n// NEW: Queue-based execution\nconst jobResponse = await fetch('/api/execute', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ code, language, input, testCases })\n});\n\nconst { jobId } = await jobResponse.json();\n\n// Poll for results\nconst result = await pollJobStatus(jobId);\n\nasync function pollJobStatus(jobId: string) {\n  while (true) {\n    const response = await fetch(`/api/jobs/${jobId}`);\n    const status = await response.json();\n    \n    if (status.state === 'completed') {\n      return status.result;\n    } else if (status.state === 'failed') {\n      throw new Error(status.failedReason);\n    }\n    \n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n}\n```\n\n## 🎯 **Production Checklist**\n\n- [ ] **Security**: All containers run as non-root\n- [ ] **Scaling**: HPA configured for API and workers  \n- [ ] **Monitoring**: Prometheus + Grafana deployed\n- [ ] **Logging**: Centralized log aggregation\n- [ ] **Backup**: Redis data persistence\n- [ ] **Network**: Ingress controller configured\n- [ ] **SSL**: TLS certificates installed\n- [ ] **Secrets**: All sensitive data in Kubernetes secrets\n- [ ] **Testing**: Load tests passing\n- [ ] **Documentation**: Runbooks and procedures\n\n## 🏆 **Success Metrics**\n\n- ✅ **Scalability**: Supports 10,000+ concurrent users\n- ✅ **Performance**: <2s 99th percentile latency\n- ✅ **Reliability**: 99.9% uptime SLA\n- ✅ **Security**: Container isolation + network policies\n- ✅ **Efficiency**: <3MB Docker images\n- ✅ **Observability**: Full metrics and alerting\n- ✅ **Maintainability**: GitOps deployment pipeline\n\n---\n\n**🚀 Ready to scale your CodeArena platform to enterprise levels!**\n\nFor support and questions, refer to the troubleshooting section or check the monitoring dashboards. ","size_bytes":11686},"server/seed-problems.js":{"content":"import { MongoClient, ObjectId } from 'mongodb';\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/codearena';\n\nasync function seedProblems() {\n  const client = new MongoClient(MONGODB_URI);\n  \n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n    \n    const db = client.db();\n    const problemsCollection = db.collection('problems');\n    \n    // Clear existing problems\n    await problemsCollection.deleteMany({});\n    console.log('Cleared existing problems');\n    \n    // Sample problems that match the submissions\n    const problems = [\n      {\n        id: 1,\n        title: \"Reverse String\",\n        description: \"Write a function that reverses a string. The input string is given as an array of characters.\",\n        difficulty: \"easy\",\n        tags: [\"strings\", \"arrays\"],\n        constraints: \"1 <= s.length <= 10^5\",\n        examples: [\n          {\n            input: '[\"h\",\"e\",\"l\",\"l\",\"o\"]',\n            output: '[\"o\",\"l\",\"l\",\"e\",\"h\"]',\n            explanation: \"Reverse the array in-place\"\n          }\n        ],\n        testCases: [\n          {\n            input: '[\"h\",\"e\",\"l\",\"l\",\"o\"]',\n            expectedOutput: '[\"o\",\"l\",\"l\",\"e\",\"h\"]',\n            isHidden: false\n          }\n        ],\n        starterCode: {\n          javascript: 'function reverseString(s) {\\n  // Your code here\\n}',\n          python: 'def reverseString(s):\\n    # Your code here\\n    pass',\n          java: 'class Solution {\\n    public void reverseString(char[] s) {\\n        // Your code here\\n    }\\n}',\n          cpp: 'class Solution {\\npublic:\\n    void reverseString(vector<char>& s) {\\n        // Your code here\\n    }\\n};'\n        },\n        timeLimit: 1000,\n        memoryLimit: 256,\n        isPublic: true,\n        createdBy: \"admin\",\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 2,\n        title: \"Valid Parentheses\",\n        description: \"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\",\n        difficulty: \"medium\",\n        tags: [\"stack\", \"strings\"],\n        constraints: \"1 <= s.length <= 10^4\",\n        examples: [\n          {\n            input: '()',\n            output: 'true',\n            explanation: \"Simple valid parentheses\"\n          }\n        ],\n        testCases: [\n          {\n            input: '()',\n            expectedOutput: 'true',\n            isHidden: false\n          }\n        ],\n        starterCode: {\n          javascript: 'function isValid(s) {\\n  // Your code here\\n}',\n          python: 'def isValid(s):\\n    # Your code here\\n    pass',\n          java: 'class Solution {\\n    public boolean isValid(String s) {\\n        // Your code here\\n    }\\n}',\n          cpp: 'class Solution {\\npublic:\\n    bool isValid(string s) {\\n        // Your code here\\n    }\\n};'\n        },\n        timeLimit: 1000,\n        memoryLimit: 256,\n        isPublic: true,\n        createdBy: \"admin\",\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 3,\n        title: \"String Reversal\",\n        description: \"Write a function that reverses a string using Python string slicing.\",\n        difficulty: \"easy\",\n        tags: [\"strings\", \"python\"],\n        constraints: \"1 <= len(s) <= 10^5\",\n        examples: [\n          {\n            input: '\"hello\"',\n            output: '\"olleh\"',\n            explanation: \"Reverse the string using slicing\"\n          }\n        ],\n        testCases: [\n          {\n            input: '\"hello\"',\n            expectedOutput: '\"olleh\"',\n            isHidden: false\n          }\n        ],\n        starterCode: {\n          python: 'def reverseString(s):\\n    # Your code here\\n    pass',\n          javascript: 'function reverseString(s) {\\n  // Your code here\\n}',\n          java: 'class Solution {\\n    public String reverseString(String s) {\\n        // Your code here\\n    }\\n}',\n          cpp: 'class Solution {\\npublic:\\n    string reverseString(string s) {\\n        // Your code here\\n    }\\n};'\n        },\n        timeLimit: 1000,\n        memoryLimit: 256,\n        isPublic: true,\n        createdBy: \"admin\",\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n    \n    // Insert problems\n    const result = await problemsCollection.insertMany(problems);\n    console.log(`Inserted ${result.insertedCount} problems`);\n    \n    console.log('Problems seeded successfully!');\n  } catch (error) {\n    console.error('Error seeding problems:', error);\n  } finally {\n    await client.close();\n  }\n}\n\nseedProblems();","size_bytes":4583},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/dashboard/upcoming-contests.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Clock, Users, Trophy } from \"lucide-react\";\n\nexport function UpcomingContests() {\n  const { data: contests, isLoading } = useQuery({\n    queryKey: [\"/api/contests\"],\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Upcoming Contests</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(2)].map((_, i) => (\n              <div key={i} className=\"animate-pulse border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n                  <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/3\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Filter upcoming contests (mock data for now since we don't have real contest dates)\n  const upcomingContests = [\n    {\n      id: 1,\n      title: \"Weekly Contest 127\",\n      date: \"Dec 15, 2024\",\n      time: \"2:00 PM EST\",\n      participants: \"1,247 registered\",\n      type: \"weekly\",\n    },\n    {\n      id: 2,\n      title: \"Monthly Challenge\",\n      date: \"Dec 20, 2024\",\n      prize: \"$500 Prize Pool\",\n      type: \"monthly\",\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader className=\"border-b border-gray-200 dark:border-gray-800\">\n        <CardTitle>Upcoming Contests</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          {upcomingContests.map((contest) => (\n            <div key={contest.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n              <h3 className=\"font-medium text-gray-900 dark:text-white mb-2\">\n                {contest.title}\n              </h3>\n              <div className=\"space-y-2 text-sm\">\n                {contest.date && (\n                  <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    <span>{contest.date}</span>\n                  </div>\n                )}\n                {contest.time && (\n                  <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    <span>{contest.time}</span>\n                  </div>\n                )}\n                {contest.participants && (\n                  <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                    <Users className=\"w-4 h-4 mr-2\" />\n                    <span>{contest.participants}</span>\n                  </div>\n                )}\n                {contest.prize && (\n                  <div className=\"flex items-center text-gray-600 dark:text-gray-400\">\n                    <Trophy className=\"w-4 h-4 mr-2\" />\n                    <span>{contest.prize}</span>\n                  </div>\n                )}\n              </div>\n              <Button \n                className={`w-full mt-4 font-medium ${\n                  contest.type === 'weekly' \n                    ? 'bg-blue-500 hover:bg-blue-600 text-white' \n                    : 'bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'\n                }`}\n              >\n                {contest.type === 'weekly' ? 'Register Now' : 'Learn More'}\n              </Button>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3862},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"execution-system/server.js":{"content":"const express = require('express');\nconst Queue = require('bull');\nconst cors = require('cors');\nconst rateLimit = require('express-rate-limit');\n\n// Create Express app\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Configure queue\nconst codeExecutionQueue = new Queue('code-execution', process.env.REDIS_URL);\n\n// Middleware\napp.use(express.json({ limit: '1mb' }));\napp.use(cors());\n\n// Rate limiting\nconst limiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100 // limit each IP to 100 requests per windowMs\n});\napp.use(limiter);\n\n// Supported languages\nconst SUPPORTED_LANGUAGES = ['python', 'javascript', 'typescript', 'java', 'cpp', 'c'];\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n    res.json({ status: 'ok' });\n});\n\n// Code execution endpoint\napp.post('/execute', async (req, res) => {\n    try {\n        const { code, language, input } = req.body;\n\n        // Validate request\n        if (!code) {\n            return res.status(400).json({ error: 'Code is required' });\n        }\n        if (!language) {\n            return res.status(400).json({ error: 'Language is required' });\n        }\n        if (!SUPPORTED_LANGUAGES.includes(language)) {\n            return res.status(400).json({ \n                error: `Unsupported language. Supported languages are: ${SUPPORTED_LANGUAGES.join(', ')}` \n            });\n        }\n        if (code.length > 64 * 1024) { // 64KB limit\n            return res.status(400).json({ error: 'Code size exceeds limit (64KB)' });\n        }\n\n        // Add job to queue\n        const job = await codeExecutionQueue.add({\n            code,\n            language,\n            input\n        }, {\n            attempts: 1,\n            timeout: 30000, // 30 second timeout\n            removeOnComplete: true\n        });\n\n        // Wait for result\n        const result = await job.finished();\n\n        res.json({\n            success: true,\n            ...result\n        });\n\n    } catch (error) {\n        console.error('Execution error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Internal server error'\n        });\n    }\n});\n\n// Error handling\napp.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).json({\n        success: false,\n        error: 'Internal server error'\n    });\n});\n\n// Start server\napp.listen(port, () => {\n    console.log(`[API] Server listening on port ${port}`);\n}); ","size_bytes":2470},"server/test-gmail-api.js":{"content":"// Test Gmail API integration\nimport { gmailService } from './services/gmailService.js';\n\nasync function testGmailAPI() {\n  try {\n    console.log('🧪 Testing Gmail API integration...');\n    \n    // Test connection\n    console.log('\\n1️⃣ Testing Gmail API connection...');\n    const connectionResult = await gmailService.testConnection();\n    \n    if (!connectionResult) {\n      console.error('❌ Gmail API connection failed');\n      return;\n    }\n    \n    // Test sending email\n    console.log('\\n2️⃣ Testing email sending...');\n    const testEmail = process.env.TEST_EMAIL || 'test@example.com';\n    \n    if (testEmail === 'test@example.com') {\n      console.log('⚠️  Set TEST_EMAIL environment variable to test actual email sending');\n      console.log('   Example: TEST_EMAIL=your-email@gmail.com node test-gmail-api.js');\n      return;\n    }\n    \n    const emailResult = await gmailService.sendTestEmail(testEmail);\n    \n    if (emailResult) {\n      console.log('✅ Gmail API integration test completed successfully!');\n      console.log(`📧 Test email sent to: ${testEmail}`);\n    } else {\n      console.error('❌ Email sending test failed');\n    }\n    \n  } catch (error) {\n    console.error('❌ Gmail API test failed:', error.message);\n    console.error('Error details:', error);\n  }\n}\n\n// Check if environment variables are set\nconsole.log('🔍 Checking Gmail API configuration...');\nconst requiredVars = ['GMAIL_CLIENT_ID', 'GMAIL_CLIENT_SECRET', 'GMAIL_REFRESH_TOKEN', 'GMAIL_USER_EMAIL'];\nconst missingVars = requiredVars.filter(varName => !process.env[varName]);\n\nif (missingVars.length > 0) {\n  console.error('❌ Missing required environment variables:');\n  missingVars.forEach(varName => console.error(`   - ${varName}`));\n  console.error('\\n💡 Run the setup script: setup-gmail-api.ps1');\n  process.exit(1);\n}\n\nconsole.log('✅ All required environment variables are set');\ntestGmailAPI(); ","size_bytes":1928},"server/routes/contests.ts":{"content":"// @ts-nocheck\n\nimport { Router, Request, Response } from 'express';\nimport { contestStorage } from '../services/contestStorage';\nimport { executionServicePromise } from '../services/executionService';\nimport { insertContestSchema, contestParticipantSchema, contestQuestionSchema } from '../shared-schema';\nimport { protect } from '../middleware/auth';\nimport type { AuthRequest } from '../middleware/auth';\nimport QRCode from 'qrcode';\nimport { requireAdmin } from '../middleware/auth';\n\nconst router = Router();\n\n// Test route to check if authentication is working\nrouter.get('/test-auth', protect, async (req: AuthRequest, res: Response) => {\n  console.log('🔐 [CONTEST-TEST] Test auth route reached');\n  console.log('🔐 [CONTEST-TEST] User:', req.user?.id, 'Role:', req.user?.role);\n  res.json({ \n    message: 'Authentication working', \n    user: { id: req.user?.id, role: req.user?.role },\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Contest Management Routes (Admin Only)\nrouter.post('/', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { selectedProblems, ...contestData } = req.body;\n    \n    console.log('[DEBUG] Creating contest with data:', {\n      title: contestData.title,\n      startTime: contestData.startTime,\n      endTime: contestData.endTime,\n      duration: contestData.duration,\n      timeZone: contestData.timeZone\n    });\n    \n    if (!contestData.startTime || !contestData.endTime) {\n      return res.status(400).json({ \n        message: 'Start time and end time are required for contests',\n        missingFields: {\n          startTime: !contestData.startTime,\n          endTime: !contestData.endTime\n        }\n      });\n    }\n    \n    const startTime = new Date(contestData.startTime);\n    const endTime = new Date(contestData.endTime);\n    \n    if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {\n      return res.status(400).json({ \n        message: 'Invalid date format for start time or end time' \n      });\n    }\n    \n    if (startTime >= endTime) {\n      return res.status(400).json({ \n        message: 'Start time must be before end time' \n      });\n    }\n    \n    if (!contestData.duration) {\n      const durationMs = endTime.getTime() - startTime.getTime();\n      contestData.duration = Math.ceil(durationMs / (1000 * 60)); \n      console.log('[DEBUG] Calculated duration:', contestData.duration, 'minutes');\n    }\n    \n    const problemInstances = selectedProblems && selectedProblems.length > 0 \n      ? await contestStorage.createContestProblemInstances(selectedProblems, `contest_${Date.now()}`)\n      : [];\n\n    const contest = await contestStorage.createContest({\n      ...contestData,\n      startTime,\n      endTime,\n      problems: problemInstances,\n      createdBy: req.user.id\n    });\n\n    const now = new Date();\n    if (now > endTime) {\n      await contestStorage.updateContestEndMethod(contest.id, 'time_expired');\n      console.log('[DEBUG] Contest created with time_expired status');\n    }\n\n    console.log('[DEBUG] Contest created successfully:', contest.id);\n    res.status(201).json(contest);\n  } catch (error) {\n    console.error('Error creating contest:', error);\n    res.status(400).json({ message: 'Failed to create contest', error: error.message });\n  }\n});\n\nrouter.get('/available-problems', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n    const problems = await contestStorage.getAllProblems();\n    res.json(problems);\n  } catch (error) {\n    console.error('Error fetching problems for contest:', error);\n    res.status(500).json({ message: 'Failed to fetch problems' });\n  }\n});\n\nrouter.get('/', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    console.log('🔐 [CONTEST-ROUTE] === ROUTE REACHED ===');\n    console.log('🔐 [CONTEST-ROUTE] User authenticated:', req.user?.id, 'Role:', req.user?.role);\n    console.log('🔐 [CONTEST-ROUTE] Request URL:', req.originalUrl);\n    console.log('🔐 [CONTEST-ROUTE] Request headers:', req.headers);\n    \n    if (req.originalUrl.includes('/api/admin/contests')) {\n      try {\n        const contests = await contestStorage.getAllContests();\n        \n        const contestsWithParticipants = await Promise.all(\n          contests.map(async (contest) => {\n            try {\n              const participants = await contestStorage.getContestParticipants(contest.id);\n              return {\n                ...contest,\n                participantCount: participants.length\n              };\n            } catch (error) {\n              console.error('Error fetching participants for contest:', contest.id, error);\n              return {\n                ...contest,\n                participantCount: 0\n              };\n            }\n          })\n        );\n        \n        res.json(contestsWithParticipants);\n      } catch (error) {\n        console.error(\"Error fetching admin contests:\", error);\n        res.status(500).json({ message: \"Failed to fetch contests\" });\n      }\n    } else {\n      try {\n        const { status, type, visibility } = req.query;\n        const filters = {\n          status: status as string,\n          type: type as string,\n          visibility: visibility as string\n        };\n\n        const contests = await contestStorage.getAllContests(filters);\n            \n        const userEnrollments = await contestStorage.getUserContestEnrollments(req.user.id);\n        const enrolledContestIds = new Set(userEnrollments.map(e => e.contestId));\n            \n        for (const contest of contests) {\n          try {\n            await contestStorage.updateRankings(contest.id);\n          } catch (error) {\n            console.error('Error updating rankings for contest:', contest.id, error);\n          }\n        }\n            \n        const enrolledContests = contests.filter(contest => enrolledContestIds.has(contest.id));\n            \n        const contestsWithParticipants = await Promise.all(\n          enrolledContests.map(async (contest) => {\n            try {\n              const participantCount = (contest.participants || []).length;\n              const isEnrolled = true; \n                  \n              let userProgress = null;\n              try {\n                const enrollment = userEnrollments.find(e => e.contestId === contest.id);\n                userProgress = {\n                  isEnrolled: true,\n                  enrolledAt: enrollment?.enrolledAt,\n                  problemsSolved: enrollment?.problemsSolved || 0,\n                  rank: enrollment?.rank || 0\n                };\n              } catch (error) {\n                console.error('Error fetching user progress for contest:', contest.id, error);\n              }\n                  \n              return {\n                ...contest,\n                participantCount: participantCount,\n                isEnrolled,\n                userProgress\n              };\n            } catch (error) {\n              console.error('Error processing contest:', contest.id, error);\n              return {\n                ...contest,\n                participantCount: (contest.participants || []).length,\n                isEnrolled: true,\n                userProgress: null\n              };\n            }\n          })\n        );\n            \n        res.json(contestsWithParticipants);\n      } catch (error) {\n        console.error('Error fetching contests:', error);\n        res.status(500).json({ message: 'Failed to fetch contests' });\n      }\n    }\n  } catch (error) {\n    console.error('🔐 [CONTEST-ROUTE] Error in main route handler:', error);\n    res.status(500).json({ \n      message: 'Failed to fetch contests',\n      error: error.message,\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\n    });\n  }\n});\n\nrouter.get('/:contestId', async (req: Request, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const contest = await contestStorage.getContest(contestId);\n    \n    if (!contest) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    const participants = contest.participants || [];\n    const participantCount = participants.length;\n    \n    let detailedParticipants = [];\n    if (participants.length > 0) {\n      try {\n        detailedParticipants = await contestStorage.getContestParticipants(contestId);\n      } catch (error) {\n        console.error('Error fetching detailed participants for contest:', contestId, error);\n      }\n    }\n    \n    const contestWithParticipants = {\n      ...contest,\n      participants: detailedParticipants.length > 0 ? detailedParticipants : participants,\n      participantCount: participantCount\n    };\n    \n    res.json(contestWithParticipants);\n  } catch (error) {\n    console.error('Error fetching contest:', error);\n    res.status(500).json({ message: 'Failed to fetch contest' });\n  }\n});\n\nrouter.put('/:contestId', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId } = req.params;\n    const { selectedProblems, ...contestData } = req.body;\n    \n    console.log('[DEBUG] Updating contest:', contestId);\n    console.log('[DEBUG] Contest update data:', {\n      title: contestData.title,\n      startTime: contestData.startTime,\n      endTime: contestData.endTime,\n      duration: contestData.duration,\n      timeZone: contestData.timeZone\n    });\n    \n    let updates = { ...contestData };\n    \n    if (contestData.startTime || contestData.endTime) {\n      const startTime = contestData.startTime ? new Date(contestData.startTime) : undefined;\n      const endTime = contestData.endTime ? new Date(contestData.endTime) : undefined;\n      \n      if (startTime && isNaN(startTime.getTime())) {\n        return res.status(400).json({ message: 'Invalid start time format' });\n      }\n      \n      if (endTime && isNaN(endTime.getTime())) {\n        return res.status(400).json({ message: 'Invalid end time format' });\n      }\n      \n      if (startTime && endTime && startTime >= endTime) {\n        return res.status(400).json({ message: 'Start time must be before end time' });\n      }\n      \n      if (startTime) updates.startTime = startTime;\n      if (endTime) updates.endTime = endTime;\n      \n      if (startTime && endTime && !contestData.duration) {\n        const durationMs = endTime.getTime() - startTime.getTime();\n        updates.duration = Math.ceil(durationMs / (1000 * 60)); \n        console.log('[DEBUG] Recalculated duration:', updates.duration, 'minutes');\n      }\n      \n      updates.contestEndMethod = null;\n      console.log('[DEBUG] Contest rescheduled - resetting contestEndMethod to null');\n    }\n    \n    if (Array.isArray(selectedProblems) && selectedProblems.length > 0) {\n      console.log('[DEBUG] Creating new problem instances for contest update');\n      const problemInstances = await contestStorage.createContestProblemInstances(\n        selectedProblems, \n        `contest_${contestId}_${Date.now()}`\n      );\n      updates.problems = problemInstances;\n      console.log('[DEBUG] Created problem instances:', problemInstances.length);\n    }\n    \n    const contest = await contestStorage.updateContest(contestId, updates);\n    \n    if (!contest) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    if (contestData.startTime || contestData.endTime) {\n      await contestStorage.updateAllParticipantsContestEndMethod(contestId, null);\n      console.log('[DEBUG] Reset all participants contestEndMethod to null for rescheduled contest');\n    }\n\n    if (updates.endTime) {\n      const now = new Date();\n      const newEndTime = new Date(updates.endTime);\n      if (now > newEndTime) {\n        await contestStorage.updateContestEndMethod(contestId, 'time_expired');\n        console.log('[DEBUG] Contest updated with time_expired status');\n      }\n    }\n\n    console.log('[DEBUG] Contest updated successfully:', contest.id);\n    res.json(contest);\n  } catch (error) {\n    console.error('Error updating contest:', error);\n    res.status(400).json({ message: 'Failed to update contest', error: error.message });\n  }\n});\n\nrouter.delete('/:contestId', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId } = req.params;\n    const deleted = await contestStorage.deleteContest(contestId);\n    \n    if (!deleted) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    res.json({ message: 'Contest deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting contest:', error);\n    res.status(500).json({ message: 'Failed to delete contest' });\n  }\n});\n\nrouter.post('/:contestId/problems', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId } = req.params;\n    const problem = req.body;\n    \n    const success = await contestStorage.addProblemToContest(contestId, problem);\n    \n    if (!success) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    res.json({ message: 'Problem added successfully' });\n  } catch (error) {\n    console.error('Error adding problem to contest:', error);\n    res.status(400).json({ message: 'Failed to add problem', error: error.message });\n  }\n});\n\nrouter.get('/:contestId/problems', async (req: Request, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const problems = await contestStorage.getContestProblems(contestId);\n    res.json(problems);\n  } catch (error) {\n    console.error('Error fetching contest problems:', error);\n    res.status(500).json({ message: 'Failed to fetch problems' });\n  }\n});\n\nrouter.put('/:contestId/problems/:problemId', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId, problemId } = req.params;\n    const updates = req.body;\n    \n    const success = await contestStorage.updateContestProblem(contestId, problemId, updates);\n    \n    if (!success) {\n      return res.status(404).json({ message: 'Contest or problem not found' });\n    }\n\n    res.json({ message: 'Problem updated successfully' });\n  } catch (error) {\n    console.error('Error updating contest problem:', error);\n    res.status(400).json({ message: 'Failed to update problem', error: error.message });\n  }\n});\n\nrouter.delete('/:contestId/problems/:problemId', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId, problemId } = req.params;\n    \n    const success = await contestStorage.removeProblemFromContest(contestId, problemId);\n    \n    if (!success) {\n      return res.status(404).json({ message: 'Contest or problem not found' });\n    }\n\n    res.json({ message: 'Problem removed successfully' });\n  } catch (error) {\n    console.error('Error removing problem from contest:', error);\n    res.status(500).json({ message: 'Failed to remove problem' });\n  }\n});\n\n// Participant Management\nrouter.get('/:contestId/participants/me', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const participants = await contestStorage.getContestParticipants(contestId);\n    const userParticipation = participants.find(p => p.userId === userId);\n    \n    if (userParticipation) {\n      res.json(userParticipation);\n    } else {\n      res.status(404).json({ message: 'User not enrolled in this contest' });\n    }\n  } catch (error: any) {\n    console.error('Error checking user contest participation:', error);\n    res.status(500).json({ message: 'Failed to check participation' });\n  }\n});\n\nrouter.post('/:contestId/register', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const { userId } = req.body;\n    const requesterId = req.user?.id;\n    const isAdmin = req.user?.role === 'admin';\n\n    console.log('[DEBUG] Register participant request:', {\n      contestId,\n      userId,\n      requesterId,\n      isAdmin,\n      body: req.body\n    });\n\n    if (!requesterId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    let targetUserId: string;\n    if (isAdmin && userId && userId !== 'self') {\n      targetUserId = userId;\n    } else {\n      targetUserId = requesterId;\n    }\n\n    console.log('[DEBUG] Target user ID:', targetUserId);\n\n    const contest = await contestStorage.getContest(contestId);\n    if (!contest) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    const participants = await contestStorage.getContestParticipants(contestId);\n    const isAlreadyRegistered = participants.some(p => p.userId === targetUserId);\n\n    console.log('[DEBUG] Current participants:', participants.length);\n    console.log('[DEBUG] Is already registered:', isAlreadyRegistered);\n\n    if (isAlreadyRegistered) {\n      return res.status(409).json({\n        message: 'User is already registered for this contest',\n        alreadyEnrolled: true\n      });\n    }\n\n    let participant;\n    if (isAdmin && userId && userId !== 'self') {\n      participant = await contestStorage.registerParticipantByAdmin(contestId, targetUserId);\n    } else {\n      participant = await contestStorage.registerParticipant(contestId, targetUserId);\n    }\n    \n    console.log('[DEBUG] Participant registered successfully:', participant.id);\n    \n    const user = await contestStorage.getUser(targetUserId);\n    const enrichedParticipant = {\n      ...participant,\n      user: user ? {\n        id: user.id || user._id?.toString(),\n        firstName: user.firstName || '',\n        lastName: user.lastName || '',\n        email: user.email || '',\n      } : null\n    };\n    \n    res.status(201).json(enrichedParticipant);\n  } catch (error: any) {\n    console.error('Error registering participant:', error);\n    res.status(400).json({ message: 'Failed to register for contest', error: error.message });\n  }\n});\n\nrouter.delete('/:contestId/register', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const success = await contestStorage.unregisterParticipant(contestId, userId);\n    \n    if (!success) {\n      return res.status(404).json({ message: 'Registration not found' });\n    }\n\n    res.json({ message: 'Unregistered successfully' });\n  } catch (error) {\n    console.error('Error unregistering participant:', error);\n    res.status(500).json({ message: 'Failed to unregister' });\n  }\n});\n\nrouter.get('/:contestId/participants', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId } = req.params;\n    const participants = await contestStorage.getContestParticipants(contestId);\n    const normalized = (participants || []).map((p: any) => ({\n      ...p,\n      user: p.user ? {\n        id: p.user.id,\n        firstName: p.user.firstName || '',\n        lastName: p.user.lastName || '',\n        email: p.user.email || '',\n      } : null,\n    }));\n    res.json(normalized);\n  } catch (error) {\n    console.error('Error fetching participants:', error);\n    res.status(500).json({ message: 'Failed to fetch participants' });\n  }\n});\n\nrouter.delete('/:contestId/participants/:userId', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId, userId } = req.params;\n    const success = await contestStorage.unregisterParticipant(contestId, userId);\n    \n    if (success) {\n      res.json({ message: 'Participant removed successfully' });\n    } else {\n      res.status(404).json({ message: 'Participant not found' });\n    }\n  } catch (error: any) {\n    console.error('Error removing participant:', error);\n    res.status(500).json({ message: 'Failed to remove participant' });\n  }\n});\n\n// Submissions & Execution\nrouter.post('/:contestId/submit', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const { problemId, code, language } = req.body;\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const participants = await contestStorage.getContestParticipants(contestId);\n    const isRegistered = participants.some(p => p.userId === userId);\n    \n    if (!isRegistered) {\n      return res.status(403).json({ message: 'Must be registered for contest' });\n    }\n\n    const contest = await contestStorage.getContest(contestId);\n    if (!contest) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    const problem = contest.problems?.find(p => p.id === problemId);\n    if (!problem) {\n      return res.status(404).json({ message: 'Problem not found in contest' });\n    }\n\n    let testCases = [];\n    if (problem.testCases && Array.isArray(problem.testCases)) {\n      testCases = problem.testCases;\n    } else if (problem.customTestCases && Array.isArray(problem.customTestCases)) {\n      testCases = problem.customTestCases;\n    }\n\n    if (testCases.length === 0) {\n      return res.status(400).json({ message: 'No test cases available for this problem' });\n    }\n    \n    const executionService = await executionServicePromise;\n    const executionResult = await executionService.executeWithTestCases(code, language, testCases);\n\n    const passedCount = executionResult.testResults.filter((r: any) => r.passed).length;\n    const totalTestCases = executionResult.testResults.length;\n    const allPassed = executionResult.allTestsPassed;\n    const status = allPassed ? 'accepted' : passedCount > 0 ? 'partial' : 'wrong_answer';\n    \n    const points = allPassed ? 100 : Math.floor((passedCount / totalTestCases) * 100);\n    \n    const runtime = executionResult.testResults.reduce((sum: number, r: any) => sum + (r.runtime || 0), 0) / totalTestCases;\n    const memory = executionResult.testResults.reduce((sum: number, r: any) => Math.max(sum, r.memory || 0), 0);\n\n    const submission = await contestStorage.submitSolution({\n      contestId,\n      problemId,\n      userId,\n      code,\n      language,\n      status,\n      runtime: Math.round(runtime),\n      memory: Math.round(memory),\n      points,\n      submissionTime: new Date(),\n      penalty: 0,\n      isContestSubmission: true,\n      testResults: executionResult.testResults\n    });\n\n    res.json({\n      ...submission,\n      testResults: executionResult.testResults,\n      passedCount,\n      totalTestCases,\n      allPassed,\n      status,\n      points,\n      runtime: Math.round(runtime),\n      memory: Math.round(memory)\n    });\n  } catch (error) {\n    console.error('Error submitting solution:', error);\n    res.status(400).json({ message: 'Failed to submit solution', error: (error as any).message });\n  }\n});\n\nrouter.post('/:contestId/problems/:problemId/submit', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId, problemId } = req.params;\n    const { code, language, autoSubmitted } = req.body;\n    const userId = req.user?.id;\n\n    console.log(`[CONTEST-SUBMIT] Submission attempt: contestId=${contestId}, problemId=${problemId}, userId=${userId}, autoSubmitted=${autoSubmitted}`);\n\n    if (!userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const participants = await contestStorage.getContestParticipants(contestId);\n    const isRegistered = participants.some(p => p.userId === userId);\n    if (!isRegistered) {\n      console.log(`[CONTEST-SUBMIT] User ${userId} not registered for contest ${contestId}`);\n      return res.status(403).json({ message: 'Must be registered for contest' });\n    }\n\n    console.log(`[CONTEST-SUBMIT] User ${userId} is registered for contest ${contestId}`);\n\n    const contest = await contestStorage.getContest(contestId);\n    if (!contest) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    const problem = contest.problems?.find(p => p.id === problemId);\n    if (!problem) {\n      return res.status(404).json({ message: 'Problem not found' });\n    }\n\n    let testCases = [];\n    if (problem.testCases && Array.isArray(problem.testCases)) {\n      testCases = problem.testCases;\n    } else if (problem.customTestCases && Array.isArray(problem.customTestCases)) {\n      testCases = problem.customTestCases;\n    }\n\n    if (testCases.length === 0) {\n      return res.status(400).json({ message: 'No test cases available for this problem' });\n    }\n\n    const executionService = await executionServicePromise;\n    const executionResult = await executionService.executeWithTestCases(code, language, testCases);\n\n    const passedCount = executionResult.testResults.filter((r: any) => r.passed).length;\n    const totalTestCases = executionResult.testResults.length;\n    const allPassed = executionResult.allTestsPassed;\n    const status = allPassed ? 'accepted' : passedCount > 0 ? 'partial' : 'wrong_answer';\n    \n    const points = allPassed ? 100 : Math.floor((passedCount / totalTestCases) * 100);\n    \n    const runtime = executionResult.testResults.reduce((sum: number, r: any) => sum + (r.runtime || 0), 0) / totalTestCases;\n    const memory = executionResult.testResults.reduce((sum: number, r: any) => Math.max(sum, r.memory || 0), 0);\n\n    const submission = await contestStorage.submitSolution({\n      contestId,\n      problemId,\n      userId,\n      code,\n      language,\n      status,\n      runtime: Math.round(runtime),\n      memory: Math.round(memory),\n      points,\n      submissionTime: new Date(),\n      penalty: 0,\n      isContestSubmission: true,\n      testResults: executionResult.testResults\n    });\n\n    console.log(`[CONTEST-SUBMIT] Successfully submitted solution: submissionId=${submission.id}, status=${submission.status}, points=${points}, autoSubmitted=${autoSubmitted}`);\n    \n    res.json({\n      id: submission.id,\n      problemId: submission.problemId,\n      code: submission.code,\n      language: submission.language,\n      status: submission.status,\n      runtime: submission.runtime,\n      memory: submission.memory,\n      submissionTime: submission.submissionTime,\n      testResults: executionResult.testResults,\n      passedCount,\n      totalTestCases,\n      allPassed,\n      points\n    });\n  } catch (error) {\n    console.error('Error submitting solution (problem-specific):', error);\n    res.status(400).json({ message: 'Failed to submit solution', error: (error as any).message });\n  }\n});\n\nrouter.get('/:contestId/submissions', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const userId = req.query.userId as string;\n\n    if (userId && req.user?.role !== 'admin' && req.user?.id !== userId) {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n\n    const submissions = await contestStorage.getContestSubmissions(contestId, userId);\n    res.json(submissions);\n  } catch (error) {\n    console.error('Error fetching submissions:', error);\n    res.status(500).json({ message: 'Failed to fetch submissions' });\n  }\n});\n\nrouter.get('/:contestId/leaderboard', async (req: Request, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const leaderboard = await contestStorage.generateLeaderboard(contestId);\n\n    const normalized = (leaderboard || []).map((e: any) => ({\n      rank: e.rank,\n      userId: e.userId,\n      userName: e.userName || e.username || e.userId,\n      totalScore: e.totalScore ?? e.points ?? 0,\n      totalPenalty: e.totalPenalty ?? 0,\n      problemsSolved: e.problemsSolved ?? 0,\n      submissions: e.submissions?.length ?? e.submissions ?? 0,\n      lastSubmission: e.lastSubmission || e.lastSubmissionTime || '',\n      problemScores: e.problemScores || {},\n    }));\n\n    res.json(normalized);\n  } catch (error) {\n    console.error('Error generating leaderboard:', error);\n    res.status(500).json({ message: 'Failed to generate leaderboard' });\n  }\n});\n\nrouter.post('/:contestId/update-rankings', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId } = req.params;\n    await contestStorage.updateRankings(contestId);\n    const leaderboard = await contestStorage.generateLeaderboard(contestId);\n    res.json({ message: 'Rankings updated successfully', leaderboard });\n  } catch (error) {\n    console.error('Error updating rankings:', error);\n    res.status(500).json({ message: 'Failed to update rankings' });\n  }\n});\n\nrouter.get('/:contestId/analytics', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId } = req.params;\n    const analytics = await contestStorage.getContestAnalytics(contestId);\n    res.json(analytics);\n  } catch (error) {\n    console.error('Error fetching analytics:', error);\n    res.status(500).json({ message: 'Failed to fetch analytics' });\n  }\n});\n\nrouter.post('/:contestId/questions', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const { problemId, question, isPublic } = req.body;\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const questionData = await contestStorage.submitQuestion({\n      contestId,\n      userId: userId as string,\n      problemId,\n      question,\n      timestamp: new Date(),\n      status: 'pending',\n      isPublic: Boolean(isPublic)\n    });\n\n    res.status(201).json(questionData);\n  } catch (error) {\n    console.error('Error submitting question:', error);\n    res.status(400).json({ message: 'Failed to submit question', error: (error as any).message });\n  }\n});\n\nrouter.get('/:contestId/questions', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const isPublic = req.query.public === 'true';\n\n    const questions = await contestStorage.getContestQuestions(contestId, isPublic);\n    res.json(questions);\n  } catch (error) {\n    console.error('Error fetching questions:', error);\n    res.status(500).json({ message: 'Failed to fetch questions' });\n  }\n});\n\nrouter.put('/questions/:questionId/answer', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { questionId } = req.params;\n    const { answer } = req.body;\n    const answeredBy = req.user?.id;\n\n    if (!answeredBy) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const success = await contestStorage.answerQuestion(questionId, answer, answeredBy);\n    \n    if (!success) {\n      return res.status(404).json({ message: 'Question not found' });\n    }\n\n    res.json({ message: 'Question answered successfully' });\n  } catch (error) {\n    console.error('Error answering question:', error);\n    res.status(400).json({ message: 'Failed to answer question', error: (error as any).message });\n  }\n});\n\nrouter.post('/:contestId/announcements', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId } = req.params;\n    const { message, priority } = req.body;\n\n    const success = await contestStorage.addAnnouncement(contestId, message, priority);\n    \n    if (!success) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    res.json({ message: 'Announcement added successfully' });\n  } catch (error) {\n    console.error('Error adding announcement:', error);\n    res.status(400).json({ message: 'Failed to add announcement', error: (error as any).message });\n  }\n});\n\nrouter.get('/:contestId/announcements', async (req: Request, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const announcements = await contestStorage.getAnnouncements(contestId);\n    res.json(announcements);\n  } catch (error) {\n    console.error('Error fetching announcements:', error);\n    res.status(500).json({ message: 'Failed to fetch announcements' });\n  }\n});\n\nrouter.get('/:contestId/qr-code', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const { contestId } = req.params;\n    \n    const frontendUrl = process.env.FRONTEND_URL || `${req.protocol}://${req.get('host')}`;\n    const enrollmentUrl = `${frontendUrl}/contest-enrollment/${contestId}`;\n    \n    const qrCode = await QRCode.toDataURL(enrollmentUrl);\n\n    res.json({ qrCode, enrollmentUrl });\n  } catch (error: any) {\n    console.error('Error generating QR code for contest:', error);\n    res.status(500).json({ message: 'Failed to generate QR code' });\n  }\n});\n\nrouter.post('/execute', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { code, language, input } = req.body;\n\n    if (!code || !language) {\n      return res.status(400).json({ message: \"Code and language are required\" });\n    }\n\n    console.log(`🚀 [CONTEST-EXEC] Executing ${language} code for contest problem`);\n    console.log(`📝 [CONTEST-EXEC] Code length: ${code.length} characters`);\n    console.log(`🔧 [CONTEST-EXEC] Language: ${language}`);\n    console.log(`📥 [CONTEST-EXEC] Input: \"${input || 'none'}\"`);\n    console.log(`📥 [CONTEST-EXEC] Input length: ${input ? input.length : 0}`);\n    console.log(`📥 [CONTEST-EXEC] Input type: ${typeof input}`);\n    \n    // CRITICAL FIX: Await the promise to get the service instance\n    const executionService = await executionServicePromise;\n    \n    // Use the same Docker execution service as assignments\n    const result = await executionService.executeCode(code, language, input);\n    \n    console.log(`✅ [CONTEST-EXEC] Execution completed`);\n    console.log(`📊 [CONTEST-EXEC] Runtime: ${result.runtime}ms, Memory: ${result.memory}MB`);\n    console.log(`📤 [CONTEST-EXEC] Output length: ${result.output?.length || 0} characters`);\n    if (result.error) {\n      console.log(`❌ [CONTEST-EXEC] Error: ${result.error}`);\n    }\n\n    res.json({\n      status: result.error ? 'error' : 'success',\n      output: result.output,\n      error: result.error,\n      runtime: result.runtime,\n      memory: result.memory\n    });\n  } catch (error) {\n    console.error(\"Error executing contest code:\", error);\n    res.status(500).json({ \n      message: \"Failed to execute code\",\n      status: 'error',\n      error: (error as any).message || 'Internal server error'\n    });\n  }\n});\n\nrouter.post('/run-custom-input', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { code, language, customInput } = req.body;\n\n    if (!code || !language || !customInput) {\n      return res.status(400).json({\n        error: 'Missing required fields: code, language, and customInput'\n      });\n    }\n\n    console.log(`🚀 [CONTEST-CUSTOM-EXEC] Executing ${language} code with custom input for contest problem`);\n    console.log(`📝 [CONTEST-CUSTOM-EXEC] Code length: ${code.length} characters`);\n    console.log(`📥 [CONTEST-CUSTOM-EXEC] Custom input: \"${customInput}\"`);\n    \n    // CRITICAL FIX: Await the promise to get the service instance\n    const executionService = await executionServicePromise;\n    \n    // Use the same Docker execution service as assignments\n    const result = await executionService.executeCode(code, language, customInput);\n    \n    console.log(`✅ [CONTEST-CUSTOM-EXEC] Execution completed`);\n    console.log(`📊 [CONTEST-CUSTOM-EXEC] Runtime: ${result.runtime}ms, Memory: ${result.memory}MB`);\n    console.log(`📤 [CONTEST-CUSTOM-EXEC] Output length: ${result.output?.length || 0} characters`);\n    if (result.error) {\n      console.log(`❌ [CONTEST-CUSTOM-EXEC] Error: ${result.error}`);\n    }\n\n    res.json({\n      status: result.error ? 'error' : 'success',\n      output: result.output,\n      error: result.error,\n      runtime: result.runtime,\n      memory: result.memory,\n      input: customInput,\n      mode: 'custom_input'\n    });\n  } catch (error) {\n    console.error(\"Error executing contest code with custom input:\", error);\n    res.status(500).json({ \n      status: 'error',\n      error: 'Internal server error',\n      output: (error as any).message || 'Execution failed'\n    });\n  }\n});\n\nrouter.post('/run-test-cases', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { code, language, problemId } = req.body;\n\n    if (!code || !language || !problemId) {\n      return res.status(400).json({ message: \"Code, language, and problemId are required.\" });\n    }\n\n    console.log(`🚀 [CONTEST-RUN-TESTS] Executing ${language} code with test cases for contest problem: ${problemId}`);\n    \n    const problem = await contestStorage.getProblem(problemId);\n    if (!problem) {\n      return res.status(404).json({ message: 'Problem not found.' });\n    }\n    \n    const testCases = problem.testCases || [];\n    \n    if (testCases.length === 0) {\n      return res.status(400).json({ message: 'No test cases available for this problem' });\n    }\n    \n    const executionService = await executionServicePromise;\n    const executionResult = await executionService.executeWithTestCases(code, language, testCases);\n    \n    res.json({ \n      status: 'success',\n      results: executionResult.testResults,\n      summary: {\n        totalTestCases: executionResult.testResults.length,\n        passed: executionResult.testResults.filter(r => r.passed).length\n      }\n    });\n  } catch (error) {\n    console.error(\"Error executing contest code with test cases:\", error);\n    res.status(500).json({ \n      status: 'error',\n      error: 'Internal server error',\n      output: (error as any).message || 'Execution failed'\n    });\n  }\n});\n\n\nrouter.get('/:contestId/standings', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const contestId = req.params.contestId;\n    const leaderboard = await contestStorage.generateLeaderboard(contestId);\n    const contest = await contestStorage.getContest(contestId);\n    \n    if (!contest) {\n      return res.status(404).json({ message: \"Contest not found\" });\n    }\n\n    const detailedStandings = await Promise.all(\n      leaderboard.map(async (entry) => {\n        const userSubmissions = await contestStorage.getParticipantSubmissions(contestId, entry.userId);\n        const problemStats = contest.problems.map(problem => {\n          const problemSubmissions = userSubmissions.filter(s => s.problemId === problem.id);\n          const acceptedSubmission = problemSubmissions.find(s => s.status === 'accepted');\n          const wrongAttempts = problemSubmissions.filter(s => s.status === 'wrong_answer').length;\n          \n          return {\n            problemId: problem.id,\n            problemTitle: problem.title,\n            points: problem.points,\n            solved: !!acceptedSubmission,\n            attempts: problemSubmissions.length,\n            wrongAttempts,\n            solvedAt: acceptedSubmission?.submissionTime,\n            bestRuntime: acceptedSubmission?.runtime,\n            bestMemory: acceptedSubmission?.memory\n          };\n        });\n\n        let displayName = entry.username || entry.userId;\n        try {\n          const userDoc = await contestStorage.getUser(entry.userId);\n          if (userDoc) {\n            const first = (userDoc.firstName || userDoc.given_name || '').toString().trim();\n            const last = (userDoc.lastName || userDoc.family_name || '').toString().trim();\n            const full = `${first} ${last}`.trim();\n            displayName = full || userDoc.username || userDoc.name || userDoc.email || displayName;\n          }\n        } catch (e) {\n        }\n\n        const participant = userIdToParticipant[entry.userId];\n        const registrationTime = participant?.registrationTime ? new Date(participant.registrationTime as any) : null;\n        const rawLast = entry.lastSubmissionTime ? new Date(entry.lastSubmissionTime as any) : null;\n        const effectiveLast = rawLast ? new Date(Math.min(rawLast.getTime(), endTime.getTime())) : (hasEnded ? endTime : now);\n        const timeSpentSeconds = registrationTime ? Math.max(0, Math.floor((effectiveLast.getTime() - registrationTime.getTime()) / 1000)) : 0;\n        \n        return {\n          ...entry,\n          averageRuntime,\n          averageMemory,\n          problemStats,\n          displayName,\n          submittedAt: entry.lastSubmissionTime,\n          timeSpentSeconds\n        };\n      })\n    );\n\n    res.json({\n      contest: {\n        id: contest.id,\n        title: contest.title,\n        startTime: contest.startTime,\n        endTime: contest.endTime,\n        totalProblems: contest.problems.length,\n        totalPoints: contest.problems.reduce((sum, p) => sum + (p.points || 0), 0)\n      },\n      standings: detailedStandings\n    });\n  } catch (error) {\n    console.error(\"Error fetching contest standings:\", error);\n    res.status(500).json({ message: \"Failed to fetch contest standings\" });\n  }\n});\n\nrouter.get('/:contestId/results', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const contestId = req.params.contestId;\n    \n    const contest = await contestStorage.getContest(contestId);\n    if (!contest) {\n      return res.status(404).json({ message: \"Contest not found\" });\n    }\n    \n    const now = new Date();\n    const endTime = new Date(contest.endTime);\n    const hasEnded = now > endTime;\n    if (!hasEnded) {\n    }\n    \n    const leaderboard = await contestStorage.generateLeaderboard(contestId);\n    const participants = await contestStorage.getContestParticipants(contestId);\n    const userIdToParticipant: Record<string, any> = {};\n    for (const p of participants) {\n      userIdToParticipant[p.userId] = p;\n    }\n    \n    const results = await Promise.all(\n      leaderboard.map(async (entry) => {\n        const submissions = await contestStorage.getParticipantSubmissions(contestId, entry.userId);\n        \n        const problemResults: Record<string, any> = {};\n        for (const problem of contest.problems) {\n          const problemSubmissions = submissions.filter(s => s.problemId === problem.id);\n          const bestSubmission = problemSubmissions\n            .filter(s => s.status === 'accepted')\n            .sort((a, b) => (b.points || 0) - (a.points || 0))[0];\n          \n          problemResults[problem.id] = {\n            score: bestSubmission?.points || 0,\n            attempts: problemSubmissions.length,\n            bestRuntime: bestSubmission?.runtime || 0,\n            bestMemory: bestSubmission?.memory || 0,\n            status: bestSubmission?.status || 'not_attempted'\n          };\n        }\n        \n        const acceptedSubmissions = submissions.filter(s => s.status === 'accepted');\n        const averageRuntime = acceptedSubmissions.length > 0 \n          ? acceptedSubmissions.reduce((sum, s) => sum + (s.runtime || 0), 0) / acceptedSubmissions.length \n          : 0;\n        const averageMemory = acceptedSubmissions.length > 0 \n          ? acceptedSubmissions.reduce((sum, s) => sum + (s.memory || 0), 0) / acceptedSubmissions.length \n          : 0;\n        \n        let displayName = entry.username || entry.userId;\n        try {\n          const userDoc = await contestStorage.getUser(entry.userId);\n          if (userDoc) {\n            const first = (userDoc.firstName || userDoc.given_name || '').toString().trim();\n            const last = (userDoc.lastName || userDoc.family_name || '').toString().trim();\n            const full = `${first} ${last}`.trim();\n            displayName = full || userDoc.username || userDoc.name || userDoc.email || displayName;\n          }\n        } catch (e) {\n        }\n\n        const participant = userIdToParticipant[entry.userId];\n        const registrationTime = participant?.registrationTime ? new Date(participant.registrationTime as any) : null;\n        const rawLast = entry.lastSubmissionTime ? new Date(entry.lastSubmissionTime as any) : null;\n        const effectiveLast = rawLast ? new Date(Math.min(rawLast.getTime(), endTime.getTime())) : (hasEnded ? endTime : now);\n        const timeSpentSeconds = registrationTime ? Math.max(0, Math.floor((effectiveLast.getTime() - registrationTime.getTime()) / 1000)) : 0;\n        \n        return {\n          ...entry,\n          averageRuntime,\n          averageMemory,\n          problemResults,\n          displayName,\n          submittedAt: entry.lastSubmissionTime,\n          timeSpentSeconds\n        };\n      })\n    );\n    \n    res.json(results);\n  } catch (error) {\n    console.error(\"Error generating contest results:\", error);\n    res.status(500).json({ message: \"Failed to generate contest results\" });\n  }\n});\n\nrouter.get('/:contestId/leaderboard', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const contestId = req.params.contestId;\n    const leaderboard = await contestStorage.generateLeaderboard(contestId);\n    res.json(leaderboard);\n  } catch (error) {\n    console.error(\"Error generating leaderboard:\", error);\n    res.status(500).json({ message: \"Failed to generate leaderboard\" });\n  }\n});\n\nrouter.get('/:contestId/analytics', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const contestId = req.params.contestId;\n    const analytics = await contestStorage.getContestAnalytics(contestId);\n    res.json(analytics);\n  } catch (error) {\n    console.error(\"Error fetching contest analytics:\", error);\n    res.status(500).json({ message: \"Failed to fetch contest analytics\" });\n  }\n});\n\nrouter.get('/:contestId/progress', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const contestId = req.params.contestId;\n    const userId = req.user?.id;\n    \n    if (!userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    const contest = await contestStorage.getContest(contestId);\n    if (!contest) {\n      return res.status(404).json({ message: \"Contest not found\" });\n    }\n\n    const submissions = await contestStorage.getParticipantSubmissions(contestId, userId);\n    const participants = await contestStorage.getContestParticipants(contestId);\n    const participant = participants.find(p => p.userId === userId);\n\n    const acceptedAll = new Set<string>(\n      submissions\n        .filter(s => s.status?.toLowerCase?.() === 'accepted')\n        .map(s => s.problemId)\n    );\n    const contestProblemIds = new Set<string>(contest.problems.map(p => p.id));\n    const acceptedInContest = new Set(Array.from(acceptedAll).filter(id => contestProblemIds.has(id)));\n\n    const totalProblems = contest.problems.length;\n    const solvedCount = Math.min(acceptedInContest.size, totalProblems);\n    const totalPoints = contest.problems.reduce((sum, problem) => sum + (problem.points || 0), 0);\n    const earnedPoints = contest.problems\n      .filter(p => acceptedInContest.has(p.id))\n      .reduce((sum, p) => sum + (p.points || 0), 0);\n\n    const now = new Date();\n    const endTime = new Date(contest.endTime);\n    const timeRemaining = Math.max(0, endTime.getTime() - now.getTime());\n\n    res.json({\n      contestId,\n      userId,\n      solvedProblems: Array.from(acceptedInContest),\n      solvedCount,\n      totalProblems,\n      progress: (solvedCount / Math.max(1, totalProblems)) * 100,\n      earnedPoints,\n      totalPoints,\n      timeRemaining,\n      participant: participant || null,\n      submissions: submissions.length,\n      lastSubmission: submissions.length > 0 ? submissions[submissions.length - 1] : null\n    });\n  } catch (error) {\n    console.error(\"Error fetching contest progress:\", error);\n    res.status(500).json({ message: \"Failed to fetch contest progress\" });\n  }\n});\n\nrouter.get('/:contestId/announcements', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const contestId = req.params.contestId;\n    const announcements = await contestStorage.getAnnouncements(contestId);\n    res.json(announcements);\n  } catch (error) {\n    console.error(\"Error fetching announcements:\", error);\n    res.status(500).json({ message: \"Failed to fetch announcements\" });\n  }\n});\n\nrouter.post('/:contestId/end', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const contest = await contestStorage.getContest(contestId);\n    if (!contest) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    const now = new Date();\n    const endTime = new Date(contest.endTime);\n    \n    if (now > endTime) {\n      await contestStorage.updateContestEndMethod(contestId, 'time_expired');\n      return res.json({ \n        message: 'Contest has already ended by time',\n        contestEndMethod: 'time_expired'\n      });\n    }\n\n    const success = await contestStorage.updateContestEndMethod(contestId, 'manually_ended');\n    \n    if (success) {\n      res.json({ \n        message: 'Contest ended successfully',\n        contestEndMethod: 'manually_ended'\n      });\n    } else {\n      res.status(500).json({ message: 'Failed to end contest' });\n    }\n  } catch (error) {\n    console.error('Error ending contest:', error);\n    res.status(500).json({ message: 'Failed to end contest', error: (error as any).message });\n  }\n});\n\nrouter.post('/check-expired', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: 'Admin access required' });\n    }\n\n    const result = await contestStorage.checkAndUpdateAllExpiredContests();\n    \n    res.json({ \n      message: 'Expired contests check completed',\n      result\n    });\n  } catch (error) {\n    console.error('Error checking expired contests:', error);\n    res.status(500).json({ message: 'Failed to check expired contests', error: (error as any).message });\n  }\n});\n\nrouter.post('/:contestId/problems/:problemId/auto-submit', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId, problemId } = req.params;\n    const { code, language } = req.body;\n    const userId = req.user?.id;\n\n    console.log(`[AUTO-SUBMIT] Auto-submission: contestId=${contestId}, problemId=${problemId}, userId=${userId}`);\n\n    if (!userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const participants = await contestStorage.getContestParticipants(contestId);\n    const isRegistered = participants.some(p => p.userId === userId);\n    if (!isRegistered) {\n      console.log(`[AUTO-SUBMIT] User ${userId} not registered for contest ${contestId}`);\n      return res.status(403).json({ message: 'Must be registered for contest' });\n    }\n\n    console.log(`[AUTO-SUBMIT] User ${userId} is registered for contest ${contestId}`);\n\n    const contest = await contestStorage.getContest(contestId);\n    if (!contest) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    const problem = contest.problems?.find(p => p.id === problemId);\n    if (!problem) {\n      return res.status(404).json({ message: 'Problem not found' });\n    }\n\n    const submission = await contestStorage.submitSolution({\n      contestId,\n      problemId,\n      userId,\n      code,\n      language,\n      status: 'auto_submitted', \n      runtime: 0,\n      memory: 0,\n      points: 0,\n      submissionTime: new Date(),\n      penalty: 0,\n      isContestSubmission: true,\n      testResults: [] \n    });\n\n    console.log(`[AUTO-SUBMIT] Successfully auto-submitted solution: submissionId=${submission.id}, status=${submission.status}`);\n\n    res.json({\n      id: submission.id,\n      problemId: submission.problemId,\n      code: submission.code,\n      language: submission.language,\n      status: submission.status,\n      runtime: submission.runtime,\n      memory: submission.memory,\n      submissionTime: submission.submissionTime,\n      testResults: [],\n      passedCount: 0,\n      totalTestCases: 0,\n      allPassed: false,\n      points: 0,\n      autoSubmitted: true\n    });\n  } catch (error) {\n    console.error('Error auto-submitting solution:', error);\n    res.status(500).json({ message: 'Failed to auto-submit solution', error: (error as any).message });\n  }\n});\n\nrouter.post('/:contestId/end-user', protect, async (req: AuthRequest, res: Response) => {\n  try {\n    const { contestId } = req.params;\n    const userId = req.user?.id;\n\n    if (!userId) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    const contest = await contestStorage.getContest(contestId);\n    if (!contest) {\n      return res.status(404).json({ message: 'Contest not found' });\n    }\n\n    const participants = await contestStorage.getContestParticipants(contestId);\n    const isRegistered = participants.some(p => p.userId === userId);\n    \n    if (!isRegistered) {\n      return res.status(403).json({ message: 'Must be registered for contest' });\n    }\n\n    const endMethodSuccess = await contestStorage.updateParticipantContestEndMethod(contestId, userId, 'manually_ended');\n    const disqualifySuccess = await contestStorage.disqualifyParticipant(contestId, userId, 'Excessive tab switching detected');\n    \n    if (endMethodSuccess && disqualifySuccess) {\n      console.log(`[CONTEST] User ${userId} terminated and disqualified from contest ${contestId} due to tab switching`);\n      res.json({ \n        message: 'Contest ended for user due to tab switching - user disqualified',\n        contestEndMethod: 'manually_ended',\n        isDisqualified: true,\n        disqualificationReason: 'Excessive tab switching detected'\n      });\n    } else {\n      console.error(`[CONTEST] Failed to properly terminate user ${userId} from contest ${contestId}. End method: ${endMethodSuccess}, Disqualify: ${disqualifySuccess}`);\n      res.status(500).json({ message: 'Failed to end contest for user' });\n    }\n  } catch (error) {\n    console.error('Error ending contest for user:', error);\n    res.status(500).json({ message: 'Failed to end contest for user', error: (error as any).message });\n  }\n});\n\nexport default router;","size_bytes":55351},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/pages/StudentCourseView.tsx":{"content":"import { useParams, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { BookOpen, Clock, Users, Play, ArrowLeft, CheckCircle2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface Course {\n  id: number;\n  title: string;\n  description?: string;\n  category?: string;\n  difficulty?: string;\n  estimatedHours?: number;\n  enrollmentCount?: number;\n  isPublic: boolean;\n}\n\ninterface CourseModule {\n  id: number;\n  title: string;\n  description?: string;\n  content?: string;\n  orderIndex: number;\n  isCompleted?: boolean;\n}\n\ninterface CourseProgress {\n  courseId: number;\n  userId: string;\n  completedModules: number[];\n  progress: number;\n  enrollment: {\n    enrolledAt: string;\n    lastAccessedAt: string;\n  };\n}\n\nexport default function StudentCourseView() {\n  const { courseId } = useParams<{ courseId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const courseIdNum = courseId ? parseInt(courseId) : NaN;\n\n  // Fetch course data\n  const { data: course, isLoading: courseLoading } = useQuery({\n    queryKey: ['course', courseIdNum],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/courses/${courseIdNum}`);\n      if (!response.ok) throw new Error('Failed to fetch course');\n      return response.json() as Promise<Course>;\n    },\n    enabled: !isNaN(courseIdNum)\n  });\n\n  // Fetch course modules\n  const { data: modules = [], isLoading: modulesLoading } = useQuery({\n    queryKey: ['course-modules', courseIdNum],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/courses/${courseIdNum}/modules`);\n      if (!response.ok) throw new Error('Failed to fetch modules');\n      return response.json() as Promise<CourseModule[]>;\n    },\n    enabled: !isNaN(courseIdNum)\n  });\n\n  // Fetch course progress\n  const { data: progress, isLoading: progressLoading } = useQuery({\n    queryKey: ['course-progress', courseIdNum],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/courses/${courseIdNum}/progress`);\n      if (!response.ok) throw new Error('Failed to fetch progress');\n      return response.json() as Promise<CourseProgress>;\n    },\n    enabled: !isNaN(courseIdNum)\n  });\n\n  const handleStartModule = (moduleId: number) => {\n    setLocation(`/courses/${courseIdNum}/modules/${moduleId}`);\n  };\n\n  const handleContinueLearning = () => {\n    if (modules.length > 0) {\n      // Find first incomplete module or first module\n      const incompleteModule = modules.find(module => !progress?.completedModules.includes(module.id));\n      const targetModule = incompleteModule || modules[0];\n      setLocation(`/courses/${courseIdNum}/modules/${targetModule.id}`);\n    }\n  };\n\n  if (isNaN(courseIdNum)) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Invalid Course</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The course you're looking for doesn't exist.\n          </p>\n          <Button onClick={() => setLocation('/courses')}>\n            Browse Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (courseLoading || modulesLoading || progressLoading) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-2\">Loading Course...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"container mx-auto py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Course Not Found</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            The course you're looking for doesn't exist or you don't have access to it.\n          </p>\n          <Button onClick={() => setLocation('/courses')}>\n            Browse Courses\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const completionPercentage = progress?.progress || 0;\n  const completedModuleCount = progress?.completedModules?.length || 0;\n\n  return (\n    <div className=\"container mx-auto py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Button variant=\"ghost\" onClick={() => setLocation('/courses')}>\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Courses\n        </Button>\n      </div>\n\n      {/* Course Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-start\">\n            <div className=\"space-y-2\">\n              <CardTitle className=\"text-3xl\">{course.title}</CardTitle>\n              {course.description && (\n                <CardDescription className=\"text-lg\">{course.description}</CardDescription>\n              )}\n              <div className=\"flex gap-2\">\n                {course.category && (\n                  <Badge variant=\"secondary\">{course.category}</Badge>\n                )}\n                {course.difficulty && (\n                  <Badge variant=\"outline\">{course.difficulty}</Badge>\n                )}\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <Button onClick={handleContinueLearning} size=\"lg\">\n                <Play className=\"h-4 w-4 mr-2\" />\n                {completedModuleCount > 0 ? 'Continue Learning' : 'Start Course'}\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\n            {course.estimatedHours && (\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm\">{course.estimatedHours} hours</span>\n              </div>\n            )}\n            <div className=\"flex items-center space-x-2\">\n              <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm\">{modules.length} modules</span>\n            </div>\n            {course.enrollmentCount !== undefined && (\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm\">{course.enrollmentCount} students</span>\n              </div>\n            )}\n          </div>\n\n          {/* Progress */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Progress</span>\n              <span>{completedModuleCount}/{modules.length} modules completed</span>\n            </div>\n            <Progress value={completionPercentage} className=\"w-full\" />\n            <p className=\"text-xs text-muted-foreground\">\n              {completionPercentage}% complete\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Course Modules */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Course Modules</CardTitle>\n          <CardDescription>\n            Complete modules in order to track your progress\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {modules.map((module, index) => {\n              const isCompleted = progress?.completedModules?.includes(module.id) || false;\n              const isNext = !isCompleted && (index === 0 || progress?.completedModules?.includes(modules[index - 1]?.id));\n\n              return (\n                <div\n                  key={module.id}\n                  className={`flex items-center justify-between p-4 border rounded-lg transition-colors ${\n                    isCompleted\n                      ? 'bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800'\n                      : isNext\n                      ? 'bg-blue-50 border-blue-200 dark:bg-blue-950 dark:border-blue-800'\n                      : 'bg-muted/20'\n                  }`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                      isCompleted\n                        ? 'bg-green-500 text-white'\n                        : isNext\n                        ? 'bg-blue-500 text-white'\n                        : 'bg-muted text-muted-foreground'\n                    }`}>\n                      {isCompleted ? (\n                        <CheckCircle2 className=\"h-4 w-4\" />\n                      ) : (\n                        <span className=\"text-sm font-medium\">{index + 1}</span>\n                      )}\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">{module.title}</h3>\n                      {module.description && (\n                        <p className=\"text-sm text-muted-foreground\">{module.description}</p>\n                      )}\n                    </div>\n                  </div>\n                  <Button\n                    variant={isCompleted ? \"outline\" : isNext ? \"default\" : \"ghost\"}\n                    onClick={() => handleStartModule(module.id)}\n                    disabled={!isCompleted && !isNext}\n                  >\n                    {isCompleted ? 'Review' : isNext ? 'Start' : 'Locked'}\n                  </Button>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","size_bytes":9744},"client/src/pages/auth/RegisterPage.tsx":{"content":"import { RegisterForm } from \"@/components/auth/RegisterForm\";\nimport { ThemeToggle } from \"@/components/ui/theme-toggle\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport AuthSplitLayout from \"@/components/auth/AuthSplitLayout\";\nimport lightLogo from \"../../assests/light_logo.png\";\nimport lightName from \"../../assests/light_name.png\";\nimport darkLogo from \"../../assests/dark_logo.png\";\nimport darkName from \"../../assests/dark_name.png\";\n\nexport default function RegisterPage() {\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n\n  useEffect(() => {\n    // If user is already authenticated, redirect based on role\n    if (isAuthenticated && user) {\n      console.log('[DEBUG] User already authenticated, redirecting...');\n      if (user.role === 'admin') {\n        setLocation('/admin');\n      } else {\n        setLocation('/dashboard');\n      }\n    }\n  }, [isAuthenticated, user, setLocation]);\n\n  return (\n    <div className=\"min-h-screen\">\n      <AuthSplitLayout title=\"Create an Account!\">\n        <RegisterForm plain />\n      </AuthSplitLayout>\n    </div>\n  );\n} ","size_bytes":1185},"client/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"server/controllers/problemsController.ts":{"content":"import { Request, Response } from 'express';\nimport type { AuthRequest } from '../middleware/auth';\nimport { storage } from '../storage';\nimport { insertProblemSchema } from '../shared-schema';\nimport { z } from 'zod';\nimport { executionServicePromise } from '../services/executionService';\n\nexport async function getProblems(req: Request, res: Response) {\n  try {\n    const problems = await storage.getProblems();\n    res.json(problems);\n  } catch (error) {\n    console.error('Error fetching problems:', error);\n    res.status(500).json({ message: 'Failed to fetch problems' });\n  }\n}\n\nexport async function getProblemById(req: Request, res: Response) {\n  try {\n    const id = parseInt(req.params.id);\n    const problem = await storage.getProblem(id);\n    if (!problem) {\n      return res.status(404).json({ message: 'Problem not found' });\n    }\n    res.json(problem);\n  } catch (error) {\n    console.error('Error fetching problem:', error);\n    res.status(500).json({ message: 'Failed to fetch problem' });\n  }\n}\n\nexport async function createProblem(req: AuthRequest, res: Response) {\n  try {\n    const userId = req.user?.id;\n    if (!userId) {\n      console.error('[DEBUG] No user ID found in request:', req.user);\n      return res.status(401).json({ message: 'User ID not found' });\n    }\n\n    // CRITICAL FIX: Revert to a method that works with the current storage layer\n    // Find the highest existing problemNumber by fetching all problems and processing them in memory.\n    const allProblems = await storage.getProblems();\n    \n    const maxProblemNumber = allProblems.reduce((max: number, p: any) => {\n      // Safely get the problemNumber, defaulting to 0 if it doesn't exist\n      const num = typeof p.problemNumber === 'number' ? p.problemNumber : 0;\n      return num > max ? num : max;\n    }, 0);\n    \n    const newProblemNumber = maxProblemNumber + 1;\n\n    // Validate and ensure problemNumber is present\n    const validatedData = {\n      ...req.body,\n      createdBy: userId,\n      problemNumber: newProblemNumber, // Assign the new, unique problem number\n    };\n\n    console.log('[DEBUG] Creating problem with data:', validatedData);\n\n    const problem = await storage.createProblem(validatedData);\n    res.status(201).json(problem);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: 'Invalid data', errors: error.errors });\n    }\n    console.error('Error creating problem:', error);\n    res.status(500).json({ message: 'Failed to create problem' });\n  }\n}\nexport async function updateProblem(req: AuthRequest, res: Response) {\n  try {\n    const problemId = parseInt(req.params.id);\n    const userId = req.user?.id;\n\n    if (!userId) {\n      console.error('[DEBUG] No user ID found in request:', req.user);\n      return res.status(401).json({ message: 'User ID not found' });\n    }\n\n    // First check if the problem exists\n    const existingProblem = await storage.getProblem(problemId);\n    if (!existingProblem) {\n      return res.status(404).json({ message: 'Problem not found' });\n    }\n\n    // Validate the update data\n    const validatedData = insertProblemSchema.parse({\n      ...req.body,\n      updatedBy: userId,\n      updatedAt: new Date(),\n    });\n\n    console.log('[DEBUG] Updating problem:', { problemId, data: validatedData });\n\n    // Update the problem\n    const updatedProblem = await storage.updateProblem(problemId, validatedData);\n    if (!updatedProblem) {\n      return res.status(404).json({ message: 'Problem not found' });\n    }\n\n    console.log('[DEBUG] Problem updated successfully:', updatedProblem);\n    res.json(updatedProblem);\n  } catch (error) {\n    console.error('[DEBUG] Error updating problem:', error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: 'Invalid data', errors: error.errors });\n    }\n    res.status(500).json({ message: 'Failed to update problem' });\n  }\n}\n\nexport async function getProblemUsage(req: AuthRequest, res: Response) {\n  try {\n    const problemId = parseInt(req.params.id);\n    const problemSets = await storage.getProblemSets();\n\n    const usageSets = problemSets.filter(\n      (set: any) => set.problemIds && set.problemIds.includes(problemId.toString())\n    );\n\n    res.json({\n      problemSetCount: usageSets.length,\n      problemSets: usageSets.map((set: any) => ({\n        id: set.id,\n        title: set.title,\n      })),\n    });\n  } catch (error) {\n    console.error('Error checking problem usage:', error);\n    res.status(500).json({ message: 'Failed to check problem usage' });\n  }\n}\n\nexport async function deleteProblem(req: AuthRequest, res: Response) {\n  try {\n    const problemId = parseInt(req.params.id);\n\n    // First check if the problem exists\n    const existingProblem = await storage.getProblem(problemId);\n    if (!existingProblem) {\n      return res.status(404).json({ message: 'Problem not found' });\n    }\n\n    console.log('[DEBUG] Deleting problem:', problemId);\n\n    // Remove problem from all problem sets\n    const problemSets = await storage.getProblemSets();\n    let updatedSets = 0;\n\n    for (const set of problemSets) {\n      let setUpdated = false;\n      const updatedSet: any = { ...set };\n\n      // Handle legacy problemIds system\n      if (set.problemIds && set.problemIds.includes(problemId.toString())) {\n        console.log(\n          `[DEBUG] Removing problem ${problemId} from legacy problemIds in set: ${set.title}`\n        );\n        updatedSet.problemIds = set.problemIds.filter(\n          (pid: string) => pid !== problemId.toString()\n        );\n        setUpdated = true;\n      }\n\n      // Handle new problemInstances system\n      if (set.problemInstances && set.problemInstances.length > 0) {\n        const initialCount = set.problemInstances.length;\n\n        // Remove instances that reference this problem as originalProblemId\n        updatedSet.problemInstances = set.problemInstances.filter(\n          (instance: any) => instance.originalProblemId !== problemId\n        );\n\n        if (updatedSet.problemInstances.length !== initialCount) {\n          setUpdated = true;\n          console.log(\n            `[DEBUG] Removed ${initialCount - updatedSet.problemInstances.length} instances from set: ${set.title}`\n          );\n        }\n      }\n\n      // Update the problem set if changes were made\n      if (setUpdated) {\n        // Recalculate total problems\n        const legacyCount = updatedSet.problemIds?.length || 0;\n        const instanceCount = updatedSet.problemInstances?.length || 0;\n        updatedSet.totalProblems = legacyCount + instanceCount;\n\n        await storage.updateProblemSet(set.id, updatedSet);\n        updatedSets++;\n        console.log(\n          `[DEBUG] Updated problem set: ${set.title}, new total problems: ${updatedSet.totalProblems}`\n        );\n      }\n    }\n\n    console.log(\n      `[DEBUG] Updated ${updatedSets} problem sets after removing problem ${problemId}`\n    );\n\n    // Delete the problem from storage\n    await storage.deleteProblem(problemId);\n\n    console.log(\n      `[DEBUG] Successfully deleted problem ${problemId} and cleaned up ${updatedSets} problem sets`\n    );\n    res.status(204).send();\n  } catch (error) {\n    console.error('[DEBUG] Error deleting problem:', error);\n    res.status(500).json({ message: 'Failed to delete problem' });\n  }\n}\n\nexport async function runProblemCode(req: AuthRequest, res: Response) {\n  try {\n    console.log('🚀 [MAIN-SERVER] Processing execution request (RUN CODE)');\n\n    const { code, language, problemId, testCases } = req.body;\n\n    if (!code || !language) {\n      return res.status(400).json({ error: 'Missing required fields: code and language' });\n    }\n\n    let casesToRun = testCases || [];\n\n    if (problemId && !testCases) {\n      try {\n        const problem = await storage.getProblem(problemId);\n        if (!problem || !problem.testCases || problem.testCases.length === 0) {\n          throw new Error('No test cases found for this problem');\n        }\n        casesToRun = problem.testCases.filter((testCase: any) => !testCase.isHidden);\n        console.log(\n          `[MAIN-SERVER] Running ${casesToRun.length} visible test cases out of ${problem.testCases.length} total`\n        );\n      } catch (error: any) {\n        console.error('❌ [MAIN-SERVER] Failed to fetch problem:', error);\n        return res.status(404).json({\n          error: error.message || 'Problem not found',\n          results: [],\n        });\n      }\n    }\n\n    if (casesToRun.length === 0) {\n      return res.status(400).json({\n        error: 'No visible test cases available for this problem',\n        results: [],\n      });\n    }\n\n    console.log(`✅ [MAIN-SERVER] Running ${casesToRun.length} visible test cases for ${language} code`);\n\n    // Use the main server's execution service\n    const executionService = await executionServicePromise;\n    const result = await executionService.executeWithTestCases(code, language, casesToRun);\n\n    const response = {\n      results: result.testResults.map((testResult: any, index: number) => ({\n        status: testResult.error ? 'error' : testResult.passed ? 'success' : 'failed',\n        output: testResult.actualOutput,\n        error: testResult.error,\n        runtime: testResult.runtime,\n        memory: testResult.memory,\n        input: testResult.input,\n        expectedOutput: testResult.expectedOutput,\n        isHidden: testResult.isHidden || false,\n        testCaseNumber: index + 1,\n        passed: testResult.passed,\n      })),\n      summary: {\n        totalTests: result.testResults.length,\n        passedTests: result.testResults.filter((r: any) => r.passed).length,\n        failedTests: result.testResults.filter((r: any) => !r.passed).length,\n        allPassed: result.allTestsPassed,\n        problemTitle: problemId ? `Problem ${problemId}` : 'Custom Execution',\n        difficulty: 'N/A',\n        mode: 'run',\n      },\n    } as const;\n\n    console.log('✅ [MAIN-SERVER] Run Code execution completed successfully');\n    res.json(response);\n  } catch (error: any) {\n    console.error('❌ [MAIN-SERVER] Route error:', error);\n    res.status(500).json({\n      status: 'error',\n      error: 'Internal server error',\n      output: error.message,\n    });\n  }\n}\n\nexport async function runProblemCodeWithCustomInput(req: AuthRequest, res: Response) {\n  try {\n    console.log('🚀 [MAIN-SERVER] Processing custom input execution request');\n\n    const { code, language, customInput } = req.body;\n\n    if (!code || !language || !customInput) {\n      return res.status(400).json({\n        error: 'Missing required fields: code, language, and customInput'\n      });\n    }\n\n    console.log(`✅ [MAIN-SERVER] Executing ${language} code with custom input`);\n\n    const executionService = await executionServicePromise;\n    const result = await executionService.executeWithCustomInput(code, language, customInput);\n\n    const response = {\n      status: result.error ? 'error' : 'success',\n      output: result.output,\n      error: result.error,\n      runtime: result.runtime,\n      memory: result.memory,\n      input: result.input,\n      mode: 'custom_input',\n    };\n\n    console.log('✅ [MAIN-SERVER] Custom input execution completed successfully');\n    res.json(response);\n  } catch (error: any) {\n    console.error('❌ [MAIN-SERVER] Custom input execution error:', error);\n    res.status(500).json({\n      status: 'error',\n      error: 'Internal server error',\n      output: error.message,\n    });\n  }\n}","size_bytes":11457},"client/src/pages/EnrollmentPage.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, Users, BookOpen, Clock, Loader2, AlertCircle } from 'lucide-react';\nimport { useToast, toastSuccess, toastError, toastInfo } from '@/components/ui/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface Course {\n  id: number;\n  title: string;\n  description?: string;\n  category?: string;\n  difficulty?: string;\n  estimatedHours?: number;\n  enrollmentCount?: number;\n  isPublic: boolean;\n}\n\nexport default function EnrollmentPage() {\n  const { courseId } = useParams<{ courseId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { user, isAuthenticated } = useAuth();\n  const [hasTriedAutoEnroll, setHasTriedAutoEnroll] = useState(false);\n\n  // Fetch course data (accessible to both authenticated and unauthenticated users)\n  const { data: course, isLoading: courseLoading, error: courseError } = useQuery({\n    queryKey: ['course', courseId],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/courses/${courseId}`, {\n        headers: {\n          ...(token ? { 'Authorization': `Bearer ${token}` } : {})\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('Course not found');\n        }\n        throw new Error('Failed to fetch course');\n      }\n      return response.json() as Promise<Course>;\n    },\n    enabled: !!courseId\n  });\n\n  // Check if user is already enrolled\n  const { data: enrollments } = useQuery({\n    queryKey: ['user-enrollments'],\n    queryFn: async () => {\n      const response = await fetch('/api/users/me/enrollments');\n      if (!response.ok) throw new Error('Failed to fetch enrollments');\n      return response.json();\n    },\n    retry: false\n  });\n\n  const isAlreadyEnrolled = enrollments?.some((enrollment: any) => \n    enrollment.courseId === parseInt(courseId || '0')\n  );\n\n  // Handle enrollment button click\n  const handleEnrollClick = () => {\n    if (!isAuthenticated) {\n      // Redirect to login if not authenticated\n      console.log('[DEBUG] User not authenticated, redirecting to login');\n      window.location.href = `/login?returnTo=/enroll/${courseId}`;\n      return;\n    }\n    \n    // If authenticated, proceed with enrollment\n    enrollMutation.mutate();\n  };\n\n  // Course enrollment mutation (only for authenticated users)\n  const enrollMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem('token');\n      \n      if (!token) {\n        throw new Error('Authentication required');\n      }\n      \n      const response = await fetch(`/api/courses/${courseId}/enroll`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ userId: 'self' }) // Backend will use req.user.id\n      });\n      \n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Please log in to enroll in this course');\n        }\n        if (response.status === 409) {\n          // User already enrolled\n          return { alreadyEnrolled: true };\n        }\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to enroll in course');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data?.alreadyEnrolled) {\n        toastInfo('Already Enrolled', `You are already enrolled in ${course?.title}`);\n      } else {\n        toastSuccess('Enrollment Successful!', `You have been enrolled in ${course?.title}`);\n      }\n      // Always redirect to course page - NEVER to dashboard\n      window.location.href = `/courses/${courseId}`;\n    },\n    onError: (error: Error) => {\n      if (error.message.includes('log in') || error.message.includes('Authentication required')) {\n        // Redirect to login page with return URL\n        window.location.href = `/login?returnTo=/enroll/${courseId}`;\n      } else {\n        toastError('Enrollment Failed', error.message);\n      }\n    }\n  });\n\n  // Check if user is already enrolled and redirect them to course page\n  useEffect(() => {\n    if (isAuthenticated && user && courseId && isAlreadyEnrolled && !hasTriedAutoEnroll) {\n      console.log('[DEBUG] User already enrolled, redirecting to course page...');\n      setHasTriedAutoEnroll(true);\n      window.location.href = `/courses/${courseId}`;\n    }\n  }, [isAuthenticated, user, courseId, isAlreadyEnrolled, hasTriedAutoEnroll]);\n\n  // DO NOT redirect unauthenticated users immediately\n  // Let them see the course details first, then redirect when they click \"Enroll Now\"\n\n  // Show loading states\n  if (courseLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>Loading course information...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show enrollment loading only when user clicks \"Enroll Now\" button\n  if (enrollMutation.isPending) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mb-4\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-blue-600 dark:text-blue-400\" />\n          </div>\n          <h2 className=\"text-xl font-semibold mb-2\">Enrolling you in the course...</h2>\n          <p className=\"text-muted-foreground\">Please wait while we complete your enrollment.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (courseError || !course) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-destructive\" />\n              <h1 className=\"text-xl font-bold mb-2\">Course Not Found</h1>\n              <p className=\"text-muted-foreground mb-4\">\n                The course you're trying to access doesn't exist or has been removed.\n              </p>\n              <Button onClick={() => setLocation('/courses')}>\n                Browse Courses\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isAlreadyEnrolled) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <CheckCircle className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\n              <h1 className=\"text-xl font-bold mb-2\">Already Enrolled</h1>\n              <p className=\"text-muted-foreground mb-4\">\n                You are already enrolled in this course.\n              </p>\n              <Button onClick={() => setLocation(`/courses/${courseId}`)}>\n                Go to Course\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"max-w-2xl mx-auto\">\n          <Card className=\"shadow-lg\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n                <BookOpen className=\"h-8 w-8 text-primary\" />\n              </div>\n              <CardTitle className=\"text-2xl\">Join Course</CardTitle>\n              <CardDescription>\n                You've been invited to enroll in this course\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              {/* Course Information */}\n              <div className=\"border rounded-lg p-4 space-y-4\">\n                <div>\n                  <h2 className=\"text-xl font-bold\">{course.title}</h2>\n                  {course.description && (\n                    <p className=\"text-muted-foreground mt-2\">{course.description}</p>\n                  )}\n                </div>\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  {course.category && (\n                    <Badge variant=\"secondary\">{course.category}</Badge>\n                  )}\n                  {course.difficulty && (\n                    <Badge variant=\"outline\">{course.difficulty}</Badge>\n                  )}\n                  <Badge variant={course.isPublic ? \"default\" : \"secondary\"}>\n                    {course.isPublic ? 'Public' : 'Private'}\n                  </Badge>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  {course.estimatedHours && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{course.estimatedHours} hours</span>\n                    </div>\n                  )}\n                  {course.enrollmentCount !== undefined && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{course.enrollmentCount} students</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Enrollment Action */}\n              <div className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <Button\n                    onClick={handleEnrollClick}\n                    disabled={enrollMutation.isPending}\n                    size=\"lg\"\n                    className=\"w-full\"\n                  >\n                    {enrollMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Enrolling...\n                      </>\n                    ) : (\n                      <>\n                        <CheckCircle className=\"mr-2 h-4 w-4\" />\n                        Enroll in Course\n                      </>\n                    )}\n                  </Button>\n                </div>\n                \n                <div className=\"text-center\">\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => setLocation('/courses')}\n                  >\n                    Browse Other Courses\n                  </Button>\n                </div>\n              </div>\n\n              {/* Information Notice */}\n              <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                  <strong>Note:</strong> You must be logged in to enroll in courses. \n                  If you don't have an account, you'll be prompted to create one.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11715},"client/src/pages/admin/AddStudentToCourse.tsx":{"content":"import { useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Search, UserPlus, ArrowLeft, Loader2, Users, BookOpen } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  role: string;\n  createdAt: string;\n}\n\ninterface Course {\n  id: number;\n  title: string;\n  description?: string;\n  enrollmentCount?: number;\n}\n\nexport default function AddStudentToCourse() {\n  const { courseId } = useParams<{ courseId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedUsers, setSelectedUsers] = useState<Set<string>>(new Set());\n\n  // Fetch course data\n  const { data: course, isLoading: courseLoading } = useQuery({\n    queryKey: ['course', courseId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/courses/${courseId}`);\n      if (!response.ok) throw new Error('Failed to fetch course');\n      return response.json() as Promise<Course>;\n    }\n  });\n\n  // Fetch all users (students)\n  const { data: users = [], isLoading: usersLoading } = useQuery({\n    queryKey: ['admin-users'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/users');\n      if (!response.ok) throw new Error('Failed to fetch users');\n      return response.json() as Promise<User[]>;\n    }\n  });\n\n  // Fetch current enrollments\n  const { data: enrollments = [], isLoading: enrollmentsLoading } = useQuery({\n    queryKey: ['course-enrollments', courseId],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/courses/${courseId}/enrollments`);\n      if (!response.ok) throw new Error('Failed to fetch enrollments');\n      return response.json();\n    }\n  });\n\n  // Filter users based on search term and exclude already enrolled students\n  const enrolledUserIds = new Set(enrollments.map((enrollment: any) => enrollment.userId));\n  \n  const filteredUsers = users\n    .filter(user => user.role === 'student')\n    .filter(user => !enrolledUserIds.has(user.id))\n    .filter(user => {\n      if (!searchTerm) return true;\n      const searchLower = searchTerm.toLowerCase();\n      return (\n        user.email?.toLowerCase().includes(searchLower) ||\n        user.firstName?.toLowerCase().includes(searchLower) ||\n        user.lastName?.toLowerCase().includes(searchLower)\n      );\n    });\n\n  // Enrollment mutation\n  const enrollMutation = useMutation({\n    mutationFn: async (userIds: string[]) => {\n      const promises = userIds.map(userId =>\n        apiRequest('POST', `/api/courses/${courseId}/enroll`, { userId })\n      );\n      const responses = await Promise.all(promises);\n      return Promise.all(responses.map(res => res.json()));\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Students Enrolled',\n        description: `Successfully enrolled ${selectedUsers.size} student(s) in the course`\n      });\n      queryClient.invalidateQueries({ queryKey: ['course-enrollments', courseId] });\n      setSelectedUsers(new Set());\n      setLocation(`/admin/courses/${courseId}`);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Enrollment Failed',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const handleSelectUser = (userId: string) => {\n    const newSelected = new Set(selectedUsers);\n    if (newSelected.has(userId)) {\n      newSelected.delete(userId);\n    } else {\n      newSelected.add(userId);\n    }\n    setSelectedUsers(newSelected);\n  };\n\n  const handleEnrollSelected = () => {\n    if (selectedUsers.size === 0) return;\n    enrollMutation.mutate(Array.from(selectedUsers));\n  };\n\n  if (courseLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-6 px-4\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setLocation(`/admin/courses/${courseId}`)}\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Course\n        </Button>\n        <div>\n          <h1 className=\"text-2xl font-bold\">Add Students to Course</h1>\n          <p className=\"text-muted-foreground\">{course?.title}</p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {/* Course Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-5 w-5\" />\n              Course Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Course Title</Label>\n                <p className=\"text-sm text-muted-foreground\">{course?.title}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Current Enrollments</Label>\n                <p className=\"text-sm text-muted-foreground\">{enrollments.length} students</p>\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium\">Available Students</Label>\n                <p className=\"text-sm text-muted-foreground\">{filteredUsers.length} students</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Student Selection */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Select Students to Enroll\n                </CardTitle>\n                <CardDescription>\n                  Choose students to add to this course. Already enrolled students are not shown.\n                </CardDescription>\n              </div>\n              {selectedUsers.size > 0 && (\n                <Button\n                  onClick={handleEnrollSelected}\n                  disabled={enrollMutation.isPending}\n                >\n                  {enrollMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Enrolling...\n                    </>\n                  ) : (\n                    <>\n                      <UserPlus className=\"h-4 w-4 mr-2\" />\n                      Enroll {selectedUsers.size} Student(s)\n                    </>\n                  )}\n                </Button>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search students by name or email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Students Table */}\n            {usersLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n              </div>\n            ) : filteredUsers.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                <p className=\"text-muted-foreground\">\n                  {searchTerm ? 'No students found matching your search.' : 'No available students to enroll.'}\n                </p>\n\n              </div>\n            ) : (\n              <div className=\"border rounded-lg overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-12\">Select</TableHead>\n                      <TableHead>Name</TableHead>\n                      <TableHead className=\"hidden sm:table-cell\">Email</TableHead>\n                      <TableHead className=\"hidden md:table-cell\">Role</TableHead>\n                      <TableHead className=\"hidden lg:table-cell\">Joined</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredUsers.map((user) => (\n                      <TableRow key={user.id} className=\"cursor-pointer\" onClick={() => handleSelectUser(user.id)}>\n                        <TableCell>\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedUsers.has(user.id)}\n                            onChange={() => handleSelectUser(user.id)}\n                            className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">\n                              {user.firstName && user.lastName \n                                ? `${user.firstName} ${user.lastName}`\n                                : 'No name provided'\n                              }\n                            </p>\n                            {/* Mobile-only info */}\n                            <div className=\"sm:hidden text-xs text-muted-foreground mt-1\">\n                              <div>{user.email || 'No email'}</div>\n                              <Badge variant=\"secondary\" className=\"text-xs mt-1\">{user.role}</Badge>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"hidden sm:table-cell\">\n                          <p className=\"text-sm\">{user.email || 'No email'}</p>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          <Badge variant=\"secondary\">{user.role}</Badge>\n                        </TableCell>\n                        <TableCell className=\"hidden lg:table-cell\">\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(user.createdAt).toLocaleDateString()}\n                          </p>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n\n            {selectedUsers.size > 0 && (\n              <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                  <strong>{selectedUsers.size}</strong> student(s) selected for enrollment.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11721},"client/src/pages/admin/ProblemSetDetail.tsx":{"content":"import { useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast, toastSuccess, toastError } from \"@/components/ui/use-toast\";\nimport { ArrowLeft, Plus, QrCode, Copy, Download, Edit, Trash2, Users, BookOpen, Clock, Target, Loader2, Cog } from \"lucide-react\";\nimport { authenticatedFetch } from \"@/lib/utils\";\nimport { Link } from \"wouter\";\n\ninterface ProblemSet {\n  _id?: string; // MongoDB ObjectId\n  id: string;\n  title: string;\n  description?: string;\n  difficulty: string;\n  category?: string;\n  tags: string[];\n  problemIds: string[];\n  problemInstances?: any[];\n  problems?: any[];\n  isPublic: boolean;\n  estimatedTime?: number;\n  totalProblems: number;\n  createdBy?: string;\n  createdAt: string;\n  updatedAt: string;\n  allowDirectEnrollment?: boolean;\n}\n\ninterface ProblemSetEnrollment {\n  id: number;\n  problemSetId: number;\n  userId: string;\n  enrolledAt: string;\n  progress: number;\n  completedProblems: number[];\n  totalSubmissions: number;\n  correctSubmissions: number;\n  user?: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n  };\n}\n\nexport default function ProblemSetDetail() {\n  const { problemSetId: problemSetIdParam } = useParams<{ problemSetId: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [qrCodeData, setQrCodeData] = useState<string>('');\n  const [isQrDialogOpen, setIsQrDialogOpen] = useState(false);\n  \n  // Use the full MongoDB ObjectId string instead of parsing as integer\n  const problemSetId = problemSetIdParam;\n\n  // Fetch problem set data\n  const { data: problemSet, isLoading: problemSetLoading } = useQuery({\n    queryKey: ['problem-set', problemSetId],\n    queryFn: async () => {\n      if (!problemSetId) {\n        throw new Error('Problem Set ID is required');\n      }\n      const response = await authenticatedFetch(`/api/admin/problem-sets/${problemSetId}`);\n      if (!response.ok) throw new Error('Failed to fetch problem set');\n      return response.json() as Promise<ProblemSet>;\n    },\n    enabled: !!problemSetId,\n  });\n\n  // Fetch enrollments data\n  const { data: enrollments = [], isLoading: enrollmentsLoading } = useQuery({\n    queryKey: ['problem-set-enrollments', problemSetId],\n    queryFn: async () => {\n      if (!problemSetId) {\n        throw new Error('Problem Set ID is required');\n      }\n      const response = await authenticatedFetch(`/api/problem-sets/${problemSetId}/enrollments`);\n      if (!response.ok) throw new Error('Failed to fetch enrollments');\n      return response.json() as Promise<ProblemSetEnrollment[]>;\n    },\n    enabled: !!problemSetId,\n  });\n\n  // Delete enrollment mutation\n  const deleteEnrollmentMutation = useMutation({\n    mutationFn: async (enrollmentId: number) => {\n      const response = await authenticatedFetch(`/api/problem-set-enrollments/${enrollmentId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete enrollment');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['problem-set-enrollments', problemSetId] });\n      toast({\n        title: 'Success',\n        description: 'Student enrollment deleted successfully',\n      });\n    },\n    onError: () => {\n      toastError('Error', 'Failed to delete enrollment');\n    },\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const calculateAverageProgress = () => {\n    if (enrollments.length === 0) return 0;\n    const totalProgress = enrollments.reduce((sum, enrollment) => sum + enrollment.progress, 0);\n    return Math.round(totalProgress / enrollments.length);\n  };\n\n  const calculateSuccessRate = () => {\n    if (enrollments.length === 0) return 0;\n    const totalAttempts = enrollments.reduce((sum, enrollment) => sum + enrollment.totalSubmissions, 0);\n    const totalCorrect = enrollments.reduce((sum, enrollment) => sum + enrollment.correctSubmissions, 0);\n    return totalAttempts > 0 ? Math.round((totalCorrect / totalAttempts) * 100) : 0;\n  };\n\n  // Generate QR code for problem set enrollment\n  const generateQrCode = async () => {\n    try {\n      const response = await authenticatedFetch(`/api/problem-sets/${problemSetId}/qr-code`);\n      if (!response.ok) throw new Error('Failed to generate QR code');\n      const data = await response.json();\n      setQrCodeData(data.qrCode);\n      setIsQrDialogOpen(true);\n    } catch (error) {\n      toastError('QR Code Generation Failed', 'Failed to generate QR code for enrollment');\n    }\n  };\n\n  // Copy enrollment link to clipboard\n  const copyEnrollmentLink = () => {\n    const enrollmentUrl = `${window.location.origin}/enroll-problem-set/${problemSetId}`;\n    navigator.clipboard.writeText(enrollmentUrl);\n    toastSuccess('Enrollment Link Copied!', 'The enrollment link has been copied to your clipboard');\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case 'easy': return 'bg-green-100 text-green-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'hard': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (problemSetLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!problemSet) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-xl font-semibold mb-2\">Problem Set Not Found</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                The problem set you're looking for doesn't exist or has been removed.\n              </p>\n              <Link href=\"/admin/problem-sets\">\n                <Button>Back to Problem Sets</Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Link href=\"/admin/problem-sets\">\n          <Button variant=\"outline\" size=\"icon\">\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n        </Link>\n        <div className=\"flex-1\">\n          <h1 className=\"text-3xl font-bold\">{problemSet.title}</h1>\n          <p className=\"text-muted-foreground\">{problemSet.description}</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Badge className={getDifficultyColor(problemSet.difficulty)}>\n            {problemSet.difficulty}\n          </Badge>\n          <Badge variant=\"outline\">\n            {problemSet.problemInstances?.length || problemSet.problems?.length || problemSet.totalProblems || 0} Problems\n          </Badge>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          {/* <TabsTrigger value=\"problems\">\n            <BookOpen className=\"w-4 h-4 mr-2\" />\n            Problems ({problemSet.problemInstances?.length || problemSet.problems?.length || 0})\n          </TabsTrigger> */}\n          <TabsTrigger value=\"students\">\n            <Users className=\"w-4 h-4 mr-2\" />\n            Enrolled Students ({enrollments.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Students</CardTitle>\n                <Users className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{enrollments.length}</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Average Progress</CardTitle>\n                <Target className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{calculateAverageProgress()}%</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n                <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{calculateSuccessRate()}%</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Est. Time</CardTitle>\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{problemSet.estimatedTime || 0}m</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Direct Enrollment</CardTitle>\n                <Cog className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Allow QR/Link Enrollment</span>\n                  <Button\n                    variant={problemSet.allowDirectEnrollment ? 'default' : 'secondary'}\n                    onClick={async () => {\n                      const res = await authenticatedFetch(`/api/admin/problem-sets/${problemSetId}`, {\n                        method: 'PUT',\n                        headers: { 'Content-Type': 'application/json' },\n                        body: JSON.stringify({ allowDirectEnrollment: !problemSet.allowDirectEnrollment })\n                      });\n                      if (res.ok) {\n                        queryClient.invalidateQueries({ queryKey: ['problem-set', problemSetId] });\n                        toast({ title: 'Updated', description: 'Direct enrollment setting updated' });\n                      } else {\n                        toastError('Error', 'Failed to update setting');\n                      }\n                    }}\n                  >\n                    {problemSet.allowDirectEnrollment ? 'On' : 'Off'}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Problem Set Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Category</h4>\n                <p className=\"text-muted-foreground\">{problemSet.category || 'Not specified'}</p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium mb-2\">Tags</h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  {problemSet.tags && problemSet.tags.length > 0 ? (\n                    problemSet.tags.map((tag) => (\n                      <Badge key={tag} variant=\"secondary\">{tag}</Badge>\n                    ))\n                  ) : (\n                    <span className=\"text-muted-foreground text-sm\">No tags</span>\n                  )}\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium mb-2\">Visibility</h4>\n                <Badge variant={problemSet.isPublic ? \"default\" : \"secondary\"}>\n                  {problemSet.isPublic ? \"Public\" : \"Private\"}\n                </Badge>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium mb-2\">Created</h4>\n                <p className=\"text-muted-foreground\">{formatDate(problemSet.createdAt)}</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* <TabsContent value=\"problems\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <div>\n                <CardTitle>Problems ({problemSet.problemInstances?.length || problemSet.problems?.length || 0})</CardTitle>\n                <CardDescription>\n                  Manage the problems in this problem set\n                </CardDescription>\n              </div>\n                              <Button onClick={() => setLocation(`/admin/problem-sets/${problemSetId}/problems`)}>\n                  <Cog className=\"h-4 w-4 mr-2\" />\n                  Manage Problems\n                </Button>\n            </CardHeader>\n            <CardContent>\n              {problemSet.problemInstances && problemSet.problemInstances.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {problemSet.problemInstances.map((problem: any, index: number) => (\n                    <div key={problem.id || index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium\">{problem.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{problem.description}</p>\n                        <div className=\"flex gap-2 mt-2\">\n                          <Badge variant=\"outline\">{problem.difficulty}</Badge>\n                          <Badge variant=\"outline\">{problem.points || 100} points</Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : problemSet.problems && problemSet.problems.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {problemSet.problems.map((problem: any, index: number) => (\n                    <div key={problem.id || index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium\">{problem.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{problem.description}</p>\n                        <div className=\"flex gap-2 mt-2\">\n                          <Badge variant=\"outline\">{problem.difficulty}</Badge>\n                          <Badge variant=\"outline\">{problem.points || 100} points</Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Problems Yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    This problem set doesn't contain any problems yet.\n                  </p>\n                  <Button onClick={() => setLocation(`/admin/problem-sets/${problemSetId}/problems`)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Problems\n                  </Button>\n                </div>\n              )}\n              \n              \n              <div className=\"mt-6 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <h4 className=\"font-medium mb-2\">Debug Info:</h4>\n                <div className=\"text-sm text-muted-foreground space-y-1\">\n                  <div>Problem IDs: {problemSet.problemIds?.join(', ') || 'None'}</div>\n                  <div>Problem Instances: {problemSet.problemInstances?.length || 0}</div>\n                  <div>Problems Array: {problemSet.problems?.length || 0}</div>\n                  <div>Total Problems: {problemSet.totalProblems}</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent> */}\n\n        <TabsContent value=\"students\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <div>\n                <CardTitle>Enrolled Students ({enrollments.length})</CardTitle>\n                <CardDescription>\n                  Manage the students enrolled in this problem set\n                </CardDescription>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" onClick={generateQrCode}>\n                  <QrCode className=\"h-4 w-4 mr-2\" />\n                  QR Code\n                </Button>\n                <Button onClick={() => setLocation(`/admin/problem-sets/${problemSetId}/enrollments/create`)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Student\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {enrollmentsLoading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"h-8 w-8 animate-spin\" />\n                </div>\n              ) : enrollments.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Students Yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Start by enrolling your first student in this problem set.\n                  </p>\n                  <Button onClick={() => setLocation(`/admin/problem-sets/${problemSetId}/enrollments/create`)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add First Student\n                  </Button>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Student</TableHead>\n                      {/* <TableHead>Progress</TableHead> */}\n                      {/* <TableHead>Submissions</TableHead> */}\n                      {/* <TableHead>Success Rate</TableHead> */}\n                      <TableHead>Enrolled</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {enrollments.map((enrollment) => (\n                      <TableRow key={enrollment.id}>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">\n                              {enrollment.user?.firstName && enrollment.user?.lastName\n                                ? `${enrollment.user.firstName} ${enrollment.user.lastName}`\n                                : enrollment.user?.email || 'Unknown User'}\n                            </div>\n                            {enrollment.user?.email && (\n                              <div className=\"text-sm text-muted-foreground\">\n                                {enrollment.user.email}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        {/* <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                              <div\n                                className=\"bg-blue-600 h-2 rounded-full\"\n                                style={{ width: `${enrollment.progress}%` }}\n                              />\n                            </div>\n                            <span className=\"text-sm font-medium\">{enrollment.progress}%</span>\n                          </div>\n                        </TableCell> */}\n                        {/* <TableCell>\n                          <div className=\"text-center\">\n                            <div className=\"font-medium\">{enrollment.totalSubmissions}</div>\n                            <div className=\"text-sm text-muted-foreground\">total</div>\n                          </div>\n                        </TableCell> */}\n                        {/* <TableCell>\n                          <div className=\"text-center\">\n                            <div className=\"font-medium\">\n                              {enrollment.totalSubmissions > 0 \n                                ? Math.round((enrollment.correctSubmissions / enrollment.totalSubmissions) * 100)\n                                : 0}%\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {enrollment.correctSubmissions}/{enrollment.totalSubmissions}\n                            </div>\n                          </div>\n                        </TableCell> */}\n                        <TableCell className=\"text-sm text-muted-foreground\">\n                          {formatDate(enrollment.enrolledAt)}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex justify-start\">\n                           \n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteEnrollmentMutation.mutate(enrollment.id)}\n                              disabled={deleteEnrollmentMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* QR Code Dialog */}\n      <Dialog open={isQrDialogOpen} onOpenChange={setIsQrDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Problem Set Enrollment QR Code</DialogTitle>\n            <DialogDescription>\n              Students can scan this QR code to join the problem set. They must be logged in to enroll.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex flex-col items-center space-y-4\">\n            {qrCodeData ? (\n              <>\n                <div className=\"p-4 bg-white rounded-lg border\">\n                  <img src={qrCodeData} alt=\"Problem Set Enrollment QR Code\" className=\"w-48 h-48\" />\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    Problem Set: {problemSet?.title}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Enrollment URL: {window.location.origin}/enroll-problem-set/{problemSetId}\n                  </p>\n                </div>\n              </>\n            ) : (\n              <div className=\"flex items-center justify-center w-48 h-48 bg-muted rounded-lg\">\n                <Loader2 className=\"h-8 w-8 animate-spin\" />\n              </div>\n            )}\n          </div>\n          <DialogFooter className=\"flex justify-between sm:justify-between\">\n            <Button variant=\"outline\" onClick={copyEnrollmentLink}>\n              <Copy className=\"h-4 w-4 mr-2\" />\n              Copy Link\n            </Button>\n            <Button\n              onClick={() => {\n                if (qrCodeData) {\n                  const link = document.createElement('a');\n                  link.href = qrCodeData;\n                  link.download = `problem-set-${problemSetId}-qr-code.png`;\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n                }\n              }}\n              disabled={!qrCodeData}\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n} ","size_bytes":25346},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\nimport { User } from '../models/User';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n\nexport interface AuthRequest extends Request {\n  user?: any;\n}\n\ninterface JwtPayload {\n  id: string;\n  sub?: string;\n  role?: string;\n}\n\nexport const generateToken = (userId: string): string => {\n  return jwt.sign(\n    { \n      id: userId,\n      sub: userId\n    }, \n    JWT_SECRET, \n    { expiresIn: '7d' }\n  );\n};\n\nexport const protect = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  try {\n    let token;\n\n    console.log('[DEBUG] 🔐 Auth middleware - checking for token');\n    console.log('[DEBUG] 🔐 Request URL:', req.originalUrl);\n    console.log('[DEBUG] 🔐 Authorization header:', req.headers.authorization);\n\n    // Check for token in Authorization header only\n    if (req.headers.authorization?.startsWith('Bearer')) {\n      token = req.headers.authorization.split(' ')[1];\n      console.log('[DEBUG] Token found in Authorization header');\n    }\n\n    if (!token) {\n      console.log('[DEBUG] No token found in request');\n      return res.status(401).json({ \n        message: 'Authentication required. Please log in.',\n        code: 'NO_TOKEN'\n      });\n    }\n\n    try {\n      // Verify token\n      console.log('[DEBUG] Verifying token:', token.substring(0, 20) + '...');\n      console.log('[DEBUG] JWT_SECRET exists:', !!JWT_SECRET);\n      const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;\n      console.log('[DEBUG] Token decoded successfully:', decoded);\n      \n      if (!decoded.id && !decoded.sub) {\n        console.log('[DEBUG] Invalid token format - missing id/sub:', decoded);\n        return res.status(401).json({ \n          message: 'Invalid token format',\n          code: 'INVALID_TOKEN_FORMAT'\n        });\n      }\n\n      // Get user from database\n      const userId = decoded.id || decoded.sub;\n      console.log('[DEBUG] Looking up user with ID:', userId);\n      \n      const user = await User.findById(userId)\n        .select('-password')\n        .lean()\n        .exec();\n\n      if (!user) {\n        console.log('[DEBUG] User not found in database for ID:', userId);\n        return res.status(401).json({ \n          message: 'User not found or deactivated',\n          code: 'USER_NOT_FOUND'\n        });\n      }\n\n      console.log('[DEBUG] User found in database:', {\n        id: user._id,\n        email: user.email,\n        role: user.role\n      });\n      \n      // Attach user to request\n      req.user = {\n        ...user,\n        id: user._id.toString(),\n        sub: user._id.toString(),\n        claims: {\n          sub: user._id.toString(),\n          role: user.role\n        }\n      };\n\n      console.log('[DEBUG] User attached to request successfully');\n\n      next();\n    } catch (jwtError) {\n      console.error('[DEBUG] JWT Verification Error:', jwtError);\n      console.error('[DEBUG] JWT Error details:', {\n        name: jwtError instanceof Error ? jwtError.name : 'Unknown',\n        message: jwtError instanceof Error ? jwtError.message : String(jwtError)\n      });\n      return res.status(401).json({ \n        message: 'Session expired. Please log in again.',\n        code: 'INVALID_TOKEN'\n      });\n    }\n  } catch (error) {\n    console.error('[DEBUG] Auth Middleware Error:', error);\n    res.status(500).json({ \n      message: 'Internal server error during authentication',\n      code: 'AUTH_ERROR'\n    });\n  }\n};\n\n// Middleware to check if user is admin\nexport const requireAdmin = (req: AuthRequest, res: Response, next: NextFunction) => {\n  if (!req.user || req.user.role !== 'admin') {\n    return res.status(403).json({ \n      message: 'Access denied. Admin privileges required.',\n      code: 'ADMIN_REQUIRED'\n    });\n  }\n  next();\n};","size_bytes":3810},"scripts/check-courses.js":{"content":"\nconst { MongoClient } = require('mongodb');\n\nasync function checkCoursesCollection() {\n  const uri = process.env.MONGODB_URL || \"mongodb+srv://bandarin29:meritcurve@meritcurve.73u7fr7.mongodb.net/\";\n  const client = new MongoClient(uri);\n\n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n\n    const db = client.db('meritcurve');\n    \n    // List all collections\n    const collections = await db.listCollections().toArray();\n    console.log('Available collections:', collections.map(c => c.name));\n    \n    // Check if courses collection exists\n    const coursesCollection = db.collection('courses');\n    const courseCount = await coursesCollection.countDocuments();\n    console.log(`Courses collection has ${courseCount} documents`);\n    \n    if (courseCount === 0) {\n      console.log('No courses found, creating sample courses...');\n      \n      const sampleCourses = [\n        {\n          id: 1,\n          title: \"Introduction to JavaScript\",\n          description: \"Learn the fundamentals of JavaScript programming\",\n          level: \"beginner\",\n          tags: [\"javascript\", \"programming\", \"web\"],\n          isPublic: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: 2,\n          title: \"React Development\",\n          description: \"Build modern web applications with React\",\n          level: \"intermediate\", \n          tags: [\"react\", \"javascript\", \"frontend\"],\n          isPublic: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: 3,\n          title: \"Node.js Backend\",\n          description: \"Server-side development with Node.js\",\n          level: \"intermediate\",\n          tags: [\"nodejs\", \"backend\", \"api\"],\n          isPublic: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      ];\n      \n      await coursesCollection.insertMany(sampleCourses);\n      console.log('Sample courses created successfully!');\n    } else {\n      console.log('Courses already exist:');\n      const courses = await coursesCollection.find({}).toArray();\n      courses.forEach(course => {\n        console.log(`- ${course.title} (ID: ${course.id})`);\n      });\n    }\n    \n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    await client.close();\n  }\n}\n\ncheckCoursesCollection();\n","size_bytes":2363},"index.js":{"content":"const express = require('express');\nconst cors = require('cors');\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.status(200).json({ \n    status: 'healthy', \n    service: 'CodeArena Root Service',\n    message: 'This is a multi-service application. Deploy individual services from their respective directories.',\n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV || 'development'\n  });\n});\n\n// Root endpoint with service information\napp.get('/', (req, res) => {\n  res.json({\n    name: 'CodeArena',\n    description: 'Multi-service coding platform',\n    services: [\n      {\n        name: 'codearena-server',\n        description: 'API Backend',\n        directory: 'server/',\n        healthCheck: '/health',\n        startCommand: 'npm start'\n      },\n      {\n        name: 'codearena-client',\n        description: 'React Frontend',\n        directory: 'client/',\n        healthCheck: '/',\n        startCommand: 'npm run serve'\n      },\n      {\n        name: 'codearena-execution',\n        description: 'Code Execution System',\n        directory: 'execution-system/',\n        healthCheck: '/health',\n        startCommand: 'node server.js'\n      }\n    ],\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Service status endpoint\napp.get('/status', (req, res) => {\n  res.json({\n    service: 'CodeArena Root Service',\n    status: 'running',\n    deployment: 'local',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Error handling\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({\n    success: false,\n    error: 'Internal server error'\n  });\n});\n\n// Start server\napp.listen(port, '0.0.0.0', () => {\n  console.log(`CodeArena Root Service listening on port ${port}`);\n  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n  console.log(`Health check available at /health`);\n  console.log(`Service info available at /`);\n});","size_bytes":2166}},"version":2}